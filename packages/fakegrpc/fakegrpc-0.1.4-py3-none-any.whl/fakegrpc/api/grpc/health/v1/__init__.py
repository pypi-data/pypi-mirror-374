# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: grpc/health/v1/health.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class HealthCheckResponseServingStatus(betterproto.Enum):
    UNKNOWN = 0
    SERVING = 1
    NOT_SERVING = 2
    SERVICE_UNKNOWN = 3


@dataclass(eq=False, repr=False)
class HealthCheckRequest(betterproto.Message):
    service: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HealthCheckResponse(betterproto.Message):
    status: "HealthCheckResponseServingStatus" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class HealthListRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HealthListResponse(betterproto.Message):
    statuses: Dict[str, "HealthCheckResponse"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    """statuses contains all the services and their respective status."""


class HealthStub(betterproto.ServiceStub):
    async def check(
        self,
        health_check_request: "HealthCheckRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "HealthCheckResponse":
        return await self._unary_unary(
            "/grpc.health.v1.Health/Check",
            health_check_request,
            HealthCheckResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list(
        self,
        health_list_request: "HealthListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "HealthListResponse":
        return await self._unary_unary(
            "/grpc.health.v1.Health/List",
            health_list_request,
            HealthListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def watch(
        self,
        health_check_request: "HealthCheckRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> AsyncIterator[HealthCheckResponse]:
        async for response in self._unary_stream(
            "/grpc.health.v1.Health/Watch",
            health_check_request,
            HealthCheckResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class HealthBase(ServiceBase):
    async def check(
        self, health_check_request: "HealthCheckRequest"
    ) -> "HealthCheckResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list(
        self, health_list_request: "HealthListRequest"
    ) -> "HealthListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def watch(
        self, health_check_request: "HealthCheckRequest"
    ) -> AsyncIterator[HealthCheckResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield HealthCheckResponse()

    async def __rpc_check(
        self, stream: "grpclib.server.Stream[HealthCheckRequest, HealthCheckResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.check(request)
        await stream.send_message(response)

    async def __rpc_list(
        self, stream: "grpclib.server.Stream[HealthListRequest, HealthListResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list(request)
        await stream.send_message(response)

    async def __rpc_watch(
        self, stream: "grpclib.server.Stream[HealthCheckRequest, HealthCheckResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.watch,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.health.v1.Health/Check": grpclib.const.Handler(
                self.__rpc_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                HealthCheckRequest,
                HealthCheckResponse,
            ),
            "/grpc.health.v1.Health/List": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                HealthListRequest,
                HealthListResponse,
            ),
            "/grpc.health.v1.Health/Watch": grpclib.const.Handler(
                self.__rpc_watch,
                grpclib.const.Cardinality.UNARY_STREAM,
                HealthCheckRequest,
                HealthCheckResponse,
            ),
        }
