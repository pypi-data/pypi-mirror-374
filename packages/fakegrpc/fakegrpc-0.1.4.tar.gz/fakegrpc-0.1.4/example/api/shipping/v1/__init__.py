# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: shipping/v1/shipping.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ShippingStatusResponseStatus(betterproto.Enum):
    UNSPECIFIED = 0
    AWAITING_SHIPMENT = 1
    """発送待ち"""

    OUT_FOR_DELIVERY = 2
    """発送済み（配送中）"""

    DELIVERED = 3
    """配達済み"""


@dataclass(eq=False, repr=False)
class CreateShippingRequest(betterproto.Message):
    """
    *
     CreateShippingは、発送する商品をまとめたパッケージを受け取り発送します。
     - 発送のステータスを返すためのshipping_idを返します。
    """

    order_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateShippingResponse(betterproto.Message):
    shipping_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShippingStatusRequest(betterproto.Message):
    """
    *
     ShippingStatusは、商品の発送のステータスを返します。

     [エラー]
     - InvalidArgument:
       - shipping_idが空文字列
     - NotFound:
       - shipping_idで指定された発送がない
    """

    shipping_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShippingStatusResponse(betterproto.Message):
    shippid_id: str = betterproto.string_field(1)
    status: "ShippingStatusResponseStatus" = betterproto.enum_field(2)


class ShippingStub(betterproto.ServiceStub):
    async def create(
        self,
        create_shipping_request: "CreateShippingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateShippingResponse":
        return await self._unary_unary(
            "/shipping.v1.Shipping/Create",
            create_shipping_request,
            CreateShippingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def status(
        self,
        shipping_status_request: "ShippingStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ShippingStatusResponse":
        return await self._unary_unary(
            "/shipping.v1.Shipping/Status",
            shipping_status_request,
            ShippingStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ShippingBase(ServiceBase):
    async def create(
        self, create_shipping_request: "CreateShippingRequest"
    ) -> "CreateShippingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def status(
        self, shipping_status_request: "ShippingStatusRequest"
    ) -> "ShippingStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create(
        self,
        stream: "grpclib.server.Stream[CreateShippingRequest, CreateShippingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create(request)
        await stream.send_message(response)

    async def __rpc_status(
        self,
        stream: "grpclib.server.Stream[ShippingStatusRequest, ShippingStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/shipping.v1.Shipping/Create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateShippingRequest,
                CreateShippingResponse,
            ),
            "/shipping.v1.Shipping/Status": grpclib.const.Handler(
                self.__rpc_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                ShippingStatusRequest,
                ShippingStatusResponse,
            ),
        }
