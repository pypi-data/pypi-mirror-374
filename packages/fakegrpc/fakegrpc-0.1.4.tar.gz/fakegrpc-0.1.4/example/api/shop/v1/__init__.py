# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: shop/v1/shop.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class GetShippingStatusResponseStatus(betterproto.Enum):
    UNSPECIFIED = 0
    PREPARING = 1
    """準備中"""

    SHIPPED = 2
    """出荷済み"""

    DELIVERED = 3
    """配達済み"""


@dataclass(eq=False, repr=False)
class ProductInventory(betterproto.Message):
    number: str = betterproto.string_field(1)
    """商品番号"""

    name: str = betterproto.string_field(2)
    """商品名"""

    price: int = betterproto.uint32_field(3)
    """価格（円）"""

    quantity_available: int = betterproto.uint32_field(4)
    """在庫数"""


@dataclass(eq=False, repr=False)
class ListProductInventoriesRequest(betterproto.Message):
    """
    *
     ListProductInventoriesは、扱っている商品の一覧を返します。
     - num_of_productsは、一覧として返す最大個数を指定します。

     page_tokenには、空文字列もしくはレスポンスで返されるnext_page_tokenを
     設定します。
     - 空文字列の場合は、商品一覧の最初から返されます。
     - 商品一覧は、nameのアルファベット順に昇順に返されます。

     [エラー]
     - InvalidArgument:
       - num_of_productsが0
       - page_tokenが不正な値
    """

    num_of_products: int = betterproto.uint32_field(1)
    page_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListProductInventoriesResponse(betterproto.Message):
    product_inventories: List["ProductInventory"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    """商品がさらに存在しない場合、空文字列が返されます。"""


@dataclass(eq=False, repr=False)
class CreateOrderRequest(betterproto.Message):
    """
    *
     CreateOrderは、指定された商品の購入処理を行い、出荷します。

     [エラー]
     - InvalidArgument:
       - numberが空文字列
       - num_of_itemsが0
       - shipping_addressが空文字列
     - NotFound:
       - numberで指定された商品は扱っていない
     - FailedPrecondition:
       - 指定された個数の商品在庫がない
    """

    product_number: str = betterproto.string_field(1)
    """商品番号"""

    num_of_items: int = betterproto.uint32_field(2)
    """個数"""

    shipping_address: str = betterproto.string_field(3)
    """送付先"""


@dataclass(eq=False, repr=False)
class CreateOrderResponse(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    """注文番号"""


@dataclass(eq=False, repr=False)
class GetShippingStatusRequest(betterproto.Message):
    """
    *
     GetShippingStatusは、order_idで指定された商品の出荷状況を返します。

     [エラー]
     - InvalidArgument:
       - order_idが空文字列
     - NotFound:
       - order_idで指定された注文がない
    """

    order_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetShippingStatusResponse(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    status: "GetShippingStatusResponseStatus" = betterproto.enum_field(2)


class ShopStub(betterproto.ServiceStub):
    async def list_product_inventories(
        self,
        list_product_inventories_request: "ListProductInventoriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListProductInventoriesResponse":
        return await self._unary_unary(
            "/shop.v1.Shop/ListProductInventories",
            list_product_inventories_request,
            ListProductInventoriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_order(
        self,
        create_order_request: "CreateOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateOrderResponse":
        return await self._unary_unary(
            "/shop.v1.Shop/CreateOrder",
            create_order_request,
            CreateOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_shipping_status(
        self,
        get_shipping_status_request: "GetShippingStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetShippingStatusResponse":
        return await self._unary_unary(
            "/shop.v1.Shop/GetShippingStatus",
            get_shipping_status_request,
            GetShippingStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ShopBase(ServiceBase):
    async def list_product_inventories(
        self, list_product_inventories_request: "ListProductInventoriesRequest"
    ) -> "ListProductInventoriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_order(
        self, create_order_request: "CreateOrderRequest"
    ) -> "CreateOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_shipping_status(
        self, get_shipping_status_request: "GetShippingStatusRequest"
    ) -> "GetShippingStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_product_inventories(
        self,
        stream: "grpclib.server.Stream[ListProductInventoriesRequest, ListProductInventoriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_product_inventories(request)
        await stream.send_message(response)

    async def __rpc_create_order(
        self, stream: "grpclib.server.Stream[CreateOrderRequest, CreateOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_order(request)
        await stream.send_message(response)

    async def __rpc_get_shipping_status(
        self,
        stream: "grpclib.server.Stream[GetShippingStatusRequest, GetShippingStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_shipping_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/shop.v1.Shop/ListProductInventories": grpclib.const.Handler(
                self.__rpc_list_product_inventories,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListProductInventoriesRequest,
                ListProductInventoriesResponse,
            ),
            "/shop.v1.Shop/CreateOrder": grpclib.const.Handler(
                self.__rpc_create_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateOrderRequest,
                CreateOrderResponse,
            ),
            "/shop.v1.Shop/GetShippingStatus": grpclib.const.Handler(
                self.__rpc_get_shipping_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetShippingStatusRequest,
                GetShippingStatusResponse,
            ),
        }
