"""
Binance Simple Earn REST API

OpenAPI Specification for the Binance Simple Earn REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Optional, Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request

from ..models import GetFlexiblePersonalLeftQuotaResponse
from ..models import GetFlexibleProductPositionResponse
from ..models import GetLockedPersonalLeftQuotaResponse
from ..models import GetLockedProductPositionResponse
from ..models import GetSimpleEarnFlexibleProductListResponse
from ..models import GetSimpleEarnLockedProductListResponse
from ..models import SimpleAccountResponse


class AccountApi:
    """API Client for AccountApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def get_flexible_personal_left_quota(
        self,
        product_id: Union[str, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetFlexiblePersonalLeftQuotaResponse]:
        """
                Get Flexible Personal Left Quota(USER_DATA)
                GET /sapi/v1/simple-earn/flexible/personalLeftQuota
                https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Personal-Left-Quota

                Get Flexible Personal Left Quota

        Weight: 150

                Args:
                    product_id (Union[str, None]):
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetFlexiblePersonalLeftQuotaResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if product_id is None:
            raise RequiredError(
                field="product_id",
                error_message="Missing required parameter 'product_id'",
            )

        payload = {"product_id": product_id, "recv_window": recv_window}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/flexible/personalLeftQuota",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetFlexiblePersonalLeftQuotaResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_flexible_product_position(
        self,
        asset: Optional[str] = None,
        product_id: Optional[str] = None,
        current: Optional[int] = None,
        size: Optional[int] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetFlexibleProductPositionResponse]:
        """
                Get Flexible Product Position(USER_DATA)
                GET /sapi/v1/simple-earn/flexible/position
                https://developers.binance.com/docs/simple_earn/account/Get-Flexible-Product-Position

                Get Flexible Product Position

        Weight: 150

                Args:
                    asset (Optional[str] = None):
                    product_id (Optional[str] = None):
                    current (Optional[int] = None): Currently querying the page. Start from 1. Default:1
                    size (Optional[int] = None): Default:10, Max:100
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetFlexibleProductPositionResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {
            "asset": asset,
            "product_id": product_id,
            "current": current,
            "size": size,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/flexible/position",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetFlexibleProductPositionResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_locked_personal_left_quota(
        self,
        project_id: Union[str, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetLockedPersonalLeftQuotaResponse]:
        """
                Get Locked Personal Left Quota(USER_DATA)
                GET /sapi/v1/simple-earn/locked/personalLeftQuota
                https://developers.binance.com/docs/simple_earn/account/Get-Locked-Personal-Left-Quota

                Get Locked Personal Left Quota

        Weight: 150

                Args:
                    project_id (Union[str, None]):
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetLockedPersonalLeftQuotaResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if project_id is None:
            raise RequiredError(
                field="project_id",
                error_message="Missing required parameter 'project_id'",
            )

        payload = {"project_id": project_id, "recv_window": recv_window}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/locked/personalLeftQuota",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetLockedPersonalLeftQuotaResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_locked_product_position(
        self,
        asset: Optional[str] = None,
        position_id: Optional[int] = None,
        project_id: Optional[str] = None,
        current: Optional[int] = None,
        size: Optional[int] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetLockedProductPositionResponse]:
        """
                Get Locked Product Position
                GET /sapi/v1/simple-earn/locked/position
                https://developers.binance.com/docs/simple_earn/account/Get-Locked-Product-Position

                Get Locked Product Position

        Weight: 150

                Args:
                    asset (Optional[str] = None):
                    position_id (Optional[int] = None):
                    project_id (Optional[str] = None):
                    current (Optional[int] = None): Currently querying the page. Start from 1. Default:1
                    size (Optional[int] = None): Default:10, Max:100
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetLockedProductPositionResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {
            "asset": asset,
            "position_id": position_id,
            "project_id": project_id,
            "current": current,
            "size": size,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/locked/position",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetLockedProductPositionResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_simple_earn_flexible_product_list(
        self,
        asset: Optional[str] = None,
        current: Optional[int] = None,
        size: Optional[int] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetSimpleEarnFlexibleProductListResponse]:
        """
                Get Simple Earn Flexible Product List(USER_DATA)
                GET /sapi/v1/simple-earn/flexible/list
                https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Flexible-Product-List

                Get available Simple Earn flexible product list

        Weight: 150

                Args:
                    asset (Optional[str] = None):
                    current (Optional[int] = None): Currently querying the page. Start from 1. Default:1
                    size (Optional[int] = None): Default:10, Max:100
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetSimpleEarnFlexibleProductListResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {
            "asset": asset,
            "current": current,
            "size": size,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/flexible/list",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetSimpleEarnFlexibleProductListResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_simple_earn_locked_product_list(
        self,
        asset: Optional[str] = None,
        current: Optional[int] = None,
        size: Optional[int] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetSimpleEarnLockedProductListResponse]:
        """
                Get Simple Earn Locked Product List(USER_DATA)
                GET /sapi/v1/simple-earn/locked/list
                https://developers.binance.com/docs/simple_earn/account/Get-Simple-Earn-Locked-Product-List

                Get Simple Earn Locked Product List

        * Get available Simple Earn locked product list

        Weight: 150

                Args:
                    asset (Optional[str] = None):
                    current (Optional[int] = None): Currently querying the page. Start from 1. Default:1
                    size (Optional[int] = None): Default:10, Max:100
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetSimpleEarnLockedProductListResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {
            "asset": asset,
            "current": current,
            "size": size,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/locked/list",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetSimpleEarnLockedProductListResponse,
            is_signed=True,
            signer=self._signer,
        )

    def simple_account(
        self,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SimpleAccountResponse]:
        """
                Simple Account(USER_DATA)
                GET /sapi/v1/simple-earn/account
                https://developers.binance.com/docs/simple_earn/account/Simple-Account

                Simple Account query

        Weight: 150

                Args:
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SimpleAccountResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        payload = {"recv_window": recv_window}

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/account",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SimpleAccountResponse,
            is_signed=True,
            signer=self._signer,
        )
