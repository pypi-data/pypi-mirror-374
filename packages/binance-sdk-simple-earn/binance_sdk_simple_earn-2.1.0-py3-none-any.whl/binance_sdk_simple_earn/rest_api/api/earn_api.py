"""
Binance Simple Earn REST API

OpenAPI Specification for the Binance Simple Earn REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from typing import Optional, Union
from requests import Session
from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.models import ApiResponse
from binance_common.signature import Signers
from binance_common.utils import send_request

from ..models import GetFlexibleSubscriptionPreviewResponse
from ..models import GetLockedSubscriptionPreviewResponse
from ..models import RedeemFlexibleProductResponse
from ..models import RedeemLockedProductResponse
from ..models import SetFlexibleAutoSubscribeResponse
from ..models import SetLockedAutoSubscribeResponse
from ..models import SetLockedProductRedeemOptionResponse
from ..models import SubscribeFlexibleProductResponse
from ..models import SubscribeLockedProductResponse


class EarnApi:
    """API Client for EarnApi endpoints."""

    def __init__(
        self,
        configuration: ConfigurationRestAPI = None,
        session: Session = None,
        signer: Signers = None,
    ) -> None:
        self._configuration = configuration
        self._session = session
        self._signer = signer

    def get_flexible_subscription_preview(
        self,
        product_id: Union[str, None],
        amount: Union[float, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetFlexibleSubscriptionPreviewResponse]:
        """
                Get Flexible Subscription Preview(USER_DATA)
                GET /sapi/v1/simple-earn/flexible/subscriptionPreview
                https://developers.binance.com/docs/simple_earn/earn/Get-Flexible-Subscription-Preview

                Get Flexible Subscription Preview

        Weight: 150

                Args:
                    product_id (Union[str, None]):
                    amount (Union[float, None]):
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetFlexibleSubscriptionPreviewResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if product_id is None:
            raise RequiredError(
                field="product_id",
                error_message="Missing required parameter 'product_id'",
            )
        if amount is None:
            raise RequiredError(
                field="amount", error_message="Missing required parameter 'amount'"
            )

        payload = {
            "product_id": product_id,
            "amount": amount,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/flexible/subscriptionPreview",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetFlexibleSubscriptionPreviewResponse,
            is_signed=True,
            signer=self._signer,
        )

    def get_locked_subscription_preview(
        self,
        project_id: Union[str, None],
        amount: Union[float, None],
        auto_subscribe: Optional[bool] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[GetLockedSubscriptionPreviewResponse]:
        """
                Get Locked Subscription Preview(USER_DATA)
                GET /sapi/v1/simple-earn/locked/subscriptionPreview
                https://developers.binance.com/docs/simple_earn/earn/Get-Locked-Subscription-Preview

                Get Locked Subscription Preview

        Weight: 150

                Args:
                    project_id (Union[str, None]):
                    amount (Union[float, None]):
                    auto_subscribe (Optional[bool] = None): true or false, default true.
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[GetLockedSubscriptionPreviewResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if project_id is None:
            raise RequiredError(
                field="project_id",
                error_message="Missing required parameter 'project_id'",
            )
        if amount is None:
            raise RequiredError(
                field="amount", error_message="Missing required parameter 'amount'"
            )

        payload = {
            "project_id": project_id,
            "amount": amount,
            "auto_subscribe": auto_subscribe,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="GET",
            path="/sapi/v1/simple-earn/locked/subscriptionPreview",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=GetLockedSubscriptionPreviewResponse,
            is_signed=True,
            signer=self._signer,
        )

    def redeem_flexible_product(
        self,
        product_id: Union[str, None],
        redeem_all: Optional[bool] = None,
        amount: Optional[float] = None,
        dest_account: Optional[str] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[RedeemFlexibleProductResponse]:
        """
                Redeem Flexible Product(TRADE)
                POST /sapi/v1/simple-earn/flexible/redeem
                https://developers.binance.com/docs/simple_earn/earn/Redeem-Flexible-Product

                Redeem Flexible Product

        * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.

        Weight: 1

                Args:
                    product_id (Union[str, None]):
                    redeem_all (Optional[bool] = None): true or false, default to false
                    amount (Optional[float] = None): if redeemAll is false, amount is mandatory
                    dest_account (Optional[str] = None): `SPOT`,`FUND`, default `SPOT`
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[RedeemFlexibleProductResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if product_id is None:
            raise RequiredError(
                field="product_id",
                error_message="Missing required parameter 'product_id'",
            )

        payload = {
            "product_id": product_id,
            "redeem_all": redeem_all,
            "amount": amount,
            "dest_account": dest_account,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/flexible/redeem",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=RedeemFlexibleProductResponse,
            is_signed=True,
            signer=self._signer,
        )

    def redeem_locked_product(
        self,
        position_id: Union[str, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[RedeemLockedProductResponse]:
        """
                Redeem Locked Product(TRADE)
                POST /sapi/v1/simple-earn/locked/redeem
                https://developers.binance.com/docs/simple_earn/earn/Redeem-Locked-Product

                Redeem Locked Product

        * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.

        Weight: 1/3s per account

                Args:
                    position_id (Union[str, None]):
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[RedeemLockedProductResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if position_id is None:
            raise RequiredError(
                field="position_id",
                error_message="Missing required parameter 'position_id'",
            )

        payload = {"position_id": position_id, "recv_window": recv_window}

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/locked/redeem",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=RedeemLockedProductResponse,
            is_signed=True,
            signer=self._signer,
        )

    def set_flexible_auto_subscribe(
        self,
        product_id: Union[str, None],
        auto_subscribe: Union[bool, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SetFlexibleAutoSubscribeResponse]:
        """
                Set Flexible Auto Subscribe(USER_DATA)
                POST /sapi/v1/simple-earn/flexible/setAutoSubscribe
                https://developers.binance.com/docs/simple_earn/earn/Set-Flexible-Auto-Subscribe

                Set Flexible Auto Subscribe

        Weight: 150

                Args:
                    product_id (Union[str, None]):
                    auto_subscribe (Union[bool, None]): true or false
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SetFlexibleAutoSubscribeResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if product_id is None:
            raise RequiredError(
                field="product_id",
                error_message="Missing required parameter 'product_id'",
            )
        if auto_subscribe is None:
            raise RequiredError(
                field="auto_subscribe",
                error_message="Missing required parameter 'auto_subscribe'",
            )

        payload = {
            "product_id": product_id,
            "auto_subscribe": auto_subscribe,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/flexible/setAutoSubscribe",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SetFlexibleAutoSubscribeResponse,
            is_signed=True,
            signer=self._signer,
        )

    def set_locked_auto_subscribe(
        self,
        position_id: Union[str, None],
        auto_subscribe: Union[bool, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SetLockedAutoSubscribeResponse]:
        """
                Set Locked Auto Subscribe(USER_DATA)
                POST /sapi/v1/simple-earn/locked/setAutoSubscribe
                https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Auto-Subscribe

                Set locked auto subscribe

        Weight: 150

                Args:
                    position_id (Union[str, None]):
                    auto_subscribe (Union[bool, None]): true or false
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SetLockedAutoSubscribeResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if position_id is None:
            raise RequiredError(
                field="position_id",
                error_message="Missing required parameter 'position_id'",
            )
        if auto_subscribe is None:
            raise RequiredError(
                field="auto_subscribe",
                error_message="Missing required parameter 'auto_subscribe'",
            )

        payload = {
            "position_id": position_id,
            "auto_subscribe": auto_subscribe,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/locked/setAutoSubscribe",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SetLockedAutoSubscribeResponse,
            is_signed=True,
            signer=self._signer,
        )

    def set_locked_product_redeem_option(
        self,
        position_id: Union[str, None],
        redeem_to: Union[str, None],
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SetLockedProductRedeemOptionResponse]:
        """
                Set Locked Product Redeem Option(USER_DATA)
                POST /sapi/v1/simple-earn/locked/setRedeemOption
                https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Redeem-Option

                Set redeem option for Locked product

        Weight: 50

                Args:
                    position_id (Union[str, None]):
                    redeem_to (Union[str, None]): `SPOT`,'FLEXIBLE'
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SetLockedProductRedeemOptionResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if position_id is None:
            raise RequiredError(
                field="position_id",
                error_message="Missing required parameter 'position_id'",
            )
        if redeem_to is None:
            raise RequiredError(
                field="redeem_to",
                error_message="Missing required parameter 'redeem_to'",
            )

        payload = {
            "position_id": position_id,
            "redeem_to": redeem_to,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/locked/setRedeemOption",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SetLockedProductRedeemOptionResponse,
            is_signed=True,
            signer=self._signer,
        )

    def subscribe_flexible_product(
        self,
        product_id: Union[str, None],
        amount: Union[float, None],
        auto_subscribe: Optional[bool] = None,
        source_account: Optional[str] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SubscribeFlexibleProductResponse]:
        """
                Subscribe Flexible Product(TRADE)
                POST /sapi/v1/simple-earn/flexible/subscribe
                https://developers.binance.com/docs/simple_earn/earn/Subscribe-Flexible-Product

                Subscribe Flexible Product

        * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.

        Weight: 1

                Args:
                    product_id (Union[str, None]):
                    amount (Union[float, None]):
                    auto_subscribe (Optional[bool] = None): true or false, default true.
                    source_account (Optional[str] = None): `SPOT`,`FUND`,`ALL`, default `SPOT`
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SubscribeFlexibleProductResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if product_id is None:
            raise RequiredError(
                field="product_id",
                error_message="Missing required parameter 'product_id'",
            )
        if amount is None:
            raise RequiredError(
                field="amount", error_message="Missing required parameter 'amount'"
            )

        payload = {
            "product_id": product_id,
            "amount": amount,
            "auto_subscribe": auto_subscribe,
            "source_account": source_account,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/flexible/subscribe",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SubscribeFlexibleProductResponse,
            is_signed=True,
            signer=self._signer,
        )

    def subscribe_locked_product(
        self,
        project_id: Union[str, None],
        amount: Union[float, None],
        auto_subscribe: Optional[bool] = None,
        source_account: Optional[str] = None,
        redeem_to: Optional[str] = None,
        recv_window: Optional[int] = None,
    ) -> ApiResponse[SubscribeLockedProductResponse]:
        """
                Subscribe Locked Product(TRADE)
                POST /sapi/v1/simple-earn/locked/subscribe
                https://developers.binance.com/docs/simple_earn/earn/Subscribe-Locked-Product

                Subscribe Locked Product

        * You need to open `Enable Spot & Margin Trading` permission for the API Key which requests this endpoint.

        Weight: 1

                Args:
                    project_id (Union[str, None]):
                    amount (Union[float, None]):
                    auto_subscribe (Optional[bool] = None): true or false, default true.
                    source_account (Optional[str] = None): `SPOT`,`FUND`,`ALL`, default `SPOT`
                    redeem_to (Optional[str] = None): `SPOT`,`FLEXIBLE`, default `FLEXIBLE`
                    recv_window (Optional[int] = None):

                Returns:
                    ApiResponse[SubscribeLockedProductResponse]

                Raises:
                    RequiredError: If a required parameter is missing.

        """

        if project_id is None:
            raise RequiredError(
                field="project_id",
                error_message="Missing required parameter 'project_id'",
            )
        if amount is None:
            raise RequiredError(
                field="amount", error_message="Missing required parameter 'amount'"
            )

        payload = {
            "project_id": project_id,
            "amount": amount,
            "auto_subscribe": auto_subscribe,
            "source_account": source_account,
            "redeem_to": redeem_to,
            "recv_window": recv_window,
        }

        return send_request(
            self._session,
            self._configuration,
            method="POST",
            path="/sapi/v1/simple-earn/locked/subscribe",
            payload=payload,
            time_unit=self._configuration.time_unit,
            response_model=SubscribeLockedProductResponse,
            is_signed=True,
            signer=self._signer,
        )
