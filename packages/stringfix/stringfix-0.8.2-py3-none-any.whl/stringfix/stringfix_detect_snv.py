#!/usr/bin/python3

import pandas as pd
import numpy as np
import argparse, time, os, pickle, datetime, sys

try:    
    import StringFix.stringfix_core as sf
    from StringFix.stringfix_core  import StringFix_analysis, StringFix_synthesis, Generate_Reference, StringFix_GFFRead
    from StringFix.stringfix_core import run_blast
except ImportError:
    print('StringFix not installed. Try to load from local directory')
    try:
        import stringfix_core as sf
        from stringfix_core  import StringFix_analysis, StringFix_synthesis, Generate_Reference, StringFix_GFFRead
        from stringfix_core import run_blast
    except ImportError:
        print('ERROR: StringFix not found.')
        sys.exit(1)

## file_name_wo_ext = StringFix_analysis(sam_file, gtf = None, suffix = 'stringfix', jump = 0, sa = 2, cbyc = False, \
##                    n_cores = 1, min_frags_per_gene = 2, len_th = 200, out_tr = False )
## file_name_wo_ext, file_name_genome = StringFix_synthesis(gtf_file, genome_file, rev = True, n_cores = 1)
## file_name_ref_tr, file_name_ref_pr = Generate_Reference(gtf_file, genome_file)
## file_name_wo_ext = StringFix_GFFRead(gtf_file, genome_file = None, n_cores = 1)
## df, dft, df_sel = run_blast( inpt_fa, ref_fa, path_to_blast = None, trareco = True, ref_info = False, \
##            dbtype = 'nucl', ref = 0, sdiv = 10, mx_ncand = 6, verbose = False)

def get_args():
    parser = argparse.ArgumentParser(description='', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser._action_groups.pop()

    required = parser.add_argument_group('REQUIRED PARAMETERS')
    optional = parser.add_argument_group('OPTIONAL PARAMETERS')

    required.add_argument('-snv_org', type=str, metavar='',
                          help='CSV file containing the original SNV information.')
    required.add_argument('-rgns', type=str, metavar='',
                          help='File containing region objects (generated by Stringfix)')
    required.add_argument('-snv_cand', type=str, metavar='',
                          help='CSV file containing the candidate SNV information (generated by Stringfix)')
    optional.add_argument('-max_dev', type=str,  metavar='',
                        help='Maximum deviation for INDEL', default="6")

    args = parser.parse_args()
    return args, parser


def main():

    print('+-------------------------------+')
    print('|  StringFix add-on: SNVd eval  |')
    print('+-------------------------------+')

    args, parser = get_args()

    snv_info = args.snv_org
    rgns_info = args.rgns
    snv_detected = args.snv_cand
    mx_dev = int(args.max_dev)

    if (snv_info is None) | (rgns_info is None) | (snv_detected is None):
        parser.print_help()
        return
    else:
        ###########################################
        ## Select SNVs that are covered by reads

        print('Loading loci & consensus matrices ...', end='', flush = True)
        rgns_lst_mi, rgns_lst_nd, rgns_lst_st, rd_len, num_rds, med_frag_len = sf.load_rgns_obj(rgns_info)
        print(' done.')

        col_names = ['chr', 'pos_org', 'pos_new', 'type', 'len', 'seq_org', 'seq_new', 'ex_start', 'ex_end'] # , 'ex_start1', 'ex_end1']
        df_snv_info = pd.read_csv(snv_info, header = 0, names = col_names, index_col = 0, dtype = {'chr': str})
        # print(df_snv_info.loc[:10,:])

        ###########################################
        ## Select SNVs that are covered by reads
        df_detected_snv = pd.read_csv(snv_detected, index_col = 0, dtype = {'chr': str}, sep='\t')

        '''
        NV_info_ext = collections.namedtuple('NV_info_ext', 'chr, pos_ref, pos_new, gene_id, gene_name, v_type, v_len, cvg_depth, cvg_frac, \
                                              ref_prev, ref_seq, ref_next, alt_prev, alt_seq, alt_next, v_class, v_class_tr') # one-base
        '''
        ids = []
        for k in range(df_detected_snv.shape[0]): 
            Id = df_detected_snv.iloc[k].v_type + '_' + df_detected_snv.iloc[k].chr \
                 + '_' + '%i' % df_detected_snv.iloc[k].pos_ref
            ids.append(Id)
        df_detected_snv['id'] = ids    

        df_detected_snv['start'] = df_detected_snv['pos_ref']
        df_detected_snv['type'] = df_detected_snv['v_type']
        df_detected_snv['pos_org'] = df_detected_snv['pos_ref']
        df_detected_snv['seq_org'] = df_detected_snv['ref_seq']
        df_detected_snv['seq_new'] = df_detected_snv['alt_seq']

        wh = sf.which(df_detected_snv['type'], 'V')
        df_detected_snp = df_detected_snv.iloc[wh]

        wh = sf.which(df_detected_snv['type'], 'I')
        df_detected_del = df_detected_snv.iloc[wh]

        wh = sf.which(df_detected_snv['type'], 'D')
        df_detected_ins = df_detected_snv.iloc[wh]

        print('SNV candidates - i: %i, d: %i, v: %i ' % (df_detected_ins.shape[0],df_detected_del.shape[0],df_detected_snp.shape[0]))

        ###########################################
        ## Split into V, I and Ds

        span_lst = sf.get_span_lst(rgns_lst_mi)
        df_snv_sel = sf.select_snvs( df_snv_info, span_lst, rgns_lst_mi )

        wh = sf.which(df_snv_sel['type'], 'V')
        df_snv_sel_snp = df_snv_sel.iloc[wh]

        wh = sf.which(df_snv_sel['type'], 'D')
        df_snv_sel_del = df_snv_sel.iloc[wh]

        wh = sf.which(df_snv_sel['type'], 'I')
        df_snv_sel_ins = df_snv_sel.iloc[wh]

        print('SNV to consider - i: %i, d: %i, v: %i ' % (df_snv_sel_ins.shape[0],df_snv_sel_del.shape[0],df_snv_sel_snp.shape[0]))

        ###########################################
        ## compare detected SNVs with the true SNVs

        df_ins, prec_i, sens_i, N_i, N_d_i, N_t_i = sf.matching_snvs( df_snv_sel_ins, df_detected_ins, dev_tol = mx_dev )
        df_del, prec_d, sens_d, N_d, N_d_d, N_t_d = sf.matching_snvs( df_snv_sel_del, df_detected_del, dev_tol = mx_dev )
        df_snp, prec_p, sens_p, N_p, N_d_p, N_t_p = sf.matching_snvs( df_snv_sel_snp, df_detected_snp, dev_tol = mx_dev )

        fname, ext = sf.get_path_name(snv_detected)

        df_ins.to_csv(fname + '_insersion_detected.csv')
        df_del.to_csv(fname + '_deletion_detected.csv')
        df_snp.to_csv(fname + '_mutation_detected.csv')

        df_detected_snv = df_detected_snv.set_index('id')
        df_detected_snv['correct'] = False
        df_detected_snv.loc[df_ins['id'], 'correct'] = True
        df_detected_snv.loc[df_del['id'], 'correct'] = True
        df_detected_snv.loc[df_snp['id'], 'correct'] = True
        df_detected_snv.to_csv(fname + '_detected.csv')


        data = [[np.round(prec_i,2), np.round(sens_i,2), N_i, N_d_i, N_t_i], \
                [np.round(prec_d,2), np.round(sens_d,2), N_d, N_d_d, N_t_d], \
                [np.round(prec_p,2), np.round(sens_p,2), N_p, N_d_p, N_t_p]]
        df_perf = pd.DataFrame(data, index = ['insersion', 'deletion', 'SNP'], columns = ['precision', 'recall', 'N_correct', 'N_detected', 'N_true_snvs']) 
        df_perf.to_csv(fname + '_snv_detection_perf.csv')

        return


if __name__=="__main__":
    main()

