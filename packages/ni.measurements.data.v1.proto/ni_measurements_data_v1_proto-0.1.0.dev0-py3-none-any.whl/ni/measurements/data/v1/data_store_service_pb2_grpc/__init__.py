# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ni.measurements.data.v1 import data_store_service_pb2 as ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2


class DataStoreServiceStub(object):
    """This service provides endpoints for the publishing of measurement data.
    This includes associating data with the conditions associated with the data
    and querying for the published data with OData queries.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/CreateSession',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionResponse.FromString,
                )
        self.GetSession = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/GetSession',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionResponse.FromString,
                )
        self.CreateMeasurement = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/CreateMeasurement',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementResponse.FromString,
                )
        self.GetMeasurement = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/GetMeasurement',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementResponse.FromString,
                )
        self.QueryMeasurements = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryMeasurements',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.FromString,
                )
        self.PublishConditionSet = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishConditionSet',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetResponse.FromString,
                )
        self.PublishCondition = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishCondition',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.FromString,
                )
        self.PublishConditionSetBatch = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishConditionSetBatch',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchResponse.FromString,
                )
        self.PublishConditionBatch = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishConditionBatch',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.FromString,
                )
        self.PublishData = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishData',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataResponse.FromString,
                )
        self.PublishDataBatch = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/PublishDataBatch',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchResponse.FromString,
                )
        self.QueryConditionSets = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryConditionSets',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsResponse.FromString,
                )
        self.QueryConditions = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryConditions',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.FromString,
                )
        self.QueryData = channel.unary_unary(
                '/ni.measurements.data.v1.DataStoreService/QueryData',
                request_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataRequest.SerializeToString,
                response_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataResponse.FromString,
                )


class DataStoreServiceServicer(object):
    """This service provides endpoints for the publishing of measurement data.
    This includes associating data with the conditions associated with the data
    and querying for the published data with OData queries.
    """

    def CreateSession(self, request, context):
        """Creates a session object for publishing measurement data.  Once a session is created,
        you can publish an arbitrary number of data values to the session.  The data values
        will be associated with each of the metadata types specified in the session.  For instance,
        if you specify an operator when creating a session, all data values published to the session
        will be associated with that operator.  The response will include the session id,
        which can be used to reference the session in subsequent requests, and to get the session
        metadata via the GetSession method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """Gets the session associated with the identifier given in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMeasurement(self, request, context):
        """Creates a new measurement in the data store.  A measurement is owned by a session,
        and is a logical grouping of published data.  All published data must be associated
        with a measurement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeasurement(self, request, context):
        """Gets the measurement associated with the identifier given in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMeasurements(self, request, context):
        """Query for measurements matching the given OData query.  For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishConditionSet(self, request, context):
        """Publishes a single condition set for a measurement.  A condition set is a set of conditions
        that are present when publishing data.  For instance, if you are measuring the temperature
        of a device, you might publish a condition set indicating the input voltage, the ambient
        temperature, and the humidity at the time of the measurement.  This allows you to associate
        the conditions with the data, and to query for data based on the conditions.  With this method,
        you publish a single set of conditions for a single set of measurement data. If the total set
        of conditions for all your measurements is a "frame" of data, this method allows you to publish
        a single "row" of that frame. If you want to publish the entire frame of data, you can use the
        PublishConditionSetBatch method instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishCondition(self, request, context):
        """Publishes a single condition value for a measurement.  A condition is a referential value that is
        present when publishing data.  For instance, if you are measuring the temperature
        of a device, you might publish a condition indicating the input voltage, the ambient
        temperature, and the humidity at the time of the measurement. The condition will be associated with
        the specified measurement.  The data associated with these conditions can be found on the measurement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishConditionSetBatch(self, request, context):
        """Publishes the complete set of conditions for a measurement. It is expected that all sets of condition
        values will be the same length, creating a "frame" of condition data.  If you only want to publish a "row"
        of conditions for a single set of measurement data, you can use the PublishConditionSet method instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishConditionBatch(self, request, context):
        """Publishes a batch of condition values for a measurement. The use case for this method is to publish all the
        the results of a parametric sweep at once, rather than publishing each value individually using the PublishCondition
        endpoint instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishData(self, request, context):
        """Publishes a single data value. The data value will be associated with the measurement specified. The conditions
        associated with the data are owned by the parent measurement and can be found on the returned StoredDataValue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishDataBatch(self, request, context):
        """Allows you to publish a batch of scalar data values.  The use case for this method is to publish all the
        the results of a parametric sweep at once, rather than publishing each value individually using the PublishData
        endpoint instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryConditionSets(self, request, context):
        """Queries the condition sets in the data store, based on an OData query.
        The OData query can be used to filter the condition sets based on their metadata.
        For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryConditions(self, request, context):
        """Queries the conditions in the data store, based on an OData query.
        The OData query can be used to filter the conditions based on their metadata.
        For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryData(self, request, context):
        """Queries the data in the data store, based on an OData query.
        The OData query can be used to filter the data based on its metadata.
        For information about the OData query syntax,
        see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionResponse.SerializeToString,
            ),
            'CreateMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMeasurement,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementResponse.SerializeToString,
            ),
            'GetMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeasurement,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementResponse.SerializeToString,
            ),
            'QueryMeasurements': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMeasurements,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.SerializeToString,
            ),
            'PublishConditionSet': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishConditionSet,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetResponse.SerializeToString,
            ),
            'PublishCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishCondition,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.SerializeToString,
            ),
            'PublishConditionSetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishConditionSetBatch,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchResponse.SerializeToString,
            ),
            'PublishConditionBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishConditionBatch,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.SerializeToString,
            ),
            'PublishData': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishData,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataResponse.SerializeToString,
            ),
            'PublishDataBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishDataBatch,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchResponse.SerializeToString,
            ),
            'QueryConditionSets': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryConditionSets,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsResponse.SerializeToString,
            ),
            'QueryConditions': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryConditions,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.SerializeToString,
            ),
            'QueryData': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryData,
                    request_deserializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataRequest.FromString,
                    response_serializer=ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ni.measurements.data.v1.DataStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStoreService(object):
    """This service provides endpoints for the publishing of measurement data.
    This includes associating data with the conditions associated with the data
    and querying for the published data with OData queries.
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/CreateSession',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/GetSession',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/CreateMeasurement',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.CreateMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/GetMeasurement',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.GetMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMeasurements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryMeasurements',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishConditionSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishConditionSet',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishCondition',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishConditionSetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishConditionSetBatch',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionSetBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishConditionBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishConditionBatch',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishConditionBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishData',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishDataBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/PublishDataBatch',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.PublishDataBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryConditionSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryConditionSets',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionSetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryConditions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryConditions',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryConditionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurements.data.v1.DataStoreService/QueryData',
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataRequest.SerializeToString,
            ni_dot_measurements_dot_data_dot_v1_dot_data__store__service__pb2.QueryDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
