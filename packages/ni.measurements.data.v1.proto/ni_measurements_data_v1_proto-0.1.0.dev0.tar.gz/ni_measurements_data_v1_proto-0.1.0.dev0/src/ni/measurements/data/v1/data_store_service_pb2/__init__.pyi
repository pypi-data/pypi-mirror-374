"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import ni.measurements.data.v1.data_store_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CreateSessionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_METADATA_FIELD_NUMBER: builtins.int
    @property
    def session_metadata(self) -> ni.measurements.data.v1.data_store_pb2.SessionMetadata:
        """The metadata of the session to be created."""

    def __init__(
        self,
        *,
        session_metadata: ni.measurements.data.v1.data_store_pb2.SessionMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["session_metadata", b"session_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["session_metadata", b"session_metadata"]) -> None: ...

global___CreateSessionRequest = CreateSessionRequest

@typing.final
class CreateSessionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_ID_FIELD_NUMBER: builtins.int
    session_id: builtins.str
    """If a session id was specified in the request, this will be the same value.
    If a session id was not specified in the request, this will be the generated id.
    """
    def __init__(
        self,
        *,
        session_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["session_id", b"session_id"]) -> None: ...

global___CreateSessionResponse = CreateSessionResponse

@typing.final
class GetSessionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_ID_FIELD_NUMBER: builtins.int
    INCLUDE_VALUES_FIELD_NUMBER: builtins.int
    session_id: builtins.str
    """The id of the desired session.
    This value is expected to be a parsable GUID.
    """
    include_values: builtins.bool
    """If true, the SessionMetadata will include the actual metadata values
    for each of the metadata fields. If false, only the ids of the metadata
    fields will be included in the response.
    """
    def __init__(
        self,
        *,
        session_id: builtins.str = ...,
        include_values: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["include_values", b"include_values", "session_id", b"session_id"]) -> None: ...

global___GetSessionRequest = GetSessionRequest

@typing.final
class GetSessionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_METADATA_FIELD_NUMBER: builtins.int
    @property
    def session_metadata(self) -> ni.measurements.data.v1.data_store_pb2.SessionMetadata:
        """The SessionMetadata object that corresponds to the requested id."""

    def __init__(
        self,
        *,
        session_metadata: ni.measurements.data.v1.data_store_pb2.SessionMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["session_metadata", b"session_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["session_metadata", b"session_metadata"]) -> None: ...

global___GetSessionResponse = GetSessionResponse

@typing.final
class CreateMeasurementRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEASUREMENT_FIELD_NUMBER: builtins.int
    @property
    def measurement(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """Required. The metadata of the measurement to be created."""

    def __init__(
        self,
        *,
        measurement: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["measurement", b"measurement"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["measurement", b"measurement"]) -> None: ...

global___CreateMeasurementRequest = CreateMeasurementRequest

@typing.final
class CreateMeasurementResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """The identifier of the created measurement."""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___CreateMeasurementResponse = CreateMeasurementResponse

@typing.final
class GetMeasurementRequest(google.protobuf.message.Message):
    """Message sent to get the measurement associated with the given identifier."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    """Required. The identifier of the desired measurement."""
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___GetMeasurementRequest = GetMeasurementRequest

@typing.final
class GetMeasurementResponse(google.protobuf.message.Message):
    """Message returned when getting a measurement associated with the given identifier."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEASUREMENT_FIELD_NUMBER: builtins.int
    @property
    def measurement(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the requested measurement."""

    def __init__(
        self,
        *,
        measurement: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["measurement", b"measurement"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["measurement", b"measurement"]) -> None: ...

global___GetMeasurementResponse = GetMeasurementResponse

@typing.final
class QueryMeasurementsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all measurements.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryMeasurementsRequest = QueryMeasurementsRequest

@typing.final
class QueryMeasurementsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MEASUREMENTS_FIELD_NUMBER: builtins.int
    @property
    def measurements(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.MeasurementMetadata]:
        """The list of measurements that match the query."""

    def __init__(
        self,
        *,
        measurements: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.MeasurementMetadata] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["measurements", b"measurements"]) -> None: ...

global___QueryMeasurementsResponse = QueryMeasurementsResponse

@typing.final
class PublishConditionSetRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_SET_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    measurement_id: builtins.str
    """The id of the measurement associated with this condition set.
    This value is expected to be a parsable GUID.
    """
    @property
    def condition_set(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.Condition]:
        """Required. The set of conditions present for one published data (output) of a measurement
        Each item in the list corresponds to a cell in a column in the overall frame of the
        condition set.  The entire list of condition values makes up a single row of the
        condition set.  If you want to publish the entire frame of condition data, you can
        use the PublishConditionSetBatch method instead.
        """

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this condition set."""

    def __init__(
        self,
        *,
        condition_set: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.Condition] | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition_set", b"condition_set", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...

global___PublishConditionSetRequest = PublishConditionSetRequest

@typing.final
class PublishConditionSetResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_SET_VALUE_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_set_value(self) -> ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue:
        """A shared data value for *all* condition data present for the specified measurement.
        This value's Metadata contains a reference to the measurement ID associated with this condition set.
        """

    def __init__(
        self,
        *,
        stored_condition_set_value: ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stored_condition_set_value", b"stored_condition_set_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_set_value", b"stored_condition_set_value"]) -> None: ...

global___PublishConditionSetResponse = PublishConditionSetResponse

@typing.final
class PublishConditionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    measurement_id: builtins.str
    """The id of the measurement associated with this condition.
    This value is expected to be a parsable GUID.
    """
    @property
    def condition(self) -> ni.measurements.data.v1.data_store_pb2.Condition:
        """Required. The single condition present for one published data (output) of a measurement
        This condition corresponds to a single value associated with the measurement.
        """

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this condition."""

    def __init__(
        self,
        *,
        condition: ni.measurements.data.v1.data_store_pb2.Condition | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...

global___PublishConditionRequest = PublishConditionRequest

@typing.final
class PublishConditionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_VALUE_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_value(self) -> ni.measurements.data.v1.data_store_pb2.StoredConditionValue:
        """A single condition present for the specified measurement."""

    def __init__(
        self,
        *,
        stored_condition_value: ni.measurements.data.v1.data_store_pb2.StoredConditionValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stored_condition_value", b"stored_condition_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_value", b"stored_condition_value"]) -> None: ...

global___PublishConditionResponse = PublishConditionResponse

@typing.final
class PublishConditionSetBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_SET_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    measurement_id: builtins.str
    """The id of the measurement associated with this condition set.
    This value is expected to be a parsable GUID.
    """
    @property
    def condition_set(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.ConditionArray]:
        """Required. The set of conditions for N iterations of published data of a measurement.
        Each item in the list corresponds to an entire column in the overall frame of the
        condition set.  The entire list of condition values makes up the entire frame of the
        condition set.
        """

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this condition set."""

    def __init__(
        self,
        *,
        condition_set: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.ConditionArray] | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition_set", b"condition_set", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...

global___PublishConditionSetBatchRequest = PublishConditionSetBatchRequest

@typing.final
class PublishConditionSetBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_SET_VALUE_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_set_value(self) -> ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue:
        """A single condition present for the specified measurement.
        This value's Metadata contains a reference to the measurement ID associated with this condition.
        """

    def __init__(
        self,
        *,
        stored_condition_set_value: ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stored_condition_set_value", b"stored_condition_set_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_set_value", b"stored_condition_set_value"]) -> None: ...

global___PublishConditionSetBatchResponse = PublishConditionSetBatchResponse

@typing.final
class PublishConditionBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    measurement_id: builtins.str
    """The id of the measurement associated with this condition.
    This value is expected to be a parsable GUID.
    """
    @property
    def condition(self) -> ni.measurements.data.v1.data_store_pb2.ConditionArray:
        """Required. The batch of conditions for N iterations of published data of a measurement."""

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this condition."""

    def __init__(
        self,
        *,
        condition: ni.measurements.data.v1.data_store_pb2.ConditionArray | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...

global___PublishConditionBatchRequest = PublishConditionBatchRequest

@typing.final
class PublishConditionBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_VALUE_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_value(self) -> ni.measurements.data.v1.data_store_pb2.StoredConditionValue:
        """A shared value for *all* condition data present for the specified measurement."""

    def __init__(
        self,
        *,
        stored_condition_value: ni.measurements.data.v1.data_store_pb2.StoredConditionValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stored_condition_value", b"stored_condition_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_value", b"stored_condition_value"]) -> None: ...

global___PublishConditionBatchResponse = PublishConditionBatchResponse

@typing.final
class PublishDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    PASS_FAIL_STATUS_FIELD_NUMBER: builtins.int
    ERROR_STATE_FIELD_NUMBER: builtins.int
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    HARDWARE_LIST_FIELD_NUMBER: builtins.int
    HARDWARE_IDENTIFIER_LIST_FIELD_NUMBER: builtins.int
    SOFTWARE_LIST_FIELD_NUMBER: builtins.int
    SOFTWARE_IDENTIFIER_LIST_FIELD_NUMBER: builtins.int
    notes: builtins.str
    """Optional. Any notes to be associated with the captured data."""
    pass_fail_status: ni.measurements.data.v1.data_store_pb2.PassFailStatus.ValueType
    """Optional. The pass fail status of the measurement."""
    error_state: ni.measurements.data.v1.data_store_pb2.ErrorState.ValueType
    """Optional. The error state of the measurement."""
    measurement_id: builtins.str
    """The id of the measurement associated with this data.
    This value is expected to be a parsable GUID.
    """
    @property
    def data(self) -> ni.measurements.data.v1.data_store_pb2.PublishableData:
        """Required. The data to be published."""

    @property
    def timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The timestamp of the measurement."""

    @property
    def error_message(self) -> ni.measurements.data.v1.data_store_pb2.ErrorMessage:
        """Optional. The error message of the measurement."""

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this data."""

    @property
    def hardware_list(self) -> ni.measurements.data.v1.data_store_pb2.HardwareMetadataList:
        """The list of hardware associated with this data."""

    @property
    def hardware_identifier_list(self) -> ni.measurements.data.v1.data_store_pb2.IdentifierList:
        """The ids of the hardware associated with this data. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def software_list(self) -> ni.measurements.data.v1.data_store_pb2.SoftwareMetadataList:
        """The list of software associated with this data."""

    @property
    def software_identifier_list(self) -> ni.measurements.data.v1.data_store_pb2.IdentifierList:
        """The ids of the software associated with this data. These values are expected
        to be parsable GUIDs or aliases.
        """

    def __init__(
        self,
        *,
        data: ni.measurements.data.v1.data_store_pb2.PublishableData | None = ...,
        notes: builtins.str = ...,
        timestamp: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        pass_fail_status: ni.measurements.data.v1.data_store_pb2.PassFailStatus.ValueType = ...,
        error_state: ni.measurements.data.v1.data_store_pb2.ErrorState.ValueType = ...,
        error_message: ni.measurements.data.v1.data_store_pb2.ErrorMessage | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
        hardware_list: ni.measurements.data.v1.data_store_pb2.HardwareMetadataList | None = ...,
        hardware_identifier_list: ni.measurements.data.v1.data_store_pb2.IdentifierList | None = ...,
        software_list: ni.measurements.data.v1.data_store_pb2.SoftwareMetadataList | None = ...,
        software_identifier_list: ni.measurements.data.v1.data_store_pb2.IdentifierList | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "error_message", b"error_message", "hardware", b"hardware", "hardware_identifier_list", b"hardware_identifier_list", "hardware_list", b"hardware_list", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata", "software", b"software", "software_identifier_list", b"software_identifier_list", "software_list", b"software_list", "timestamp", b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "error_message", b"error_message", "error_state", b"error_state", "hardware", b"hardware", "hardware_identifier_list", b"hardware_identifier_list", "hardware_list", b"hardware_list", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata", "notes", b"notes", "pass_fail_status", b"pass_fail_status", "software", b"software", "software_identifier_list", b"software_identifier_list", "software_list", b"software_list", "timestamp", b"timestamp"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["hardware", b"hardware"]) -> typing.Literal["hardware_list", "hardware_identifier_list"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["software", b"software"]) -> typing.Literal["software_list", "software_identifier_list"] | None: ...

global___PublishDataRequest = PublishDataRequest

@typing.final
class PublishDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_DATA_VALUE_FIELD_NUMBER: builtins.int
    @property
    def stored_data_value(self) -> ni.measurements.data.v1.data_store_pb2.StoredDataValue:
        """The moniker of the published data and its metadata."""

    def __init__(
        self,
        *,
        stored_data_value: ni.measurements.data.v1.data_store_pb2.StoredDataValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["stored_data_value", b"stored_data_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["stored_data_value", b"stored_data_value"]) -> None: ...

global___PublishDataResponse = PublishDataResponse

@typing.final
class PublishDataBatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    PASS_FAIL_STATUS_FIELD_NUMBER: builtins.int
    ERROR_STATE_FIELD_NUMBER: builtins.int
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    MEASUREMENT_METADATA_FIELD_NUMBER: builtins.int
    MEASUREMENT_ID_FIELD_NUMBER: builtins.int
    HARDWARE_LIST_FIELD_NUMBER: builtins.int
    HARDWARE_IDENTIFIER_LIST_FIELD_NUMBER: builtins.int
    SOFTWARE_LIST_FIELD_NUMBER: builtins.int
    SOFTWARE_IDENTIFIER_LIST_FIELD_NUMBER: builtins.int
    measurement_id: builtins.str
    """The id of the measurement associated with this data.
    This value is expected to be a parsable GUID.
    """
    @property
    def data(self) -> ni.measurements.data.v1.data_store_pb2.PublishableDataBatch:
        """Required. The batch of N data values to be published."""

    @property
    def timestamp(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.timestamp_pb2.Timestamp]:
        """Optional. The timestamps corresponding to the N iterations of batched data being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No timestamp information is recorded for the data.)
          2. The field may contain a single value. This value will be associated with each value of the batched data.
          3. The field may contain N values, where N is the number of individual batched data values being published.
             In this case, each timestamp aligns with the data value at the corresponding index within the PublishableDataBatch.
        """

    @property
    def pass_fail_status(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[ni.measurements.data.v1.data_store_pb2.PassFailStatus.ValueType]:
        """Optional. The pass/fail statuses corresponding to the N iterations of batched data being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No pass/fail status information is recorded for the data.)
          2. The field may contain a single value. This value will be associated with each value of the batched data.
          3. The field may contain N values, where N is the number of individual batched data values being published.
             In this case, each pass/fail status aligns with the data value at the corresponding index within the PublishableDataBatch.
        """

    @property
    def error_state(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[ni.measurements.data.v1.data_store_pb2.ErrorState.ValueType]:
        """Optional. The error states corresponding to the N iterations of batched data being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No error state information is recorded for the data.)
          2. The field may contain a single value. This value will be associated with each value of the batched data.
          3. The field may contain N values, where N is the number of individual batched data values being published.
             In this case, each error state aligns with the data value at the corresponding index within the PublishableDataBatch.
        """

    @property
    def error_message(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.ErrorMessage]:
        """Optional. The error messages corresponding to the N iterations of batched data being published.
        This field must meet one of the following requirements:

          1. The field may be empty. (No error message information is recorded for the data.)
          2. The field may contain a single value. This value will be associated with each value of the batched data.
          3. The field may contain N values, where N is the number of individual batched data values being published.
             In this case, each error message aligns with the data value at the corresponding index within the PublishableDataBatch.
        """

    @property
    def measurement_metadata(self) -> ni.measurements.data.v1.data_store_pb2.MeasurementMetadata:
        """The metadata of the measurement associated with this data."""

    @property
    def hardware_list(self) -> ni.measurements.data.v1.data_store_pb2.HardwareMetadataList:
        """The list of hardware associated with this data."""

    @property
    def hardware_identifier_list(self) -> ni.measurements.data.v1.data_store_pb2.IdentifierList:
        """The ids of the hardware associated with this data. These values are expected
        to be parsable GUIDs or aliases.
        """

    @property
    def software_list(self) -> ni.measurements.data.v1.data_store_pb2.SoftwareMetadataList:
        """The list of software associated with this data."""

    @property
    def software_identifier_list(self) -> ni.measurements.data.v1.data_store_pb2.IdentifierList:
        """The ids of the software associated with this data. These values are expected
        to be parsable GUIDs or aliases.
        """

    def __init__(
        self,
        *,
        data: ni.measurements.data.v1.data_store_pb2.PublishableDataBatch | None = ...,
        timestamp: collections.abc.Iterable[google.protobuf.timestamp_pb2.Timestamp] | None = ...,
        pass_fail_status: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.PassFailStatus.ValueType] | None = ...,
        error_state: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.ErrorState.ValueType] | None = ...,
        error_message: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.ErrorMessage] | None = ...,
        measurement_metadata: ni.measurements.data.v1.data_store_pb2.MeasurementMetadata | None = ...,
        measurement_id: builtins.str = ...,
        hardware_list: ni.measurements.data.v1.data_store_pb2.HardwareMetadataList | None = ...,
        hardware_identifier_list: ni.measurements.data.v1.data_store_pb2.IdentifierList | None = ...,
        software_list: ni.measurements.data.v1.data_store_pb2.SoftwareMetadataList | None = ...,
        software_identifier_list: ni.measurements.data.v1.data_store_pb2.IdentifierList | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "hardware", b"hardware", "hardware_identifier_list", b"hardware_identifier_list", "hardware_list", b"hardware_list", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata", "software", b"software", "software_identifier_list", b"software_identifier_list", "software_list", b"software_list"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "error_message", b"error_message", "error_state", b"error_state", "hardware", b"hardware", "hardware_identifier_list", b"hardware_identifier_list", "hardware_list", b"hardware_list", "measurement", b"measurement", "measurement_id", b"measurement_id", "measurement_metadata", b"measurement_metadata", "pass_fail_status", b"pass_fail_status", "software", b"software", "software_identifier_list", b"software_identifier_list", "software_list", b"software_list", "timestamp", b"timestamp"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["hardware", b"hardware"]) -> typing.Literal["hardware_list", "hardware_identifier_list"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["measurement", b"measurement"]) -> typing.Literal["measurement_metadata", "measurement_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["software", b"software"]) -> typing.Literal["software_list", "software_identifier_list"] | None: ...

global___PublishDataBatchRequest = PublishDataBatchRequest

@typing.final
class PublishDataBatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_DATA_VALUES_FIELD_NUMBER: builtins.int
    @property
    def stored_data_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.StoredDataValue]:
        """The monikers of the published data and their corresponding metadata."""

    def __init__(
        self,
        *,
        stored_data_values: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.StoredDataValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["stored_data_values", b"stored_data_values"]) -> None: ...

global___PublishDataBatchResponse = PublishDataBatchResponse

@typing.final
class QueryConditionSetsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all condition sets.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryConditionSetsRequest = QueryConditionSetsRequest

@typing.final
class QueryConditionSetsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_SET_VALUES_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_set_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue]:
        """The list of matching condition sets. Each item contains a moniker for
        retrieving the condition set data, as well as the metadata associated
        with the condition set.
        """

    def __init__(
        self,
        *,
        stored_condition_set_values: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.StoredConditionSetValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_set_values", b"stored_condition_set_values"]) -> None: ...

global___QueryConditionSetsResponse = QueryConditionSetsResponse

@typing.final
class QueryConditionsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all conditions.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryConditionsRequest = QueryConditionsRequest

@typing.final
class QueryConditionsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_CONDITION_VALUES_FIELD_NUMBER: builtins.int
    @property
    def stored_condition_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.StoredConditionValue]:
        """The list of matching conditions. Each item contains a moniker for
        retrieving the condition data, as well as the metadata associated
        with the condition.
        """

    def __init__(
        self,
        *,
        stored_condition_values: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.StoredConditionValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["stored_condition_values", b"stored_condition_values"]) -> None: ...

global___QueryConditionsResponse = QueryConditionsResponse

@typing.final
class QueryDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ODATA_QUERY_FIELD_NUMBER: builtins.int
    odata_query: builtins.str
    """an OData query string.  example "$filter=name eq 'Value'"
    An empty string will return all data values.
    $expand, $count, and $select are not supported. For more information,
    see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
    """
    def __init__(
        self,
        *,
        odata_query: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["odata_query", b"odata_query"]) -> None: ...

global___QueryDataRequest = QueryDataRequest

@typing.final
class QueryDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STORED_DATA_VALUES_FIELD_NUMBER: builtins.int
    @property
    def stored_data_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[ni.measurements.data.v1.data_store_pb2.StoredDataValue]:
        """The list of matching data values. Each item contains a moniker for
        retrieving the data, as well as the metadata associated with the data.
        """

    def __init__(
        self,
        *,
        stored_data_values: collections.abc.Iterable[ni.measurements.data.v1.data_store_pb2.StoredDataValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["stored_data_values", b"stored_data_values"]) -> None: ...

global___QueryDataResponse = QueryDataResponse
