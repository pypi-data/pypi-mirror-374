name: PyPI Release

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Verify version matches release tag
      run: |
        PACKAGE_VERSION=$(python setup.py --version)
        RELEASE_TAG=${GITHUB_REF#refs/tags/}
        echo "Package version: $PACKAGE_VERSION"
        echo "Release tag: $RELEASE_TAG"
        CLEAN_TAG=${RELEASE_TAG#v}
        if [ "$PACKAGE_VERSION" != "$CLEAN_TAG" ]; then
          echo "Error: Package version ($PACKAGE_VERSION) doesn't match release tag ($CLEAN_TAG)"
          exit 1
        fi
        
    - name: Build package
      run: |
        echo "Building Python package..."
        python -m build
        
    - name: Check package
      run: |
        echo "Validating package..."
        twine check dist/*
        
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "Publishing to Test PyPI..."
        twine upload --repository testpypi dist/* --verbose
        
    - name: Test installation from Test PyPI
      run: |
        echo "Testing installation from Test PyPI..."
        sleep 30
        python -m venv test_env
        source test_env/bin/activate
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ logflux-io
        python -c "import logflux; print(f'LogFlux version: {logflux.__version__}'); client = logflux.new_unix_client(); print('Import successful')"
        deactivate
        
    - name: Publish to Production PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to Production PyPI..."
        twine upload dist/* --verbose
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: dist/
        
    - name: Release completed
      run: |
        echo "Release v0.1.0-beta published successfully!"
        echo "Package available at: https://pypi.org/project/logflux-io/"