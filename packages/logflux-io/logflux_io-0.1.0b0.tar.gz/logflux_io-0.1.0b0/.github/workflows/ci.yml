name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check code formatting with black
      run: |
        echo "Checking Python code formatting..."
        black --check --diff logflux tests examples

    - name: Check import sorting with isort
      run: |
        echo "Checking import sorting..."
        isort --check-only --diff logflux tests examples

    - name: Lint with flake8
      run: |
        echo "Running flake8 linting..."
        flake8 logflux tests examples --count --show-source --statistics

    - name: Type check with mypy
      run: |
        echo "Running mypy type checking..."
        mypy logflux --show-error-codes

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        pytest tests/unit/ -v --cov=logflux --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        pytest tests/integration/ -v

    - name: Upload coverage to Codecov (Python 3.11 only)
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-integration-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-integration-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Run mock agent integration tests
      run: |
        echo "Running integration tests with mock LogFlux agent..."
        python tests/integration/run_integration_tests.py --mode=mock

    - name: Run integration tests (mock only in CI)
      run: |
        echo "Running comprehensive integration tests..."
        python -m pytest tests/integration/ -v --tb=short

  security:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Install security tools
      run: |
        pip install safety bandit semgrep
        
    - name: Run dependency vulnerability scan (Safety)
      run: |
        echo "Running dependency vulnerability scan..."
        safety check --output json --continue-on-error || true
        
    - name: Run static security analysis (Bandit)
      run: |
        echo "Running static security analysis..."
        bandit -r logflux/ -f json -o bandit-report.json || true
        bandit -r logflux/ -f txt || true
        
    - name: Run advanced security analysis (Semgrep)
      run: |
        echo "Running advanced security analysis..."
        semgrep --config=auto --json -o semgrep-report.json logflux/ || true
        semgrep --config=auto logflux/ || true
        
    - name: Run secrets detection scan
      run: |
        echo "Running secrets detection scan..."
        semgrep --config=p/secrets --json -o secrets-report.json logflux/ || true
        semgrep --config=p/secrets logflux/ || true
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          semgrep-report.json
          secrets-report.json
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "Building Python package..."
        python -m build

    - name: Check package
      run: |
        echo "Validating package..."
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/