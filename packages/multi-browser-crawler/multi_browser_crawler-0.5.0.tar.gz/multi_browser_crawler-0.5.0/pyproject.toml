[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multi-browser-crawler"
version = "0.5.0"
authors = [
    {name = "Spider MCP Team", email = "team@spider-mcp.com"},
]
description = "Focused browser automation package for web scraping and content extraction"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
keywords = [
    "browser", "automation", "crawling", "scraping", "playwright", 
    "selenium", "web", "testing", "multiprocess", "proxy"
]
dependencies = [
    "patchright>=1.52.0",
    "playwright>=1.40.0",
    "undetected-chromedriver>=3.5.0",
    "selenium>=4.15.0",
    "aiohttp>=3.8.0",
    "beautifulsoup4>=4.12.0",
    "psutil>=5.9.0",
    "lxml>=4.9.0",
    "html5lib>=1.1",
    "redis>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
performance = [
    "uvloop>=0.17.0; sys_platform != 'win32'",
    "orjson>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/spider-mcp/multi-browser-crawler"
Documentation = "https://multi-browser-crawler.readthedocs.io/"
Repository = "https://github.com/spider-mcp/multi-browser-crawler"
"Bug Reports" = "https://github.com/spider-mcp/multi-browser-crawler/issues"



[tool.setuptools.packages.find]
where = ["."]
include = ["multi_browser_crawler*"]

[tool.setuptools.package-data]
multi_browser_crawler = [
    "config/*.json",
    "utils/*.js", 
    "data/*.txt",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "psutil.*",
    "bs4.*",
    "lxml.*",
    "html5lib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "browser: marks tests that require browser automation",
]

[tool.coverage.run]
source = ["multi_browser_crawler"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
