name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc
      custom_version:
        description: "Custom version (leave empty to use bump type)"
        required: false
        type: string

jobs:
  release:
    name: Create and publish release
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/confluence-markdown-exporter
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked --all-groups

      - name: Update version (custom)
        if: ${{ github.event.inputs.custom_version != '' }}
        run: |
          uv version ${{ github.event.inputs.custom_version }}
          echo "NEW_VERSION=${{ github.event.inputs.custom_version }}" >> $GITHUB_ENV

      - name: Update version (bump)
        if: ${{ github.event.inputs.custom_version == '' }}
        run: |
          NEW_VERSION=$(uv version --bump ${{ github.event.inputs.version_bump }} | awk '{print $NF}')
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Test build with new version
        run: |
          uv build --no-sources
          uv run --with dist/*.whl --no-project -- python -c "import confluence_markdown_exporter; print('Package imports successfully')"

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml uv.lock
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Create release tag
        run: |
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"

      - name: Create and publish GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.NEW_VERSION }}" \
            --title "Release ${{ env.NEW_VERSION }}" \
            --generate-notes

      - name: Generate artifact attestations
        uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-path: "dist/*"

      - name: Publish to PyPI
        run: uv publish

      - name: Sign the distributions with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Upload signed artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ env.NEW_VERSION }}" dist/** \
            --repo "$GITHUB_REPOSITORY"
