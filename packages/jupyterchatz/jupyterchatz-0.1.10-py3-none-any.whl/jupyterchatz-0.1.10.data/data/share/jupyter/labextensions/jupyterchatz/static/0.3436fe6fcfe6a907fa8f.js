"use strict";(self.webpackChunkjupyterchatz=self.webpackChunkjupyterchatz||[]).push([[0],[(e,t,o)=>{o.r(t),o.d(t,{default:()=>w});var r=o(586),n=o(715),l=o(406),a=o(438),s=o(427),c=o(121),i=o(531),u=o(345),d=o.n(u),h=o(364),g=o.n(h),p=o(310);class y{constructor(e,t){this.isConnected=!1,this.config=e,this.notebookTracker=t}async checkHealth(){return console.log("跳过MCP服务器健康检查，直接返回true"),!0}async connect(){try{if(console.log("尝试连接到MCP服务器..."),console.log("MCP服务器URL:",this.config.serverUrl),console.log("传输方式:",this.config.transport),"stdio"===this.config.transport)return console.log("已成功连接到MCP服务器(stdio模式)"),this.isConnected=!0,!0;const e=await g().post(`${this.config.serverUrl}/api/connect`);return 200===e.status?(console.log("已成功连接到MCP服务器"),this.isConnected=!0,!0):(console.error("连接MCP服务器失败:",e.status),!1)}catch(e){return console.error("连接MCP服务器时出错:",e),!1}}async getNotebookInfo(){try{if(console.log("尝试获取Notebook信息..."),!this.notebookTracker)return console.error("notebookTracker未定义"),null;if(!this.notebookTracker.currentWidget)return console.error("notebookTracker.currentWidget未定义，可能没有打开的notebook"),null;const e=this.notebookTracker.currentWidget,t=e.content.model;if(!t)return console.error("notebook.content.model未定义"),null;const o={path:e.context.path,name:e.context.path.split("/").pop(),cells:t.cells.length,type:"notebook"};return console.log("Notebook信息:",o),o}catch(e){return console.error("获取notebook信息失败:",e),null}}async readAllCells(){try{if(console.log("尝试读取所有单元格..."),!this.notebookTracker)return console.error("notebookTracker未定义"),null;if(!this.notebookTracker.currentWidget)return console.error("notebookTracker.currentWidget未定义，可能没有打开的notebook"),null;const e=this.notebookTracker.currentWidget;if(console.log("notebook对象类型:",typeof e),!e.content)return console.error("notebook.content未定义"),null;if(!e.content.model)return console.error("notebook.content.model未定义"),null;const t=e.content.model;if(!t.cells)return console.error("model.cells未定义"),null;if(console.log("单元格数量:",t.cells.length),0===t.cells.length)return console.warn("Notebook没有单元格"),[];const o=[];for(let e=0;e<t.cells.length;e++)try{const r=t.cells.get(e);if(!r){console.warn(`无法获取单元格 ${e}`);continue}let n=[];try{console.log(`=== 单元格 ${e} 调试信息 ===`),console.log("单元格对象:",r),console.log("单元格类型:",typeof r),console.log("单元格构造函数:",r.constructor.name),console.log("可枚举属性:");for(const e in r)r.hasOwnProperty(e)&&console.log(`  ${e}:`,typeof r[e],r[e]);console.log("所有属性:"),Object.getOwnPropertyNames(r).forEach(e=>{try{const t=r[e];console.log(`  ${e}:`,typeof t,t)}catch(t){console.log(`  ${e}: [无法访问]`)}});let t="";if(r.sharedModel&&r.sharedModel.source){const e=r.sharedModel.source;t=Array.isArray(e)?e.join("\n"):e,console.log("使用方法1 (sharedModel.source) 获取内容:",t)}else if(r.sharedModel&&"function"==typeof r.sharedModel.getSource)try{t=r.sharedModel.getSource(),console.log("使用方法2 (sharedModel.getSource()) 获取内容:",t)}catch(e){console.log("sharedModel.getSource() 调用失败:",e)}else if(r.value&&r.value.text)t=r.value.text,console.log("使用方法3 (value.text) 获取内容:",t);else if(r.source)t=Array.isArray(r.source)?r.source.join("\n"):r.source,console.log("使用方法4 (source) 获取内容:",t);else if(r.text)t=r.text,console.log("使用方法5 (text) 获取内容:",t);else if(r.model&&r.model.value)t=r.model.value.text||r.model.value.source,console.log("使用方法6 (model.value) 获取内容:",t);else{const o=r.toString();console.log("toString()结果:",o,"类型:",typeof o),"string"==typeof o&&"[object Object]"!==o?t=o:(console.warn(`单元格 ${e} toString()返回非字符串或[object Object]:`,typeof o),t=`[单元格 ${e} 内容无法获取]`)}n=t?t.split("\n"):[""],console.log(`单元格 ${e} 最终内容:`,t.substring(0,100)+(t.length>100?"...":"")),console.log(`=== 单元格 ${e} 调试结束 ===`)}catch(t){console.error(`获取单元格 ${e} 内容失败:`,t),n=[`[单元格 ${e} 内容获取失败]`]}let l=[];if("code"===r.type)try{if(console.log(`=== 单元格 ${e} 输出调试信息 ===`),console.log("单元格对象:",r),console.log("单元格outputs属性:",r.outputs),console.log("outputs类型:",typeof r.outputs),console.log("outputs是否为数组:",Array.isArray(r.outputs)),["outputs","output","result","data"].forEach(e=>{void 0!==r[e]&&console.log(`属性 ${e}:`,r[e])}),r.outputs){const t=r.outputs;if(console.log(`单元格 ${e} outputs对象:`,t),console.log("outputs构造函数:",t.constructor.name),t.list&&t.list._array){console.log(`单元格 ${e} 找到list._array:`,t.list._array),console.log("list._array长度:",t.list._array.length);const o=t.list._array;console.log(`单元格 ${e} list._array内容:`,o);for(let t=0;t<o.length;t++){const r=o[t];if(console.log(`输出 ${t} 详细信息:`,r),console.log(`输出 ${t} 类型:`,typeof r),console.log(`输出 ${t} 属性:`,Object.keys(r)),r._array&&Array.isArray(r._array)){console.log(`输出 ${t} 是ObservableList，访问其_array:`,r._array);for(let t=0;t<r._array.length;t++){const o=r._array[t];console.log(`实际输出 ${t} 详细信息:`,o),console.log(`实际输出 ${t} 类型:`,typeof o),console.log(`实际输出 ${t} 属性:`,Object.keys(o)),o.data&&o.data["text/plain"]?(l.push(o.data["text/plain"]),console.log("从实际输出 data['text/plain'] 获取:",o.data["text/plain"])):o.text?(l.push(o.text),console.log("从实际输出 text 获取:",o.text)):"stream"===o.output_type&&"stdout"===o.name?(l.push(o.text||""),console.log("从实际输出 stream stdout 获取:",o.text)):"error"===o.output_type?(l.push(`错误: ${o.ename}: ${o.evalue}`),console.log("从实际输出 error 获取:",`错误: ${o.ename}: ${o.evalue}`)):"execute_result"===o.output_type?o.data&&o.data["text/plain"]?(l.push(o.data["text/plain"]),console.log("从实际输出 execute_result data['text/plain'] 获取:",o.data["text/plain"])):o.data&&o.data["text/html"]?(l.push(o.data["text/html"]),console.log("从实际输出 execute_result data['text/html'] 获取:",o.data["text/html"])):(l.push("[执行结果但无文本数据]"),console.log("实际输出执行结果但无文本数据:",o)):(console.error(`单元格 ${e} 实际输出 ${t} 发现未知类型:`,o.output_type,"完整对象:",o),l.push(`[实际输出类型: ${o.output_type||"undefined"}]`))}}else if(console.log(`输出 ${t} 完整结构:`,JSON.stringify(r,null,2)),r._raw)console.log("从_raw属性获取数据:",r._raw),"stream"===r._raw.output_type&&"stdout"===r._raw.name?(l.push(r._raw.text||""),console.log("从_raw stream stdout 获取输出:",r._raw.text)):"stream"===r._raw.output_type&&"stderr"===r._raw.name?(l.push(`错误输出: ${r._raw.text||""}`),console.log("从_raw stream stderr 获取输出:",r._raw.text)):"execute_result"===r._raw.output_type?r._raw.data&&r._raw.data["text/plain"]?(l.push(r._raw.data["text/plain"]),console.log("从_raw execute_result data['text/plain'] 获取输出:",r._raw.data["text/plain"])):r._raw.data&&r._raw.data["text/html"]?(l.push(r._raw.data["text/html"]),console.log("从_raw execute_result data['text/html'] 获取输出:",r._raw.data["text/html"])):(l.push("[执行结果但无文本数据]"),console.log("_raw执行结果但无文本数据:",r._raw)):"error"===r._raw.output_type?(l.push(`错误: ${r._raw.ename}: ${r._raw.evalue}`),console.log("从_raw error 获取输出:",`错误: ${r._raw.ename}: ${r._raw.evalue}`)):(console.log("_raw未知输出类型:",r._raw.output_type),l.push(`[_raw输出类型: ${r._raw.output_type}]`));else if(r._text&&r._text._text)l.push(r._text._text),console.log("从_text._text 获取输出:",r._text._text);else if(r._rawData)if(console.log("从_rawData属性获取数据:",r._rawData),r._rawData["application/vnd.jupyter.stdout"])l.push(r._rawData["application/vnd.jupyter.stdout"]),console.log("从_rawData stdout 获取输出:",r._rawData["application/vnd.jupyter.stdout"]);else if(r._rawData["application/vnd.jupyter.stderr"])l.push(`错误输出: ${r._rawData["application/vnd.jupyter.stderr"]}`),console.log("从_rawData stderr 获取输出:",r._rawData["application/vnd.jupyter.stderr"]);else{const e=Object.keys(r._rawData);e.length>0&&(l.push(r._rawData[e[0]]),console.log(`从_rawData ${e[0]} 获取输出:`,r._rawData[e[0]]))}else r.data&&r.data["text/plain"]?(l.push(r.data["text/plain"]),console.log("从 data['text/plain'] 获取输出:",r.data["text/plain"])):r.text?(l.push(r.text),console.log("从 text 获取输出:",r.text)):"stream"===r.output_type&&"stdout"===r.name?(l.push(r.text||""),console.log("从 stream stdout 获取输出:",r.text)):"error"===r.output_type?(l.push(`错误: ${r.ename}: ${r.evalue}`),console.log("从 error 获取输出:",`错误: ${r.ename}: ${r.evalue}`)):"execute_result"===r.output_type?r.data&&r.data["text/plain"]?(l.push(r.data["text/plain"]),console.log("从 execute_result data['text/plain'] 获取输出:",r.data["text/plain"])):r.data&&r.data["text/html"]?(l.push(r.data["text/html"]),console.log("从 execute_result data['text/html'] 获取输出:",r.data["text/html"])):(l.push("[执行结果但无文本数据]"),console.log("执行结果但无文本数据:",r)):void 0!==r.value?(l.push(String(r.value)),console.log("从 value 获取输出:",r.value)):void 0!==r.result?(l.push(String(r.result)),console.log("从 result 获取输出:",r.result)):(console.error(`单元格 ${e} 输出 ${t} 所有方法都失败，完整输出对象:`,r),l.push(`[单元格 ${e} 输出获取失败]`),console.log("所有方法都失败，添加默认消息:",`[单元格 ${e} 输出获取失败]`))}}else if(void 0!==t.length){console.log(`单元格 ${e} 输出数量:`,t.length);try{for(let e=0;e<t.length;e++){const o=t.get?t.get(e):t[e];console.log(`输出 ${e} 详细信息:`,o),console.log(`输出 ${e} 类型:`,typeof o),console.log(`输出 ${e} 属性:`,Object.keys(o)),o.data&&o.data["text/plain"]?(l.push(o.data["text/plain"]),console.log("从 data['text/plain'] 获取输出:",o.data["text/plain"])):o.text?(l.push(o.text),console.log("从 text 获取输出:",o.text)):"stream"===o.output_type&&"stdout"===o.name?(l.push(o.text||""),console.log("从 stream stdout 获取输出:",o.text)):"error"===o.output_type?(l.push(`错误: ${o.ename}: ${o.evalue}`),console.log("从 error 获取输出:",`错误: ${o.ename}: ${o.evalue}`)):(l.push(`[输出类型: ${o.output_type}]`),console.log("未知输出类型:",o.output_type))}}catch(e){console.log("for循环失败，尝试其他方法:",e);try{"function"==typeof t.forEach&&t.forEach((e,t)=>{console.log(`输出 ${t} (forEach):`,e),e.data&&e.data["text/plain"]?l.push(e.data["text/plain"]):e.text&&l.push(e.text)})}catch(e){console.log("forEach失败:",e)}try{if("function"==typeof t.toArray){const e=t.toArray();console.log("toArray结果:",e),e.forEach((e,t)=>{e.data&&e.data["text/plain"]?l.push(e.data["text/plain"]):e.text&&l.push(e.text)})}}catch(e){console.log("toArray失败:",e)}}}else console.log(`单元格 ${e} outputs没有list._array或length属性`);0===l.length&&(console.log(`单元格 ${e} 没有找到有效输出`),l=["[无输出]"])}else console.log(`单元格 ${e} 没有outputs属性`),l=["[无输出]"];console.log(`单元格 ${e} 最终输出:`,l),console.log(`=== 单元格 ${e} 输出调试结束 ===`)}catch(t){console.error(`获取单元格 ${e} 输出失败:`,t),l=["[输出获取失败]"]}const a={index:e,type:r.type,source:n,outputs:"code"===r.type?l:void 0};o.push(a),console.log(`成功处理单元格 ${e}, 类型: ${r.type}, 内容长度: ${n.length}`)}catch(t){console.error(`处理单元格 ${e} 时出错:`,t)}return console.log(`成功获取到 ${o.length} 个单元格`),o}catch(e){return console.error("读取所有单元格失败:",e),null}}async readCell(e){try{if(console.log(`尝试读取单元格 ${e}...`),!this.notebookTracker)return console.error("notebookTracker未定义"),null;if(!this.notebookTracker.currentWidget)return console.error("notebookTracker.currentWidget未定义，可能没有打开的notebook"),null;const t=this.notebookTracker.currentWidget;if(!t.content)return console.error("notebook.content未定义"),null;if(!t.content.model)return console.error("notebook.content.model未定义"),null;const o=t.content.model;if(!o.cells)return console.error("model.cells未定义"),null;if(console.log("单元格数量:",o.cells.length),0===o.cells.length)return console.warn("Notebook没有单元格"),null;if(e<0||e>=o.cells.length)return console.warn(`单元格索引 ${e} 超出范围 (0-${o.cells.length-1})`),null;const r=o.cells.get(e);if(!r)return console.error(`无法获取单元格 ${e}`),null;let n=[];try{let t="";if(r.sharedModel&&r.sharedModel.source){const e=r.sharedModel.source;t=Array.isArray(e)?e.join("\n"):e,console.log("使用方法1 (sharedModel.source) 获取内容:",t)}else if(r.sharedModel&&"function"==typeof r.sharedModel.getSource)try{t=r.sharedModel.getSource(),console.log("使用方法2 (sharedModel.getSource()) 获取内容:",t)}catch(e){console.log("sharedModel.getSource() 调用失败:",e)}else if(r.value&&r.value.text)t=r.value.text,console.log("使用方法3 (value.text) 获取内容:",t);else if(r.source)t=Array.isArray(r.source)?r.source.join("\n"):r.source,console.log("使用方法4 (source) 获取内容:",t);else if(r.text)t=r.text,console.log("使用方法5 (text) 获取内容:",t);else{const o=r.toString();console.log("toString()结果:",o,"类型:",typeof o),"string"==typeof o&&"[object Object]"!==o?t=o:(console.warn(`单元格 ${e} toString()返回非字符串或[object Object]:`,typeof o),t=`[单元格 ${e} 内容无法获取]`)}n=t?t.split("\n"):[""],console.log(`单元格 ${e} 内容:`,t.substring(0,100)+(t.length>100?"...":""))}catch(t){console.error(`获取单元格 ${e} 内容失败:`,t),n=[`[单元格 ${e} 内容获取失败]`]}let l=[];if("code"===r.type)try{if(r.outputs&&Array.isArray(r.outputs)){const t=r.outputs;console.log(`单元格 ${e} 输出数量:`,t.length);for(let e=0;e<t.length;e++){const o=t[e];console.log(`输出 ${e}:`,o),o.data&&o.data["text/plain"]?l.push(o.data["text/plain"]):o.text?l.push(o.text):"stream"===o.output_type&&"stdout"===o.name?l.push(o.text||""):"error"===o.output_type?l.push(`错误: ${o.ename}: ${o.evalue}`):l.push(`[输出类型: ${o.output_type}]`)}}else console.log(`单元格 ${e} 没有输出或输出格式不正确`),l=["[无输出]"]}catch(t){console.error(`获取单元格 ${e} 输出失败:`,t),l=["[输出获取失败]"]}const a={index:e,type:r.type,source:n,outputs:"code"===r.type?l:void 0};return console.log(`成功获取单元格 ${e}, 类型: ${r.type}, 内容长度: ${n.length}`),a}catch(t){return console.error(`读取单元格 ${e} 失败:`,t),null}}async appendMarkdownCell(e){try{return console.log("添加Markdown单元格:",e),console.log("注意：此功能需要进一步实现"),"功能暂未实现"}catch(e){return console.error("添加Markdown单元格失败:",e),null}}async appendExecuteCodeCell(e){try{return console.log("添加代码单元格:",e),console.log("注意：此功能需要进一步实现"),"功能暂未实现"}catch(e){return console.error("添加代码单元格失败:",e),null}}async executeCell(e,t=30){try{return console.log(`执行单元格 ${e}...`),console.log("注意：此功能需要进一步实现"),"功能暂未实现"}catch(t){return console.error(`执行单元格 ${e} 失败:`,t),null}}getConnectionStatus(){return this.isConnected}}class m{constructor(e={}){this.apiKey="sk-7W5ztpH97ea2RjWVC3BbC375Aa6d4bD98550EbFcBc7146Ec",this.apiUrl="https://api.aihubmix.com/v1/chat/completions",this.model="gpt-4o-mini",this.mcpServerUrl="http://localhost:8888",this.fileBrowserFactory=e.fileBrowserFactory,this.documentManager=e.documentManager,this.editorTracker=e.editorTracker,this.notebookTracker=e.notebookTracker,this.initMCPService()}async initMCPService(){try{this.mcpService=new y({serverUrl:this.mcpServerUrl,transport:"stdio"},this.notebookTracker),await this.mcpService.checkHealth()?console.log("MCP服务器连接正常"):console.warn("MCP服务器连接异常，部分功能可能不可用")}catch(e){console.error("初始化MCP服务失败:",e)}}getCurrentDirectory(){if(console.log("获取当前工作目录..."),this.fileBrowserFactory)try{console.log("尝试从 fileBrowserFactory 获取当前路径");const e=this.fileBrowserFactory.tracker.currentWidget;if(e){const t=e.model.path;return console.log("从 fileBrowserFactory 获取的路径:",t),t}}catch(e){console.error("从 fileBrowserFactory 获取路径时出错:",e)}else console.warn("fileBrowserFactory 未定义");if(this.notebookTracker&&this.notebookTracker.currentWidget)try{console.log("尝试从 notebookTracker 获取当前路径");const e=this.notebookTracker.currentWidget.context.path,t=e.lastIndexOf("/");if(t>=0){const o=e.substring(0,t);return console.log("从 notebookTracker 获取的目录路径:",o),o}return console.log("从 notebookTracker 获取的路径:",e),""}catch(e){console.error("从 notebookTracker 获取路径时出错:",e)}if(this.documentManager)try{return console.log("尝试从 documentManager 获取当前路径"),this.documentManager.services.contents.localPath("")}catch(e){console.error("从 documentManager 获取路径时出错:",e)}return console.warn("无法获取当前路径，使用默认路径"),""}async getCurrentDirectoryContents(){if(console.log("获取当前目录内容..."),!this.documentManager)return console.warn("documentManager 未定义"),[];try{const e=this.getCurrentDirectory()||"";console.log("使用路径获取目录内容:",e);const t=await this.documentManager.services.contents.get(e);return t&&t.content?t.content.map(e=>({path:e.path,name:e.name,extension:"directory"===e.type?"":p.PathExt.extname(e.name),isDirectory:"directory"===e.type})):[]}catch(e){return console.error("获取目录内容失败:",e),[]}}getCurrentOpenedFile(){if(this.editorTracker&&this.editorTracker.currentWidget){const e=this.editorTracker.currentWidget,t=e.context.path,o=e.content.model;return{path:t,name:p.PathExt.basename(t),extension:p.PathExt.extname(t),content:o.toString(),isDirectory:!1}}if(this.notebookTracker&&this.notebookTracker.currentWidget){const e=this.notebookTracker.currentWidget,t=e.context.path;let o="";const r=e.content.model;if(r)for(let e=0;e<r.cells.length;e++){const t=r.cells.get(e);"code"===t.type&&(o+=`# Cell ${e+1}\n${t.toString()}\n\n`)}return{path:t,name:p.PathExt.basename(t),extension:p.PathExt.extname(t),content:o,isDirectory:!1}}return null}async connectToCurrentNotebook(){if(this.mcpService||(console.log("初始化MCP服务..."),this.mcpService=new y({serverUrl:this.mcpServerUrl,transport:"stdio"},this.notebookTracker)),!this.notebookTracker||!this.notebookTracker.currentWidget)return console.warn("当前没有打开的Notebook"),!1;const e=this.notebookTracker.currentWidget.context.path;console.log(`尝试连接到Notebook: ${e}`);try{const t=await this.mcpService.connect();return t?console.log(`已成功连接到Notebook: ${e}`):console.warn(`连接到Notebook ${e} 失败`),t}catch(e){return console.error("连接到Notebook时出错:",e),!1}}async readFile(e){if(!this.documentManager)return null;try{const t=await this.documentManager.services.contents.get(e,{content:!0});return"file"===t.type?t.content:null}catch(e){return console.error("读取文件失败:",e),null}}async getNotebookInfo(){if(!this.mcpService)return"未初始化MCP服务";try{const e=await this.mcpService.getNotebookInfo();return e?`**Notebook信息:**\n\n- **文档ID:** ${e.document_id}\n- **单元格总数:** ${e.total_cells}\n- **单元格类型统计:** ${JSON.stringify(e.cell_types)}`:"无法获取Notebook信息"}catch(e){return console.error("获取Notebook信息失败:",e),`获取Notebook信息失败: ${(null==e?void 0:e.message)||"未知错误"}`}}async readAllCells(){if(!this.mcpService)return"未初始化MCP服务";try{const e=await this.mcpService.readAllCells();if(!e||0===e.length)return"无法获取单元格或Notebook为空";let t=`Notebook包含 ${e.length} 个单元格:\n\n`;return e.forEach((e,o)=>{t+=`**单元格 ${e.index} (${e.type}):**\n\n`,t+="```","code"===e.type?t+="python":"markdown"===e.type&&(t+="markdown"),t+="\n",e.source&&e.source.length>0?t+=e.source.join(""):t+="# 空单元格",t+="\n```\n\n",e.outputs&&e.outputs.length>0?(t+="**输出:**\n",t+="```\n",t+=e.outputs.join("\n"),t+="\n```\n\n"):t+="**输出:** 无输出\n\n"}),t}catch(e){return console.error("读取所有单元格失败:",e),`读取所有单元格失败: ${(null==e?void 0:e.message)||"未知错误"}`}}async readCell(e){if(!this.mcpService)return"未初始化MCP服务";try{const t=await this.mcpService.readCell(e);if(!t)return`无法获取单元格 ${e}`;let o=`**单元格 ${t.index} (${t.type}):**\n\n`;return o+="```","code"===t.type?o+="python":"markdown"===t.type&&(o+="markdown"),o+="\n",t.source&&t.source.length>0?o+=t.source.join(""):o+="# 空单元格",o+="\n```\n\n",t.outputs&&t.outputs.length>0?(o+="**输出:**\n",o+="```\n",o+=t.outputs.join("\n"),o+="\n```\n"):o+="**输出:** 无输出\n",o}catch(t){return console.error(`读取单元格 ${e} 失败:`,t),`读取单元格 ${e} 失败: ${(null==t?void 0:t.message)||"未知错误"}`}}async appendMarkdownCell(e){if(!this.mcpService)return"未初始化MCP服务";try{const t=await this.mcpService.appendMarkdownCell(e);return t?`成功添加Markdown单元格: ${t}`:"添加Markdown单元格失败"}catch(e){return console.error("添加Markdown单元格失败:",e),`添加Markdown单元格失败: ${(null==e?void 0:e.message)||"未知错误"}`}}async appendExecuteCodeCell(e){if(!this.mcpService)return"未初始化MCP服务";try{const t=await this.mcpService.appendExecuteCodeCell(e);if(!t)return"添加并执行代码单元格失败";let o="代码执行结果:\n```\n";return o+=Array.isArray(t)?t.join("\n"):t,o+="\n```",o}catch(e){return console.error("添加并执行代码单元格失败:",e),`添加并执行代码单元格失败: ${(null==e?void 0:e.message)||"未知错误"}`}}async executeCell(e){if(!this.mcpService)return"未初始化MCP服务";try{const t=await this.mcpService.executeCell(e);if(!t)return`执行单元格 ${e} 失败`;let o=`单元格 ${e} 执行结果:\n\`\`\`\n`;return o+=Array.isArray(t)?t.join("\n"):t,o+="\n```",o}catch(t){return console.error(`执行单元格 ${e} 失败:`,t),`执行单元格 ${e} 失败: ${(null==t?void 0:t.message)||"未知错误"}`}}async sendMessage(e){try{const t=e[e.length-1];if("user"===t.role){const e=t.content.toLowerCase().trim();if(console.log("处理用户消息:",e),"/pwd"===e||"/cwd"===e||e.includes("当前目录")){console.log("执行获取当前目录命令");try{const e=this.getCurrentDirectory();return console.log("获取到的当前目录:",e),`当前工作目录: ${e||"未知"}`}catch(e){return console.error("获取当前目录时出错:",e),`获取当前目录时出错: ${(null==e?void 0:e.message)||"未知错误"}`}}if("/ls"===e||e.includes("列出文件")||e.includes("显示文件列表")){console.log("执行列出文件命令");try{const e=await this.getCurrentDirectoryContents();if(console.log("获取到的文件列表:",e),0===e.length)return"当前目录为空或无法访问目录内容。";const t=e.map(e=>`${e.isDirectory?"[目录] ":"[文件] "}${e.name}`).join("\\n");return`当前目录 (${this.getCurrentDirectory()||"未知"}) 的内容:\\n${t}`}catch(e){return console.error("获取文件列表时出错:",e),`获取文件列表时出错: ${(null==e?void 0:e.message)||"未知错误"}`}}if("/current"===e||e.includes("当前文件")||e.includes("显示当前文件")){console.log("执行获取当前文件命令");try{const e=this.getCurrentOpenedFile();if(console.log("获取到的当前文件:",e),!e)return"当前没有打开的文件。";let t=`当前打开的文件: ${e.path}\n\n`;if(e.content){const o=e.content.length>1e3?e.content.substring(0,1e3)+"...(内容已截断)":e.content;t+=`文件内容:\n\`\`\`${p.PathExt.extname(e.name).substring(1)}\n${o}\n\`\`\``}else t+="无法获取文件内容。";return t}catch(e){return console.error("获取当前文件时出错:",e),`获取当前文件时出错: ${(null==e?void 0:e.message)||"未知错误"}`}}const o=e.match(/\/read\s+(.+)/)||e.match(/读取文件\s+(.+)/);if(o){console.log("执行读取指定文件命令");try{const e=o[1].trim();console.log("要读取的文件路径:",e);const t=this.getCurrentDirectory()||"";console.log("当前目录:",t);const r=e.startsWith("/")?e:p.PathExt.join(t,e);console.log("完整文件路径:",r);const n=await this.readFile(r);if(console.log("文件内容是否获取成功:",null!==n),null===n)return`无法读取文件: ${r}`;const l=n.length>1e3?n.substring(0,1e3)+"...(内容已截断)":n;return`文件 ${r} 的内容:\n\`\`\`${p.PathExt.extname(r).substring(1)}\n${l}\n\`\`\``}catch(e){return console.error("读取指定文件时出错:",e),`读取指定文件时出错: ${(null==e?void 0:e.message)||"未知错误"}`}}if("/connect"===e||e.includes("连接notebook")){console.log("执行连接到当前Notebook命令");try{return await this.connectToCurrentNotebook()?"已成功连接到当前Notebook":"连接到当前Notebook失败，请确保已打开Notebook并且MCP服务器正在运行"}catch(e){return console.error("连接到当前Notebook时出错:",e),`连接到当前Notebook时出错: ${(null==e?void 0:e.message)||"未知错误"}`}}if("/notebook-info"===e||e.includes("notebook信息"))return console.log("执行获取Notebook信息命令"),await this.getNotebookInfo();if("/cells"===e||e.includes("所有单元格"))return console.log("执行读取所有单元格命令"),await this.readAllCells();const r=e.match(/\/cell\s+(\d+)/)||e.match(/单元格\s+(\d+)/);if(r){const e=parseInt(r[1]);return console.log(`执行读取单元格 ${e} 命令`),await this.readCell(e)}const n=e.match(/\/add-markdown\s+(.+)/s)||e.match(/添加markdown\s+(.+)/s);if(n){const e=n[1].trim();return console.log("执行添加Markdown单元格命令"),await this.appendMarkdownCell(e)}const l=e.match(/\/add-code\s+(.+)/s)||e.match(/添加代码\s+(.+)/s);if(l){const e=l[1].trim();return console.log("执行添加并执行代码单元格命令"),await this.appendExecuteCodeCell(e)}const a=e.match(/\/exec\s+(\d+)/)||e.match(/执行单元格\s+(\d+)/);if(a){const e=parseInt(a[1]);return console.log(`执行单元格 ${e} 命令`),await this.executeCell(e)}}const o=await g().post(this.apiUrl,{model:this.model,messages:e},{headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.apiKey}`}});if(o.data&&o.data.choices&&o.data.choices.length>0)return o.data.choices[0].message.content;throw new Error("无效的API响应")}catch(e){return console.error("AI聊天API调用失败:",e),"抱歉，我无法连接到AI服务。请检查网络连接或API密钥是否有效。"}}}const k=({content:e})=>{const t=(e=>{const t=/```(\w+)?\n([\s\S]*?)```/g,o=[];let r,n=0;for(;null!==(r=t.exec(e));)r.index>n&&o.push({type:"text",content:e.slice(n,r.index)}),o.push({type:"code",language:r[1]||"text",content:r[2]}),n=r.index+r[0].length;return n<e.length&&o.push({type:"text",content:e.slice(n)}),o})(e);return d().createElement("div",null,t.map((e,t)=>"code"===e.type?d().createElement("div",{key:t,className:"jp-AIChat-codeBlock"},d().createElement("div",{className:"jp-AIChat-codeHeader"},d().createElement("span",{className:"jp-AIChat-codeLanguage"},e.language)),d().createElement("pre",{className:"jp-AIChat-codeContent"},d().createElement("code",{className:`language-${e.language}`},e.content))):d().createElement("div",{key:t,className:"jp-AIChat-textContent"},e.content.split("\n").map((t,o)=>d().createElement(d().Fragment,{key:o},(e=>{const t=/\*\*(.*?)\*\*/g,o=[];let r,n=0;for(;null!==(r=t.exec(e));)r.index>n&&o.push(e.slice(n,r.index)),o.push(d().createElement("strong",{key:r.index},r[1])),n=r.index+r[0].length;return n<e.length&&o.push(e.slice(n)),o.length>0?o:e})(t),o<e.content.split("\n").length-1&&d().createElement("br",null))))))},f=e=>{const[t,o]=(0,u.useState)([]),[r,n]=(0,u.useState)(""),[l,a]=(0,u.useState)(!1),s=new m({fileBrowserFactory:e.fileBrowserFactory,documentManager:e.documentManager,editorTracker:e.editorTracker,notebookTracker:e.notebookTracker}),c=(0,u.useRef)(null);(0,u.useEffect)(()=>{var e;null===(e=c.current)||void 0===e||e.scrollIntoView({behavior:"smooth"})},[t]);const i=async()=>{if(!r.trim())return;const e={role:"user",content:r};o(t=>[...t,e]),n(""),a(!0);try{const r=[...t,e],n={role:"assistant",content:await s.sendMessage(r)};o(e=>[...e,n])}catch(e){console.error("发送消息失败:",e);const t={role:"assistant",content:"抱歉，发生了错误。请稍后再试。"};o(e=>[...e,t])}finally{a(!1)}};return d().createElement("div",{className:"jp-AIChat-container"},d().createElement("div",{className:"jp-AIChat-header"},d().createElement("h3",null,"AI 助手")),d().createElement("div",{className:"jp-AIChat-messages"},0===t.length?d().createElement("div",{className:"jp-AIChat-welcome"},d().createElement("p",null,"欢迎使用 AI 助手！请输入您的问题。")):t.map((e,t)=>d().createElement("div",{key:t,className:"jp-AIChat-message "+("user"===e.role?"jp-AIChat-userMessage":"jp-AIChat-assistantMessage")},d().createElement("div",{className:"jp-AIChat-messageContent"},d().createElement(k,{content:e.content})))),l&&d().createElement("div",{className:"jp-AIChat-message jp-AIChat-assistantMessage"},d().createElement("div",{className:"jp-AIChat-messageContent jp-AIChat-loading"},"思考中...")),d().createElement("div",{ref:c})),d().createElement("div",{className:"jp-AIChat-inputArea"},d().createElement("textarea",{className:"jp-AIChat-input",value:r,onChange:e=>n(e.target.value),onKeyPress:e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),i())},placeholder:"输入您的问题...",disabled:l}),d().createElement("button",{className:"jp-AIChat-sendButton",onClick:i,disabled:l||!r.trim()},"发送")))};class x extends n.ReactWidget{constructor(e={}){super(),this.addClass("jp-AIChat-widget"),this.id="jupyterchatz-chat",this.title.label="AI 助手",this.title.closable=!0,this.fileBrowserFactory=e.fileBrowserFactory,this.documentManager=e.documentManager,this.editorTracker=e.editorTracker,this.notebookTracker=e.notebookTracker,console.log("ChatWidget 构造函数中的服务:"),console.log("- fileBrowserFactory:",this.fileBrowserFactory),console.log("- documentManager:",this.documentManager),console.log("- editorTracker:",this.editorTracker),console.log("- notebookTracker:",this.notebookTracker)}render(){return d().createElement(f,{fileBrowserFactory:this.fileBrowserFactory,documentManager:this.documentManager,editorTracker:this.editorTracker,notebookTracker:this.notebookTracker})}}const w={id:"jupyterchatz:plugin",description:"JupyterLab的AI聊天助手扩展",autoStart:!0,requires:[n.ICommandPalette],optional:[r.ILayoutRestorer,l.IMainMenu,a.IFileBrowserFactory,s.IDocumentManager,c.IEditorTracker,i.INotebookTracker],activate:(e,t,o,r,l,a,s,c)=>{console.log("JupyterLab扩展jupyterchatz已激活!"),console.log("插件激活时接收到的服务:"),console.log("- fileBrowserFactory:",l),console.log("- documentManager:",a),console.log("- editorTracker:",s),console.log("- notebookTracker:",c);const i=new n.WidgetTracker({namespace:"jupyterchatz-tracker"}),u="jupyterchatz:open";e.commands.addCommand(u,{label:"打开AI助手",execute:()=>{let t=null;return i.currentWidget&&(t=i.currentWidget),t?(e.shell.activateById(t.id),t):(t=new x({fileBrowserFactory:l,documentManager:a,editorTracker:s,notebookTracker:c}),e.shell.add(t,"right",{rank:1e3}),i.add(t),t)}}),t.addItem({command:u,category:"AI助手"}),r&&r.helpMenu.addGroup([{command:u}]),o&&o.restore(i,{command:u,name:()=>"jupyterchatz"})}}}]]);