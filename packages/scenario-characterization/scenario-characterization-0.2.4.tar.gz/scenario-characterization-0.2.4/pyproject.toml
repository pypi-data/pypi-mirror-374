[build-system]
requires = ["setuptools==67.6.0", "wheel==0.45.1"]
build-backend = "setuptools.build_meta"

[project]
name = "scenario-characterization"
version = "0.2.4"
authors = [
    {name="Ingrid Navarro", email="ingridn@cmu.edu"},
]
description = "Automated Scenario Characterization Toolkit."
readme = "README.md"
requires-python = ">=3.10, <3.14"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: POSIX :: Linux",
]
license = {file = "LICENSE"}
dependencies = [
   "colorlog>=6.9.0",
   "hydra-core>=1.3.2",
   "joblib>=1.5.1",
   "natsort>=8.4.0",
   "numpy>=1.21.5",
   "omegaconf>=2.3.0",
   "pandas>=1.5.3",
   "pydantic>=2.9.5",
   "rich>=13.9.4",
   "scipy>=1.9.1",
   "seaborn>=0.12.0",
   "shapely>=2.0.7",
   "torch>=2.3.1",
   "tqdm>=4.67.1",
]
keywords = ["Trajectory Datasets", "Safety Metrics", "Characterization"]

[project.optional-dependencies]
viz = [
    "matplotlib>=3.6.1",
    "seaborn>=0.12.0",
]
dev = [
    "pre-commit>=4.2.0",
]
# Optional dependency 'waymo' only supported in Python 3.10
waymo = [
    "tensorflow==2.11; python_version=='3.10'",
    "waymo-open-dataset-tf-2-11-0>=1.6.1; python_version=='3.10'",
]

[projec.urls]
Homepage = "https://navars.xyz/safeshift/"
Repository = "https://github.com/navarrs/ScenarioCharacterization"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["docs", "scripts", "tmp", "samples", "assets"]

[tool.setuptools.package-data]
"characterization" = ["**/*.yaml"]

[tool.setuptools]
include-package-data = true

[tool.ruff]
lint.extend-select = ["I"]
fix = true
exclude = [
    "src/scripts",
    "src/characterization/utils/datasets/waymo_preprocess.py",
    "src/characterization/examples",
    # TODO: re-nable checks for files below:
    "src/characterization/utils/datasets/waymo.py",
    "src/characterization/utils/viz/utils.py",
    "src/characterization/utils/viz/visualizer.py",
    "src/characterization/utils/viz/waymo.py",
    "src/characterization/utils/common.py",
    "src/characterization/features/individual_utils.py",
    "src/characterization/features/interaction_utils.py",
    "src/characterization/features/safeshift_features.py",
]
line-length = 120
target-version = "py312"
lint.ignore = [
    # keep-sorted start
    "C901",             # too complex
    "COM812",           #
    "D100",             # missing docstring in public module
    "D104",             # missing docstring in public package
    "FIX002",           # line contains TODO
    "ERA001",           # eradicate: remove commented-out code
    "PLR0913",          # too many arguments in function definition
    "PLR0915",          # too many statements
    "PTH",              # use pathlib instead of os, re-enable later
    "TD003",            # missing issue
    "TC001",            # move application import into a type-checking block
    "TC002",            # move import into a type-checking block
    "TD",               # ignore all TODO rules, re-enable later.
    "S101",             # use of assert detected
    "S301",             # pickle load
    "W293",             # blank line contains whitespace
    # keep-sorted end
]
lint.select = ["ALL"]
lint.fixable = ["ALL"]
lint.unfixable = [
    # keep-sorted start
    "ERA001",           # eradicate: remove commented-out code
    "F401",             # pyflakes: unused import
    "F841",             # pyflakes: unused variable
    "RUF100",           # unused noqa
    # keep-sorted end
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.flake8]
line-length = 120

[tool.deptry]
exclude = [
    "tmp", "src/scripts"
]

[tool.deptry.package_module_name_map]
waymo-open-dataset-tf-2-11-0 = "waymo_open_dataset"
tensorflow = "tensorflow"

[tool.deptry.per_rule_ignores]
DEP002 = [
    "deptry",
    "duckdb",
    "pre-commit",
    "black",
    "tensorflow"
]

[tool.pyright]
pythonVersion = "3.12"
include = ["src"]
exclude = [
    "tmp/**",
    "src/scripts",
    "src/characterization/utils/datasets/waymo_preprocess.py",
    "**/__pycache__",
]
ignore = ["tmp/**"]
typeCheckingMode = "strict"
# Disable support for '# type: ignore' in favor of '# pyright: ignore'
enableTypeIgnoreComments = false
# Disable rules that error if types are partially known.
reportUnknownParameterType = false
reportUnknownArgumentType = false      # Argument type could not be inferred
reportUnknownVariableType = false      # Variable type could not be inferred
reportUnknownMemberType = false        # Attribute exists but type is unknown
reportUnusedCallResult = false         # Disable check for call statements whose return value is not None and is not used.
deprecateTypingAliases = true          # Check for deprecated typing aliases

# --- Tier 1: Critical (make these errors) ---
reportMissingImports = "none"              # Import cannot be resolved â†’ runtime ImportError (TODO: resolve)
reportArgumentType = "error"               # Function call arg type mismatch
reportCallIssue = "error"                  # Wrong number of args / invalid call
reportIncompatibleMethodOverride = "error" # Subclass overrides with incompatible signature
reportPossiblyUnboundVariable = "error"    # Variable may be used before assignment
reportOptionalMemberAccess = "error"        # Accessing attribute on possibly None
reportOptionalOperand = "none"             # Using arithmetic/logical op on possibly None
reportOptionalSubscript = "none"           # Indexing a possibly None value
reportMissingTypeArgument = "error"        # Generic used without type args (e.g., list vs list[int])
reportInvalidTypeForm = "none"             # Invalid type expression (unsupported or malformed)

# --- Tier 2: Important but can start as warnings ---
reportUntypedFunction = "none"          # Function missing type annotations
reportUntypedBaseClass = "none"         # Inheriting from untyped base class
reportUntypedFunctionDecorator = "none" # Decorator has no type info
reportMissingParameterType = "none"     # Parameter missing explicit type
reportAttributeAccessIssue = "none"

# --- Tier 3: Style / not critical (better handled by Ruff or ignorable) ---
reportUnusedImports = "none"             # Unused imports (Ruff handles this faster)
reportUnnecessaryComparison = "none"     # Comparison always true/false (rare style smell)
reportMissingModuleSource = "none"       # Module has stub but no source (informational only)
