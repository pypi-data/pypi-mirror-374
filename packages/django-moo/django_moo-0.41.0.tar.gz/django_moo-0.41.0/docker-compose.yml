---
# A complete deployment of django-moo includes a number of containers. While the compose file
# covers everything needed for a typical deployment, the components can also be deployed in a
# more typically high-availability cloud environment.
services:
  # The `nginx` container provides trivial routing to three different things:
  #
  # * Routing `/` to the `webssh` container
  # * Routing `/admin/` to the `webapp` container
  # * Static assets (`/static/`) generated for the Django application
  #
  # In a fully productionalized deployment, this tier would likely be replaced with an S3 bucket
  # for static assets, and some kind of load balancer for routing.
  nginx:
    build:
      context: extras/nginx
      dockerfile: Dockerfile
    image: nginx:1.27.3-snakeoil
    volumes:
      - ./extras/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 443:443
    links:
      - webapp
  # The `webssh` container runs a deployment of the [webssh](https://github.com/huashengdun/webssh) UI.
  # This has a modified configuration that can only connect to the local `shell` container.
  #
  # While it's not strictly necessary to use this interface, it provides access to users who may not
  # be able to connect over non-web ports.
  webssh:
    build:
      context: .
      dockerfile: Dockerfile
    image: philchristensen/moo:latest
    command: [webssh]
    ports:
      - 8422:8422
    volumes:
      - ./extras/webssh/index.html:/usr/local/lib/python3.11/site-packages/webssh/templates/index.html
    links:
      - shell
  # The `webapp` container is where the Django front-end runs. So far this is only needed for access to the Django admin.
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    image: philchristensen/moo:latest
    ports:
      - 8443:8443
    links:
      - postgres
      - redis
    environment:
      DJANGO_SETTINGS_MODULE: moo.settings.local
  # The `celery` container runs a single Celery worker, along with the Beat scheduler.
  # Note that in production, you'll want to run multiple workers for better performance,
  # and you'll want to run the scheduler separately.
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: philchristensen/moo:latest
    command: [celery]
    links:
      - postgres
      - redis
    environment:
      DJANGO_SETTINGS_MODULE: moo.settings.local
  # The `shell` container runs the SSH server that displays the MOO interface.
  # As part of the Dockerfile we create pregenerate an SSH host file that's used
  # by the webssh container to restrict connections to this host.
  shell:
    build:
      context: .
      dockerfile: Dockerfile
    image: philchristensen/moo:latest
    command: [manage.py, moo_shell]
    ports:
      - 8022:8022
    links:
      - postgres
      - redis
    environment:
      DJANGO_SETTINGS_MODULE: moo.settings.local
  # The PostgreSQL database needs to define a moo user with an appropriate password.
  # This is a simple deployment, so we're not using a production-ready PostgreSQL container.
  postgres:
    image: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: moo
      POSTGRES_USER: moo
      POSTGRES_DB: moo
  # Redis provides the queueing system Celery uses to run background tasks.
  # It also provides a cache for the Django application.
  redis:
    image: redis
    ports:
      - 6379:6379
