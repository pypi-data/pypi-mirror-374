name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build-test:
    name: build & test (${{ matrix.os }} / py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip & install build deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Install package (editable)
        run: |
          python -m pip install -e .[dev]

      - name: Build sdist & wheel
        run: |
          python -m build

      - name: Test MDL Parser Import
        run: |
          echo "Testing MDL parser import..."
          python -c "from minecraft_datapack_language.mdl_parser import MDLParser; print('[+] MDL parser imported successfully')"

      - name: Test MDL Lexer Import
        run: |
          echo "Testing MDL lexer import..."
          python -c "from minecraft_datapack_language.mdl_lexer import MDLLexer; print('[+] MDL lexer imported successfully')"

      - name: Test AST Nodes Import
        run: |
          echo "Testing AST nodes import..."
          python -c "from minecraft_datapack_language.ast_nodes import Program, PackDeclaration; print('[+] AST nodes imported successfully')"

      - name: Test Error Classes Import
        run: |
          echo "Testing error classes import..."
          python -c "from minecraft_datapack_language.mdl_errors import MDLLexerError, MDLParserError; print('[+] Error classes imported successfully')"

      - name: Test Python API
        run: |
          echo "Testing Python API functionality..."
          python - <<'PY'
          from minecraft_datapack_language import Pack
          p = Pack('test', 'Test pack', 15)
          ns = p.namespace('test')
          ns.function('test_func', 'say Hello World')
          print('[+] Python API test passed')
          PY

      - name: Test MDL Parsing
        run: |
          echo "Testing MDL parsing..."
          python -c "from minecraft_datapack_language.mdl_parser import MDLParser; print('[+] MDL parser imported successfully')"

      - name: Test Variable System
        run: |
          echo "Testing variable system..."
          python - <<'PY'
          from minecraft_datapack_language.mdl_parser import MDLParser
          parser = MDLParser()
          test_code = 'var num test_var<@s> = 0;'
          ast = parser.parse(test_code)
          print('[+] Variable system test passed')
          PY

      - name: Test Control Flow
        run: |
          echo "Testing control flow..."
          python - <<'PY'
          from minecraft_datapack_language.mdl_parser import MDLParser
          parser = MDLParser()
          test_code = 'if $test<@s>$ > 0 { say "test"; }'
          ast = parser.parse(test_code)
          print('[+] Control flow test passed')
          PY

      - name: Test While Loops
        run: |
          echo "Testing while loops..."
          python - <<'PY'
          from minecraft_datapack_language.mdl_parser import MDLParser
          parser = MDLParser()
          test_code = 'while $counter<@s>$ < 10 { counter<@s> = $counter<@s>$ + 1; }'
          ast = parser.parse(test_code)
          print('[+] While loops test passed')
          PY

      - name: Test Error Handling
        run: |
          echo "Testing error handling..."
          python - <<'PY'
          from minecraft_datapack_language.mdl_parser import MDLParser
          parser = MDLParser()
          try:
              parser.parse('invalid syntax {')
              print('[-] Should have failed')
          except:
              print('[+] Error handling test passed')
          PY

      - name: Test CLI Module Import
        run: |
          echo "Testing CLI module import..."
          python -c "from minecraft_datapack_language.cli import main; print('[+] CLI module imported successfully')"

      - name: Test Basic MDL File
        run: |
          echo "Testing basic MDL file parsing..."
          python - <<'PY'
          from minecraft_datapack_language.mdl_parser import MDLParser
          parser = MDLParser()
          test_code = '''
          pack "test" "Test pack" 15;
          namespace "test";
          var num counter<@s> = 0;
          function test:main<@s> {
              counter<@s> = 0;
              while $counter<@s>$ < 5 {
                  counter<@s> = $counter<@s>$ + 1;
                  say "Counter: $counter<@s>$";
              }
          }
          on_tick test:main;
          '''
          ast = parser.parse(test_code)
          print('[+] Basic MDL file test passed')
          PY

      - name: Run Comprehensive End-to-End Tests
        run: |
          echo "Running comprehensive end-to-end tests..."
          python test_comprehensive_end_to_end.py
          
      - name: Run Complex Scenario Tests
        run: |
          echo "Running complex scenario tests..."
          python test_complex_scenarios.py

      - name: Run Compiler Fix Tests
        run: |
          echo "Running compiler fix tests..."
          python test_compiler_fixes.py

      - name: Test Compiler Fixes with MDL Files
        run: |
          echo "Testing compiler fixes with MDL files..."
          
          # Test complex expressions
          echo "Testing complex expressions..."
          python -c "
          from minecraft_datapack_language.mdl_parser import MDLParser
          from minecraft_datapack_language.mdl_compiler import MDLCompiler
          import tempfile
          from pathlib import Path
          
          source = '''
          pack \"test\" \"Test pack\" 82;
          namespace \"test\";
          var num counter<@s> = 0;
          var num health<@s> = 20;
          var num bonus<@s> = 5;
          function test:complex_math<@s> {
              counter<@s> = (\$counter<@s>\$ + \$health<@s>\$) * \$bonus<@s>\$;
          }
          '''
          
          parser = MDLParser()
          ast = parser.parse(source)
          
          with tempfile.TemporaryDirectory() as temp_dir:
              compiler = MDLCompiler(temp_dir)
              compiler.compile(ast)
              output_file = Path(temp_dir) / 'data' / 'test' / 'function' / 'complex_math.mcfunction'
              if output_file.exists():
                  content = output_file.read_text()
                  if 'scoreboard players set @s temp_' in content:
                      print('[+] Complex expressions working correctly')
                  else:
                      print('[-] Complex expressions not working')
                      exit(1)
              else:
                  print('[-] Output file not created')
                  exit(1)
          "
          
          # Test control flow
          echo "Testing control flow..."
          python -c "
          from minecraft_datapack_language.mdl_parser import MDLParser
          from minecraft_datapack_language.mdl_compiler import MDLCompiler
          import tempfile
          from pathlib import Path
          
          source = '''
          pack \"test\" \"Test pack\" 82;
          namespace \"test\";
          var num counter<@s> = 0;
          function test:control_test<@s> {
              if \$counter<@s>\$ > 5 {
                  say \"High counter!\";
              } else if \$counter<@s>\$ > 2 {
                  say \"Medium counter!\";
              } else {
                  say \"Low counter!\";
              }
              while \$counter<@s>\$ < 10 {
                  counter<@s> = \$counter<@s>\$ + 1;
              }
          }
          '''
          
          parser = MDLParser()
          ast = parser.parse(source)
          
          with tempfile.TemporaryDirectory() as temp_dir:
              compiler = MDLCompiler(temp_dir)
              compiler.compile(ast)
              output_file = Path(temp_dir) / 'data' / 'test' / 'function' / 'control_test.mcfunction'
              if output_file.exists():
                  content = output_file.read_text()
                  if 'execute if score' in content and 'function test:while_' in content:
                      print('[+] Control flow working correctly')
                  else:
                      print('[-] Control flow not working')
                      exit(1)
              else:
                  print('[-] Output file not created')
                  exit(1)
          "
          
          # Test function execution
          echo "Testing function execution..."
          python -c "
          from minecraft_datapack_language.mdl_parser import MDLParser
          from minecraft_datapack_language.mdl_compiler import MDLCompiler
          import tempfile
          from pathlib import Path
          
          source = '''
          pack \"test\" \"Test pack\" 82;
          namespace \"test\";
          function test:helper<@s> {
              say \"Helper function!\";
          }
          function test:main<@s> {
              exec test:helper;
              exec test:helper<@s>;
              exec test:helper<@a>;
          }
          '''
          
          parser = MDLParser()
          ast = parser.parse(source)
          
          with tempfile.TemporaryDirectory() as temp_dir:
              compiler = MDLCompiler(temp_dir)
              compiler.compile(ast)
              main_file = Path(temp_dir) / 'data' / 'test' / 'function' / 'main.mcfunction'
              if main_file.exists():
                  content = main_file.read_text()
                  if 'function test:helper' in content and 'execute as @s run function test:helper' in content:
                      print('[+] Function execution working correctly')
                  else:
                      print('[-] Function execution not working')
                      exit(1)
              else:
                  print('[-] Output file not created')
                  exit(1)
          "
          
          print('[+] All compiler fix tests passed!')

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*
          if-no-files-found: error

  comprehensive-tests:
    name: comprehensive tests
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install package (editable)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev]

      - name: Run All Comprehensive Tests
        run: |
          echo "Running comprehensive feature tests..."
          python test_comprehensive_end_to_end.py
          
      - name: Run Complex Scenario Tests
        run: |
          echo "Running complex scenario tests..."
          python test_complex_scenarios.py
          
      - name: Run All Test Suites
        run: |
          echo "Running all test suites..."
          python test_comprehensive_end_to_end.py && python test_complex_scenarios.py
