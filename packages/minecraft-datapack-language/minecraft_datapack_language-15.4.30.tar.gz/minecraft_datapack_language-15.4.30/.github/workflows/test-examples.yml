name: Test Examples

on:
  push:
    branches: [ main ]
    paths: [ 'test_examples/**', '.github/workflows/test-examples.yml', 'minecraft_datapack_language/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'test_examples/**', '.github/workflows/test-examples.yml', 'minecraft_datapack_language/**' ]

jobs:
  test-examples:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pipx
      run: |
        python -m pip install --user pipx
        python -m pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install MDL via pipx
      run: |
        pipx install minecraft-datapack-language
        
    - name: Verify MDL installation
      run: |
        mdl --help
        mdl --version || echo "Version command not available"
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pytest
        
    - name: Set unique output directories
      run: |
        # Create unique output directories to prevent race conditions
        export UNIQUE_OUTPUT_DIR="test_examples/dist_${GITHUB_RUN_ID}_${GITHUB_JOB}"
        export UNIQUE_TEST_OUTPUT_DIR="test_examples/test_output_${GITHUB_RUN_ID}_${GITHUB_JOB}"
        echo "UNIQUE_OUTPUT_DIR=$UNIQUE_OUTPUT_DIR" >> $GITHUB_ENV
        echo "UNIQUE_TEST_OUTPUT_DIR=$UNIQUE_TEST_OUTPUT_DIR" >> $GITHUB_ENV
        echo "Using unique output directory: $UNIQUE_OUTPUT_DIR"
        echo "Using unique test output directory: $UNIQUE_TEST_OUTPUT_DIR"
        
    - name: Test working MDL examples
      run: |
        echo "Testing working MDL examples..."
        
        # List all MDL files first
        echo "Available MDL files:"
        ls -la test_examples/*.mdl || echo "No MDL files found in test_examples/"
        
        # Test each working MDL file
        for file in test_examples/*.mdl; do
          if [[ -f "$file" ]]; then
            echo "Testing $file"
            mdl check "$file"
            mdl build --mdl "$file" -o "$UNIQUE_OUTPUT_DIR"
          else
            echo "No MDL files found to test"
            exit 1
          fi
        done
        
    - name: Run test suite
      run: |
        echo "Running basic test suite..."
        python -m pytest tests/test_basic.py -v
        
    - name: Run comprehensive output validation tests
      run: |
        echo "Running comprehensive output validation tests..."
        # Set the unique test output directory for the validation script
        export TEST_OUTPUT_DIR="$UNIQUE_TEST_OUTPUT_DIR"
        python test_examples/test_output_validation.py
        
    - name: Test CLI functionality
      run: |
        echo "Testing CLI functionality..."
        
        # Test help
        mdl --help
        
        # Test new command
        mdl new cli_test --name "CLI Test" --pack-format 82
        
        # Verify created project
        ls -la cli_test/
        cat cli_test/*.mdl
        
        # Test check and build
        mdl check cli_test/
        mdl build --mdl cli_test/ -o "$UNIQUE_OUTPUT_DIR"
        
        # Clean up
        rm -rf cli_test/
        
    - name: Test Python API
      run: |
        echo "Testing Python API compatibility..."
        
        # Test basic Pack creation
        python -c "
        from minecraft_datapack_language import Pack
        p = Pack('test', 'Test pack', 82)
        ns = p.namespace('test')
        ns.function('test_func', 'say Hello World')
        print('[+] Basic Pack creation works')
        "
        
        # Test function calls
        python -c "
        from minecraft_datapack_language import Pack
        p = Pack('test', 'Test pack', 82)
        ns = p.namespace('test')
        ns.function('helper', 'say Helper function')
        ns.function('main', 'say Main function', 'function test:helper')
        print('[+] Function calls work')
        "
        
        # Test lifecycle hooks
        python -c "
        from minecraft_datapack_language import Pack
        p = Pack('test', 'Test pack', 82)
        ns = p.namespace('test')
        ns.function('init', 'say Initializing')
        p.on_load('test:init')
        p.on_tick('test:init')
        print('[+] Lifecycle hooks work')
        "
        
        # Test tags
        python -c "
        from minecraft_datapack_language import Pack
        p = Pack('test', 'Test pack', 82)
        p.tag('function', 'minecraft:load', values=['test:init'])
        p.tag('function', 'minecraft:tick', values=['test:tick'])
        print('[+] Tags work')
        "
        
    - name: Verify generated datapacks
      run: |
        echo "Verifying generated datapacks..."
        ls -la "$UNIQUE_OUTPUT_DIR"/
        
        # Check that datapacks have the expected structure
        for dir in "$UNIQUE_OUTPUT_DIR"/*/; do
          if [[ -d "$dir" ]] && [[ "$(basename "$dir")" != "data" ]]; then
            echo "Checking datapack: $dir"
            ls -la "$dir"
            
            # Check for pack.mcmeta
            if [[ -f "$dir/pack.mcmeta" ]]; then
              echo "[+] pack.mcmeta found in $dir"
            else
              echo "[-] pack.mcmeta missing in $dir"
              exit 1
            fi
            
            # Check for data directory
            if [[ -d "$dir/data" ]]; then
              echo "[+] data directory found in $dir"
            else
              echo "[-] data directory missing in $dir"
              exit 1
            fi
          fi
        done
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-datapacks-${{ github.run_id }}-${{ github.job }}
        path: ${{ env.UNIQUE_OUTPUT_DIR }}/
        retention-days: 7
