"""
Utility functions for FastestMCP CLI
"""

from .generators import generate_tools_file, generate_resources_file, generate_prompts_file, generate_notifications_file_wrapper, generate_subscriptions_file_wrapper
from .test_generator import generate_test_file

def generate_pyproject_toml(name: str, server_type: str, transport: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, structure: str = 'mono') -> str:
    """Generate pyproject.toml with appropriate dependencies for server"""
    # Convert name to valid Python package name
    package_name = name.replace('-', '_')

    dependencies = []

    if server_type == 'fastmcp':
        dependencies.append('fastmcp>=2.12.0')
    else:
        dependencies.append('mcp>=1.0.0')

    # Add transport-specific dependencies
    if transport == 'http':
        dependencies.extend([
            'httpx>=0.28.0',
            'fastapi>=0.100.0',
            'uvicorn>=0.20.0'
        ])
    elif transport == 'sse':
        dependencies.append('sse-starlette>=1.6.0')

    # Add additional dependencies based on complexity
    if tools > 3:
        dependencies.append('pydantic>=2.0.0')

    if resources > 2:
        dependencies.append('requests>=2.31.0')

    # Add test dependencies
    test_dependencies = [
        'pytest>=7.0.0',
        'pytest-asyncio>=0.21.0',
        'pytest-cov>=4.0.0',
        'pytest-mock>=3.10.0'
    ]

    # Add test dependencies to main dependencies for mono-file projects
    if structure == 'mono':
        dependencies.extend(test_dependencies)

    dependencies_str = '\n'.join(f'    "{dep}",' for dep in dependencies)

    # Create test dependencies string for structured projects
    test_dependencies_str = '\n'.join(f'    "{dep}",' for dep in test_dependencies)

    if structure == 'structured':
        # For structured projects, include scripts and package info
        toml_content = f'''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{name}"
version = "0.1.0"
description = "MCP Server generated by FastestMCP CLI"
authors = [
    {{name = "FastestMCP CLI", email = "cli@fastestmcp.dev"}},
]
dependencies = [
{dependencies_str}
]
requires-python = ">=3.10"
readme = "README.md"

[project.optional-dependencies]
test = [
{test_dependencies_str}
]
dev = [
{test_dependencies_str}
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0"
]

[project.scripts]
{name} = "{package_name}.main:main"

[tool.setuptools]
packages = ["{package_name}"]

[tool.setuptools.package-dir]
"{package_name}" = "."

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "strict"
addopts = "-v --tb=short --cov={package_name} --cov-report=term-missing"

[tool.coverage.run]
source = ["{package_name}"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 88
target-version = ["py38"]
include = "\\\\.pyi?$"
extend-exclude = """
/(
  # directories
  \\\\.eggs
  | \\\\.git
  | \\\\.hg
  | \\\\.mypy_cache
  | \\\\.tox
  | \\\\.venv
  | build
  | dist
)/
"""

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
'''
    else:
        # For mono-file projects, simpler structure
        toml_content = f'''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{name}"
version = "0.1.0"
description = "MCP Server generated by FastestMCP CLI"
authors = [
    {{name = "FastestMCP CLI", email = "cli@fastestmcp.dev"}},
]
dependencies = [
{dependencies_str}
]
requires-python = ">=3.10"
readme = "README.md"

[project.scripts]
{name} = "{package_name}:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "strict"
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
'''

    return toml_content


def generate_test_file_for_project(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, structure: str = 'mono') -> str:
    """Generate test file for the MCP server project"""
    return generate_test_file(name, tools, resources, prompts, notifications, subscriptions, structure)


def generate_main_py(name: str, server_type: str) -> str:
    """Generate main.py file for structured server projects"""
    package_name = name.replace('-', '_')

    if server_type == 'fastmcp':
        code = f'''#!/usr/bin/env python3
"""
{name} - Main entry point
Generated by FastestMCP CLI
"""

import asyncio
from {package_name}.server import app

async def main():
    """Main execution function"""
    # Run the MCP server
    await app.run()

if __name__ == "__main__":
    asyncio.run(main())
'''
    else:
        code = f'''#!/usr/bin/env python3
"""
{name} - Main entry point
Generated by FastestMCP CLI
"""

import asyncio
from {package_name}.server import app

async def main():
    """Main execution function"""
    # Run the MCP server
    await app.run_stdio_async()

if __name__ == "__main__":
    asyncio.run(main())
'''

    return code


def generate_http_server_file(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, server_type: str) -> str:
    """Generate HTTP server file for structured layout"""
    code = f'''#!/usr/bin/env python3
"""
{name}/server.py - HTTP MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

from fastapi import FastAPI
from mcp.server.fastmcp import FastMCP
from . import tools, resources

# Create FastAPI app
app = FastAPI(title=f"{name} MCP Server")

# Create MCP server
mcp = FastMCP(f"{name} MCP Server")

# Register tools and resources
tools.register_tools(mcp)
resources.register_resources(mcp)

# Mount MCP server on FastAPI
app.mount("/mcp", mcp.app)

@app.get("/")
async def root():
    """Root endpoint"""
    return {{"message": "MCP Server running", "name": "{name}"}}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''

    return code


def generate_stdio_server_file(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, server_type: str) -> str:
    """Generate Stdio server file for structured layout"""
    code = f'''#!/usr/bin/env python3
"""
{name}/server.py - Stdio MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

import sys
import os
from mcp.server.fastmcp import FastMCP

# Dynamic imports to handle testing scenarios
def load_tools_module():
    """Load tools module dynamically"""
    tools_path = os.path.join(os.path.dirname(__file__), "tools.py")
    import importlib.util
    spec = importlib.util.spec_from_file_location("tools", tools_path)
    tools_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(tools_module)
    return tools_module

def load_resources_module():
    """Load resources module dynamically"""
    resources_path = os.path.join(os.path.dirname(__file__), "resources.py")
    import importlib.util
    spec = importlib.util.spec_from_file_location("resources", resources_path)
    resources_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(resources_module)
    return resources_module

# Load modules
tools = load_tools_module()
resources = load_resources_module()

# Create MCP server
app = FastMCP(f"{name} MCP Server")

# Register tools and resources
tools.register_tools(app)
resources.register_resources(app)

if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
'''

    return code


def generate_modular_app_components(app_dir, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str):
    """Generate modular app components"""
    files_created = []

    # Generate tools.py
    tools_file = app_dir / "tools.py"
    tools_code = generate_tools_file(tools, server_type)
    with open(tools_file, 'w') as f:
        f.write(tools_code)
    files_created.append("app/tools.py")

    # Generate resources.py
    resources_file = app_dir / "resources.py"
    resources_code = generate_resources_file(resources, server_type)
    with open(resources_file, 'w') as f:
        f.write(resources_code)
    files_created.append("app/resources.py")

    # Generate prompts.py if prompts > 0
    if prompts > 0:
        prompts_file = app_dir / "prompts.py"
        prompts_code = generate_prompts_file(prompts, server_type)
        with open(prompts_file, 'w') as f:
            f.write(prompts_code)
        files_created.append("app/prompts.py")

    # Generate notifications.py if notifications > 0
    if notifications > 0:
        notifications_file = app_dir / "notifications.py"
        notifications_code = generate_notifications_file_wrapper(notifications, server_type)
        with open(notifications_file, 'w') as f:
            f.write(notifications_code)
        files_created.append("app/notifications.py")

    # Generate subscriptions.py if subscriptions > 0
    if subscriptions > 0:
        subscriptions_file = app_dir / "subscriptions.py"
        subscriptions_code = generate_subscriptions_file_wrapper(subscriptions, server_type)
        with open(subscriptions_file, 'w') as f:
            f.write(subscriptions_code)
        files_created.append("app/subscriptions.py")

    return files_created


def generate_server_folder_markdown(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str, files: list) -> str:
    """Generate markdown representation of server folder structure"""
    structure = f"""
```
{name}/
├── main.py               # Main entry point
├── server.py              # Main server file
├── __init__.py           # Package initialization
├── tools.py              # Tool definitions ({tools} tools)
├── resources.py          # Resource definitions ({resources} resources)
"""

    if prompts > 0:
        structure += f"""├── prompts.py            # Prompt definitions ({prompts} prompts)
"""

    structure += """├── app/                  # Modular application components
│   └── __init__.py
├── README.md             # Documentation
"""

    if transport == 'http':
        structure += """├── config_http.py        # HTTP transport config
"""
    elif transport == 'sse':
        structure += """├── config_sse.py         # SSE transport config
"""

    structure += """└── pyproject.toml        # Project configuration
```

**Generated Files:**
"""
    for file in files:
        structure += f"- `{file}`\n"

    structure += f"""
**Server Details:**
- Tools: {tools}
- Resources: {resources}
- Prompts: {prompts}
- Notifications: {notifications}
- Subscriptions: {subscriptions}
- Transport: {transport}
- Type: {server_type}
"""

    return structure


def generate_client_pyproject_toml(name: str, client_type: str, transport: str, apis: int, integrations: int, handlers: int, notifications: int, subscriptions: int, structure: str = 'mono') -> str:
    """Generate pyproject.toml with appropriate dependencies for client"""
    # Convert name to valid Python package name
    package_name = name.replace('-', '_')

    dependencies = []

    if client_type == 'fastmcp':
        dependencies.append('fastmcp>=2.12.0')
    else:
        dependencies.append('mcp>=1.0.0')

    # Add transport-specific dependencies
    if transport == 'http':
        dependencies.extend([
            'httpx>=0.28.0',
            'fastapi>=0.100.0',
            'uvicorn>=0.20.0'
        ])
    elif transport == 'websocket':
        dependencies.extend([
            'websockets>=11.0.0'
        ])

    # Add additional dependencies based on complexity
    if apis > 2:
        dependencies.append('pydantic>=2.0.0')

    if integrations > 1:
        dependencies.append('requests>=2.31.0')

    dependencies_str = '\n'.join(f'    "{dep}",' for dep in dependencies)

    if structure == 'structured':
        # For structured projects, include scripts and package info
        toml_content = f'''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{name}-client"
version = "0.1.0"
description = "MCP Client generated by FastestMCP CLI"
authors = [
    {{name = "FastestMCP CLI", email = "cli@fastestmcp.dev"}},
]
dependencies = [
{dependencies_str}
]
requires-python = ">=3.10"
readme = "README.md"

[project.scripts]
{name}-client = "{package_name}_client.main:main"

[tool.setuptools]
packages = ["{package_name}_client"]

[tool.setuptools.package-dir]
"{package_name}_client" = "."

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 88
target-version = ["py38"]
include = "\\\\.pyi?$"
extend-exclude = """
/(
  # directories
  \\\\.eggs
  | \\\\.git
  | \\\\.hg
  | \\\\.mypy_cache
  | \\\\.tox
  | \\\\.venv
  | build
  | dist
)/
"""

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
'''
    else:
        # For mono-file projects, simpler structure
        toml_content = f'''[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{name}-client"
version = "0.1.0"
description = "MCP Client generated by FastestMCP CLI"
authors = [
    {{name = "FastestMCP CLI", email = "cli@fastestmcp.dev"}},
]
dependencies = [
{dependencies_str}
]
requires-python = ">=3.10"
readme = "README.md"

[project.scripts]
{name} = "{name}:main"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
'''

    return toml_content