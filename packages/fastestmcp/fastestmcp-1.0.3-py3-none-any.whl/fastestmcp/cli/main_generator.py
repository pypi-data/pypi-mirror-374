"""
Main server generation orchestration for FastestMCP CLI
"""

from pathlib import Path

from .mono_server_generator import generate_mono_server_file, generate_mono_test_file
from .utils import generate_pyproject_toml, generate_test_file_for_project
from .generators import generate_tools_file, generate_resources_file, generate_prompts_file, generate_notifications_file_wrapper, generate_subscriptions_file_wrapper


def generate_clean_server_file(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str) -> str:
    """Generate a clean server file for the organized structure"""
    code = f'''#!/usr/bin/env python3
"""
{name}/src/server.py - Clean MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

import sys
import os
from mcp.server.fastmcp import FastMCP

# Add components to path
sys.path.insert(0, os.path.dirname(__file__))

# Dynamic imports from components
def load_components():
    """Load all component modules dynamically"""
    components = {{}}

    # Load tools
    if {tools} > 0:
        try:
            from components import tools
            components['tools'] = tools
        except ImportError:
            pass

    # Load resources
    if {resources} > 0:
        try:
            from components import resources
            components['resources'] = resources
        except ImportError:
            pass

    # Load prompts
    if {prompts} > 0:
        try:
            from components import prompts
            components['prompts'] = prompts
        except ImportError:
            pass

    # Load notifications
    if {notifications} > 0:
        try:
            from components import notifications
            components['notifications'] = notifications
        except ImportError:
            pass

    # Load subscriptions
    if {subscriptions} > 0:
        try:
            from components import subscriptions
            components['subscriptions'] = subscriptions
        except ImportError:
            pass

    return components

# Load components
components = load_components()

# Create MCP server
app = FastMCP(f"{name} MCP Server")

# Register components
if 'tools' in components:
    components['tools'].register_tools(app)

if 'resources' in components:
    components['resources'].register_resources(app)

if 'prompts' in components:
    components['prompts'].register_prompts(app)

if 'notifications' in components:
    components['notifications'].register_notifications(app)

if 'subscriptions' in components:
    components['subscriptions'].register_subscriptions(app)

if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
'''

    # Add a visible TODO so generated servers include implementation guidance
    code += "\n# TODO: Customize initialization, logging, or component wiring for your deployment\n"

    return code


def generate_clean_component_files(components_dir, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, server_type: str):
    """Generate component files in the organized structure"""
    files_created = []

    # Generate tools.py
    if tools > 0:
        tools_file = components_dir / "tools.py"
        tools_code = generate_tools_file(tools, server_type)
        with open(tools_file, 'w') as f:
            f.write(tools_code)
        files_created.append("tools.py")

    # Generate resources.py
    if resources > 0:
        resources_file = components_dir / "resources.py"
        resources_code = generate_resources_file(resources, server_type)
        with open(resources_file, 'w') as f:
            f.write(resources_code)
        files_created.append("resources.py")

    # Generate prompts.py if prompts > 0
    if prompts > 0:
        prompts_file = components_dir / "prompts.py"
        prompts_code = generate_prompts_file(prompts, server_type)
        with open(prompts_file, 'w') as f:
            f.write(prompts_code)
        files_created.append("prompts.py")

    # Generate notifications.py if notifications > 0
    if notifications > 0:
        notifications_file = components_dir / "notifications.py"
        notifications_code = generate_notifications_file_wrapper(notifications, server_type)
        with open(notifications_file, 'w') as f:
            f.write(notifications_code)
        files_created.append("notifications.py")

    # Generate subscriptions.py if subscriptions > 0
    if subscriptions > 0:
        subscriptions_file = components_dir / "subscriptions.py"
        subscriptions_code = generate_subscriptions_file_wrapper(subscriptions, server_type)
        with open(subscriptions_file, 'w') as f:
            f.write(subscriptions_code)
        files_created.append("subscriptions.py")

    return files_created


def generate_clean_main_py(name: str, server_type: str) -> str:
    """Generate main.py for the organized structure"""
    code = f'''#!/usr/bin/env python3
"""
{name} - Main entry point
Generated by FastestMCP CLI
"""

import asyncio
import sys
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.server import app

async def main():
    """Main execution function"""
    # Run the MCP server
    await app.run_stdio_async()

if __name__ == "__main__":
    asyncio.run(main())
'''

    return code


def generate_clean_readme(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str) -> str:
    """Generate README.md for the organized structure"""
    readme = f'''# {name}

MCP Server generated by FastestMCP CLI

## Overview

This is a clean, organized MCP server with the following components:


## Project Structure

```
{name}/
├── main.py              # Main entry point
├── pyproject.toml       # Project configuration
├── README.md           # This file
├── src/                # Source code
│   ├── __init__.py
│   ├── server.py       # Main server file
│   └── components/     # All components
│       ├── __init__.py
│       ├── tools.py
│       ├── resources.py
│       ├── prompts.py
│       ├── notifications.py
│       └── subscriptions.py
└── tests/              # Test files
    ├── __init__.py
    └── test_server.py
```

## Installation

```bash
pip install -e .
```

## Running the Server

```bash
python main.py
```

## Running Tests

```bash
python -m pytest tests/
```

## Components

### Tools
The server provides {tools} tool(s) for various operations.

### Resources
The server exposes {resources} resource(s) for data access.

### Prompts
The server includes {prompts} prompt template(s) for AI interactions.

### Notifications
The server supports {notifications} notification type(s) for real-time updates.

### Subscriptions
The server provides {subscriptions} subscription handler(s) for streaming data.

## Development

This server was generated using FastestMCP CLI with a component-based architecture for easy maintenance and extension.

    ## TODO
    This README includes a TODO note for further enhancements.
'''

    return readme


def generate_clean_folder_markdown(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str, files: list) -> str:
    """Generate clean folder structure markdown"""
    structure = f"""
```
{name}/
├── main.py                    # Main entry point
├── pyproject.toml            # Project configuration
├── README.md                 # Documentation
├── src/                      # Source code directory
│   ├── __init__.py
│   ├── server.py             # Main server file
│   └── components/           # Component modules
│       ├── __init__.py
"""

    if tools > 0:
        structure += "│       ├── tools.py\n"
    if resources > 0:
        structure += "│       ├── resources.py\n"
    if prompts > 0:
        structure += "│       ├── prompts.py\n"
    if notifications > 0:
        structure += "│       ├── notifications.py\n"
    if subscriptions > 0:
        structure += "│       ├── subscriptions.py\n"

    structure += """└── tests/                   # Test directory
    ├── __init__.py
    └── test_server.py
```

**Generated Files:**
"""
    for file in files:
        structure += f"- `{file}`\n"

    structure += f"""
**Server Details:**
- Tools: {tools}
- Resources: {resources}
- Prompts: {prompts}
- Notifications: {notifications}
- Subscriptions: {subscriptions}
- Transport: {transport}
- Type: {server_type}
"""

    return structure


def generate_complex_server(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, structure: str, server_type: str, output_dir: str) -> tuple[str, str]:
    """Generate a server with specified component counts and structure"""
    base_path = Path(output_dir)

    if structure == 'mono':
        # Single file structure
        output_path = base_path / f"{name}.py"
        code = generate_mono_server_file(name, tools, resources, prompts, notifications, subscriptions, transport, server_type)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w') as f:
            f.write(code)

        # Generate test file for mono projects
        test_path = base_path / f"test_{name}.py"
        test_code = generate_mono_test_file(name, tools, resources, prompts, notifications, subscriptions)
        with open(test_path, 'w') as f:
            f.write(test_code)

        # Generate pyproject.toml for mono files
        pyproject_path = base_path / "pyproject.toml"
        pyproject_content = generate_pyproject_toml(name, server_type, transport, tools, resources, prompts, notifications, subscriptions, structure)
        with open(pyproject_path, 'w') as f:
            f.write(pyproject_content)

        folder_structure = f"""
```
{output_path.name}
test_{name}.py
pyproject.toml
```
"""
        return f"Mono-file server generated: {output_path}", folder_structure

    else:
        # Structured folder layout with clean organization
        server_dir = base_path / name
        server_dir.mkdir(parents=True, exist_ok=True)

        # Create src directory structure
        src_dir = server_dir / "src"
        src_dir.mkdir(exist_ok=True)

        # Create components directory
        components_dir = src_dir / "components"
        components_dir.mkdir(exist_ok=True)

        # Generate main server file in src/
        main_file = src_dir / "server.py"
        code = generate_clean_server_file(name, tools, resources, prompts, notifications, subscriptions, transport, server_type)
        with open(main_file, 'w') as f:
            f.write(code)

        # Generate __init__.py for src
        src_init = src_dir / "__init__.py"
        with open(src_init, 'w') as f:
            f.write(f'''"""
{server_dir.name} - MCP Server Package
Generated by FastestMCP CLI
"""

__version__ = "0.1.0"
''')

        # Generate __init__.py for components
        components_init = components_dir / "__init__.py"
        with open(components_init, 'w') as f:
            f.write('''"""MCP Server Components Package"""

__version__ = "0.1.0"
''')

        # Generate component files in components/ directory
        component_files = generate_clean_component_files(components_dir, tools, resources, prompts, notifications, subscriptions, server_type)

        # Generate main.py in root
        main_entry = server_dir / "main.py"
        main_content = generate_clean_main_py(name, server_type)
        with open(main_entry, 'w') as f:
            f.write(main_content)

        # Generate __init__.py in root directory
        root_init = server_dir / "__init__.py"
        with open(root_init, 'w') as f:
            f.write(f'''"""
{name} - MCP Server Package
Generated by FastestMCP CLI
"""

__version__ = "0.1.0"
''')

        # Generate tests directory and files
        tests_dir = server_dir / "tests"
        tests_dir.mkdir(exist_ok=True)

        # Generate __init__.py for tests
        test_init = tests_dir / "__init__.py"
        with open(test_init, 'w') as f:
            f.write('"""Tests for MCP Server"""\n')

        # Generate main test file
        test_file = tests_dir / "test_server.py"
        test_code = generate_test_file_for_project(name, tools, resources, prompts, notifications, subscriptions, structure)
        with open(test_file, 'w') as f:
            f.write(test_code)

        # Generate pyproject.toml
        pyproject_file = server_dir / "pyproject.toml"
        pyproject_content = generate_pyproject_toml(name, server_type, transport, tools, resources, prompts, notifications, subscriptions, structure)
        with open(pyproject_file, 'w') as f:
            f.write(pyproject_content)

        # Generate README.md
        readme_file = server_dir / "README.md"
        readme_content = generate_clean_readme(name, tools, resources, prompts, notifications, subscriptions, transport, server_type)
        with open(readme_file, 'w') as f:
            f.write(readme_content)

        # Generate a root-level server.py wrapper for compatibility
        server_wrapper = server_dir / "server.py"
        server_wrapper_content = f'''#!/usr/bin/env python3
"""
Compatibility wrapper for {name} server. Imports the actual server from src.server.
Generated by FastestMCP CLI
"""

from src.server import app

if __name__ == "__main__":
    import asyncio
    # TODO: Customize runtime invocation if needed
    asyncio.run(app.run_stdio_async())
'''
        with open(server_wrapper, 'w') as f:
            f.write(server_wrapper_content)

        # Create folder structure summary
        all_files = [
            "__init__.py",
            "main.py",
            "pyproject.toml",
            "README.md",
            "src/__init__.py",
            "src/server.py",
            "src/components/__init__.py"
        ] + [f"src/components/{f}" for f in component_files] + ["tests/__init__.py", "tests/test_server.py"]

        folder_structure = generate_clean_folder_markdown(name, tools, resources, prompts, notifications, subscriptions, transport, server_type, all_files)

        return f"Structured server generated in: {server_dir}", folder_structure