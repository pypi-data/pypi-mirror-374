"""
Structured server generation functions for FastestMCP CLI
"""

from pathlib import Path
from typing import List

from .generators import generate_tools_file, generate_resources_file, generate_prompts_file, generate_notifications_file_wrapper, generate_subscriptions_file_wrapper
from .utils import generate_pyproject_toml, generate_main_py


def generate_main_server(name: str, tools: int, resources: int, prompts: int, transport: str, server_type: str) -> str:
    """Generate the main server file for structured layout"""
    if server_type == 'fastmcp':
        code = f'''#!/usr/bin/env python3
"""
{name}/server.py - Main FastMCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

from fastestmcp import Server

app = Server("{name}")

# Register components
from . import tools, resources
tools.register_tools(app)
resources.register_resources(app)
'''
        if prompts > 0:
            code += '''from . import prompts
prompts.register_prompts(app)
'''
    else:
        code = f'''#!/usr/bin/env python3
"""
{name}/server.py - Main MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

from mcp.server.fastmcp import FastMCP

app = FastMCP("{name}")

# Register components
from . import tools, resources
tools.register_tools(app)
resources.register_resources(app)
'''
        if prompts > 0:
            code += '''from . import prompts
prompts.register_prompts(app)
'''

    # Add transport-specific code
    if transport == 'http':
        code += '''
# HTTP Transport Configuration
if __name__ == "__main__":
    import uvicorn
    from fastapi import FastAPI

    fastapi_app = FastAPI()
    # HTTP transport implementation would go here

    uvicorn.run(fastapi_app, host="0.0.0.0", port=8000)
'''
    elif transport == 'sse':
        code += '''
# SSE Transport Configuration
if __name__ == "__main__":
    # SSE transport implementation would go here
    print("SSE transport not yet implemented - falling back to stdio")
    app.run()
'''
    else:
        if server_type == 'fastmcp':
            code += '''
if __name__ == "__main__":
    app.run()
'''
        else:
            code += '''
if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
'''

    return code


def generate_additional_files(server_dir: Path, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str, name: str) -> List[str]:
    """Generate additional files for structured layout"""
    files_created = []

    # Generate __init__.py
    init_file = server_dir / "__init__.py"
    with open(init_file, 'w') as f:
        f.write(f'''"""
{server_dir.name} MCP Server Package
Generated by FastestMCP CLI
"""

__version__ = "0.1.0"
''')
    files_created.append("__init__.py")

    # Generate tools.py
    tools_file = server_dir / "tools.py"
    tools_code = generate_tools_file(tools, server_type)
    with open(tools_file, 'w') as f:
        f.write(tools_code)
    files_created.append("tools.py")

    # Generate resources.py
    resources_file = server_dir / "resources.py"
    resources_code = generate_resources_file(resources, server_type)
    with open(resources_file, 'w') as f:
        f.write(resources_code)
    files_created.append("resources.py")

    # Generate prompts.py if prompts > 0
    if prompts > 0:
        prompts_file = server_dir / "prompts.py"
        prompts_code = generate_prompts_file(prompts, server_type)
        with open(prompts_file, 'w') as f:
            f.write(prompts_code)
        files_created.append("prompts.py")

    # Generate notifications.py if notifications > 0
    if notifications > 0:
        notifications_file = server_dir / "notifications.py"
        notifications_code = generate_notifications_file_wrapper(notifications, server_type)
        with open(notifications_file, 'w') as f:
            f.write(notifications_code)
        files_created.append("notifications.py")

    # Generate subscriptions.py if subscriptions > 0
    if subscriptions > 0:
        subscriptions_file = server_dir / "subscriptions.py"
        subscriptions_code = generate_subscriptions_file_wrapper(subscriptions, server_type)
        with open(subscriptions_file, 'w') as f:
            f.write(subscriptions_code)
        files_created.append("subscriptions.py")

    # Generate config files based on transport
    if transport == 'http':
        config_file = server_dir / "config_http.py"
        with open(config_file, 'w') as f:
            f.write('''# HTTP Transport Configuration
HOST = "0.0.0.0"
PORT = 8000
''')
        files_created.append("config_http.py")
    elif transport == 'sse':
        config_file = server_dir / "config_sse.py"
        with open(config_file, 'w') as f:
            f.write('''# SSE Transport Configuration
HOST = "0.0.0.0"
PORT = 8001
''')
        files_created.append("config_sse.py")

    # Generate main.py for structured projects
    main_file = server_dir / "main.py"
    main_content = generate_main_py(name, server_type)
    with open(main_file, 'w') as f:
        f.write(main_content)
    files_created.append("main.py")

    # Generate pyproject.toml
    pyproject_file = server_dir / "pyproject.toml"
    pyproject_content = generate_pyproject_toml(name, server_type, transport, tools, resources, prompts, notifications, subscriptions, 'structured')
    with open(pyproject_file, 'w') as f:
        f.write(pyproject_content)
    files_created.append("pyproject.toml")

    return files_created