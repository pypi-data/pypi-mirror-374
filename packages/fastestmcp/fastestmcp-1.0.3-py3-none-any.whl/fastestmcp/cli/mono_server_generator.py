"""
Mono server generator for FastestMCP CLI
"""

from ..components.component_loader import ComponentLoader
from .test_generator import generate_test_file

# Initialize component loader
component_loader = ComponentLoader()


def generate_stdio_mono_server(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, server_type: str) -> str:
    """Generate a single-file Stdio server using component templates"""
    code = f'''#!/usr/bin/env python3
"""
{name} - Stdio MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts}, Notifications: {notifications}, Subscriptions: {subscriptions})
Generated by FastestMCP CLI
"""

from mcp.server.fastmcp import FastMCP
from fastestmcp.components import register_component

# Create MCP server
app = FastMCP(f"{name} MCP Server")

'''

    # Add tools code using component system
    if tools > 0:
        code += f'''# Tools - Using component system
def register_tools(server_app):
    """Register all tools with the server using component templates"""
    result = register_component("tools", "tool_template", server_app, count={tools})
    if not result["success"]:
        print(f"Warning: Failed to register tools: {{result.get('error', 'Unknown error')}}")
    return result

'''

    # Add resources code using component system
    if resources > 0:
        code += f'''# Resources - Using component system
def register_resources(server_app):
    """Register all resources with the server using component templates"""
    result = register_component("resources", "resource_template", server_app, count={resources})
    if not result["success"]:
        print(f"Warning: Failed to register resources: {{result.get('error', 'Unknown error')}}")
    return result

'''

    # Add prompts code using component system
    if prompts > 0:
        code += f'''# Prompts - Using component system
def register_prompts(server_app):
    """Register all prompts with the server using component templates"""
    result = register_component("prompts", "prompt_template", server_app, count={prompts})
    if not result["success"]:
        print(f"Warning: Failed to register prompts: {{result.get('error', 'Unknown error')}}")
    return result

'''

    # Add notifications code using component system
    if notifications > 0:
        code += f'''# Notifications - Using component system
def register_notifications(server_app):
    """Register all notification subscriptions with the server using component templates"""
    result = register_component("notifications", "notification_template", server_app, count={notifications})
    if not result["success"]:
        print(f"Warning: Failed to register notifications: {{result.get('error', 'Unknown error')}}")
    return result

'''

    # Add subscriptions code using component system
    if subscriptions > 0:
        code += f'''# Subscriptions - Using component system
def register_subscriptions(server_app):
    """Register all subscription handlers with the server using component templates"""
    result = register_component("subscriptions", "subscription_template", server_app, count={subscriptions})
    if not result["success"]:
        print(f"Warning: Failed to register subscriptions: {{result.get('error', 'Unknown error')}}")
    return result

'''

    # Add registration calls
    code += '''# Register components
'''
    if tools > 0:
        code += '''register_tools(app)
'''
    if resources > 0:
        code += '''register_resources(app)
'''
    if prompts > 0:
        code += '''register_prompts(app)
'''
    if notifications > 0:
        code += '''register_notifications(app)
'''
    if subscriptions > 0:
        code += '''register_subscriptions(app)
'''

    code += '''
if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
'''

    # Ensure there's at least one TODO comment in generated mono server for implementation guidance
    code += '\n# TODO: Customize server startup, logging, or component wiring for your environment\n'

    return code


def generate_http_mono_server(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, server_type: str) -> str:
    """Generate a single-file HTTP server following the reference pattern"""
    code = f'''#!/usr/bin/env python3
"""
{name} - OpenAPI MCP Server (Tools: {tools}, Resources: {resources}, Prompts: {prompts})
Generated by FastestMCP CLI
"""

import httpx
from fastmcp import FastMCP
from fastestmcp.components import register_component

# Create an HTTP client for the target API
client = httpx.AsyncClient(base_url="https://jsonplaceholder.typicode.com")

# Define a simplified OpenAPI spec
openapi_spec = {{
    "openapi": "3.0.0",
    "info": {{"title": "{name} API", "version": "1.0"}},
    "paths": {{
'''

    # Add sample paths based on tools count
    for i in range(min(tools, 3)):  # Limit to 3 sample endpoints
        code += f'''
        "/endpoint_{i+1}": {{
            "get": {{
                "summary": "Get data from endpoint {i+1}",
                "operationId": "get_endpoint_{i+1}",
                "responses": {{"200": {{"description": "Success"}}}}
            }}
        }},'''

    code += '''
    }
}

# Create the MCP server from the OpenAPI spec
mcp = FastMCP.from_openapi(
    openapi_spec=openapi_spec,
    client=client,
    name=f"{name} MCP Server"
)

# Register components using component system
'''

    if tools > 0:
        code += f'''
# Tools - Using component system
result = register_component("tools", "tool_template", mcp, count={tools})
if not result["success"]:
    print(f"Warning: Failed to register tools: {{result.get('error', 'Unknown error')}}")

        # Ensure there's at least one TODO comment in generated mono server for implementation guidance
        code += '\n# TODO: Customize server startup, logging, or component wiring for your environment\n'
'''

    if resources > 0:
        code += f'''
# Resources - Using component system
result = register_component("resources", "resource_template", mcp, count={resources})
if not result["success"]:
    print(f"Warning: Failed to register resources: {{result.get('error', 'Unknown error')}}")
'''

    if prompts > 0:
        code += f'''
# Prompts - Using component system
result = register_component("prompts", "prompt_template", mcp, count={prompts})
if not result["success"]:
    print(f"Warning: Failed to register prompts: {{result.get('error', 'Unknown error')}}")
'''

    if notifications > 0:
        code += f'''
# Notifications - Using component system
result = register_component("notifications", "notification_template", mcp, count={notifications})
if not result["success"]:
    print(f"Warning: Failed to register notifications: {{result.get('error', 'Unknown error')}}")
'''

    if subscriptions > 0:
        code += f'''
# Subscriptions - Using component system
result = register_component("subscriptions", "subscription_template", mcp, count={subscriptions})
if not result["success"]:
    print(f"Warning: Failed to register subscriptions: {{result.get('error', 'Unknown error')}}")
'''

    code += '''
if __name__ == "__main__":
    mcp.run(transport="http", port=8000)
'''

    return code


def generate_mono_server_file(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int, transport: str, server_type: str) -> str:
    """Generate a single-file server following modular patterns"""
    if transport == 'http':
        return generate_http_mono_server(name, tools, resources, prompts, notifications, subscriptions, server_type)
    else:
        return generate_stdio_mono_server(name, tools, resources, prompts, notifications, subscriptions, server_type)


def generate_mono_test_file(name: str, tools: int, resources: int, prompts: int, notifications: int, subscriptions: int) -> str:
    """Generate test file for mono-file server"""
    return generate_test_file(name, tools, resources, prompts, notifications, subscriptions, structure='mono')