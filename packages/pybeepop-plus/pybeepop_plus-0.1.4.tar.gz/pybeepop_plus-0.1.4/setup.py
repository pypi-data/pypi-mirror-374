# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': '.'}

packages = \
['pybeepop']

package_data = \
{'': ['*'], 'pybeepop': ['data/*', 'lib/*']}

install_requires = \
['matplotlib>=3.1.0,<4.0.0', 'pandas>=2.0.0,<3.0.0']

setup_kwargs = {
    'name': 'pybeepop-plus',
    'version': '0.1.4',
    'description': "EPA's Python interface for the EPA/USDA honey bee colony model BeePop+",
    'long_description': '# pybeepop+ :honeybee:\n\n[![Tests (Windows)](https://github.com/USEPA/pybeepop/actions/workflows/run-tests-windows.yml/badge.svg)](https://github.com/USEPA/pybeepop/actions/workflows/run-tests-windows.yml)\n[![Tests (Linux)](https://github.com/USEPA/pybeepop/actions/workflows/run-tests-ubuntu.yml/badge.svg)](https://github.com/USEPA/pybeepop/actions/workflows/run-tests-ubuntu.yml)\n[![PyPI version](https://badge.fury.io/py/pybeepop-plus.svg)](https://badge.fury.io/py/pybeepop-plus)\n\nPython-based interface for the USDA/EPA\'s honey bee colony model **BeePop+**.\n\nFor more information about **BeePop+** see [Garber *et al.* 2022](https://doi.org/10.3390/ecologies3030022).\n\nDeveloped by: Jeffrey Minucci \n\n## Table of Contents\n\n- [Requirements](#requirements)\n- [Quick Start Guide](#quick-start-guide)\n- [Minimal Working Example](#minimal-working-example)\n- [Example Notebook](#example-notebook)\n- [API Documentation](#api-documentation)\n- [Compiling BeePop+ on Linux](#compiling-beepop-on-linux)\n- [Contributing to pybeepop+](#contributing-to-pybeepop)\n\n## Requirements\n\n* Supported platforms: \n    * Windows 64-bit\n    * Linux 64-bit\n* For **Windows**: [Microsoft Visual C++ Redistributable 2015-2022](https://www.microsoft.com/en-us/download/details.aspx?id=48145)\n* For **Linux**, the bundled BeePop+ library was compiled for the **manylinux/musllinux** standards (musllinux via wheel only). \nIf you encounter errors loading the library, you can try compiling BeePop+ yourself from source. Instructions for compiling BeePop+\nfor Linux are [below](#compiling-beepop-on-linux). Source code is available on [the project\'s GitHub page](https://github.com/quanted/vpoplib).\n* Python version 3.8 or above.\n* pandas > 2.0.0\n* matplotlib > 3.1.0\n\n\n## Quick Start Guide\n\n1. **Install the package** into your Python environment using pip:\n\n    ```sh\n    pip install pybeepop-plus\n    ```\n    \n2.  **Import the PyBeePop class** in your python code, e.g.:\n    \n    ```python\n    from pybeepop import PyBeePop\n    ```\n  \n3. **Create a BeePop+ object**:\n\n    ```python\n    beepop = PyBeePop()\n    ```\n    \n4. **Set parameters, weather and pesticide exposure levels (optional)**.\n\n    ```python\n    # define a dictionary of BeePop+ parameters (parameter_name: value)\n    params = {"ICWorkerAdults": 10000, "ICWorkerBrood": 8000, \n        "SimStart": "04/13/2015", "SimEnd": "09/15/2015",\n        "AIAdultLD50": 0.04}\n    beepop.set_parameters(params)\n    \n    # load your weather file by giving its path\n    weather = \'/home/example/test_weather.txt\'\n    beepop.load_weather(weather)\n    \n    # load your pesticide residue file by giving its path (optional)\n    pesticide_file = \'/home/example/pesticide_residues.txt\'\n    beepop.load_residue_file(pesticide_file)\n    ```\n    \n    <br>Parameters that are not set by the user will take on the BeePop+ default values. For more information see [the BeePop+ publication](https://doi.org/10.3390/ecologies3030022).\n    \n    For a list of exposed BeePop+ parameters, see [the documentation page](https://usepa.github.io/pybeepop/pybeepop.html).\n    \n    For an explanation of the **weather file format**, see [docs/weather_readme.txt](https://github.com/USEPA/pybeepop/blob/main/docs/weather_readme.txt).\n\n    For an explanation of the **residue file format**, see [docs/residue_file_readme.txt](https://github.com/USEPA/pybeepop/blob/main/docs/residue_file_readme.txt).\n\n    **Example files** to run the model can be found at [example_files/](https://github.com/USEPA/pybeepop/tree/main/example_data).\n    \n5. **Run the Model** and get the results as a pandas DataFrame\n    ```python\n    results = beepop.run_model()\n    print(results)\n    ```\n\n6. **Results from last simulation** can also be returned using the get_output function, with options to return a DataFrame or a json string.\n    ```python\n    output = beepop.get_output()  # pandas dataframe\n    output_json = beepop.get_output(json_str=True)  # json string\n    ```\n\n7. You can pass new parameters and/or update previously set ones (and optionally set a new weather file), and then run the model again. Parameters that were previously defined will remain set\n\n    ```python\n    # update value for ICWorkerAdults, InitColPollen, other values set previously remain\n    params_new = {"ICWorkerAdults": 22200, "InitColPollen": 4000}\n    beepop.set_parameters(parameters = params_new)\n    new_results = beepop.run_model()\n    ```\n\n8. You can also set parameters using a .txt file where each line gives a parameter in the format "Parameter=Value". \n\n    Example my_parameters.txt:\n    \n    ```\n    RQEggLayDelay=10\n    RQReQueenDate=06/25/2015\n    RQEnableReQueen=False\n    ```\n\n    In Python:\n\n    ```python\n    parameter_file = \'home/example/my_parameters.txt\'\n    my_parameters = beepop.load_input_file()\n    print(my_parameters)\n    ```\n\n9. To get a list of the user-defined parameters:\n\n    ```python\n    my_parameters = beepop.get_parameters()\n    print(my_parameters)\n    ```\n\n10. To plot the last output as a time series:\n\n    ```python\n    ax = beepop.plot_output()  # default columns\n\n    cols_to_plot = ["Dead Worker Adults", "Dead Foragers"]\n    ax = beepop.plot_output(cols_to_plot)  # custom columns\n    ```\n\n\n## Minimal Working Example\n\n```python\nfrom pybeepop import PyBeePop\nimport tempfile\nimport os\n\n# Create minimal synthetic weather data\nweather_data = """04/01/2023, 20.0, 10.0, 15.0, 3.0, 0.0, 12.0\n04/02/2023, 22.0, 12.0, 17.0, 2.5, 0.0, 12.1\n04/03/2023, 21.0, 11.0, 16.0, 3.2, 2.0, 12.2\n04/04/2023, 19.0, 9.0, 14.0, 2.8, 0.0, 12.3\n04/05/2023, 23.0, 13.0, 18.0, 2.1, 0.0, 12.4"""\n\n# Write to temporary file\nwith tempfile.NamedTemporaryFile(mode="w", suffix=".txt", delete=False) as f:\n    f.write(weather_data)\n    temp_weather_file = f.name\n\ntry:\n    # Create BeePop+ instance and run simulation\n    beepop = PyBeePop()\n    beepop.set_parameters(\n        {"ICWorkerAdults": 10000, "ICWorkerBrood": 5000, "SimStart": "04/01/2023", "SimEnd": "04/05/2023"}\n    )\n    beepop.load_weather(temp_weather_file)\n\n    # Run model and display results\n    results = beepop.run_model()\n    print(results[["Date", "Colony Size", "Adult Workers"]].head())\n\nfinally:\n    # Clean up temporary file\n    os.unlink(temp_weather_file)\n```\n\n\n## Example notebook\n\nA Jupyter notebook with a working example of using `pybeepop+` is available [here](https://github.com/USEPA/pybeepop/blob/main/pybeepop_example.ipynb).\n\n\n## API Documentation\n\nDocumentation of the pybeepop+ API can be found at: https://usepa.github.io/pybeepop/.\n\n\n## Compiling BeePop+ on Linux\n\n\n### Requirements for compilation\n* cmake > 3.2\n* gcc or g++ \n\n### Compiling BeePop+ from source on Linux\n\n1. Clone the BeePop+ repo:\n\n        git clone https://github.com/quanted/VPopLib.git\n    \n2. Create a build directory:\n\n        cd VPopLib\n        mkdir build\n        cd build\n    \n3. Build the shared library:\n\n        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..  \t\n        cmake --build . --config Release\n \n4. Now the .so file liblibvpop.so should have been created inside the /build directory. This shared library can be moved or renamed. You can pass the path to this .so file as lib_path when creating a PyBeePop object:\n        \n        # pass the path to your previously compiled shared library file\n        lib_file = \'/home/example/liblibvpop.so\'\n        beepop = PyBeePop(lib_file)\n\n\n## Contributing to pybeepop+\n\nFor those in the user community wishing to contribute to this project:\n\n- Code updates or enhancements can be made by forking and submitting pull requests that will be reviewed by repository admins.\n- Software, code, or algorithm related bugs and issues can be submitted directly as issues on the GitHub repository.\n- Support can be requested through GitHub issues.',
    'author': 'Jeffrey Minucci',
    'author_email': 'minucci.jeffrey@epa.gov',
    'maintainer': 'Jeffrey Minucci',
    'maintainer_email': 'minucci.jeffrey@epa.gov',
    'url': 'https://github.com/USEPA/pybeepop',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.0,<4.0.0',
}
from build import *
build(setup_kwargs)

setup(**setup_kwargs)
