"""Automatic generated by ToolBox v = 0.1.22"""
from dataclasses import dataclass
from enum import Enum


@dataclass
class CHATMODULE(Enum):
    NAME = 'ChatModule'
    UI = 'ui' # Input: (['app']), Output: <class 'toolboxv2.utils.system.types.Result'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class CODEVERIFICATION(Enum):
    NAME = 'CodeVerification'
    INIT_SCOPE = 'init_scope' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    ADD_TEMPLATE = 'add_template' # Input: (['app', 'scope', 'name', 'usage_type', 'max_uses', 'valid_duration', 'kwargs']), Output: <class 'inspect._empty'>
    GENERATE = 'generate' # Input: (['app', 'scope', 'template_id']), Output: <class 'inspect._empty'>
    GENERATE_API = 'generate_api' # Input: (['app', 'scope', 'template_id']), Output: <class 'inspect._empty'>
    VALIDATE_API = 'validate_api' # Input: (['app', 'scope', 'code']), Output: <class 'inspect._empty'>
    VALIDATE = 'validate' # Input: (['app', 'scope', 'code']), Output: <class 'inspect._empty'>
    ALL_TEMPLATES = 'all_templates' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    RESET_TEMPLATES = 'reset_templates' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    PANNEL = 'pannel' # Input: (['app', 'request', 'scope']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class INNOVATIONTREE(Enum):
    NAME = 'InnovationTree'
    UI = 'ui' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_FULL_GRAPH = 'get_full_graph' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_NODE_DETAILS = 'get_node_details' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>


@dataclass
class INNOVATIONGRAPHMANAGER(Enum):
    NAME = 'InnovationGraphManager'
    UI = 'ui' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_FULL_GRAPH = 'get_full_graph' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_NODE_DETAILS = 'get_node_details' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class FILEWIDGET(Enum):
    NAME = 'FileWidget'
    UI = 'ui' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    UPLOAD = 'upload' # Input: (['self', 'request', 'form_data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    DOWNLOAD = 'download' # Input: (['self', 'request', 'kwargs']), Output: <class 'toolboxv2.utils.system.types.Result'>
    FILES = 'files' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CREATE_SHARE_LINK_TEST = 'create_share_link_test' # Input: (['self']), Output: <class 'inspect._empty'>
    CREATE_SHARE_LINK = 'create_share_link' # Input: (['self', 'request', 'file_path', 'share_type']), Output: <class 'toolboxv2.utils.system.types.Result'>
    OPEN_SHARED = 'open_shared' # Input: (['self', 'request', 'share_id', 'filename', 'row']), Output: <class 'toolboxv2.utils.system.types.Result'>
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class HELPER(Enum):
    NAME = 'helper'
    INIT_SYSTEM = 'init_system' # Input: (['app']), Output: <class 'inspect._empty'>
    CREATEUSER = 'create-user' # Input: (['app', 'username', 'email']), Output: <class 'inspect._empty'>
    DELETEUSER = 'delete-user' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    LISTUSERS = 'list-users' # Input: (['app']), Output: <class 'inspect._empty'>
    CREATEINVITATION = 'create-invitation' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    SENDMAGICLINK = 'send-magic-link' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class PROCESSMANAGER(Enum):
    NAME = 'ProcessManager'
    STARTDBUG = 'startDbug' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    STARTDEV = 'startDev' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    START = 'start' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    START_CLIENT = 'start_client' # Input: (['p0_command', 'p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    CUSTOM = 'custom' # Input: (['commands', 'monitor']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class P2PRPCCLIENT(Enum):
    NAME = 'P2PRPCClient'
    TEST_RPC_CLIENT = 'test_rpc_client' # Input: (['app', 'host', 'port', 'tb_r_key']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class MINIMALHTML(Enum):
    NAME = 'MinimalHtml'
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ADD_GROUP = 'add_group' # Input: (['command']), Output: <class 'inspect._empty'>
    ADD_COLLECTION_TO_GROUP = 'add_collection_to_group' # Input: (['group_name', 'collection']), Output: <class 'inspect._empty'>
    GENERATE_HTML = 'generate_html' # Input: (['group_name', 'collection_name']), Output: <class 'inspect._empty'>
    FUSE_TO_STRING = 'fuse_to_string' # Input: (['html_elements', 'join_chat']), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class P2PRPCSERVER(Enum):
    NAME = 'P2PRPCServer'
    START_SERVER = 'start_server' # Input: (['app', 'host', 'port', 'tb_r_key', 'function_access_config']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class SIMPLECORE(Enum):
    NAME = 'SimpleCore'
    UI = 'ui' # Input: (['self']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CREATE_IDEA = 'create_idea' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    INIT_DATAMANAGER = 'init_datamanager' # Input: (['app']), Output: <class 'toolboxv2.utils.system.types.Result'>
    ON_START = 'on_start' # Input: (), Output: None
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    SHOW_VERSION = 'show_version' # Input: ([]), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class WELCOME(Enum):
    NAME = 'welcome'
    VERSION = 'Version' # Input: (['_']), Output: <class 'inspect._empty'>
    PRINTT = 'printT' # Input: ([]), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    ANIMATION1 = 'Animation1' # Input: ([]), Output: <class 'inspect._empty'>
    ANIMATION = 'Animation' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class TRUTHSEEKER(Enum):
    NAME = 'TruthSeeker'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class TESTWIDGET(Enum):
    NAME = 'TestWidget'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ADD = 'add' # Input: (['request']), Output: <class 'inspect._empty'>
    ADDM = 'addM' # Input: (['value', 'request']), Output: <class 'inspect._empty'>
    RESET = 'reset' # Input: (['request']), Output: <class 'inspect._empty'>
    SYNC = 'sync' # Input: (['request', 'counter', 'id']), Output: <class 'inspect._empty'>
    GET_WIDGET = 'get_widget' # Input: (['app', 'request', 'kwargs']), Output: <class 'inspect._empty'>
    GET_WIDGET_R = 'get_widget_r' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class WHATSAPPTB(Enum):
    NAME = 'WhatsAppTb'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class TALK(Enum):
    NAME = 'talk'
    START_SESSION = 'start_session' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    STREAM = 'stream' # Input: (['self', 'request', 'session_id']), Output: <class 'toolboxv2.utils.system.types.Result'>
    PROCESS_AUDIO = 'process_audio' # Input: (['self', 'request', 'form_data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    UI = 'ui' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class SOCKETMANAGER(Enum):
    NAME = 'SocketManager'
    CREATE_SOCKET = 'create_socket' # Input: (['self', 'name', 'host', 'port', 'type_id', 'max_connections', 'endpoint_port', 'return_full_object', 'keepalive_interval', 'test_override', 'package_size', 'start_keep_alive', 'unix_file', 'do_async']), Output: <class 'toolboxv2.utils.system.types.Result'>
    RUN_AS_IP_ECHO_SERVER_A = 'run_as_ip_echo_server_a' # Input: (['self', 'name', 'host', 'port', 'max_connections', 'test_override']), Output: <class 'inspect._empty'>
    RUN_AS_SINGLE_COMMUNICATION_SERVER = 'run_as_single_communication_server' # Input: (['self', 'name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_SEVER = 'send_file_to_sever' # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE_AS_SERVER = 'receive_and_decompress_file_as_server' # Input: (['self', 'save_path', 'listening_port']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_PEER = 'send_file_to_peer' # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE = 'receive_and_decompress_file' # Input: (['self', 'save_path', 'listening_port', 'sender_ip']), Output: <class 'inspect._empty'>
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    TBSOCKETCONTROLLER = 'tbSocketController' # Input: (['name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class EVENTMANAGER(Enum):
    NAME = 'EventManager'
    STARTWEBEVENTS = 'startWebEvents' # Input: (['self']), Output: <class 'inspect._empty'>
    CLOSEEVENTMANAGER = 'closeEventManager' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class CANVAS(Enum):
    NAME = 'Canvas'
    ON_STARTUP = 'on_startup' # Input: (['self']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    MARKDOWN_TO_SVG = 'markdown_to_svg' # Input: (['self', 'request', 'markdown_text', 'width', 'font_family', 'font_size', 'bg_color', 'text_color']), Output: <class 'toolboxv2.utils.system.types.Result'>
    UI = 'ui' # Input: (['self', 'kwargs']), Output: <class 'toolboxv2.utils.system.types.Result'>
    SAVE_SESSION = 'save_session' # Input: (['app', 'request', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    LIST_SESSIONS = 'list_sessions' # Input: (['self', 'request']), Output: <class 'toolboxv2.utils.system.types.Result'>
    LOAD_SESSION = 'load_session' # Input: (['self', 'request', 'session_id']), Output: <class 'toolboxv2.utils.system.types.Result'>
    EXPORT_CANVAS_JSON = 'export_canvas_json' # Input: (['self', 'request', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    OPEN_CANVAS_STREAM = 'open_canvas_stream' # Input: (['app', 'request', 'canvas_id', 'client_id']), Output: <class 'toolboxv2.utils.system.types.Result'>
    SEND_CANVAS_ACTION = 'send_canvas_action' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>


@dataclass
class COUNTERTRACKER(Enum):
    NAME = 'CounterTracker'
    INIT_CONFIG = 'init_config' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    GETSETTINGS = 'get-settings' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    UPDATESETTINGS = 'update-settings' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    CREATECOUNTER = 'create-counter' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    LISTCOUNTERS = 'list-counters' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GETCOUNTER = 'get-counter' # Input: (['app', 'request', 'counter_id']), Output: <class 'inspect._empty'>
    UPDATECOUNTER = 'update-counter' # Input: (['app', 'request', 'counter_id', 'data']), Output: <class 'inspect._empty'>
    DELETECOUNTER = 'delete-counter' # Input: (['app', 'request', 'counter_id', 'data']), Output: <class 'inspect._empty'>
    INCREMENTCOUNTER = 'increment-counter' # Input: (['app', 'request', 'counter_id', 'data']), Output: <class 'inspect._empty'>
    GETCOUNTERSTATS = 'get-counter-stats' # Input: (['app', 'request', 'counter_id']), Output: <class 'inspect._empty'>
    GETCOUNTERENTRIES = 'get-counter-entries' # Input: (['app', 'request', 'counter_id', 'limit']), Output: <class 'inspect._empty'>
    UI = 'ui' # Input: (['app_ref']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class SCHEDULERMANAGER(Enum):
    NAME = 'SchedulerManager'
    VERSION = 'Version' # Input: (['self']), Output: <class 'inspect._empty'>
    INIT = 'init' # Input: (['self']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    CLOS_MANAGER = 'clos_manager' # Input: (['self']), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None
    INSTANCE = 'instance' # Input: (['self']), Output: <class 'inspect._empty'>
    START = 'start' # Input: (['self']), Output: <class 'inspect._empty'>
    STOP = 'stop' # Input: (['self']), Output: <class 'inspect._empty'>
    CANCEL = 'cancel' # Input: (['self', 'job_id']), Output: <class 'inspect._empty'>
    DEALT = 'dealt' # Input: (['self', 'job_id']), Output: <class 'inspect._empty'>
    ADD = 'add' # Input: (['self', 'job_data']), Output: <class 'inspect._empty'>
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class WEBSOCKETMANAGER(Enum):
    NAME = 'WebSocketManager'
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    CONNECT = 'connect' # Input: (['websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    GET_POOLS_MANAGER = 'get_pools_manager' # Input: ([]), Output: <class 'inspect._empty'>
    DISCONNECT = 'disconnect' # Input: (['websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    SEND_MESSAGE = 'send_message' # Input: (['message', 'websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    LIST = 'list' # Input: ([]), Output: <class 'inspect._empty'>
    GET = 'get' # Input: (['name']), Output: <class 'inspect._empty'>
    SRQW = 'srqw' # Input: (['url', 'websocket_id']), Output: <class 'inspect._empty'>
    CONSTRUCT_RENDER = 'construct_render' # Input: (['content', 'element_id', 'externals', 'placeholder_content', 'from_file', 'to_str']), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class DB(Enum):
    NAME = 'DB'
    VERSION = 'Version' # Input: (['self']), Output: <class 'inspect._empty'>
    GET = 'get' # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    IF_EXIST = 'if_exist' # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    SET = 'set' # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    DELETE = 'delete' # Input: (['self', 'query', 'matching']), Output: <class 'toolboxv2.utils.system.types.Result'>
    APPEND_ON_SET = 'append_on_set' # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    EDIT_PROGRAMMABLE = 'edit_programmable' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_CLI = 'edit_cli' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_DEV_WEB_UI = 'edit_dev_web_ui' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    API_GET_STATUS = 'api_get_status' # Input: (['self', 'request']), Output: <class 'inspect._empty'>
    API_GET_ALL_KEYS = 'api_get_all_keys' # Input: (['self', 'request']), Output: <class 'inspect._empty'>
    API_GET_VALUE = 'api_get_value' # Input: (['self', 'request', 'key']), Output: <class 'inspect._empty'>
    API_SET_VALUE = 'api_set_value' # Input: (['self', 'request']), Output: <class 'inspect._empty'>
    API_DELETE_KEY = 'api_delete_key' # Input: (['self', 'request']), Output: <class 'inspect._empty'>
    API_CHANGE_MODE = 'api_change_mode' # Input: (['self', 'request']), Output: <class 'inspect._empty'>
    UI = 'ui' # Input: (['kwargs']), Output: <class 'inspect._empty'>
    CLOSE_DB = 'close_db' # Input: ([]), Output: <class 'toolboxv2.utils.system.types.Result'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class FASTAPI(Enum):
    NAME = 'FastApi'
    ON_CLOSE = 'on_close' # Input: ([]), Output: None
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'str'>
    EDITAPI = 'edit-api' # Input: (['api_name', 'host', 'port']), Output: None
    STOPAPI = 'stop-api' # Input: (['api_name', 'delete']), Output: <class 'str'>
    START = 'start' # Input: (['api_name']), Output: str | None
    STARTE = 'startE' # Input: (['api_name', 'live', 'reload', 'test_override', 'host']), Output: str | None
    STARTDEV = 'startDev' # Input: (['api_name', 'modules', 'kwargs']), Output: str | None
    STARTDUG = 'startDUG' # Input: (['api_name']), Output: str | None
    INFO = 'info' # Input: ([]), Output: list[str]
    RESTARTAPI = 'restart-api' # Input: (['api_name']), Output: <class 'str'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class POA(Enum):
    NAME = 'POA'
    INIT_CONFIG = 'init_config' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    GETSETTINGS = 'get-settings' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    UPDATESETTINGS = 'update-settings' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    NEWITEM = 'new-item' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    UPDATEITEM = 'update-item' # Input: (['app', 'request', 'item_id', 'data']), Output: <class 'inspect._empty'>
    SETCURRENTITEM = 'set-current-item' # Input: (['app', 'request', 'item_id', 'data']), Output: <class 'inspect._empty'>
    COMPLETECURRENTITEM = 'complete-current-item' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GETCURRENTITEM = 'get-current-item' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    SUGGESTIONS = 'suggestions' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    ALLITEMSHIERARCHY = 'all-items-hierarchy' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    HISTORY = 'history' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    REMOVEITEM = 'remove-item' # Input: (['app', 'request', 'item_id', 'data']), Output: <class 'inspect._empty'>
    AIPROCESSTEXT = 'ai-process-text' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    UNDOAIACTION = 'undo-ai-action' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    IMPORTICALURL = 'import-ical-url' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    IMPORTICALFILE = 'import-ical-file' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    EXPORTICAL = 'export-ical' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    MAIN_PAGE = 'main_page' # Input: (['app_ref']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class ULTIMATETTT(Enum):
    NAME = 'UltimateTTT'
    CREATE_GAME = 'create_game' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    JOIN_GAME = 'join_game' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    GET_GAME = 'get_game' # Input: (['app', 'request', 'game_id']), Output: <class 'inspect._empty'>
    GET_GAME_STATE = 'get_game_state' # Input: (['app', 'request', 'game_id']), Output: <class 'inspect._empty'>
    MAKE_MOVE = 'make_move' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    GET_SESSION_STATS = 'get_session_stats' # Input: (['app', 'request', 'session_id']), Output: <class 'inspect._empty'>
    OPEN_GAME_STREAM = 'open_game_stream' # Input: (['app', 'request', 'game_id', 'player_id']), Output: <class 'inspect._empty'>
    INIT_CONFIG = 'init_config' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    UI = 'ui' # Input: (['app_ref', 'kwargs']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class CLOUDM_EMAIL_SERVICES(Enum):
    NAME = 'CloudM.email_services'
    SEND_WELCOME_EMAIL = 'send_welcome_email' # Input: (['app', 'user_email', 'username', 'welcome_action_url']), Output: <class 'inspect._empty'>
    SEND_MAGIC_LINK_EMAIL = 'send_magic_link_email' # Input: (['app', 'user_email', 'magic_link_url', 'username']), Output: <class 'inspect._empty'>
    SEND_EMAIL_VERIFICATION_EMAIL = 'send_email_verification_email' # Input: (['app', 'user_email', 'username', 'verification_url']), Output: <class 'inspect._empty'>
    SEND_WAITING_LIST_CONFIRMATION_EMAIL = 'send_waiting_list_confirmation_email' # Input: (['app', 'user_email']), Output: <class 'inspect._empty'>
    SEND_SIGNUP_INVITATION_EMAIL = 'send_signup_invitation_email' # Input: (['app', 'invited_user_email', 'invited_username', 'inviter_username']), Output: <class 'inspect._empty'>
    ADD = 'add' # Input: (['app', 'email']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>


@dataclass
class CLOUDM_AUTHMANAGER(Enum):
    NAME = 'CloudM.AuthManager'
    DELETE_USER = 'delete_user' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    LIST_USERS = 'list_users' # Input: (['app']), Output: <class 'inspect._empty'>
    GET_USER_BY_NAME = 'get_user_by_name' # Input: (['app', 'username', 'uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_NEW_USER_INVITATION_KEY = 'get_new_user_invitation_key' # Input: (['username']), Output: <class 'inspect._empty'>
    CREATE_USER = 'create_user' # Input: (['app', 'data', 'username', 'email', 'pub_key', 'invitation', 'web_data', 'as_base64']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    GET_MAGIC_LINK_EMAIL = 'get_magic_link_email' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    ADD_USER_DEVICE = 'add_user_device' # Input: (['app', 'data', 'username', 'pub_key', 'invitation', 'web_data', 'as_base64']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    REGISTER_USER_PERSONAL_KEY = 'register_user_personal_key' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    CRATE_LOCAL_ACCOUNT = 'crate_local_account' # Input: (['app', 'username', 'email', 'invitation', 'create']), Output: <class 'toolboxv2.utils.system.types.Result'>
    LOCAL_LOGIN = 'local_login' # Input: (['app', 'username']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_TO_SING_DATA = 'get_to_sing_data' # Input: (['app', 'username', 'personal_key', 'data', 'request']), Output: <class 'inspect._empty'>
    GET_INVITATION = 'get_invitation' # Input: (['app', 'username']), Output: <class 'toolboxv2.utils.system.types.Result'>
    VALIDATE_PERSONA = 'validate_persona' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    VALIDATE_DEVICE = 'validate_device' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    AUTHENTICATE_USER_GET_SYNC_KEY = 'authenticate_user_get_sync_key' # Input: (['app', 'username', 'signature', 'get_user', 'web']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    GET_USER_SYNC_KEY_LOCAL = 'get_user_sync_key_local' # Input: (['app', 'username', 'ausk']), Output: <class 'toolboxv2.utils.system.types.Result'>
    JWT_GET_CLAIM = 'jwt_get_claim' # Input: (['app', 'username', 'signature', 'web']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    JWT_CLAIM_LOCAL_DECRYPT = 'jwt_claim_local_decrypt' # Input: (['app', 'username', 'crypt_sing_jwt_claim', 'aud']), Output: <class 'toolboxv2.utils.system.types.Result'>
    JWT_CHECK_CLAIM_SERVER_SIDE = 'jwt_check_claim_server_side' # Input: (['app', 'username', 'jwt_claim']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>


@dataclass
class CLOUDM(Enum):
    NAME = 'CloudM'
    ADD_UI = 'add_ui' # Input: (['app', 'name', 'title', 'path', 'description', 'auth']), Output: <class 'inspect._empty'>
    OPENUI = 'openui' # Input: (['app']), Output: <class 'inspect._empty'>
    OPENVERSION = 'openVersion' # Input: (['self']), Output: <class 'inspect._empty'>
    NEW_MODULE = 'new_module' # Input: (['self', 'mod_name', 'options']), Output: <class 'inspect._empty'>
    CREATE_ACCOUNT = 'create_account' # Input: (['self']), Output: <class 'inspect._empty'>
    INIT_GIT = 'init_git' # Input: (['_']), Output: <class 'inspect._empty'>
    UPDATE_CORE = 'update_core' # Input: (['self', 'backup', 'name']), Output: <class 'inspect._empty'>
    CREATE_MAGIC_LOG_IN = 'create_magic_log_in' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    REGISTER_INITIAL_LOOT_USER = 'register_initial_loot_user' # Input: (['app', 'email', 'user_name']), Output: <class 'inspect._empty'>
    CLEAR_DB = 'clear_db' # Input: (['self', 'do_root']), Output: <class 'inspect._empty'>
    SHOW_VERSION = 'show_version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_ECO = 'get_eco' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    LOGIN = 'login' # Input: (['m_link', 'app']), Output: <class 'inspect._empty'>
    INITIALIZE_ADMIN_PANEL = 'initialize_admin_panel' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    LIST_MODULES = 'list_modules' # Input: (['app']), Output: <class 'inspect._empty'>
    MAKE_INSTALL = 'make_install' # Input: (['app', 'module_name', 'base', 'upload']), Output: <class 'inspect._empty'>
    UNINSTALL = 'uninstall' # Input: (['app', 'module_name']), Output: <class 'inspect._empty'>
    UPLOAD_MOD = 'upload_mod' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    DOWNLOAD_MOD = 'download_mod' # Input: (['app', 'module_name']), Output: <class 'inspect._empty'>
    UPLOAD = 'upload' # Input: (['app', 'module_name']), Output: <class 'inspect._empty'>
    GETMODVERSION = 'getModVersion' # Input: (['app', 'module_name']), Output: <class 'inspect._empty'>
    INSTALL = 'install' # Input: (['app', 'module_name', 'build_state']), Output: <class 'inspect._empty'>
    UPDATE_ALL = 'update_all' # Input: (['app']), Output: <class 'inspect._empty'>
    BUILD_ALL = 'build_all' # Input: (['app', 'base', 'upload']), Output: <class 'inspect._empty'>
    UI = 'ui' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_MOD_SNAPSHOT = 'get_mod_snapshot' # Input: (['mod_name']), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class CLOUDM_USERINSTANCES(Enum):
    NAME = 'CloudM.UserInstances'
    GET_SI_ID = 'get_si_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_VT_ID = 'get_vt_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_WEB_SOCKET_ID = 'get_web_socket_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CLOSE_USER_INSTANCE = 'close_user_instance' # Input: (['uid']), Output: <class 'inspect._empty'>
    VALIDATE_WS_ID = 'validate_ws_id' # Input: (['ws_id']), Output: <class 'inspect._empty'>
    DELETE_USER_INSTANCE = 'delete_user_instance' # Input: (['uid']), Output: <class 'inspect._empty'>
    SAVE_USER_INSTANCES = 'save_user_instances' # Input: (['instance']), Output: <class 'inspect._empty'>
    GET_INSTANCE_SI_ID = 'get_instance_si_id' # Input: (['si_id']), Output: <class 'inspect._empty'>
    GET_USER_INSTANCE = 'get_user_instance' # Input: (['uid', 'hydrate']), Output: <class 'inspect._empty'>
    HYDRATE_INSTANCE = 'hydrate_instance' # Input: (['instance']), Output: <class 'inspect._empty'>
    SAVE_CLOSE_USER_INSTANCE = 'save_close_user_instance' # Input: (['ws_id']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_UI_WIDGET(Enum):
    NAME = 'CloudM.UI.widget'
    TEST_GET_WIDGET = 'test_get_widget' # Input: (['app', 'kwargs']), Output: <class 'inspect._empty'>
    GET_WIDGET = 'get_widget' # Input: (['app', 'request', 'kwargs']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_USERACCOUNTMANAGER(Enum):
    NAME = 'CloudM.UserAccountManager'
    UPDATE_EMAIL = 'update_email' # Input: (['app', 'request', 'new_email']), Output: <class 'inspect._empty'>
    UPDATE_SETTING = 'update_setting' # Input: (['app', 'request', 'setting_key', 'setting_value']), Output: <class 'inspect._empty'>
    GET_CURRENT_USER_FROM_REQUEST_API_WRAPPER = 'get_current_user_from_request_api_wrapper' # Input: (['app', 'request']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_USERDASHBOARD(Enum):
    NAME = 'CloudM.UserDashboard'
    MAIN = 'main' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GET_MY_ACTIVE_INSTANCES = 'get_my_active_instances' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GET_ALL_AVAILABLE_MODULES = 'get_all_available_modules' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    UPDATE_MY_INSTANCE_MODULES = 'update_my_instance_modules' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    CLOSE_MY_INSTANCE = 'close_my_instance' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    REQUEST_MY_MAGIC_LINK = 'request_my_magic_link' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    UPDATE_MY_APPEARANCE_SETTINGS = 'update_my_appearance_settings' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_ADMINDASHBOARD(Enum):
    NAME = 'CloudM.AdminDashboard'
    MAIN = 'main' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GET_SYSTEM_STATUS = 'get_system_status' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    LIST_USERS_ADMIN = 'list_users_admin' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    LIST_MODULES_ADMIN = 'list_modules_admin' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    UPDATE_USER_ADMIN = 'update_user_admin' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    DELETE_USER_ADMIN = 'delete_user_admin' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    RELOAD_MODULE_ADMIN = 'reload_module_admin' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    GET_WAITING_LIST_USERS_ADMIN = 'get_waiting_list_users_admin' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    REMOVE_FROM_WAITING_LIST_ADMIN = 'remove_from_waiting_list_admin' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    SEND_INVITE_TO_WAITING_LIST_USER_ADMIN = 'send_invite_to_waiting_list_user_admin' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    LIST_SPPS_ADMIN = 'list_spps_admin' # Input: (['app', 'request']), Output: <class 'inspect._empty'>


@dataclass
class WIDGETSPROVIDER(Enum):
    NAME = 'WidgetsProvider'
    GET_ALL_WIDGET_MODS = 'get_all_widget_mods' # Input: (['app']), Output: <class 'inspect._empty'>
    GET_USER_FROM_REQUEST = 'get_user_from_request' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    OPEN_WIDGET = 'open_widget' # Input: (['app', 'request', 'name', 'kwargs']), Output: <class 'inspect._empty'>
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_NAMES = 'get_names' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GET_STO = 'get_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    SET_STO = 'set_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    ADD_STO = 'add_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    DELETE_STO = 'delete_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>


@dataclass
class WIDGETSPROVIDER_BOARDWIDGET(Enum):
    NAME = 'WidgetsProvider.BoardWidget'
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    GET_WIDGET = 'get_widget' # Input: (['request', 'kwargs']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    ON_EXIT = 'on_exit' # Input: (), Output: None


@dataclass
class CLI_FUNCTIONS(Enum):
    NAME = 'cli_functions'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_CHARACTER = 'get_character' # Input: ([]), Output: <class 'inspect._empty'>
    GET_GENERATOR = 'get_generator' # Input: ([]), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_MODS = 'update_autocompletion_mods' # Input: (['app', 'autocompletion_dict']), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_LIST_OR_KEY = 'update_autocompletion_list_or_key' # Input: (['list_or_key', 'autocompletion_dict', 'raise_e', 'do_lower']), Output: <class 'inspect._empty'>
    USER_INPUT = 'user_input' # Input: (['app', 'completer_dict', 'get_rprompt', 'bottom_toolbar', 'active_modul', 'password', 'bindings', 'message', 'fh']), Output: <class 'toolboxv2.utils.system.types.CallingObject'>
    CO_EVALUATE = 'co_evaluate' # Input: (['app', 'obj', 'build_in_commands', 'threaded', 'helper', 'return_parm']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class ISAA_UI(Enum):
    NAME = 'isaa.ui'
    VERSION = 'version' # Input: (['app']), Output: <class 'inspect._empty'>
    RUN_AGENT_STREAM = 'run_agent_stream' # Input: (['app', 'session_id', 'agent_name', 'prompt', 'request', 'kwargs']), Output: <class 'inspect._empty'>
    RUN_AGENT_ONCE = 'run_agent_once' # Input: (['app', 'request', 'data']), Output: <class 'inspect._empty'>
    LIST_AGENTS = 'list_agents' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    MAIN = 'main' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    INITIALIZE_ISAA_WEBUI_MODULE = 'initialize_isaa_webui_module' # Input: (['app', 'isaa_instance']), Output: <class 'inspect._empty'>


@dataclass
class ISAA(Enum):
    NAME = 'isaa'
    ON_CLOSE = 'on_close' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    MINI_TASK_COMPLETION = 'mini_task_completion' # Input: (['mini_task', 'user_task', 'mode', 'max_tokens_override', 'task_from', 'stream_function', 'message_history', 'agent_name']), Output: <class 'inspect._empty'>
    RUN_AGENT = 'run_agent' # Input: (['name', 'text', 'verbose', 'session_id', 'progress_callback', 'kwargs']), Output: <class 'inspect._empty'>
    SAVE_TO_MEM = 'save_to_mem' # Input: ([]), Output: <class 'inspect._empty'>
    GET_AGENT = 'get_agent' # Input: (['agent_name', 'model_override']), Output: <class 'toolboxv2.mods.isaa.base.Agent.agent.FlowAgent'>
    FORMAT_CLASS = 'format_class' # Input: (['format_schema', 'task', 'agent_name']), Output: <class 'inspect._empty'>
    GET_MEMORY = 'get_memory' # Input: (['name']), Output: <class 'toolboxv2.mods.isaa.base.AgentUtils.AISemanticMemory'>
    RGET_MODE = 'rget_mode' # Input: (['mode']), Output: <class 'inspect._empty'>
    SHELL = 'shell' # Input: (['command']), Output: <class 'str'>
    ON_EXIT = 'on_exit' # Input: (), Output: None
