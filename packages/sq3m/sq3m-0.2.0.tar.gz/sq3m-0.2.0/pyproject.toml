[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sq3m"
version = "0.2.0"
description = "Interactive CLI DB AI Agent for natural language to SQL conversion"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "leegyurak", email = "dev@devgyurak.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "openai>=1.0.0",
    "psycopg2-binary>=2.9.0",
    "pymysql>=1.0.0",
    "sqlparse>=0.4.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "markdown>=3.5.0",
    "psutil>=5.9.0",
    "types-aiofiles>=24.1.0.20250822",
    "aiofiles>=24.1.0",
]


[project.scripts]
sq3m = "sq3m.main:main"

[project.urls]
"Homepage" = "https://github.com/leegyurak/sq3m"
"Bug Reports" = "https://github.com/leegyurak/sq3m/issues"
"Source" = "https://github.com/leegyurak/sq3m"

[tool.hatch.build.targets.wheel]
packages = ["sq3m"]
include = ["sq3m/py.typed"]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "PERF", # perflint
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",   # check for raise ... from err or raise ... from None
    "PERF203", # try-except within a loop incurs performance overhead
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused function args in tests
    "FBT",    # don't care about booleans as positional arguments in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
mypy_path = "."
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
pretty = true
packages = ["sq3m"]

# Import settings
ignore_missing_imports = false
follow_imports = "normal"

# Strict settings
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pymysql.*",
    "psycopg2.*",
    "rich.*",
    "click.*",
    # Test modules that may not have stubs
    "pytest.*",
    "unittest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["sq3m"]
omit = [
    "*/tests/*",
    # Exclude CLI entrypoints and runtime wrappers from unit coverage
    "sq3m/interface/cli/*",
    "sq3m/main.py",
    # Exclude external-service integrations that require network/credentials
    "sq3m/infrastructure/llm/openai_service.py",
    # Exclude direct DB adapter implementations (covered by integration tests)
    "sq3m/infrastructure/database/mysql_repository.py",
    "sq3m/infrastructure/database/postgresql_repository.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=1.1.0",
    "ruff==0.12.11",
    "pre-commit>=3.0.0",
    "mypy==1.17.1",
    "bandit>=1.8.0",
    "types-requests>=2.31.0",
    "types-aiofiles>=24.1.0.20250822",
    "types-psutil>=7.0.0.20250822",
]
