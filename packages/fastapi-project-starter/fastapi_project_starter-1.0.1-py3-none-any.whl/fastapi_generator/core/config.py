import getpass
from pathlib import Path
from urllib.parse import quote_plus

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt

# ------------------------------
# Project Directories
# ------------------------------
PROJECT_ROOT = Path(__file__).parent.parent
TEMPLATES_DIR = PROJECT_ROOT / "templates"

console = Console()

# ------------------------------
# Features / Options
# ------------------------------
FEATURES = {
    "include_database": {
        "question": "Do you want a database?",
        "options": ["y", "n"],
        "default": "n",
        "type": "boolean",
    },
    "include_auth": {
        "question": "Do you want authentication? (y/n)",
        "options": ["y", "n"],
        "default": "n",
        "type": "boolean",
    },
    "include_docker": {
        "question": "Do you want Docker support? (y/n)",
        "options": ["y", "n"],
        "default": "n",
        "type": "boolean",
    },
    "include_celery": {
        "question": "Do you want Celery for background tasks? (y/n)",
        "options": ["y", "n"],
        "default": "n",
        "type": "boolean",
    },
    "is_async": {
        "question": "Do you want async or sync code?",
        "options": ["async", "sync"],
        "default": "async",
        "type": "choice",
    },
    "include_loguru": {
        "question": "Do you want loguru configuration? (y/n)",
        "options": ["y", "n"],
        "default": "y",
        "type": "boolean",
    },
    "include_Makefile": {
        "question": "Do you want Makefile? (y/n)",
        "options": ["y", "n"],
        "default": "y",
        "type": "boolean",
    }
}

# ------------------------------
# PostgreSQL Configuration
# ------------------------------
POSTGRESQL_CONFIG = {
    "dependencies": ["sqlalchemy", "asyncpg", "psycopg"],
    "async_url_template": "postgresql+asyncpg://{user}:{password}@{host}:{port}/{database}",
    "sync_url_template": "postgresql+psycopg://{user}:{password}@{host}:{port}/{database}",
    "default_port": "5432"
}

# ------------------------------
# Collect PostgreSQL Config
# ------------------------------
def collect_postgresql_config(project_slug: str, is_async: bool = True) -> dict:
    title = "[bold cyan]POSTGRESQL CONFIGURATION[/bold cyan]"
    # Display box with instructions
    console.print(
        Panel(
            "Fill in your database details below.\n"
            "Password input will be hidden.",
            title=title,
            expand=False,
            border_style="bright_blue"
        )
    )

    # Collect inputs
    host = Prompt.ask("Database host", default="localhost")
    port = Prompt.ask("Database port", default="5432")
    database = Prompt.ask("Database name", default=f"{project_slug}_db")
    user = Prompt.ask("Database username", default="postgres")

    password = getpass.getpass("Enter password: ")

    if not password:
        use_empty = Prompt.ask("Use empty password? [y/n]", default="n").lower().startswith("y")
        if not use_empty:
            password = getpass.getpass("Please enter a password: ")

    console.print("\n[green] Database configuration completed[/green]")

    # URL-encode the password to safely handle special characters like @, :, /
    encoded_password = quote_plus(password)

    url_template = POSTGRESQL_CONFIG["async_url_template"] if is_async else POSTGRESQL_CONFIG["sync_url_template"]
    database_url = url_template.format(user=user, password=encoded_password, host=host, port=port, database=database)


    return {
        "database_url": database_url,
        "dependencies": POSTGRESQL_CONFIG["dependencies"],
        "db_host": host,
        "db_port": port,
        "db_name": database,
        "db_user": user,
        "db_password": password
    }

# ------------------------------
# Generate .env.local File
# ------------------------------
def generate_env_file(project_path: Path, db_config: dict, template_vars: dict):
    envs_folder = project_path / "envs"
    envs_folder.mkdir(exist_ok=True)

    env_file = envs_folder / ".env.local"
    env_template = envs_folder / ".env.local.template"

    # Base environment content
    env_content = f"""# {template_vars['project_name']} Environment Configuration
# Generated by FastGen

# Application Settings
APP_NAME={template_vars['project_name']}
APP_VERSION={template_vars['version']}
ENVIRONMENT=development
DEBUG=true

# Server Settings  
HOST=0.0.0.0
PORT=8000

# PostgreSQL Database Configuration
DATABASE_URL={db_config['database_url']}
POSTGRES_HOST={db_config['db_host']}
POSTGRES_PORT={db_config['db_port']}
POSTGRES_DB={db_config['db_name']}
POSTGRES_USER={db_config['db_user']}
POSTGRES_PASSWORD={db_config['db_password']}
"""

    # Add Celery configuration if enabled
    if template_vars.get('include_celery'):
        env_content += f"""
# Celery Configuration
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# Flower Configuration
CELERY_FLOWER_USER=admin
CELERY_FLOWER_PASSWORD=admin

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
"""

    # Add Auth configuration if enabled
    if template_vars.get('include_auth'):
        env_content += f"""
# Security Configuration
SECRET_KEY=your-secret-key-here-change-in-production-{template_vars['project_slug']}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
"""

    # Add CORS configuration
    env_content += f"""
# CORS Configuration
ALLOWED_HOSTS=["localhost", "127.0.0.1", "0.0.0.0"]
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8000"]
"""

    # Write the actual environment file
    with open(env_file, "w") as f:
        f.write(env_content)

    # Create template with placeholder values
    template_content = env_content

    # Replace sensitive values with placeholders
    replacements = [
        (db_config['database_url'], 'postgresql+asyncpg://user:password@localhost:5432/dbname'),
        (db_config['db_password'], 'your_password_here'),
        (db_config['db_host'], 'localhost'),
        (db_config['db_port'], '5432'),
        (db_config['db_name'], 'your_database_name'),
        (db_config['db_user'], 'postgres'),
    ]

    for actual_value, placeholder in replacements:
        template_content = template_content.replace(str(actual_value), placeholder)

    with open(env_template, "w") as f:
        f.write(template_content)

    # Also create root level .env file for docker-compose
    root_env_file = project_path / ".env"
    with open(root_env_file, "w") as f:
        f.write(env_content)

    print(f"Environment files created:")
    print(f"   .env (for Docker Compose)")
    print(f"   envs/.env.local (with your configuration)")
    print(f"   envs/.env.local.template (for version control)")

# ------------------------------
# Default Dependency Versions
# ------------------------------
DEFAULT_VERSIONS = {
    # Base packages
    "fastapi": "0.104.1",
    "uvicorn": "0.24.0",
    "pydantic": "2.5.0",

    # PostgreSQL packages
    "sqlalchemy": "2.0.23",
    "alembic": "1.12.1",
    "asyncpg": "0.29.0",

    # Authentication packages
    "passlib": "1.7.4",
    "python_jose": "3.3.0",
    "email_validator": "2.1.0",

    # Celery / Redis / Other
    "celery": "5.3.4",
    "redis": "5.0.1",
    "loguru": "0.7.2"
}
