name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      test_pypi:
        description: "Publish to TestPyPI instead of PyPI"
        required: false
        default: false
        type: boolean

  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit any pending changes
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Check if there are any changes
          if ! git diff --quiet || ! git diff --staged --quiet; then
            echo "📝 Committing pending changes before version bump..."
            git add .
            git commit -m "chore: prepare for version bump" || echo "No changes to commit"
          else
            echo "Success: Working directory is clean"
          fi

      - name: Bump version and publish (Manual)
        if: github.event_name == 'workflow_dispatch'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python scripts/publish.py ${{ github.event.inputs.bump_type }} \
            --skip-clean-check \
            ${{ github.event.inputs.test_pypi == 'true' && '--test-pypi' || '' }}

      - name: Extract version from tag
        if: github.event_name == 'release'
        id: extract_version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update version files (Release)
        if: github.event_name == 'release'
        run: |
          # Update __init__.py
          sed -i 's/__version__ = "[^"]*"/__version__ = "${{ steps.extract_version.outputs.version }}"/' src/justsdk/__init__.py

          # Verify the change
          grep "__version__" src/justsdk/__init__.py

      - name: Build and publish (Release)
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv build
          uv publish

      - name: Commit version changes (Release)
        if: github.event_name == 'release'
        run: |
          git add src/justsdk/__init__.py
          git commit -m "chore: update version to ${{ steps.extract_version.outputs.version }}" || exit 0
          git push origin main
