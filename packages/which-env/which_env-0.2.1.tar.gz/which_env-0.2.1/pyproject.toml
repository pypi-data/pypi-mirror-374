# ==============================================================================
# The [project] table defined by Official python.org
#
# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
# ==============================================================================
[project]
name = "which_env"
# Increment version before each release - follow `semantic versioning <https://semver.org/>`_
# Currently, poetry 2.1.X doesn't support dynamic versioning
# (Read https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#version)
# So this value has to be aligned with the one in ``which_env/_version.py``
version = "0.2.1"
description = "A Python library for intelligent multi-environment deployment strategy management with automatic runtime-based environment detection."
# Read https://dev-exp-share.readthedocs.io/en/latest/search.html?q=Pick+An+Open+Source+License+For+Python+Project&check_keywords=yes&area=default
# To pick a license and update the ``license``, ``classifier`` field in ``pyproject.toml``
# And also update the ``LICENSE.txt`` file in the git repo.
license = "MIT"
license-files = ["LICENSE.txt", "AUTHORS.rst"]
authors = [
    { name = "Sanhe Hu", email = "husanhe@gmail.com" },
]
maintainers = [
    { name = "Sanhe Hu", email = "husanhe@gmail.com" },
]
keywords = []
readme = "README.rst"
# Files to include in the package distribution
include = [
    "*.txt",
    "*.rst",
]
# Files to exclude from the package
exclude = [
    "*.pyc",
    "*.pyo",
    "which_env/docs/*",
    "which_env/tests/*",
]
requires-python = ">=3.9,<4.0"
# Full list of classifiers: https://pypi.org/classifiers/
classifier = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    # Note: classfier like "Programming Language :: Python :: 3 :: Only",
    # "Programming Language :: Python :: 3.X" is no longer needed,
    # because we have ``requires-python`` field.
]

# ------------------------------------------------------------------------------
# Core Dependencies
# ------------------------------------------------------------------------------
dependencies = [
    "which_runtime>=0.1.1,<1.0.0",
    "enum_mate>=0.1.1,<1.0.0",
]

# ------------------------------------------------------------------------------
# Optional dependency that can be used in ``pip install ${your_project_name}[${feature_name}]``
# Sometime this is also called "extras"
# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#dependencies-optional-dependencies
#
# IMPORTANT: all optional dependencies has to be compatible with the "requires-python" field
# ------------------------------------------------------------------------------
[project.optional-dependencies]

# ------------------------------------------------------------------------------
# Local Development dependenceies
# ------------------------------------------------------------------------------
dev = [
    "twine>=6.0.0,<7.0.0", # distribute package to PyPI
    "wheel>=0.45.0,<1.0.0", # build wheel package
    "build>=1.2.1,<2.0.0", # build source distribution
    "rich>=13.8.1,<14.0.0", # pretty print
]

# ------------------------------------------------------------------------------
# (Unit/Coverage/Integration/Load) Test dependenceies
# ------------------------------------------------------------------------------
test = [
    "pytest>=8.2.2,<9.0.0", # Testing framework
    "pytest-cov>=6.0.0,<7.0.0", # Coverage reporting
]

# ------------------------------------------------------------------------------
# Documentation build dependenceies
# ------------------------------------------------------------------------------
doc = [
    "Sphinx>=7.4.7,<8.0.0",
    "sphinx-copybutton>=0.5.2,<1.0.0", # add copy button to code block
    "sphinx-design>=0.6.1,<1.0.0", # add additional design pattern to sphinx
    "sphinx-jinja>=2.0.2,<3.0.0", # enable jinja syntax in reStructuredText
    "furo==2024.8.6", # the furo sphinx theme
    "pygments>=2.18.0,<3.0.0", # syntax highlight
    "ipython>=8.18.1,<8.19.0", # interactive Python
    "nbsphinx>=0.8.12,<1.0.0", # add jupyter notebook in sphinx doc
    "rstobj==1.2.1", # generate reStructuredText from Python code
    "docfly==3.0.0", # automaticall generate .. toctree directives and API reference doc
]

# ------------------------------------------------------------------------------
# Automation (devops) dependenceies
# ------------------------------------------------------------------------------
auto = [
]

# Quick Links
[project.urls]
Homepage = "https://github.com/MacHu-GWU/which_env-project"
Documentation = "https://which-env.readthedocs.io/en/latest/"
Repository = "https://github.com/MacHu-GWU/which_env-project"
Issues = "https://github.com/MacHu-GWU/which_env-project/issues"
Changelog = "https://github.com/MacHu-GWU/which_env-project/blob/main/release-history.rst"
Download = "https://pypi.org/pypi/which-env#files"

# For command line interface, read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#creating-executable-scripts
[project.scripts]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9.0,<2.0.0"

# python workflow tool config
[tool.pywf]
# The specific python version you use for local development
dev_python = "3.11.8"
# github.com account name (for unit test)
github_account = "MacHu-GWU"
# Create GitHub token in https://github.com/settings/tokens and put the token at
# ``${HOME}/.github/${github_account}/pac/${github_token_name}.txt``
github_token_name = "sanhe-dev"
# codecov.io (for code coverage test report) account name
# If you use GitHub account to login codecov.io, then it is the same as your github account
codecov_account = "MacHu-GWU"
# Create Codecov token in https://app.codecov.io/account/gh/${codecov_account}/access and put the token at
# ``${HOME}/.codecov/github/${codecov_account}/${codecov_token_name}.txt``
codecov_token_name = "sanhe-dev"
# readthedocs.org user name (for documentation hosting)
readthedocs_username = "machugwu"
# Readthedocs project name, usually it is the same as your project name
readthedocs_project_name = "which_env"
# Create Readthedocs token in https://app.readthedocs.org/accounts/tokens/ and put the token at
# ``${HOME}/.readthedocs/${readthedocs_username}/${readthedocs_token_name}.txt``
readthedocs_token_name = "sanhe-dev"

# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#declaring-the-build-backend
[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
