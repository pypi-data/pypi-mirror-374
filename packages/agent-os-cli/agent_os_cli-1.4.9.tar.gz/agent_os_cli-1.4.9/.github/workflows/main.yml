name: Main

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install development dependencies
        run: make install-dev

      - name: Run tests
        run: make test


  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      
      - name: Install dependencies
        run: make install-dev
      
      - name: Run pre-CI checks
        run: make pre-ci
      
      - name: Build distribution
        run: make build
      
      - name: Check distribution
        run: |
          uv pip install twine
          uv run twine check dist/*
      
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.tag }} \
            --title "Release ${{ steps.version.outputs.tag }}" \
            --notes "Automated release for version ${{ steps.version.outputs.version }}

          Changes in this release:
          - Latest updates from main branch  
          - All tests passing across Python 3.9-3.13 and Windows/macOS/Linux" \
            --target main

  publish-pypi:
    name: Publish to PyPI
    needs: [build, release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Download distribution
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          attestations: false