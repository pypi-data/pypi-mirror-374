# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Messaging(UniversalBaseModel):
    opt_in: typing_extensions.Annotated[str, FieldMetadata(alias="optIn")] = pydantic.Field()
    """
    Explain how users will opt in to receive messages.
    """

    opt_out: typing_extensions.Annotated[str, FieldMetadata(alias="optOut")] = pydantic.Field()
    """
    Explain how users will opt out of receiving messages.
    """

    opt_out_keywords: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="optOutKeywords")] = (
        pydantic.Field()
    )
    """
    Please provide the unique keywords to opt out. Each keyword should not contain spaces.
    """

    agent_use_case: typing_extensions.Annotated[str, FieldMetadata(alias="agentUseCase")] = pydantic.Field()
    """
    Please define what your agent will do.
    """

    expected_agent_responses: typing_extensions.Annotated[str, FieldMetadata(alias="expectedAgentResponses")] = (
        pydantic.Field()
    )
    """
    Please provide some example messages that your agent will send.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
