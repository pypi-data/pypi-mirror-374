name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']  # Full Python version matrix

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python {sys.version}')"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 pysee/ test_pysee.py example.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Scientific-friendly linting with relaxed rules
        flake8 pysee/ test_pysee.py example.py --count --exit-zero --max-complexity=15 --max-line-length=100 --extend-ignore=E203,W503,E501,F401 --statistics

    - name: Format check with black
      run: |
        black --check --diff --line-length=100 pysee/ test_pysee.py example.py

    - name: Type check with mypy
      run: |
        mypy pysee/ --ignore-missing-imports --no-strict-optional --warn-return-any --no-error-summary

    - name: Test with pytest
      run: |
        pytest test_pysee.py -v

    - name: Test example script
      run: |
        python example.py

  build:
    runs-on: ubuntu-latest
    # Run build in parallel with tests for faster CI
    # needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
