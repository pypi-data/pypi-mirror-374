name: ocp-freecad-cam-ci
on:
  schedule:
   - cron: "30 23 * * 1,5"
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        # Support for "macos-13", "macos-latest" needs a contributor!
        release: ["latest", "1.0.0"]
        python: [ "3.11" ]
        # exclude:
        include:
          - python: "3.11"
            release: "latest"
            os: "ubuntu-latest"
            primary: true

          - python: "3.11"
            pypattern: "py311"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Required by Sonar
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: pip

      - name: Install requests
        run: |
          python -m pip install requests

      - name: Setup FreeCAD (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          RELEASE: ${{ matrix.release }}
          PYPATTERN: ${{ matrix.pypattern }}
          PYVER: ${{ matrix.python }}
        run: |
          mkdir $PWD/freecad
          cd $PWD/freecad
          wget -O freecad.AppImage $(python ../.github/workflows/resolve_appimage.py --release ${RELEASE} --pyver ${PYPATTERN} --arch Linux-x86_64 --suffix AppImage)
          chmod +x freecad.AppImage
          ./freecad.AppImage --appimage-extract > /dev/null 
          
          $PWD/squashfs-root/usr/bin/python -m venv --system-site-packages venv
          echo "$PWD/squashfs-root/usr/lib" > venv/lib/python${PYVER}/site-packages/freecad.pth
          echo "$PWD/../src" > venv/lib/python${PYVER}/site-packages/ocp_freecad_cam.pth

      - name: Setup FreeCAD (Windows)
        if: matrix.os == 'windows-latest'
        env:
          RELEASE: ${{ matrix.release }}
          PYPATTERN: ${{ matrix.pypattern }}
          PYVER: ${{ matrix.python }}
        run: |
          mkdir freecad
          cd freecad
          $urlPath = python ../.github/workflows/resolve_appimage.py --release $env:RELEASE --pyver $env:PYPATTERN --arch Windows-x86_64 --suffix 7z
          Invoke-WebRequest -Uri $urlPath -OutFile "freecad.7z"

          7z x freecad.7z
          Invoke-Expression (".\" + (Get-ChildItem . "FreeCAD_*" | select -first 1).Name + "\bin\python -m venv --system-site-packages venv")
          "$($PWD)\..\src" | Out-File -FilePath "venv\Lib\site-packages\ocp_freecad_cam.pth"

      - name: Test FreeCAD is available (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          source freecad/venv/bin/activate
          echo $PYTHONPATH
          python -c "import sys; print(sys.path)"
          python -c "import FreeCAD"

      - name: Test FreeCAD is available (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\freecad\venv\Scripts\activate
          echo $PYTHONPATH
          python -c "import sys; print(sys.path)"
          python -c "import FreeCAD"

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          source freecad/venv/bin/activate
          python -m pip install --upgrade pip
          pip install cadquery build123d 
          pip install -r requirements-dev.txt

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\freecad\venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install cadquery build123d 
          pip install -r requirements-dev.txt

      - name: Check black
        if: matrix.primary
        run: |
          source freecad/venv/bin/activate
          black --check src
          black --check tests

      #- name: Check flake8
      #  uses: liskin/gh-problem-matcher-wrap@v2
      #  with:
      #    linters: flake8
      #    run: flake8

      - name: Check isort
        if: matrix.primary
        run: |
          source freecad/venv/bin/activate
          isort src tests --check-only --diff

      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          source freecad/venv/bin/activate
          python -m pytest -ra -vvv --cov=src --cov-report xml tests

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\freecad\venv\Scripts\activate
          # We use pytest-xdist on Windows because it gets rid of a silly issue
          # which causes normal pytest to exit with exit code 1 even though all
          # tests pass. That's probably segfault / access violation on Windows
          # when cleaning up, so it's not terribly relevant to our test session.
          pip install pytest-xdist
          python -m pytest -n auto -ra -vvv tests

      - name: Codecov
        if: matrix.primary
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
