# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pingera.models.alert import Alert

class TestAlert(unittest.TestCase):
    """Alert unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Alert:
        """Test Alert
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Alert`
        """
        model = Alert()
        if include_optional:
            return Alert(
                is_active = true,
                acknowledged_by_id = 'user_jkl012mno345',
                status = 'firing',
                last_notification_at = '2024-01-15T15:45Z',
                duration = 3600,
                title = 'Production API Health Check Failed',
                resolved_at = '2024-01-15T16:30Z',
                check_name = Production API Health Check,
                rule_id = 'rule_def456ghi789',
                description = 'The production API health check has failed 3 consecutive times, indicating a potential service outage.',
                fired_at = '2024-01-15T15:30Z',
                check_id = 'check_ghi789jkl012',
                id = 'alert_abc123def456',
                rule_name = Production API Down Alert,
                severity = 'high',
                notification_count = 3,
                acknowledged_at = '2024-01-15T15:35Z',
                alert_metadata = {"consecutive_failures":3,"last_check_result":"timeout","response_time":5000}
            )
        else:
            return Alert(
        )
        """

    def testAlert(self):
        """Test Alert"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
