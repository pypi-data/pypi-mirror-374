from typing import Annotated

from numpy.typing import ArrayLike

from . import madrona as madrona


class VisualizerGPUHandles:
    pass

class MadronaBatchRenderer:
    def __init__(self, gpu_id: int, mesh_vertices: Annotated[ArrayLike, dict(dtype='float32', shape=(None, 3), device='cpu', writable=False)], mesh_faces: Annotated[ArrayLike, dict(dtype='int32', shape=(None, 3), device='cpu', writable=False)], mesh_vertex_offsets: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], mesh_face_offsets: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], mesh_texcoords: Annotated[ArrayLike, dict(dtype='float32', shape=(None, 2), device='cpu', writable=False)], mesh_texcoord_offsets: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], mesh_texcoord_num: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], geom_types: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], geom_groups: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], geom_data_ids: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], geom_sizes: Annotated[ArrayLike, dict(dtype='float32', shape=(None, 3), device='cpu', writable=False)], geom_mat_ids: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], geom_rgba: Annotated[ArrayLike, dict(dtype='float32', shape=(None, 4), device='cpu', writable=False)], mat_rgba: Annotated[ArrayLike, dict(dtype='float32', shape=(None, 4), device='cpu', writable=False)], mat_tex_ids: Annotated[ArrayLike, dict(dtype='int32', shape=(None, 10), device='cpu', writable=False)], tex_data: Annotated[ArrayLike, dict(dtype='uint8', shape=(None), device='cpu', writable=False)], tex_offsets: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], tex_widths: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], tex_heights: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], tex_nchans: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], num_lights: int, num_cams: int, num_worlds: int, batch_render_view_width: int, batch_render_view_height: int, cam_fovy: Annotated[ArrayLike, dict(dtype='float32', shape=(None), device='cpu', writable=False)], cam_znear: Annotated[ArrayLike, dict(dtype='float32', shape=(None), device='cpu', writable=False)], cam_zfar: Annotated[ArrayLike, dict(dtype='float32', shape=(None), device='cpu', writable=False)], enabled_geom_groups: Annotated[ArrayLike, dict(dtype='int32', shape=(None), device='cpu', writable=False)], add_cam_debug_geo: bool = False, use_rt: bool = False, visualizer_gpu_handles: VisualizerGPUHandles | None = None) -> None: ...

    def init(self, arg0: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg1: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 4), writable=False)], arg2: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg3: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 4), writable=False)], arg4: Annotated[ArrayLike, dict(dtype='int32', shape=(None, None), writable=False)], arg5: Annotated[ArrayLike, dict(dtype='uint32', shape=(None, None), writable=False)], arg6: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg7: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg8: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg9: Annotated[ArrayLike, dict(dtype='uint32', shape=(None, None), writable=False)], arg10: Annotated[ArrayLike, dict(dtype='bool', shape=(None, None), writable=False)], arg11: Annotated[ArrayLike, dict(dtype='bool', shape=(None, None), writable=False)], arg12: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None), writable=False)], arg13: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None), writable=False)], arg14: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None), writable=False)], /) -> None: ...

    def render(self, arg0: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg1: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 4), writable=False)], arg2: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 3), writable=False)], arg3: Annotated[ArrayLike, dict(dtype='float32', shape=(None, None, 4), writable=False)], arg4: Annotated[ArrayLike, dict(dtype='uint32', shape=(None), writable=False)], /) -> None: ...

    def instance_positions_tensor(self) -> madrona.Tensor: ...

    def instance_rotations_tensor(self) -> madrona.Tensor: ...

    def camera_positions_tensor(self) -> madrona.Tensor: ...

    def camera_rotations_tensor(self) -> madrona.Tensor: ...

    def rgb_tensor(self) -> madrona.Tensor: ...

    def depth_tensor(self) -> madrona.Tensor: ...

    def normal_tensor(self) -> madrona.Tensor: ...

    def segmentation_tensor(self) -> madrona.Tensor: ...
