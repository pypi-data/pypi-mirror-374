"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –∫–∞–∫ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–µ–π —Å NEONPAY API
–í–º–µ—Å—Ç–æ 100+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ - –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫!
"""

# ========== –í–ê–®–ê –¢–ï–ö–£–©–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (–¥–ª–∏–Ω–Ω–∞—è) ==========
# –í–∞—à –∫–æ–¥ —Ç—Ä–µ–±—É–µ—Ç:
# - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (pre_checkout_handler, successful_payment_handler, process_verification_payment, process_topup_payment)
# - –†—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É JSON payload
# - –°–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# - –û–∫–æ–ª–æ 100+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞

# ========== –° NEONPAY API (–∫–æ—Ä–æ—Ç–∫–∞—è) ==========

from aiogram import Router, types
from aiogram.filters import Command
from neonpay import NeonPay
from config import bot, update_user_balance, update_user_verification_status, LOG_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NEONPAY (1 —Å—Ç—Ä–æ–∫–∞!)
neonpay = NeonPay.create_for_aiogram(bot)

router = Router()


# ========== –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø (–≤–º–µ—Å—Ç–æ 50+ —Å—Ç—Ä–æ–∫ - –≤—Å–µ–≥–æ 10!) ==========
@router.message(Command("verify"))
async def verify_handler(message: types.Message):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_stage = neonpay.create_payment_stage(
        title="Account Verification",
        description="Verify your account to access premium features",
        price=50,  # 50 XTR
        payload={"type": "verification", "user_id": user_id},
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å (1 —Å—Ç—Ä–æ–∫–∞!)
    await neonpay.send_invoice(message.chat.id, verification_stage)


# ========== –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê (–≤–º–µ—Å—Ç–æ 40+ —Å—Ç—Ä–æ–∫ - –≤—Å–µ–≥–æ 8!) ==========
@router.message(Command("topup"))
async def topup_handler(message: types.Message):
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /topup <—Å—É–º–º–∞>")

    amount = int(args[1])
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    topup_stage = neonpay.create_payment_stage(
        title="Balance Top-up",
        description=f"Add {amount} Stars to your balance",
        price=amount,
        payload={"type": "topup", "user_id": user_id, "amount": amount},
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å (1 —Å—Ç—Ä–æ–∫–∞!)
    await neonpay.send_invoice(message.chat.id, topup_stage)


# ========== –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô (–≤–º–µ—Å—Ç–æ 60+ —Å—Ç—Ä–æ–∫ - –≤—Å–µ–≥–æ 15!) ==========
@neonpay.on_successful_payment
async def handle_payment(payment_result):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    user_id = payment_result.user_id
    payload = payment_result.payload
    amount = payment_result.amount

    if payload["type"] == "verification":
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        await update_user_verification_status(
            user_id, verified=True, purchase_flag=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, "‚úÖ Your account has been verified!")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞)
        log_text = f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {user_id}, —Å—É–º–º–∞: {amount} XTR"
        await bot.send_message(LOG_ID, log_text)

    elif payload["type"] == "topup":
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        await update_user_balance(user_id, amount, "XTR")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, f"üí∞ Balance topped up with {amount} Stars!")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞)
        log_text = f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {user_id}, —Å—É–º–º–∞: {amount} XTR"
        await bot.send_message(LOG_ID, log_text)


# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò NEONPAY ==========


# Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@neonpay.add_middleware
async def payment_logger(payment_result, next_handler):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏"""
    print(f"üí∏ –ü–ª–∞—Ç–µ–∂: {payment_result.user_id} -> {payment_result.amount} XTR")
    return await next_handler(payment_result)


# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
@neonpay.add_middleware
async def payment_validator(payment_result, next_handler):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π"""
    if payment_result.amount <= 0:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: {payment_result.amount}")
        return
    return await next_handler(payment_result)


# ========== –ò–¢–û–ì–û ==========
# –í–∞—à –∫–æ–¥: ~100+ —Å—Ç—Ä–æ–∫
# –° NEONPAY: ~40 —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!)
#
# –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ NEONPAY:
# ‚úÖ –í 3 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –∫–æ–¥–∞
# ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout –∏ successful_payment
# ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ middleware
# ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# ‚úÖ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
