[project]
name = "strawchemy"
version = "0.19.0"
description = "Generate GraphQL API from SQLAlchemy models"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [{ name = "gazorby", email = "gazorby@pm.me" }]
keywords = ["API", "SQL", "graphql", "sqlalchemy", "strawberry"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "msgspec",
    "nox>=2025.5.1",
    "nox-uv>=0.6.2",
    "sqlalchemy>=2.0.10",
    "strawberry-graphql",
    "typing-extensions",
]

[project.urls]
Changelog = "https://github.com/gazorby/strawchemy/blob/main/CHANGELOG.md"
Documentation = "https://github.com/gazorby/strawchemy"
Homepage = "https://github.com/gazorby/strawchemy"
Issues = "https://github.com/gazorby/strawchemy/issues"
Repository = "https://github.com/gazorby/strawchemy"
"Sponsor on GitHub" = "https://github.com/sponsors/gazorby"

[project.optional-dependencies]
geo = ["GeoAlchemy2", "geojson-pydantic", "shapely"]
pydantic = ["pydantic"]

[dependency-groups]
aiosqlite = ["aiosqlite"]
build = ["bump-my-version", "git-cliff", "unasyncd"]
dev = [
    { include-group = "build" },
    { include-group = "test" },
    { include-group = "lint" },
    { include-group = "doc" },
    { include-group = "postgres" },
    { include-group = "mysql" },
    { include-group = "aiosqlite" },
    "testapp",
    "debugpy",
]
codeflash = ["codeflash"]
doc = ["git-cliff>=2.6.1"]
lint = ["basedpyright", "ruff", "vulture"]
mysql = ["asyncmy", "cryptography"]
postgres = ["asyncpg>=0.29.0", "psycopg[binary,pool]>=3.2.3"]
test = [
    { include-group = "postgres" },
    { include-group = "mysql" },
    { include-group = "aiosqlite" },
    "testapp",
    "nox[uv]",
    "nox-uv",
    "pytest",
    "pytest-cov",
    "pytest-asyncio>=0.24",
    "pytest-pretty",
    "pytest-xdist",
    "pytest-databases[postgres,mysql]",
    "pytest-lazy-fixtures",
    "syrupy",
    "sqlparse",
    "covdefaults",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.basedpyright]
venv = ".venv"
exclude = [
    "**/__pycache__",
    "**/.hypothesis",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.ruff_cache",
    "**/.venv",
    "**/.tox",
    "**/.nox",
    "**/build",
    "**/dist",
    "**/node_modules",
    "**/cdk.out",
    "**/alembic/versions",
]
verboseOutput = true
pythonVersion = "3.9"
typeCheckingMode = "strict"
reportUnknownMemberType = false
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportPrivateUsage = false
reportUnnecessaryTypeIgnoreComment = true
reportImplicitOverride = true
reportPropertyTypeMismatch = true
reportShadowedImports = true
strictGenericNarrowing = true

[tool.bumpversion]
allow_dirty = true
commit = true
commit_args = "--no-verify"
current_version = "0.19.0"
ignore_missing_files = false
ignore_missing_version = false
message = "build(release): bump to v{new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
sign_tags = false
tag = true
tag_message = "build(release): v{new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = 'version = "{new_version}"'
search = 'version = "{current_version}"'

[[tool.bumpversion.files]]
filename = "uv.lock"
replace = """
name = "strawchemy"
version = "{new_version}"
"""
search = """
name = "strawchemy"
version = "{current_version}"
"""

[tool.codespell]
skip = "*.po,*.ts,./src/3rdParty,./src/Test"
ignore-words-list = "nin"

[tool.coverage.run]
branch = true
source = ["src"]
plugins = ["covdefaults"]
omit = ["*/tests/*"]
parallel = true
relative_files = true

[tool.coverage.report]
exclude_also = ["def __repr__"]
fail_under = 50

[tool.git-cliff.changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors ‚ù§Ô∏è
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    # { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
    { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
    { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
    { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
    { message = "^style", group = "<!-- 5 -->üé® Styling" },
    { message = "^test", group = "<!-- 6 -->üß™ Testing" },
    { message = "^build\\(release\\): prepare for", skip = true },
    { message = "^build\\(deps.*\\)", skip = true },
    { message = "^build\\(pr\\)", skip = true },
    { message = "^build\\(pull\\)", skip = true },
    { message = "^build|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
    { message = ".*", group = "<!-- 10 -->üíº Other" },
    { body = "$^", skip = true },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[tool.git-cliff.remote.github]
owner = "gazorby"
repo = "strawchemy"
token = ""

[tool.hatch.build.targets.wheel]
packages = ["src/strawchemy"]

[tool.pytest.ini_options]
markers = [
    "snapshot: snapshot-based tests using syrupy",
    "integration: SQLAlchemy integration tests",
    "geo: Geoalchemy2 integration tests",
    "aiosqlite: SQLite (aiosqlite) Tests",
    "sqlite: SQLite Tests",
    "asyncmy: MySQL (asyncmy) Tests",
    "psycopg_async: SQLAlchemy Postgres (psycopg async) Tests",
    "psycopg_sync: SQLAlchemy Postgres (psycopg sync) Tests",
    "asyncpg: SQLAlchemy Postgres (asyncpg) Tests",
]
testpaths = ["tests"]
xfail_strict = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 120
fix = true
target-version = "py39"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".tox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/codegen/snapshots",
    "alembic/*  ",
]
src = ["src/strawchemy", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A005", # flake8-builtins - module {name} shadows a Python standard-library module
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "E501", # pycodestyle - line too long, handled by ruff format
    "PLR0913", # pylint - too many arguments
    "ARG002", # flake8-unused-argument - unused arguments
    "COM812", # flake8-commas - Checks for the absence of trailing commas
    "S101", # flake8-bandit - Assert statements, investigate
    "ANN401", # flake8-annotations - typing Any disallowed in function arguments
    "FBT", # flake8-annotations - boolean trap. Try to remove this in the future
    "PT013", # flake8-pytest-style - Incorrect import of pytest
    "UP007", # flake8-builtins - Unnecessary `Union` annotation
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["TC001", "UP037", "PLR2004"]

[tool.unasyncd]
add_editors_note = true
ruff_fix = true
ruff_format = true
update_docstrings = true
cache = true

[tool.unasyncd.files]
"src/strawchemy/sqlalchemy/repository/_async.py" = "src/strawchemy/sqlalchemy/repository/_sync.py"
"src/strawchemy/strawberry/repository/_async.py" = "src/strawchemy/strawberry/repository/_sync.py"

[tool.unasyncd.per_file_add_replacements."src/strawchemy/sqlalchemy/repository/_async.py"]
"strawchemy.sqlalchemy._executor.AsyncQueryExecutor" = "strawchemy.sqlalchemy._executor.SyncQueryExecutor"
SQLAlchemyGraphQLAsyncRepository = "SQLAlchemyGraphQLSyncRepository"
"strawchemy.sqlalchemy.typing.AnyAsyncSession" = "strawchemy.sqlalchemy.typing.AnySyncSession"

[tool.unasyncd.per_file_add_replacements."src/strawchemy/strawberry/repository/_async.py"]
"strawchemy.sqlalchemy.repository.SQLAlchemyGraphQLAsyncRepository" = "strawchemy.sqlalchemy.repository.SQLAlchemyGraphQLSyncRepository"
"strawchemy.sqlalchemy.typing.AnyAsyncSession" = "strawchemy.sqlalchemy.typing.AnySyncSession"
"strawchemy.strawberry.typing.AsyncSessionGetter" = "strawchemy.strawberry.typing.SyncSessionGetter"
StrawchemyAsyncRepository = "StrawchemySyncRepository"

[tool.uv]
default-groups = ["test", "lint"]
# unasyncd prevent codeflash to be installed to the latest version, need
conflicts = [[{ group = "build" }, { group = "codeflash" }]]

[tool.uv.sources]
testapp = { workspace = true }
# Temporary pin to allow msgspec 0.19.0+ on python 3.13
unasyncd = { git = "https://github.com/provinzkraut/unasyncd", rev = "6d630bd7f411d6052c429b7fb4481fd17f18b0a6" }

[tool.uv.workspace]
members = ["examples/*"]

[tool.vulture]
min_confidence = 100
paths = ["src", "tests"]
sort_by_size = true
exclude = ["tests/fixtures.py", "tests/unit/schemas/mutations"]
ignore_names = ["target"]

[tool.codeflash]
# All paths are relative to this pyproject.toml's directory.
module-root = "src"
tests-root = "tests"
test-framework = "pytest"
ignore-paths = []
formatter-cmds = ["ruff check --exit-zero --fix $file", "ruff format $file"]
