[env]
PROJECT_NAME = "strawchemy"
_.python.venv = { path = ".venv" }
_.file = ".env"

[tools]
ruff = "latest"
uv = "latest"
jq = "latest"
pre-commit = "latest"
actionlint = "latest"
python = "{{ get_env(name='PYTHON_VERSION', default='3.13') }}"

[vars]
local_pytest_options = "-n=6 -vv"
pytest_coverage_options = "--cov-config=./pyproject.toml --cov=src --cov-report=html"
ci_pytest_coverage_options = "--cov-config=./pyproject.toml --cov=src --junit-xml=./junit.xml -o junit_family=legacy"
cleanable_paths = '''{{
[
  ".nox",
  ".pytest_cache",
  ".ruff_cache",
  ".hypothesis",
  "build/",
  "dist/",
  ".eggs/",
  ".coverage",
  "coverage.xml",
  "coverage.json",
  "junit*.xml",
  "htmlcov/",
  "tests/.pytest_cache",
  "tests/**/.pytest_cache",
  ".mypy_cache",
  ".unasyncd_cache/",
  ".auto_pytabs_cache",
  "node_module",
] | join(sep=" ")
}}'''

# ###############
# Dependencies
# ###############

[tasks._install]
description = "Install dependencies"
hide = true
run = "uv sync --all-extras --dev"

[tasks."_install:geo"]
description = "Install dependencies with geo extras"
hide = true
run = "uv sync --extra=geo --dev"

[tasks.install]
description = "Install dependencies and pre-commit hooks"
alias = "i"
depends = ["install:pre-commit", "_install"]

[tasks."install:pre-commit"]
description = "Install pre-commit hooks"
run = "pre-commit install --install-hooks 2>&1"

# ###############
# Test
# ###############

[tasks.test]
description = "Run tests"
depends = "_install"
alias = "t"
usage = 'arg "<test>" default=""'
run = 'uv run pytest {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:coverage"]
description = "Run tests with coverage"
depends = "_install"
alias = "tc"
usage = 'arg "<test>" default=""'
run = 'uv run pytest {{vars.local_pytest_options}} {{vars.pytest_coverage_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit"]
description = "Run unit tests"
depends = "_install"
alias = "tu"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t unit -- tests/unit {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit:no-extras"]
description = "Run unit tests without extras dependencies"
depends = "_install"
alias = "tug"
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -s unit-no-extras -- tests/unit {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit:coverage"]
description = "Run unit tests with coverage"
depends = "_install"
alias = "tuc"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t unit -- tests/unit {{vars.local_pytest_options}} {{vars.pytest_coverage_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration"]
description = "Run integration tests"
depends = "_install"
alias = "ti"
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -s integration -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration-postgres"]
description = "Run integration tests"
depends = "_install"
alias = "ti-postgres"
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t postgres -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration-mysql"]
description = "Run integration tests"
depends = "_install"
alias = "ti-mysql"
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t mysql -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration-sqlite"]
description = "Run integration tests"
depends = "_install"
alias = "ti-sqlite"
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t sqlite -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration:coverage"]
description = "Run integration tests with coverage"
depends = "_install"
alias = "tic"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -s integration -- {{vars.local_pytest_options}} {{vars.pytest_coverage_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit-all"]
description = "Run unit tests on all supported python versions"
depends = "_install"
alias = "tua"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -t unit -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration-all"]
description = "Run integration tests on all supported python versions"
depends = "_install"
alias = "tia"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -P {{option(name="python", default="3.13")}} -s integration -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:update-snapshots"]
description = "Run snapshot-based tests and update snapshots"
depends = "_install"
run = "uv run pytest {{vars.local_pytest_options}} -m snapshot --snapshot-update"

# ###############
# CI
# ###############

[tasks."ci:install"]
description = "Install dependencies and pre-commit hooks"
run = "uv venv --allow-existing && uv pip install nox nox-uv"

[tasks."ci:test"]
description = "Run tests in CI"
usage = 'arg "<session>"'
depends = "ci:install"
env = { UV_PYTHON_PREFERENCE = "only-managed" }
run = "nox -t tests -s '{{arg(name='session')}}' -- -n=2 {{vars.ci_pytest_coverage_options}}"

[tasks."ci:lint"]
description = "Lint CI yaml files"
run = "actionlint -shellcheck ''"

[tasks."ci:test-matrix"]
description = "Output test matrix for CI"
depends = "ci:install"
run = '''
    nox --json -t tests -t ci -l |
    jq 'map(
        {
        session,
        tags,
        python,
        name,
        job_name: "\( .name ) on \( .python )\( if .call_spec != {} then " (\(.call_spec | to_entries | map("\(.key)=\(.value)") | join(", ")))" else "" end )"
        }
    )'
'''

[tasks."ci:test-sessions"]
description = "Output test session names for CI"
depends = "ci:install"
run = "nox --json -t tests -l | jq 'map(.name) | unique'"

# ###############
# Linting
# ###############

[tasks."ruff:check"]
description = "Check ruff formatting"
depends = "_install"
run = "ruff check"

[tasks."ruff:fix"]
description = "Fix ruff errors"
run = "ruff check --fix --unsafe-fixes"

[tasks."ruff:format"]
description = "Format code"
run = "ruff format"

[tasks."ruff:format:check"]
description = "Format code"
run = "ruff format --check"

[tasks.pyright]
description = "Run basedpyright"
depends = "_install"
run = "uv run basedpyright"

[tasks.vulture]
description = "Run vulture"
run = "uv run --only-group lint vulture"

[tasks.lint]
description = "Lint the code"
alias = "l"
depends = ["vulture", "pyright", "ruff:check", "ruff:format:check"]

[tasks."lint:pre-commit"]
description = "Lint the code in pre-commit hook"
depends = ["vulture", "pyright"]

[tasks.pre-commit]
description = "Run pre-commit checks"
depends = "install:pre-commit"
run = "pre-commit run --color=always --all-files"

# ###############
# Tools
# ###############

[tasks.auto-bump]
description = "Auto bump the version"
confirm = "Are you sure you want to auto bump the version?"
depends = "_install"
run = "uv run bump-my-version bump --new-version $(uv run git cliff --unreleased --bumped-version)"

[tasks.clean]
description = "Clean working directory"
alias = "c"
confirm = "Are you sure you want to clean the working directory? This will remove test caches, build artifacts, and other temporary files."
run = [
  "rm -rf {{vars.cleanable_paths}} >/dev/null 2>&1",
  "find . -name '*.egg-info' -exec rm -rf {} + >/dev/null 2>&1",
  "find . -type f -name '*.egg' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*.pyc' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*.pyo' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*~' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '__pycache__' -exec rm -rf {} + >/dev/null 2>&1",
  "find . -name '.ipynb_checkpoints' -exec rm -rf {} + >/dev/null 2>&1",
]

[tasks."render:usage"]
description = "Generate tasks documentation"
run = ["mise generate task-docs > tasks.md"]
