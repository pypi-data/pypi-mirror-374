# serializer version: 1
# name: test_query_schemas[all_fields_order_by]
  '''
  input ColorAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum!
  }
  
  input ColorAggregateNumericFieldsOrderBy {
    name: OrderByEnum!
  }
  
  input ColorAggregateOrderBy {
    count: OrderByEnum
    maxString: ColorAggregateMinMaxStringFieldsOrderBy
    minString: ColorAggregateMinMaxStringFieldsOrderBy
    sum: ColorAggregateNumericFieldsOrderBy
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input ColorOrderBy {
    fruitsAggregate: FruitAggregateOrderBy
    fruits: FruitOrderBy
    name: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type ColorType {
    fruitsAggregate: FruitAggregate!
  
    """Fetch objects from the FruitType collection"""
    fruits: [FruitType!]!
    name: String!
    id: UUID!
  }
  
  """Aggregation fields"""
  type FruitAggregate {
    avg: FruitNumericFields!
    count: Int
    max: FruitMinMaxFields!
    min: FruitMinMaxFields!
    stddevPop: FruitNumericFields!
    stddevSamp: FruitNumericFields!
    sum: FruitSumFields!
    varPop: FruitNumericFields!
    varSamp: FruitNumericFields!
  }
  
  input FruitAggregateMinMaxStringFieldsOrderBy {
    name: OrderByEnum!
  }
  
  input FruitAggregateNumericFieldsOrderBy {
    sweetness: OrderByEnum!
  }
  
  input FruitAggregateOrderBy {
    avg: FruitAggregateNumericFieldsOrderBy
    count: OrderByEnum
    max: FruitAggregateNumericFieldsOrderBy
    maxString: FruitAggregateMinMaxStringFieldsOrderBy
    min: FruitAggregateNumericFieldsOrderBy
    minString: FruitAggregateMinMaxStringFieldsOrderBy
    stddevPop: FruitAggregateNumericFieldsOrderBy
    stddevSamp: FruitAggregateNumericFieldsOrderBy
    sum: FruitAggregateNumericFieldsOrderBy
    varPop: FruitAggregateNumericFieldsOrderBy
    varSamp: FruitAggregateNumericFieldsOrderBy
  }
  
  """GraphQL type"""
  type FruitMinMaxFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitNumericFields {
    sweetness: Float
  }
  
  """
  Boolean expression to compare fields. All fields are combined with logical 'AND'.
  """
  input FruitOrderBy {
    colorAggregate: ColorAggregateOrderBy
    color: ColorOrderBy
    name: OrderByEnum
    colorId: OrderByEnum
    sweetness: OrderByEnum
    id: OrderByEnum
  }
  
  """GraphQL type"""
  type FruitSumFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitType {
    color: ColorType!
    name: String!
    colorId: UUID
    sweetness: Int!
    id: UUID!
  }
  
  enum OrderByEnum {
    ASC
    ASC_NULLS_FIRST
    ASC_NULLS_LAST
    DESC
    DESC_NULLS_FIRST
    DESC_NULLS_LAST
  }
  
  type Query {
    """Fetch objects from the FruitType collection"""
    fruit(orderBy: [FruitOrderBy!] = null): [FruitType!]!
  }
  
  scalar UUID
  '''
# ---
