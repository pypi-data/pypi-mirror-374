name: ðŸ”‚ Tests and linting

env:
  COLUMNS: 120 # Makes the error summary table printed by pytest-pretty much easier to read
  PROJECT_NAME: "strawchemy"

on:
  push:
    branches: [main, ci/*, dependabot/*, renovate/*]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pre:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Skip check
        id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "never"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/**.md", "**/.vscode/**", "**/.dockerignore", "Makefile"]'
          paths: '["src/**", "tests/**", "uv.lock", "pyproject.toml", ".github/workflows/ci.yaml", "noxfile.py", "mise.toml"]'

  generate-jobs-tests:
    name: ðŸ’» Generate test matrix
    needs: pre
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      sessions: ${{ steps.set-matrix.outputs.sessions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup mise
        uses: jdx/mise-action@v3
        with:
          cache: true
          log_level: debug

      - name: Generate test matrix
        id: set-matrix
        shell: bash
        run: |
          echo sessions=$(mise run ci:test-matrix) | tee --append $GITHUB_OUTPUT

  tests:
    name: ðŸ”¬ ${{ matrix.session.job_name }}
    needs: [pre, generate-jobs-tests]
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-jobs-tests.outputs.sessions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        if: contains(matrix.session.tags, 'docker')
        id: docker-buildx
        uses: docker/setup-buildx-action@v3

      - name: Pip and nox cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.nox
            .nox
          key:
            ${{ runner.os }}-nox-${{ matrix.session.session }}-${{ env.pythonLocation }}-${{
            hashFiles('**/uv.lock') }}-${{ hashFiles('**/noxfile.py') }}
          restore-keys: |
            ${{ runner.os }}-nox-${{ matrix.session.session }}-${{ env.pythonLocation }}

      - name: Setup mise
        uses: jdx/mise-action@v3
        with:
          cache: true
          log_level: debug

      - name: Run tests
        run: mise run ci:test "${{ matrix.session.session }}"

      - name: Rename coverage and junit files
        run: |
          mv .coverage* .coverage.${{ matrix.session.session }}
          mv junit* junit-${{ matrix.session.session }}.xml

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        id: upload-coverage-data
        if: ${{ always() }}
        with:
          name: coverage-${{ matrix.session.session }}
          path: .coverage.${{ matrix.session.session }}
          include-hidden-files: true

      - name: Upload test results data
        uses: actions/upload-artifact@v4
        id: upload-test-results-data
        if: ${{ always() }}
        with:
          name: test-results-${{ matrix.session.session }}
          path: junit-${{ matrix.session.session }}.xml

  upload-coverage:
    name: ðŸ†™ Upload Coverage
    needs: [tests, generate-jobs-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download test artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: coverage-*
          merge-multiple: true

      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Combine coverage files
        run: |
          python -Im pip install coverage covdefaults
          python -Im coverage combine
          python -Im coverage xml -i

      - name: Upload coverage to Codeocv
        id: upload-coverage
        uses: codecov/codecov-action@v5
        with:
          name: ${{env.PROJECT_NAME}}-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  upload-test-results:
    name: ðŸ“Š Upload test results
    needs: [tests, generate-jobs-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        session: ${{ fromJson(needs.generate-jobs-tests.outputs.sessions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download test artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: test-results-*

      - name: Upload test results to Codecov
        id: upload-test-results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          name: ${{env.PROJECT_NAME}}-test-results
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.session.session }}
          verbose: true

  lint:
    name: âœ¨ Lint
    needs: pre
    if: github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup mise
        uses: jdx/mise-action@v3
        with:
          cache: true
          log_level: debug

      - name: Run linting
        run: mise run lint

  # Ensure the workflow is successful only if all job in matrixes are successful
  result:
    name: âœ… Result
    if: (github.ref_type == 'tag' || needs.pre.outputs.should_skip != 'true') && always()
    runs-on: ubuntu-latest
    needs:
      - pre
      - tests
      - lint
    steps:
      - name: Mark workflow as failed if lint or test did not pass or were cancelled
        if: contains(fromJson('["failure", "cancelled"]'), needs.tests.result) || contains(fromJson('["failure", "cancelled"]'), needs.lint.result)
        run: exit 1
      - name: Invoke release workflow
        if: github.ref_type == 'tag'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ðŸš€ Continuous Deployment
