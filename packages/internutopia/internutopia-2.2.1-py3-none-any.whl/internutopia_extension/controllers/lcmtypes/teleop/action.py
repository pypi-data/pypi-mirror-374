"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class action(object):

    __slots__ = ["head_mat", "left_wrist_mat", "right_wrist_mat", "left_hand_mat", "right_hand_mat"]

    __typenames__ = ["float", "float", "float", "float", "float"]

    __dimensions__ = [[4, 4], [4, 4], [4, 4], [25, 3], [25, 3]]

    def __init__(self):
        self.head_mat = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        """ LCM Type: float[4][4] """
        self.left_wrist_mat = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        """ LCM Type: float[4][4] """
        self.right_wrist_mat = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        """ LCM Type: float[4][4] """
        self.left_hand_mat = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(25) ]
        """ LCM Type: float[25][3] """
        self.right_hand_mat = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(25) ]
        """ LCM Type: float[25][3] """

    def encode(self):
        buf = BytesIO()
        buf.write(action._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(4):
            buf.write(struct.pack('>4f', *self.head_mat[i0][:4]))
        for i0 in range(4):
            buf.write(struct.pack('>4f', *self.left_wrist_mat[i0][:4]))
        for i0 in range(4):
            buf.write(struct.pack('>4f', *self.right_wrist_mat[i0][:4]))
        for i0 in range(25):
            buf.write(struct.pack('>3f', *self.left_hand_mat[i0][:3]))
        for i0 in range(25):
            buf.write(struct.pack('>3f', *self.right_hand_mat[i0][:3]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != action._get_packed_fingerprint():
            raise ValueError("Decode error")
        return action._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = action()
        self.head_mat = []
        for i0 in range(4):
            self.head_mat.append(struct.unpack('>4f', buf.read(16)))
        self.left_wrist_mat = []
        for i0 in range(4):
            self.left_wrist_mat.append(struct.unpack('>4f', buf.read(16)))
        self.right_wrist_mat = []
        for i0 in range(4):
            self.right_wrist_mat.append(struct.unpack('>4f', buf.read(16)))
        self.left_hand_mat = []
        for i0 in range(25):
            self.left_hand_mat.append(struct.unpack('>3f', buf.read(12)))
        self.right_hand_mat = []
        for i0 in range(25):
            self.right_hand_mat.append(struct.unpack('>3f', buf.read(12)))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if action in parents: return 0
        tmphash = (0xb435792f65b7284c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if action._packed_fingerprint is None:
            action._packed_fingerprint = struct.pack(">Q", action._get_hash_recursive([]))
        return action._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", action._get_packed_fingerprint())[0]

