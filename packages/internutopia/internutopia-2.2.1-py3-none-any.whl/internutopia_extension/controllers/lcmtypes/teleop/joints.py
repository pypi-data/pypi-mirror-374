"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class joints(object):

    __slots__ = ["joint_num", "joint_positions"]

    __typenames__ = ["int32_t", "float"]

    __dimensions__ = [None, ["joint_num"]]

    def __init__(self):
        self.joint_num = 0
        """ LCM Type: int32_t """
        self.joint_positions = []
        """ LCM Type: float[joint_num] """

    def encode(self):
        buf = BytesIO()
        buf.write(joints._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.joint_num))
        buf.write(struct.pack('>%df' % self.joint_num, *self.joint_positions[:self.joint_num]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joints._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joints._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = joints()
        self.joint_num = struct.unpack(">i", buf.read(4))[0]
        self.joint_positions = struct.unpack('>%df' % self.joint_num, buf.read(self.joint_num * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if joints in parents: return 0
        tmphash = (0x242b6dadb9e53b97) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if joints._packed_fingerprint is None:
            joints._packed_fingerprint = struct.pack(">Q", joints._get_hash_recursive([]))
        return joints._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", joints._get_packed_fingerprint())[0]

