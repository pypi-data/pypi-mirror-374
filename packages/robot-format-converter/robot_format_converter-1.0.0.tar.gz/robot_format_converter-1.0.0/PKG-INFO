Metadata-Version: 2.4
Name: robot-format-converter
Version: 1.0.0
Summary: Universal robot description format converter
Author-email: Thanh Nguyen <thanh.nguyen@example.com>
Maintainer-email: Thanh Nguyen <thanh.nguyen@example.com>
License: Apache-2.0
Project-URL: Homepage, https://github.com/thanhndv212/robot_format_converter
Project-URL: Repository, https://github.com/thanhndv212/robot_format_converter.git
Project-URL: Documentation, https://github.com/thanhndv212/robot_format_converter#readme
Project-URL: Bug Reports, https://github.com/thanhndv212/robot_format_converter/issues
Keywords: robotics,urdf,sdf,mjcf,robot-description,format-conversion,robot-modeling
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: lxml>=4.6.0
Requires-Dist: pyyaml>=5.4.0
Requires-Dist: jsonschema>=3.2.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.10.0; extra == "dev"
Requires-Dist: black>=21.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=3.8.0; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Requires-Dist: pre-commit>=2.10.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=0.5.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.11.0; extra == "docs"
Provides-Extra: all
Requires-Dist: robot-format-converter[dev,docs]; extra == "all"
Dynamic: license-file

# Robot Format Converter

[![Python Package](https://img.shields.io/pypi/v/robot-format-converter.svg)](https://pypi.org/project/robot-format-converter/)
[![Python Version](https://img.shields.io/pypi/pyversions/robot-format-converter.svg)](https://pypi.org/project/robot-format-converter/)
[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

A universal robot description format converter that enables seamless conversion between different robot modeling formats including URDF, SDF, MJCF, USD, and a unified schema format.

## Features

- **Multi-Format Support**: Convert between URDF, SDF, MJCF, USD, and custom schema formats
- **Unified Schema**: Common intermediate representation preserving robot structure and properties
- **Command-Line Interface**: Easy-to-use CLI for single file and batch conversions
- **Python API**: Programmatic access for integration into robotics pipelines
- **Format Detection**: Automatic format detection from file extensions and content
- **Validation**: Built-in schema validation and error checking
- **Extensible Architecture**: Easy to add support for new formats

## Supported Formats

| Format | Extension | Read | Write | Description |
|--------|-----------|------|-------|-------------|
| URDF   | `.urdf`   | âœ…   | âœ…    | Unified Robot Description Format |
| SDF    | `.sdf`    | ðŸš§   | ðŸš§    | Simulation Description Format |
| MJCF   | `.xml`    | ðŸš§   | ðŸš§    | MuJoCo Modeling Format |
| USD    | `.usd`, `.usda` | ðŸš§   | ðŸš§    | Universal Scene Description |
| Schema | `.yaml`, `.json` | âœ…   | âœ…    | Custom unified schema |

*Legend: âœ… Implemented, ðŸš§ In Development*

## Installation

### From PyPI (Recommended)

```bash
pip install robot-format-converter
```

### From Source

```bash
git clone https://github.com/thanhndv212/robot_format_converter.git
cd robot_format_converter
pip install -e .
```

### Development Installation

```bash
git clone https://github.com/thanhndv212/robot_format_converter.git
cd robot_format_converter
pip install -e .[dev]
```

## Quick Start

### Command Line Interface

**Single File Conversion:**
```bash
# Convert URDF to SDF
robot-convert convert robot.urdf robot.sdf

# Convert with explicit format specification
robot-convert convert --source urdf --target mjcf robot.urdf robot.xml

# Get file information
robot-convert info robot.urdf
```

**Batch Conversion:**
```bash
# Convert all URDF files in a directory to SDF
robot-convert batch-convert models/ output/ urdf sdf

# Convert with file pattern
robot-convert batch-convert models/ output/ urdf sdf --pattern "*.urdf"
```

**Validation:**
```bash
# Validate a schema file
robot-convert validate robot_schema.yaml

# List supported formats
robot-convert list-formats
```

### Python API

**Basic Conversion:**
```python
from robot_format_converter import FormatConverter

# Create converter instance
converter = FormatConverter()

# Convert single file
schema = converter.convert('robot.urdf', 'robot.sdf')
print(f"Converted robot: {schema.metadata.name}")
print(f"Links: {len(schema.links)}, Joints: {len(schema.joints)}")

# Batch convert directory
converted_files = converter.batch_convert(
    'input_models/', 
    'output_models/', 
    'urdf', 
    'sdf'
)
print(f"Converted {len(converted_files)} files")
```

**Advanced Usage:**
```python
from robot_format_converter import FormatConverter, CommonSchema
from pathlib import Path

converter = FormatConverter()

# Convert to intermediate schema format
schema = converter.to_schema('robot.urdf', 'robot_schema.yaml')

# Access robot components
for link in schema.links:
    print(f"Link: {link.name}")
    if link.visual:
        print(f"  Visual: {link.visual.geometry}")
    if link.collision:
        print(f"  Collision: {link.collision.geometry}")

for joint in schema.joints:
    print(f"Joint: {joint.name} ({joint.type})")
    print(f"  Parent: {joint.parent} -> Child: {joint.child}")

# Convert from schema to target format
converter.from_schema('robot_schema.yaml', 'output.sdf')
```

**Format Detection:**
```python
from robot_format_converter.utils import detect_format, get_format_info

# Detect format from file
format_name = detect_format('robot.urdf')
print(f"Detected format: {format_name}")

# Get format information
info = get_format_info(format_name)
print(f"Format description: {info['description']}")
print(f"Supported features: {info['features']}")
```

## Schema Format

The unified schema format provides a common intermediate representation:

```yaml
metadata:
  name: "my_robot"
  version: "1.0"
  author: "Robot Designer"
  description: "A sample robot description"

links:
  - name: "base_link"
    inertial:
      mass: 1.0
      center_of_mass: [0, 0, 0]
      inertia_matrix: [1, 0, 0, 1, 0, 1]
    visual:
      geometry:
        type: "box"
        size: [0.1, 0.1, 0.1]
      material:
        color: [1, 0, 0, 1]
    collision:
      geometry:
        type: "box"
        size: [0.1, 0.1, 0.1]

joints:
  - name: "joint1"
    type: "revolute"
    parent: "base_link"
    child: "link1"
    origin:
      xyz: [0, 0, 0.1]
      rpy: [0, 0, 0]
    axis: [0, 0, 1]
    limits:
      lower: -3.14
      upper: 3.14
      effort: 10
      velocity: 1
```

## Architecture

The converter uses a modular architecture with clear separation of concerns:

```
robot_format_converter/
â”œâ”€â”€ __init__.py          # Public API
â”œâ”€â”€ core.py              # Core conversion engine
â”œâ”€â”€ schema.py            # Unified schema definition
â”œâ”€â”€ parsers.py           # Format-specific parsers
â”œâ”€â”€ exporters.py         # Format-specific exporters
â”œâ”€â”€ utils.py             # Utility functions
â””â”€â”€ __main__.py          # CLI interface
```

**Key Components:**

- **FormatConverter**: Main interface for conversions
- **ConversionEngine**: Orchestrates parsing and exporting
- **CommonSchema**: Unified intermediate representation
- **BaseParser/BaseExporter**: Abstract base classes for format handlers
- **Format-specific parsers/exporters**: Handle individual format details

## Adding New Formats

To add support for a new format:

1. **Create Parser Class:**
```python
from robot_format_converter.core import BaseParser
from robot_format_converter.schema import CommonSchema

class MyFormatParser(BaseParser):
    def can_parse(self, file_path: str) -> bool:
        return file_path.endswith('.myformat')
    
    def parse(self, file_path: str) -> CommonSchema:
        # Implementation here
        pass
```

2. **Create Exporter Class:**
```python
from robot_format_converter.core import BaseExporter
from robot_format_converter.schema import CommonSchema

class MyFormatExporter(BaseExporter):
    def can_export(self, format_name: str) -> bool:
        return format_name == 'myformat'
    
    def export(self, schema: CommonSchema, file_path: str) -> None:
        # Implementation here
        pass
```

3. **Register with Engine:**
```python
from robot_format_converter import ConversionEngine

engine = ConversionEngine()
engine.register_parser('myformat', MyFormatParser())
engine.register_exporter('myformat', MyFormatExporter())
```

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Development Setup

```bash
# Clone repository
git clone https://github.com/thanhndv212/robot_format_converter.git
cd robot_format_converter

# Install development dependencies
pip install -e .[dev]

# Install pre-commit hooks
pre-commit install

# Run tests
pytest

# Run linting
flake8 robot_format_converter/
black robot_format_converter/
isort robot_format_converter/
```

### Running Tests

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=format_converter

# Run specific test
pytest tests/test_urdf_parser.py
```

## Examples

Check out the [examples](examples/) directory for more usage examples:

- [Basic conversion](examples/basic_conversion.py)
- [Batch processing](examples/batch_processing.py)
- [Custom format integration](examples/custom_format.py)
- [Schema validation](examples/schema_validation.py)

## Roadmap

- âœ… URDF parser and exporter
- âœ… Unified schema format
- âœ… Command-line interface
- ðŸš§ SDF parser and exporter
- ðŸš§ MJCF parser and exporter
- ðŸš§ USD parser and exporter
- ðŸ“‹ ROS2 integration
- ðŸ“‹ Gazebo integration
- ðŸ“‹ MuJoCo integration
- ðŸ“‹ Isaac Sim integration

*Legend: âœ… Complete, ðŸš§ In Progress, ðŸ“‹ Planned*

## License

This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.

## Related Projects

- [FIGAROH](https://github.com/thanhndv212/figaroh): Robot calibration and identification library
- [URDF Parser](https://github.com/ros/urdf_parser_py): ROS URDF parsing library
- [PyBullet](https://pybullet.org/): Physics simulation supporting URDF and SDF
- [MuJoCo](https://mujoco.org/): Physics simulator with MJCF format

## Citation

If you use this package in your research, please cite:

```bibtex
@software{robot_format_converter,
  author = {Nguyen, Thanh},
  title = {Robot Format Converter: Universal Robot Description Format Converter},
  year = {2025},
  url = {https://github.com/thanhndv212/robot_format_converter},
  version = {1.0.0}
}
```
