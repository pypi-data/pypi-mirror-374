Metadata-Version: 2.4
Name: telethon_up
Version: 1.1.2
Summary: Full-featured Telegram client library for Python 3
Home-page: https://github.com/amirwolf5122/Telethon_up
Author: Amir:3
Author-email: amirwolf512@gmail.com
License: MIT
Keywords: telegram api chat client library messaging mtproto
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Communications :: Chat
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.5
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: requires-python
Dynamic: summary

# Telethon  
> ⭐️ Thanks **everyone** who has starred the project, it means a lot!

**Telethon** is an [asyncio](https://docs.python.org/3/library/asyncio.html) **Python 3**
[MTProto](https://core.telegram.org/mtproto) library to interact with [Telegram](https://telegram.org/)'s API
as a user or through a bot account (bot API alternative).

Important

If you have code using Telethon before its 1.0 version, you must
read [Compatibility and Convenience](https://docs.telethon.dev/en/stable/misc/compatibility-and-convenience.html) to learn how to migrate.
As with any third-party library for Telegram, be careful not to
break [Telegram's ToS](https://core.telegram.org/api/terms) or [Telegram can ban the account](https://docs.telethon.dev/en/stable/quick-references/faq.html#my-account-was-deleted-limited-when-using-the-library)
# What is this?
Telegram is a popular messaging application. This library is meant to make it easy for you to write Python programs that can interact with Telegram. Think of it as a wrapper that has already done the heavy job for you, so you can focus on developing an application.
# What telethon-up does:3
⭐️The purpose of telethon-up is that it automatically updates the TL layer (api.tl) to the latest version of Telegram⭐️:3
# Installing

```bash
pip3 install telethon-up
```


# Creating a client

```python
import telethon_up
# telethon_up.chack()
# Automatically update the Telethon API layer (api.tl).
from telethon import TelegramClient, events, sync
# These example values won't work. You must get your own api_id and
# api_hash from https://my.telegram.org, under API Development.
api_id = 12345
api_hash = '0123456789abcdef0123456789abcdef'

client = TelegramClient('session_name', api_id, api_hash)
client.start()
```
# Doing stuff

```python
print(client.get_me().stringify())

client.send_message('username', 'Hello! Talking to you from Telethon')
client.send_file('username', '/home/myself/Pictures/holidays.jpg')

client.download_profile_photo('me')
messages = client.get_messages('username')
messages[0].download_media()

@client.on(events.NewMessage(pattern='(?i)hi|hello'))
async def handler(event):
  await event.respond('Hey!')
```
# Next steps
Do you like how Telethon looks? Check out [Read The Docs](https://docs.telethon.dev/) for a more in-depth explanation, with examples, troubleshooting issues, and more useful information.
