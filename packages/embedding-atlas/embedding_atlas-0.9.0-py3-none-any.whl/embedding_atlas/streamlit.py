# Copyright (c) 2025 Apple Inc. Licensed under MIT License.

import os
from typing import Literal

import streamlit.components.v1 as components

parent_dir = os.path.dirname(os.path.abspath(__file__))
build_dir = os.path.join(parent_dir, "widget_static/streamlit")
_embedding_atlas = components.declare_component("embedding_atlas", path=build_dir)


def embedding_atlas(
    data_frame,
    x: str | None = None,
    y: str | None = None,
    text: str | None = None,
    labels: Literal["automatic"] | None = "automatic",
    neighbors: str | None = None,
    show_table: bool | None = None,
    show_charts: bool | None = None,
    show_embedding: bool | None = None,
    key=None,
) -> dict:
    """
    Create an Embedding Atlas widget in Streamlit.

    Args:
        data_frame:
            The data frame to visualize.
        x:
            The column name for X axis in the embedding.
        y:
            The column name for Y axis in the embedding.
        text:
            The column name for the textual data.
        labels:
            Labels for the embedding view. Set to `"automatic"` to generate labels automatically.
            Labels are generated by clustering the 2D density distribution and selecting
            representative keywords using TF-IDF ranking. Currently, `"automatic"` is the only supported option.
        neighbors:
            The column name containing precomputed K-nearest neighbors for each point.
            Each value in the column should be a dictionary with the format:
            `{ "ids": [id1, id2, ...], "distances": [distance1, distance2, ...] }`.
            - `"ids"` should be an array of row indices of the neighbors, sorted by distance.
            - `"distances"` should contain the corresponding distances to each neighbor.
        show_table:
            Whether to display the data table when the widget opens.
        show_charts:
            Whether to display charts when the widget opens.
        show_embedding:
            Whether to display the embedding view when the widget opens.

    Returns: A dict with the following key:
        - predicate: the SQL predicate for the current selection in the widget.
    """

    view_config = {}

    if show_table is not None:
        view_config["showTable"] = show_table
    if show_charts is not None:
        view_config["showSidebar"] = show_charts
    if show_embedding is not None:
        view_config["showEmbedding"] = show_embedding

    props = {
        "textColumn": text,
        "initialState": {"version": "0.0.0", "view": view_config},
        "automaticLabels": labels == "automatic",
    }

    if x is not None and y is not None:
        props["projectionColumns"] = {"x": x, "y": y}

    if neighbors is not None:
        props["neighborsColumn"] = neighbors

    return _embedding_atlas(data_frame=data_frame, props=props, key=key, default={})
