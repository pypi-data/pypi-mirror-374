# Pre-commit configuration for OPS POP 2022 Works
# Install with: pip install pre-commit && pre-commit install

repos:
  # General Python hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-json
      - id: check-toml
      - id: debug-statements
      - id: name-tests-test
      - id: requirements-txt-fixer

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Dependency security
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Jupyter notebook formatting
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.0
    hooks:
      - id: nbqa-black
        args: [--line-length=88]
      - id: nbqa-isort
        args: [--profile=black, --line-length=88]
      - id: nbqa-flake8
        args: [--max-line-length=88]

  # Documentation
  - repo: https://github.com/pycqa/doc8
    rev: 1.1.1
    hooks:
      - id: doc8
        args: [--max-line-length=88]

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.5.3
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Git hooks
  - repo: local
    hooks:
      - id: check-package-version
        name: Check package version consistency
        entry: python -c "
          import re
          import sys
          from pathlib import Path
          
          # Read version from pyproject.toml
          with open('pyproject.toml', 'r') as f:
              content = f.read()
              version_match = re.search(r'version\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
              if version_match:
                  pyproject_version = version_match.group(1)
              else:
                  print('No version found in pyproject.toml')
                  sys.exit(1)
          
          # Read version from setup.py
          with open('setup.py', 'r') as f:
              content = f.read()
              version_match = re.search(r'version\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
              if version_match:
                  setup_version = version_match.group(1)
              else:
                  print('No version found in setup.py')
                  sys.exit(1)
          
          # Check if versions match
          if pyproject_version != setup_version:
              print(f'Version mismatch: pyproject.toml has {pyproject_version}, setup.py has {setup_version}')
              sys.exit(1)
          
          print(f'Version consistency check passed: {pyproject_version}')
        language: system
        pass_filenames: false
