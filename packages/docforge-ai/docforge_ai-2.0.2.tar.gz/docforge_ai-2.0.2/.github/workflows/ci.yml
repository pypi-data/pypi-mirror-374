name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: black --check .

    - name: Type check with mypy
      run: mypy docforge.py backend/app --ignore-missing-imports
      continue-on-error: true

    - name: Test CLI initialization
      run: |
        python docforge.py init
        ls -la .env || echo ".env not created"
      continue-on-error: true

    - name: Test CLI help commands
      run: |
        python docforge.py --help
        python docforge.py list-docs
        python docforge.py list-projects

    - name: Test configuration validation
      run: |
        python backend/app/core/simple_config.py check
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Safety check
      run: |
        pip install -r requirements.txt
        safety check --json || echo "Safety scan completed with warnings"

    - name: Bandit security check
      run: |
        bandit -r . -f json || echo "Bandit scan completed with warnings"

  package:
    name: Package Test
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check manifest
      run: check-manifest
      continue-on-error: true

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        WORKDIR /app

        # Copy requirements first for better caching
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Create non-root user
        RUN useradd --create-home --shell /bin/bash docforge
        USER docforge

        # Set environment
        ENV PYTHONPATH=/app
        ENV DOCFORGE_CLI_MODE=true

        # Default command
        CMD ["python", "docforge.py", "--help"]
        EOF

    - name: Build Docker image
      run: docker build -t docforge-test .

    - name: Test Docker image
      run: |
        docker run --rm docforge-test python docforge.py --help
        docker run --rm docforge-test python docforge.py list-docs

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, security, package]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/docforge-opensource

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, security, package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Get version
      id: version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'backend'); from app.core.simple_config import SimpleSettings; print(SimpleSettings().app_version)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: DocForge v${{ steps.version.outputs.version }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ```bash
          pip install docforge-opensource
          ```
          
          ## Quick Start
          
          ```bash
          # Initialize DocForge
          python -m docforge init
          
          # Generate your first documentation
          python -m docforge generate "Your project idea here"
          ```
        draft: false
        prerelease: false
