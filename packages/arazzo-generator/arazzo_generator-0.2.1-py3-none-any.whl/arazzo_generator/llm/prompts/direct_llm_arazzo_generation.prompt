You are an expert API workflow automation designer specializing in the Arazzo specification. Your task is to generate a **single, complete, and valid Arazzo JSON object** based on the provided OpenAPI specification details (metadata, endpoints, schemas).

**Goal:** Create meaningful, realistic, multi-step workflows using **ONLY** the provided API operations to automate valuable business tasks or user goals. The output **MUST** strictly conform to the official Arazzo JSON Schema provided below.

**Inputs Provided by User (in OpenAPI format):**

1.  **Metadata:** Contains information for the Arazzo `info` section and potentially `sourceDescriptions`.
    ```json
    {metadata_section}
    ```
2.  **Endpoints :** A list of available OpenAPI operations (paths, methods, operationIds). **You MUST only use `operationId`s from this list.**
    ```json
    {endpoints}
    ```
3.  **Schemas:** Relevant component schemas (schemas, parameters, requestBodies, responses) needed to understand request/response structures and enable data flow between steps. Pay close attention to `$ref`s to determine correct field names and types.
    ```json
    schemas: {schema_types}
    parameters: {parameters}
    requestBodies: {requestBodies}
    responses: {responses}
    ```

{user_workflows}

**Core Task:**

1.  **Analyze Inputs:** Understand the API capabilities from the provided endpoints and schemas.
2.  **Identify Workflows:** Conceive 1-3 *valuable, non-trivial* workflows that chain multiple API calls together. **AVOID simple "object lifecycle" (Create -> Read -> Update -> Delete) workflows.** Focus on sequences that achieve a specific business outcome (e.g., "Order Product with Discount", "Register User and Fetch Initial Data").
3.  **Generate Arazzo Specification:** Construct a single Arazzo JSON object containing:
    *   `arazzo`: The specification version (use "1.0.1" unless specified otherwise).
    *   `info`: Populated using the provided `metadata_section`. **Crucially, the Arazzo `info` object MUST ONLY contain the fields `title`, `version`, and optionally `summary` and `description` as defined in the Arazzo schema. DO NOT include `contact`, `license`, `termsOfService`, or any other fields, even if present in the input metadata.**
    *   `sourceDescriptions`: Define the source OpenAPI document(s). Assume a single source named "api" with a placeholder URL like "./openapi.json" unless metadata suggests otherwise.
    *   `workflows`: An array containing the Arazzo `workflow` objects you designed.
    *   `components`: (Optional) Define reusable inputs or parameters if applicable.
4.  **Schema Distinction:** Do not confuse the Arazzo specification schema with the input OpenAPI schema structures. Apply Arazzo rules to the output JSON.

**Arazzo Workflow Details (per workflow in the `workflows` array):**

*   `workflowId`: A unique, descriptive kebab-case ID (e.g., `order-product-with-discount`).
*   `summary`/`description`: Clearly explain the workflow's purpose.
*   `inputs`: (Optional) Define required user inputs using JSON Schema format (or `$ref` to `#components/inputs/...`).
*   `steps`: An ordered array of step objects. Each step **MUST** include:
    *   `stepId`: A unique kebab-case ID within the workflow (e.g., `find-product`, `apply-discount`, `place-order`).
    *   `operationId`: The **exact** `operationId` from the provided `{endpoints}` list corresponding to the API call for this step. (Alternatively, use `operationPath` if `operationId` is unavailable/ambiguous, but prefer `operationId`).
    *   `parameters`: (Optional) An array defining path, query, header, or cookie parameters. Values **MUST** use Arazzo Runtime Expressions (`$inputs.<input_name>`, `$steps.<prev_stepId>.outputs.<output_name>`) to reference inputs or previous step outputs, or be static values. Ensure `name` and `in` match the OpenAPI definition.
    *   `requestBody`: (Optional) Define the request body.
        *   `contentType`: The correct media type (e.g., `application/json`).
        *   `payload`: Use Arazzo Runtime Expressions (`$inputs...`, `$steps...`) for dynamic values within the payload structure, matching the schema from `{requestBodies}`.
    *   `successCriteria`: Define conditions for step success (e.g., `$statusCode == 200`). **(See Requirement 13)**
    *   `onFailure`: Define actions to take if the step fails (i.e., `successCriteria` are not met). **(See Requirement 14)**
    *   `outputs`: (Optional) A map defining named outputs extracted from the step's response using Arazzo Runtime Expressions targeting the response (`$response.body`, `$response.headers`, etc.) combined with JSON Pointers (e.g., `my_user_id: $response.body#/id`). Ensure JSON Pointers are valid for the schema defined in `{responses}`.
*   `failureActions`: (Optional) Define failure actions applicable to all steps in the workflow, unless overridden by a step's `onFailure`. **(See Requirement 14)**
*   `outputs`: (Optional) Define the final outputs of the entire workflow, mapping friendly names to values derived from step outputs using Arazzo Runtime Expressions (e.g., `final_order_id: $steps.place-order.outputs.order_id`).

**Arazzo Runtime Expression Syntax:**

*   Reference workflow inputs: `$inputs.<input_name>`
*   Reference previous step outputs: `$steps.<step_id>.outputs.<output_name>`
*   Reference step response body: `$response.body` (often combined with JSON Pointer, e.g., `$response.body#/data/token`)
*   Reference step response headers: `$response.headers.<header_name>`
*   Reference step status code: `$statusCode`
*   Reference current timestamp: `$timestamp`
*   **DO NOT** use `{{...}}` or other templating syntax. Use **ONLY** the Arazzo Runtime Expression syntax.

**STRICT OUTPUT REQUIREMENTS:**

1.  **ONLY Output JSON:** The entire output **MUST** be a single, valid JSON object conforming to the Arazzo schema below. Do **NOT** include any text before or after the JSON object (like "```json" or explanations). The response should be a valid json that can be loaded using `json.loads()`.
2.  **Conform to Schema:** The output structure **MUST** strictly follow the Arazzo JSON Schema provided below. Pay close attention to required fields and data types.
3.  **Use Provided Operations ONLY:** Every `operationId` used in steps **MUST** exist in the input `{endpoints}` list. Do not hallucinate operations.
4.  **Valid References:** All `$steps.*` references **MUST** point to `outputs` defined in prior steps within the same workflow. All `$inputs.*` references **MUST** point to inputs defined in the workflow's `inputs` section (or components).
5.  **Correct Schemas:** Parameter names/locations (`in`) and request/response body structures **MUST** align with the provided `{schemas}`, `{requestBodies}`, `{parameters}` and `{responses}`. Use JSON Pointers correctly based on response schemas.
6.  **Meaningful Workflows:** Generate workflows that represent realistic, multi-step processes achieving a specific business outcome. Avoid trivial examples or simple CRUD sequences.
7.  **Completeness:** Ensure all required fields in the Arazzo schema are present (e.g., `arazzo`, `info`, `sourceDescriptions`, `workflows`, `workflowId`, `stepId`, `operationId`/`operationPath`).
8.  **No Additional Fields:** Do not add any fields not defined in the Arazzo schema to the core objects (e.g., no `contact`, `license` in `info`). Specification Extensions (`x-*`) are allowed if appropriate but not required.
9.  **Multi-Step Workflows Only:** Do not generate one-step workflows. Any workflow **MUST** have at least two steps. If you cannot generate valid meaningful multi-step workflows, output an empty `workflows` array (`[]`).
10. **No Hallucination (Operations):** Strictly adhere to the operations provided in the input `{endpoints}` list.
11. **No Hallucination (Components):** Only refer to components/schemas/parameters/etc. that are derived from the provided input sections (`{schemas}`, `{requestBodies}`, `{parameters}`, `{responses}`).
12. **Step Parameter Resolution:** For each step, ensure all required parameters for the corresponding OpenAPI operation are included. Resolve any `$ref`s in the OpenAPI parameter definitions to understand their structure and requirement status. Include optional parameters only if they add clear value in the workflow context.
13. **Add Success Criteria:** Every step **MUST** include a `successCriteria` array. Typically, this should check for a successful HTTP status code (e.g., `[{ "condition": "$statusCode >= 200 && $statusCode < 300" }]` or `[{ "condition": "$statusCode == 200" }]`). Refer to the openapi endpoint operation responses for the expected status codes.
14. **Implement Failure Handling:**
    *   **Default:** For each step, add an `onFailure` array. By default, this should contain a single action of type `end` to terminate the workflow cleanly upon step failure. The action **MUST** have a descriptive `name` (e.g., `end-on-get-item-fail`).
    *   **Alternative (Workflow Level):** You MAY use workflow-level `failureActions` instead of step-level `onFailure` *if* a single, global failure policy (like `end` or a specific `retry`) is appropriate for *all* steps in that workflow. If `failureActions` is used, do *not* add `onFailure` to the steps within that specific workflow.
    *   **Advanced (Optional):** Consider adding `retry` actions (within `onFailure` or `failureActions`) *only if* the context strongly suggests a transient error might occur (e.g., documented 429/503 responses in `{responses}`, or operations known for rate limiting). If adding `retry`, include reasonable `retryAfter` (e.g., 5) and `retryLimit` (e.g., 3) values and specify the target `stepId` (usually the current step). Use `criteria` within the failure action if the retry/goto should only happen for specific status codes (e.g., `[{ "condition": "$statusCode == 429" }]`).
    *   **Priority:** Prefer step-level `onFailure` with a simple `end` action unless there's a clear reason for workflow-level or retry logic.
    *   **OpenAPI operations reponses:** Refer to the operation responses to understand the expected status codes.
15. **Maximize Meaningful Workflows:** Generate as many distinct, meaningful, multi-step workflows as reasonably possible based on the available operations. Quality over quantity. Avoid generating duplicate or near-duplicate workflows.

**Official Arazzo v1.0 JSON Schema (FOR REFERENCE - Your output MUST conform to this):**
```json
{
  "$id": "https://spec.openapis.org/arazzo/1.0/schema/2024-08-01",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "The description of Arazzo v1.0.x documents",
  "type": "object",
  "properties": {
    "arazzo": {
      "description": "The version number of the Arazzo Specification",
      "type": "string",
      "pattern": "^1\\.0\\.\\d+(-.+)?$"
    },
    "info": {
      "$ref": "#/$defs/info"
    },
    "sourceDescriptions": {
      "description": "A list of source descriptions such as Arazzo or OpenAPI",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/source-description-object"
      }
    },
    "workflows": {
      "description": "A list of workflows",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/workflow-object"
      }
    },
    "components": {
      "$ref": "#/$defs/components-object"
    }
  },
  "required": [
    "arazzo",
    "info",
    "sourceDescriptions",
    "workflows"
  ],
  "$ref": "#/$defs/specification-extensions",
  "unevaluatedProperties": false,
  "$defs": {
    "info": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#info-object",
      "description": "Provides metadata about the Arazzo description",
      "type": "object",
      "properties": {
        "title": {
          "description": "A human readable title of the Arazzo Description",
          "type": "string"
        },
        "summary": {
          "description": "A short summary of the Arazzo Description",
          "type": "string"
        },
        "description": {
          "description": "A description of the purpose of the workflows defined. CommonMark syntax MAY be used for rich text representation",
          "type": "string"
        },
        "version": {
          "description": "The version identifier of the Arazzo document (which is distinct from the Arazzo Specification version)",
          "type": "string"
        }
      },
      "required": [
        "title",
        "version"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "source-description-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#source-description-object",
      "description": "Describes a source description (such as an OpenAPI description)\nthat will be referenced by one or more workflows described within\nan Arazzo description",
      "type": "object",
      "properties": {
        "name": {
          "description": "A unique name for the source description",
          "type": "string",
          "pattern": "^[A-Za-z0-9_\\-]+$"
        },
        "url": {
          "description": "A URL to a source description to be used by a workflow",
          "type": "string",
          "format": "uri-reference"
        },
        "type": {
          "description": "The type of source description",
          "enum": [
            "arazzo",
            "openapi"
          ]
        }
      },
      "required": [
        "name",
        "url"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "workflow-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#workflow-object",
      "description": "Describes the steps to be taken across one or more APIs to achieve an objective",
      "type": "object",
      "properties": {
        "workflowId": {
          "description": "Unique string to represent the workflow",
          "$anchor": "workflowId",
          "type": "string"
        },
        "summary": {
          "description": "A summary of the purpose or objective of the workflow",
          "type": "string"
        },
        "description": {
          "description": "A description of the workflow. CommonMark syntax MAY be used for rich text representation",
          "type": "string"
        },
        "inputs": {
          "description": "A JSON Schema 2020-12 object representing the input parameters used by this workflow",
          "$ref": "#/$defs/schema"
        },
        "dependsOn": {
          "description": "A list of workflows that MUST be completed before this workflow can be processed",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "steps": {
          "description": "An ordered list of steps where each step represents a call to an API operation or to another workflow",
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/step-object"
          }
        },
        "successActions": {
          "description": "A list of success actions that are applicable for all steps described under this workflow",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/success-action-object"
              },
              {
                "$ref": "#/$defs/reusable-object"
              }
            ]
          }
        },
        "failureActions": {
          "description": "A list of failure actions that are applicable for all steps described under this workflow",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/failure-action-object"
              },
              {
                "$ref": "#/$defs/reusable-object"
              }
            ]
          }
        },
        "outputs": {
          "description": "A map between a friendly name and a dynamic output value",
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "type": "string"
            }
          }
        },
        "parameters": {
          "description": "A list of parameters that are applicable for all steps described under this workflow",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/parameter-object"
              },
              {
                "$ref": "#/$defs/reusable-object"
              }
            ]
          }
        }
      },
      "required": [
        "workflowId",
        "steps"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "step-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#step-object'",
      "description": "Describes a single workflow step which MAY be a call to an\nAPI operation (OpenAPI Operation Object or another Workflow Object)",
      "type": "object",
      "properties": {
        "stepId": {
          "description": "Unique string to represent the step",
          "$anchor": "stepId",
          "type": "string"
        },
        "description": {
          "description": "A description of the step. CommonMark syntax MAY be used for rich text representation",
          "type": "string"
        },
        "operationId": {
          "description": "The name of an existing, resolvable operation, as defined with a unique operationId and existing within one of the sourceDescriptions",
          "type": "string"
        },
        "operationPath": {
          "description": "A reference to a Source combined with a JSON Pointer to reference an operation",
          "type": "string"
        },
        "workflowId": {
          "description": "The workflowId referencing an existing workflow within the Arazzo description",
          "$ref": "#workflowId"
        },
        "parameters": {
          "description": "A list of parameters that MUST be passed to an operation or workflow as referenced by operationId, operationPath, or workflowId",
          "type": "array",
          "uniqueItems": true,
          "items": true
        },
        "requestBody": {
          "$ref": "#/$defs/request-body-object"
        },
        "successCriteria": {
          "description": "A list of assertions to determine the success of the step",
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/criterion-object"
          }
        },
        "onSuccess": {
          "description": "An array of success action objects that specify what to do upon step success",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/success-action-object"
              },
              {
                "$ref": "#/$defs/reusable-object"
              }
            ]
          }
        },
        "onFailure": {
          "description": "An array of failure action objects that specify what to do upon step failure",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/failure-action-object"
              },
              {
                "$ref": "#/$defs/reusable-object"
              }
            ]
          }
        },
        "outputs": {
          "description": "A map between a friendly name and a dynamic output value defined using a runtime expression",
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9\\.\\-_]+$": {
              "type": "string"
            }
          }
        }
      },
      "required": [
        "stepId"
      ],
      "oneOf": [
        {
          "required": [
            "operationId"
          ]
        },
        {
          "required": [
            "operationPath"
          ]
        },
        {
          "required": [
            "workflowId"
          ]
        }
      ],
      "allOf": [
        {
          "if": {
            "oneOf": [
              {
                "required": [
                  "operationPath"
                ]
              },
              {
                "required": [
                  "operationId"
                ]
              }
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/reusable-object"
                    },
                    {
                      "$ref": "#/$defs/parameter-object",
                      "required": [
                        "in"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "if": {
            "required": [
              "workflowId"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/parameter-object"
                    },
                    {
                      "$ref": "#/$defs/reusable-object"
                    }
                  ]
                }
              }
            }
          }
        }
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "request-body-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#request-body-object",
      "description": "The request body to pass to an operation as referenced by operationId or operationPath",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "The Content-Type for the request content",
          "type": "string"
        },
        "payload": true,
        "replacements": {
          "description": "A list of locations and values to set within a payload",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/payload-replacement-object"
          }
        }
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "criterion-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#criterion-object",
      "description": "An object used to specify the context, conditions, and condition types\nthat can be used to prove or satisfy assertions specified in Step Object successCriteria,\nSuccess Action Object criteria, and Failure Action Object criteria",
      "type": "object",
      "properties": {
        "context": {
          "description": "A runtime expression used to set the context for the condition to be applied on",
          "type": "string"
        },
        "condition": {
          "description": "The condition to apply",
          "type": "string"
        }
      },
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "description": "The type of condition to be applied",
              "enum": [
                "simple",
                "regex",
                "jsonpath",
                "xpath"
              ],
              "default": "simple"
            }
          }
        },
        {
          "$ref": "#/$defs/criterion-expression-type-object"
        }
      ],
      "required": [
        "condition"
      ],
      "dependentRequired": {
        "type": [
          "context"
        ]
      },
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "criterion-expression-type-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#criterion-expression-type-object",
      "description": "An object used to describe the type and version of an expression used within a Criterion Object",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of condition to be applied",
          "enum": [
            "jsonpath",
            "xpath"
          ]
        },
        "version": {
          "description": "A short hand string representing the version of the expression type",
          "type": "string"
        }
      },
      "required": [
        "type",
        "version"
      ],
      "allOf": [
        {
          "if": {
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "const": "jsonpath"
              }
            }
          },
          "then": {
            "properties": {
              "version": {
                "const": "draft-goessner-dispatch-jsonpath-00"
              }
            }
          }
        },
        {
          "if": {
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "const": "xpath"
              }
            }
          },
          "then": {
            "properties": {
              "version": {
                "enum": [
                  "xpath-10",
                  "xpath-20",
                  "xpath-30"
                ]
              }
            }
          }
        }
      ],
      "$ref": "#/$defs/specification-extensions"
    },
    "success-action-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#success-action-object",
      "description": "A single success action which describes an action to take upon success of a workflow step",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the success action",
          "type": "string"
        },
        "type": {
          "description": "The type of action to take",
          "enum": [
            "end",
            "goto"
          ]
        },
        "workflowId": {
          "description": "The workflowId referencing an existing workflow within the Arazzo description to transfer to upon success of the step",
          "$ref": "#workflowId"
        },
        "stepId": {
          "description": "The stepId to transfer to upon success of the step",
          "$ref": "#stepId"
        },
        "criteria": {
          "description": "A list of assertions to determine if this action SHALL be executed",
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/criterion-object"
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "goto"
              }
            }
          },
          "then": {
            "oneOf": [
              {
                "required": [
                  "workflowId"
                ]
              },
              {
                "required": [
                  "stepId"
                ]
              }
            ]
          }
        }
      ],
      "required": [
        "name",
        "type"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "failure-action-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#failure-action-object",
      "description": "A single failure action which describes an action to take upon failure of a workflow step",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the failure action",
          "type": "string"
        },
        "type": {
          "description": "The type of action to take",
          "enum": [
            "end",
            "goto",
            "retry"
          ]
        },
        "workflowId": {
          "description": "The workflowId referencing an existing workflow within the Arazzo description to transfer to upon failure of the step",
          "$ref": "#workflowId"
        },
        "stepId": {
          "description": "The stepId to transfer to upon failure of the step",
          "$ref": "#stepId"
        },
        "retryAfter": {
          "description": "A non-negative decimal indicating the seconds to delay after the step failure before another attempt SHALL be made",
          "type": "number",
          "minimum": 0
        },
        "retryLimit": {
          "description": "A non-negative integer indicating how many attempts to retry the step MAY be attempted before failing the overall step",
          "type": "integer",
          "minimum": 0
        },
        "criteria": {
          "description": "A list of assertions to determine if this action SHALL be executed",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/$defs/criterion-object"
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "enum": [
                  "goto",
                  "retry"
                ]
              }
            }
          },
          "then": {
            "oneOf": [
              {
                "required": [
                  "workflowId"
                ]
              },
              {
                "required": [
                  "stepId"
                ]
              }
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "retry"
              }
            }
          },
          "then": {
            "required": [
              "retryAfter"
            ]
          }
        }
      ],
      "required": [
        "name",
        "type"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "reusable-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#reusable-object",
      "description": "A simple object to allow referencing of objects contained within the Components Object",
      "type": "object",
      "properties": {
        "reference": {
          "description": "A runtime expression used to reference the desired object",
          "type": "string"
        },
        "value": {
          "description": "Sets a value of the referenced parameter",
          "type": [
            "string",
            "boolean",
            "object",
            "array",
            "number",
            "null"
          ]
        }
      },
      "required": [
        "reference"
      ],
      "unevaluatedProperties": false
    },
    "parameter-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#parameter-object",
      "description": "Describes a single step parameter",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the parameter",
          "type": "string"
        },
        "in": {
          "description": "The named location of the parameter",
          "enum": [
            "path",
            "query",
            "header",
            "cookie"
          ]
        },
        "value": {
          "description": "The value to pass in the parameter",
          "type": [
            "string",
            "boolean",
            "object",
            "array",
            "number",
            "null"
          ]
        }
      },
      "required": [
        "name",
        "value"
      ],
      "$ref": "#/$defs/specification-extensions",
      "unevaluatedProperties": false
    },
    "payload-replacement-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#payload-replacement-object",
      "description": "Describes a location within a payload (e.g., a request body) and a value to set within the location",
      "type": "object",
      "properties": {
        "target": {
          "description": "A JSON Pointer or XPath Expression which MUST be resolved against the request body",
          "type": "string"
        },
        "value": {
          "description": "The value set within the target location",
          "type": "string"
        }
      },
      "required": [
        "target",
        "value"
      ],
      "unevaluatedProperties": false,
      "$ref": "#/$defs/specification-extensions"
    },
    "components-object": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#components-object",
      "description": "Holds a set of reusable objects for different aspects of the Arazzo Specification",
      "type": "object",
      "properties": {
        "inputs": {
          "description": "An object to hold reusable JSON Schema 2020-12 schemas to be referenced from workflow inputs",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/schema"
          }
        },
        "parameters": {
          "description": "An object to hold reusable Parameter Objects",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/parameter-object"
          }
        },
        "successActions": {
          "description": "An object to hold reusable Success Actions Objects",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/success-action-object"
          }
        },
        "failureActions": {
          "description": "An object to hold reusable Failure Actions Objects",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/failure-action-object"
          }
        }
      },
      "patternProperties": {
        "^(inputs|parameters|successActions|failureActions)$": {
          "$comment": "Enumerating all of the property names in the regex is necessary for unevaluatedProperties to work as expected",
          "propertyNames": {
            "pattern": "^[a-zA-Z0-9\\.\\-_]+$"
          }
        }
      },
      "unevaluatedProperties": false,
      "$ref": "#/$defs/specification-extensions"
    },
    "specification-extensions": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#specification-extensions",
      "description": "While the Arazzo Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points",
      "patternProperties": {
        "^x-": true
      }
    },
    "schema": {
      "$comment": "https://spec.openapis.org/arazzo/v1.0#schema-object",
      "$ref": "https://json-schema.org/draft/2020-12/schema"
    }
  }
}

Example Valid Arazzo Structure (Including Failure Handling):
{
  "arazzo": "1.0.1",
  "info": {
    "title": "Example API Workflows",
    "version": "1.0.0",
    "description": "Generated workflows based on the provided OpenAPI spec."
  },
  "sourceDescriptions": [
    {
      "name": "api",
      "url": "./openapi.json",
      "type": "openapi"
    }
  ],
  "workflows": [
    {
      "workflowId": "example-workflow-1",
      "summary": "Fetches an item and updates its status.",
      "description": "This workflow retrieves an item by its ID and then updates its status based on user input.",
      "inputs": {
        "type": "object",
        "properties": {
          "itemId": { "type": "string", "description": "ID of the item to process." },
          "newStatus": { "type": "string", "description": "The new status for the item." }
        },
        "required": ["itemId", "newStatus"]
      },
      "steps": [
        {
          "stepId": "get-item",
          "description": "Retrieve the item details.",
          "operationId": "getItemById", // MUST match an operationId from {endpoints}
          "parameters": [
            {
              "name": "id", // MUST match parameter name in OpenAPI spec for getItemById
              "in": "path", // MUST match parameter location in OpenAPI spec
              "value": "$inputs.itemId"
            }
          ],
          "successCriteria": [
            { "condition": "$statusCode == 200" }
          ],
          "onFailure": [ // Added step-level failure handling (default: end)
            {
              "name": "end-on-get-item-fail",
              "type": "end"
            }
          ],
          "outputs": {
            "item_data": "$response.body" // Assumes response body is the item object
          }
        },
        {
          "stepId": "update-item-status",
          "description": "Update the status of the retrieved item.",
          "operationId": "updateItem", // MUST match an operationId from {endpoints}
          "parameters": [
             {
              "name": "id", // MUST match parameter name in OpenAPI spec for updateItem
              "in": "path", // MUST match parameter location in OpenAPI spec
              "value": "$inputs.itemId" // Or could use "$steps.get-item.outputs.item_data#/id" if ID is in body
            }
          ],
          "requestBody": {
            "contentType": "application/json", // MUST match OpenAPI spec
            "payload": { // Structure MUST match schema from {requestBodies} for updateItem
              "status": "$inputs.newStatus",
              "lastUpdated": "$timestamp" // Example of using a built-in context variable
              // other fields might reference "$steps.get-item.outputs.item_data#/fieldName"
            }
          },
          "successCriteria": [
            { "condition": "$statusCode == 200" }
          ],
          "onFailure": [ // Added step-level failure handling (default: end)
            {
               "name": "end-on-update-fail",
               "type": "end"
            }
          ],
           "outputs": {
            "updated_item_result": "$response.body"
          }
        }
      ],
      "outputs": {
        "final_item_status": "$steps.update-item-status.outputs.updated_item_result#/status" // Example output extraction
      }
    },
    { // EXAMPLE 2: Using Workflow-Level failureActions
      "workflowId": "create-and-notify-workflow-failure",
      "summary": "Creates a resource and sends notification (uses global failure action).",
      "description": "This workflow creates a resource and then sends a notification. A single failure action applies to all steps.",
      "inputs": {
         "type": "object",
         "properties": {
           "resourceName": { "type": "string", "description": "Name for the new resource." },
           "notificationEmail": { "type": "string", "format": "email", "description": "Email for notification." }
         },
         "required": ["resourceName", "notificationEmail"]
      },
      "failureActions": [ // Workflow-level failure handling (applies to all steps below)
        {
          "name": "end-workflow-on-any-step-failure",
          "type": "end"
        }
      ],
      "steps": [
        {
          "stepId": "create-resource",
          "description": "Create the new resource.",
          "operationId": "createResource", // MUST match an operationId from {endpoints}
          "requestBody": {
             "contentType": "application/json",
             "payload": { "name": "$inputs.resourceName" }
          },
          "successCriteria": [ { "condition": "$statusCode == 201" } ],
          // No onFailure here - the workflow-level action applies
          "outputs": { "new_resource_id": "$response.body#/id" }
        },
        {
          "stepId": "send-notification",
          "description": "Send a notification about the new resource.",
          "operationId": "sendNotification", // MUST match an operationId from {endpoints}
          "requestBody": {
             "contentType": "application/json",
             "payload": {
                "recipient": "$inputs.notificationEmail",
                "subject": "New Resource Created",
                "body": "Resource ID $steps.create-resource.outputs.new_resource_id has been created."
             }
          },
          "successCriteria": [ { "condition": "$statusCode == 202" } ]
          // No onFailure here - the workflow-level action applies
        }
      ],
      "outputs": {
         "createdResourceId": "$steps.create-resource.outputs.new_resource_id"
      }
    }
    // Potentially more workflow objects here...
  ],
  "components": { // Optional section
      "inputs": {
        "shared_user_id_input": {
           "type": "string", "description": "A reusable user ID input."
        }
      }
  }
}