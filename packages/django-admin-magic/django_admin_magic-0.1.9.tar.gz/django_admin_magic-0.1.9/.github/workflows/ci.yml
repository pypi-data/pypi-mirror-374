name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - id: build-matrix
        name: Build test matrix from pyproject classifiers
        shell: bash
        run: |
          MATRIX_JSON=$(python - << 'PY'
import json, re, sys
from pathlib import Path
try:
    import tomllib  # Python 3.11+
except Exception as exc:
    print(f"tomllib not available: {exc}", file=sys.stderr)
    sys.exit(1)

pyproject = Path('pyproject.toml')
data = tomllib.loads(pyproject.read_text(encoding='utf-8'))
classifiers = data.get('project', {}).get('classifiers', [])

# Discover supported Django versions from classifiers
dj_versions = []
for c in classifiers:
    m = re.fullmatch(r"Framework :: Django :: (\d+\.\d+)", c)
    if m:
        dj_versions.append(m.group(1))
dj_versions = sorted(set(dj_versions), key=lambda s: tuple(map(int, s.split('.'))))

# Define Python versions we test against (keep centralized here)
py_versions = ["3.10", "3.11", "3.12", "3.13"]

# Compatibility map for Django -> supported Python version ranges (inclusive)
# Source: Django release notes. Keep updated as needed.
compat = {
    "3.2": ("3.6", "3.10"),
    "4.0": ("3.8", "3.10"),
    "4.1": ("3.8", "3.11"),
    "4.2": ("3.8", "3.12"),
    "5.0": ("3.10", "3.12"),
    "5.1": ("3.10", "3.12"),
}

def version_tuple(s):
    return tuple(int(x) for x in s.split('.'))

include = []
for dv in dj_versions:
    min_py, max_py = compat.get(dv, ("3.10", "3.12"))
    for pv in py_versions:
        if version_tuple(min_py) <= version_tuple(pv) <= version_tuple(max_py):
            include.append({"django-version": dv, "python-version": pv})

matrix = {"include": include}
print(json.dumps(matrix))
PY
)
          echo "matrix=${MATRIX_JSON}" >> "$GITHUB_OUTPUT"
  test:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.django-version }}-

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install "django==${{ matrix.django-version }}"
          uv pip install -e ".[dev]"

      - name: Run tests
        run: |
          uv run pytest --cov=src/django_admin_magic --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Run security checks
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ -f txt -o bandit-report.txt || true

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.*

  update-badges:
    uses: ./.github/workflows/update-badges.yml
    if: github.ref == 'refs/heads/main'
    needs: [test, lint, security]
    permissions:
      contents: write
      pull-requests: write
    with:
      skip_ci: "true"
