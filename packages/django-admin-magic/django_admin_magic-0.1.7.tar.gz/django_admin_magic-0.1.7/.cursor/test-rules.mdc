---
description: Test Standards and Best Practices
globs: tests/**/*.py
alwaysApply: false
---
<rule>
name: test_standards
description: Standards for writing and running tests in the GLaDOS project
filters:
  - type: glob
    pattern: "tests/**/*.py"

actions:
  - type: suggest
    message: |
      # Test Standards for Auto Admin Project

      ## Core Testing Rules
      - Always run tests in a poetry context
      - Use pytest over unittest
      - Add docstrings to explain test purpose and behavior
      - Run tests after writing them

      ## Test Structure and Organization
      - Each test should verify ONE specific behavior or outcome
      - Use descriptive test names that clearly indicate what is being tested
      - Parameterize tests when possible using @pytest.mark.parametrize
      - Group related tests in classes with descriptive names
      - Use fixtures for test setup and data preparation
      - Place common fixtures in conftest.py files

      ## Django-specific Practices
      - Use @pytest.mark.django_db for database tests
      - Test settings are defined in test_settings.py

      ## Test Quality Practices
      - Focus on testing behavior, not implementation
      - Cover both success and failure paths
      - Keep test data minimal and focused
      - Ensure tests are independent and don't rely on state from other tests
      - Use pytest.raises for exception testing

      ## Running Tests
      ```bash
      # Run tests
      uv run pytest {file}

      # Run tests with verbosity
      uv run pytest {file} -v
      ```

      ## Fixture Guidelines (conftest.py)
      - Keep fixtures focused and minimal
      - Document fixture purpose with docstrings
      - Use fixture factories when data variations are needed
      - Share fixtures across test modules when appropriate
      - Use appropriate scope for fixtures (function, class, module, session)

      ## Creating New Test Modules
      1. Create test directory matching the module name (tests/test_{module_name}/)
      2. Add a conftest.py for module-specific fixtures
      3. Follow the same structure as the module being tested
      4. Include __init__.py file in the test directory

metadata:
  priority: high
  version: 1.0
</rule>
