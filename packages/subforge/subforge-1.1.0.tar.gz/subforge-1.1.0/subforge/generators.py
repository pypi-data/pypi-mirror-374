"""
Generators for SubForge agent configurations
"""

from datetime import datetime
from pathlib import Path


class PromptGenerator:
    """Generate agent prompts from templates and project profiles"""

    def generate_agent_prompt(self, template, profile):
        """Generate agent prompt with project context"""

        # Extract template content
        template_path = template.get("path") or template.get("template_path")
        if not template_path:
            raise ValueError("Template path not found")

        if isinstance(template_path, Path):
            with open(template_path, "r") as f:
                content = f.read()
        else:
            with open(template_path, "r") as f:
                content = f.read()

        # Replace project context placeholders
        replacements = {
            "Claude-subagents": profile.name,
            "/home/nando/projects/Claude-subagents": str(profile.path),
            "{{PROJECT_NAME}}": profile.name,
            "{{PROJECT_PATH}}": str(profile.path),
            "{PROJECT_NAME}": profile.name,
            "{PROJECT_PATH}": str(profile.path),
        }

        for old, new in replacements.items():
            content = content.replace(old, new)

        # Add timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC-3")
        if "*Generated by SubForge" in content:
            content = content.replace(
                "*Generated by SubForge v1.0 - Intelligent Claude Code Configuration*",
                f"*Generated by SubForge v1.0 - Intelligent Claude Code Configuration*\n*Updated: {timestamp}*",
            )
        else:
            content += f"\n\n*Updated: {timestamp}*"

        return content


class ClaudeConfigGenerator:
    """Generate CLAUDE.md configuration files"""

    def generate_claude_config(self, profile, selected_templates):
        """Generate CLAUDE.md content"""

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC-3")

        config = f"""# {profile.name} - Claude Code Agent Configuration

**Project Root**: {profile.path}
**Languages**: {', '.join(sorted(profile.technology_stack.languages))}
**Frameworks**: {', '.join(sorted(profile.technology_stack.frameworks))}
**Technologies**: {', '.join(sorted(profile.technology_stack.tools))}

## Available Specialist Agents

"""
        for template_name in (selected_templates or []):
            agent_key = template_name.replace(" ", "-").lower()
            config += f"**@{agent_key}**\n"
            config += f"- Specialized agent for {template_name}\n\n"

        config += f"""
## Agent Coordination Protocol

All agents follow standardized coordination patterns for seamless collaboration.

---
*Generated by SubForge v1.0 - Intelligent Claude Code Configuration*
*Updated: {timestamp}*
"""

        return config