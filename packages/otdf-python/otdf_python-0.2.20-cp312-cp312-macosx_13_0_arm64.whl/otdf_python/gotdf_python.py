
# python wrapper for package gotdf_python within overall package gotdf_python
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -no-make -dynamic-link=True -output /Users/runner/work/opentdf-python-sdk/opentdf-python-sdk/build/lib.macosx-11.0-arm64-cpython-312/otdf_python -vm /usr/local/bin/python_for_build gotdf_python

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _gotdf_python
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from gotdf_python import gotdf_python
# and then refer to everything using gotdf_python. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct gotdf_python.TokenAuth
class TokenAuth(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_gotdf_python.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_gotdf_python.IncRef(self.handle)
		else:
			self.handle = _gotdf_python.gotdf_python_TokenAuth_CTor()
			_gotdf_python.IncRef(self.handle)
			if  0 < len(args):
				self.AccessToken = args[0]
			if "AccessToken" in kwargs:
				self.AccessToken = kwargs["AccessToken"]
			if  1 < len(args):
				self.NpeClientId = args[1]
			if "NpeClientId" in kwargs:
				self.NpeClientId = kwargs["NpeClientId"]
	def __del__(self):
		_gotdf_python.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gotdf_python.TokenAuth{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gotdf_python.TokenAuth ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def AccessToken(self):
		return _gotdf_python.gotdf_python_TokenAuth_AccessToken_Get(self.handle)
	@AccessToken.setter
	def AccessToken(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_TokenAuth_AccessToken_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_TokenAuth_AccessToken_Set(self.handle, value)
	@property
	def NpeClientId(self):
		return _gotdf_python.gotdf_python_TokenAuth_NpeClientId_Get(self.handle)
	@NpeClientId.setter
	def NpeClientId(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_TokenAuth_NpeClientId_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_TokenAuth_NpeClientId_Set(self.handle, value)

# Python type for struct gotdf_python.OpentdfConfig
class OpentdfConfig(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_gotdf_python.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_gotdf_python.IncRef(self.handle)
		else:
			self.handle = _gotdf_python.gotdf_python_OpentdfConfig_CTor()
			_gotdf_python.IncRef(self.handle)
			if  0 < len(args):
				self.ClientId = args[0]
			if "ClientId" in kwargs:
				self.ClientId = kwargs["ClientId"]
			if  1 < len(args):
				self.ClientSecret = args[1]
			if "ClientSecret" in kwargs:
				self.ClientSecret = kwargs["ClientSecret"]
			if  2 < len(args):
				self.PlatformEndpoint = args[2]
			if "PlatformEndpoint" in kwargs:
				self.PlatformEndpoint = kwargs["PlatformEndpoint"]
			if  3 < len(args):
				self.TokenEndpoint = args[3]
			if "TokenEndpoint" in kwargs:
				self.TokenEndpoint = kwargs["TokenEndpoint"]
			if  4 < len(args):
				self.KasUrl = args[4]
			if "KasUrl" in kwargs:
				self.KasUrl = kwargs["KasUrl"]
			if  5 < len(args):
				self.InsecureSkipVerify = args[5]
			if "InsecureSkipVerify" in kwargs:
				self.InsecureSkipVerify = kwargs["InsecureSkipVerify"]
	def __del__(self):
		_gotdf_python.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gotdf_python.OpentdfConfig{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gotdf_python.OpentdfConfig ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ClientId(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_ClientId_Get(self.handle)
	@ClientId.setter
	def ClientId(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_ClientId_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_ClientId_Set(self.handle, value)
	@property
	def ClientSecret(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_ClientSecret_Get(self.handle)
	@ClientSecret.setter
	def ClientSecret(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_ClientSecret_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_ClientSecret_Set(self.handle, value)
	@property
	def PlatformEndpoint(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_PlatformEndpoint_Get(self.handle)
	@PlatformEndpoint.setter
	def PlatformEndpoint(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_PlatformEndpoint_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_PlatformEndpoint_Set(self.handle, value)
	@property
	def TokenEndpoint(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_TokenEndpoint_Get(self.handle)
	@TokenEndpoint.setter
	def TokenEndpoint(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_TokenEndpoint_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_TokenEndpoint_Set(self.handle, value)
	@property
	def KasUrl(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_KasUrl_Get(self.handle)
	@KasUrl.setter
	def KasUrl(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_KasUrl_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_KasUrl_Set(self.handle, value)
	@property
	def InsecureSkipVerify(self):
		return _gotdf_python.gotdf_python_OpentdfConfig_InsecureSkipVerify_Get(self.handle)
	@InsecureSkipVerify.setter
	def InsecureSkipVerify(self, value):
		if isinstance(value, go.GoClass):
			_gotdf_python.gotdf_python_OpentdfConfig_InsecureSkipVerify_Set(self.handle, value.handle)
		else:
			_gotdf_python.gotdf_python_OpentdfConfig_InsecureSkipVerify_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def EncryptFilePE(inputFilePath, outputFilePath, config, token, dataAttributes, authScopes):
	"""EncryptFilePE(str inputFilePath, str outputFilePath, object config, object token, []str dataAttributes, []str authScopes) str, str
	
	Encrypts a file as a PE (Person Entity), returning a TDF manifest and the cipher text.
	"""
	return _gotdf_python.gotdf_python_EncryptFilePE(inputFilePath, outputFilePath, config.handle, token.handle, dataAttributes.handle, authScopes.handle)
def EncryptFilesInDirNPE(dirPath, config, dataAttributes, authScopes):
	"""EncryptFilesInDirNPE(str dirPath, object config, []str dataAttributes, []str authScopes) []str, str
	
		EncryptFilesInDirNPE encrypts all files in the specified directory
	
	Work is performed as an NPE (Non-Person Entity). Encrypted files are placed
	in the same directory as the input files, with a .tdf extension added to the file name.
	"""
	return go.Slice_string(handle=_gotdf_python.gotdf_python_EncryptFilesInDirNPE(dirPath, config.handle, dataAttributes.handle, authScopes.handle))
def EncryptString(inputText, config, dataAttributes, authScopes):
	"""EncryptString(str inputText, object config, []str dataAttributes, []str authScopes) str, str"""
	return _gotdf_python.gotdf_python_EncryptString(inputText, config.handle, dataAttributes.handle, authScopes.handle)
def DecryptFilePE(inputFilePath, outputFilePath, config, token, authScopes):
	"""DecryptFilePE(str inputFilePath, str outputFilePath, object config, object token, []str authScopes) str, str"""
	return _gotdf_python.gotdf_python_DecryptFilePE(inputFilePath, outputFilePath, config.handle, token.handle, authScopes.handle)
def DecryptStringPE(inputText, config, token, authScopes):
	"""DecryptStringPE(str inputText, object config, object token, []str authScopes) str, str"""
	return _gotdf_python.gotdf_python_DecryptStringPE(inputText, config.handle, token.handle, authScopes.handle)
def EncryptFilesWithExtensionsNPE(dirPath, extensions, config, dataAttributes, authScopes):
	"""EncryptFilesWithExtensionsNPE(str dirPath, []str extensions, object config, []str dataAttributes, []str authScopes) []str, str
	
		EncryptFilesWithExtensionsNPE encrypts all files in 'dirPath' with given file 'extensions'.
	
	Work is performed as an NPE (Non-Person Entity). Encrypted files are placed
	in the same directory as the input files, with a .tdf extension added to the file name.
	"""
	return go.Slice_string(handle=_gotdf_python.gotdf_python_EncryptFilesWithExtensionsNPE(dirPath, extensions.handle, config.handle, dataAttributes.handle, authScopes.handle))
def DecryptFile(inputFilePath, outputFilePath, config):
	"""DecryptFile(str inputFilePath, str outputFilePath, object config) str, str"""
	return _gotdf_python.gotdf_python_DecryptFile(inputFilePath, outputFilePath, config.handle)
def DecryptFilesInDirNPE(dirPath, config, authScopes):
	"""DecryptFilesInDirNPE(str dirPath, object config, []str authScopes) []str, str
	
	DecryptFilesInDirNPE decrypts all files in the specified directory
	Work is performed as an NPE (Non-Person Entity). Decrypted files are placed
	in the same directory as the input files, with the .tdf extension removed from the file name.
	"""
	return go.Slice_string(handle=_gotdf_python.gotdf_python_DecryptFilesInDirNPE(dirPath, config.handle, authScopes.handle))
def DecryptFilesWithExtensionsNPE(dirPath, extensions, config, authScopes):
	"""DecryptFilesWithExtensionsNPE(str dirPath, []str extensions, object config, []str authScopes) []str, str
	
	DecryptFilesWithExtensionsNPE decrypts all files matching the file 'extensions' in 'dirPath'.
	Work is performed as an NPE (Non-Person Entity). Decrypted files are placed
	in the same directory as the input files, with the .tdf extension removed from the file name.
	"""
	return go.Slice_string(handle=_gotdf_python.gotdf_python_DecryptFilesWithExtensionsNPE(dirPath, extensions.handle, config.handle, authScopes.handle))
def EncryptFile(inputFilePath, outputFilePath, config, dataAttributes, authScopes):
	"""EncryptFile(str inputFilePath, str outputFilePath, object config, []str dataAttributes, []str authScopes) str, str"""
	return _gotdf_python.gotdf_python_EncryptFile(inputFilePath, outputFilePath, config.handle, dataAttributes.handle, authScopes.handle)


