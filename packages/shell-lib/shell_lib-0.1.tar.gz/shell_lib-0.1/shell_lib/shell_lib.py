# Generated by Gemini
import os
import sys
import shutil
import stat
import subprocess
from datetime import datetime
from typing import List, Tuple, Generator

class FileInfo:
    """
    A class that encapsulates information about a file or directory.
    """
    def __init__(self, path: str, size: int,
                 modified_time: datetime, access_time: datetime, creation_time: datetime,
                 is_dir: bool, is_file: bool,
                 permissions: str):
        self.path: str = path
        self.size: int = size
        self.modified_time: datetime = modified_time
        self.access_time: datetime = access_time
        self.creation_time: datetime = creation_time
        self.is_dir: bool = is_dir
        self.is_file: bool = is_file
        self.permissions: str = permissions

class ShellAPI:
    """
    A simple API designed to replace Linux Shell scripts.
    It unifies common file system operations and Shell command execution.
    """
    # --- File and Directory Operations API ---

    def create_dir(self, path: str, exist_ok: bool = False) -> None:
        """
        Creates a directory.

        :param path: The path of the directory to create.
        :param exist_ok: If True, existing directories will not raise an error.
        """
        os.makedirs(path, exist_ok=exist_ok)

    def remove_dir(self, path: str, ignore_missing: bool = False) -> None:
        """
        Recursively removes a directory and its contents.

        :param path: The path of the directory to remove.
        :param ignore_missing: If True, no error is raised if the directory is missing.
        """
        if ignore_missing and not self.is_dir(path):
            return
        shutil.rmtree(path)

    def remove_file(self, path: str, ignore_missing: bool = False) -> None:
        """
        Removes a file.

        :param path: The path of the file to remove.
        :param ignore_missing: If True, no error is raised if the file is missing.
        """
        if ignore_missing and not self.is_file(path):
            return
        os.remove(path)

    def copy_file(self, src: str, dst: str, overwrite: bool = False) -> None:
        """
        Copies a file.

        :param src: The source file path.
        :param dst: The destination file path.
        :param overwrite: If True, overwrites the destination if it exists.
        """
        if not overwrite and self.is_file(dst):
            raise FileExistsError(f"Destination file '{dst}' already exists.")

        shutil.copy2(src, dst)

    def copy_dir(self, src: str, dst: str, overwrite: bool = False) -> None:
        """
        Copies a directory.

        :param src: The source directory path.
        :param dst: The destination directory path.
        :param overwrite: If True, overwrites the destination if it exists.
        """
        if self.is_dir(dst):
            if not overwrite:
                raise FileExistsError(f"Destination directory '{dst}' already exists.")
            shutil.rmtree(dst)
        shutil.copytree(src, dst)

    def move_file(self, src: str, dst: str, overwrite: bool = False) -> None:
        """
        Moves a file.

        :param src: The source file path.
        :param dst: The destination file path.
        :param overwrite: If True, overwrites the destination if it exists.
        """
        if self.is_file(dst):
            if not overwrite:
                raise FileExistsError(f"Destination file '{dst}' already exists.")
            os.remove(dst)
        shutil.move(src, dst)

    def move_dir(self, src: str, dst: str, overwrite: bool = False) -> None:
        """
        Moves a directory.

        :param src: The source directory path.
        :param dst: The destination directory path.
        :param overwrite: If True, overwrites the destination if it exists.
        """
        if self.is_dir(dst):
            if not overwrite:
                raise FileExistsError(f"Destination directory '{dst}' already exists.")
            shutil.rmtree(dst)
        shutil.move(src, dst)

    def get_file_info(self, path: str) -> FileInfo:
        """
        Retrieves detailed information about a file or directory.

        :param path: The path of the file or directory.
        :return: A FileInfo object containing detailed information.
        """
        stats = os.stat(path)
        mode = stats.st_mode
        return FileInfo(
            path=path,
            size=stats.st_size,
            modified_time=datetime.fromtimestamp(stats.st_mtime),
            access_time=datetime.fromtimestamp(stats.st_atime),
            creation_time=datetime.fromtimestamp(stats.st_ctime),
            is_dir=stat.S_ISDIR(mode),
            is_file=stat.S_ISREG(mode),
            permissions=oct(mode)[-3:]
        )

    def list_dir(self, path: str) -> List[str]:
        """
        Lists all files and subdirectories within a directory.

        :param path: The directory path.
        :return: A list of all entry names.
        """
        return os.listdir(path)

    def walk_dir(self, top_dir: str) -> Generator[Tuple[str, str]]:
        """
        A generator that traverses a directory and all its subdirectories,
        yielding (directory_path, filename) tuples.

        :param top_dir: The root directory to start walking from.
        :yields: (dirpath, filename) tuples.
        """
        for dirpath, dirnames, filenames in os.walk(top_dir):
            for filename in filenames:
                yield (dirpath, filename)

    def exists(self, path: str) -> bool:
        """
        Checks if a path exists.

        :param path: The file or directory path.
        :return: True if the path exists, False otherwise.
        """
        return os.path.exists(path)

    def is_file(self, path: str) -> bool:
        """
        Checks if a path is a file.

        :param path: The file path.
        :return: True if the path is a file, False otherwise.
        """
        return os.path.isfile(path)

    def is_dir(self, path: str) -> bool:
        """
        Checks if a path is a directory.

        :param path: The directory path.
        :return: True if the path is a directory, False otherwise.
        """
        return os.path.isdir(path)

    def get_path_parts(self, path: str) -> Tuple[str, str]:
        """
        Splits a path into its directory name and file name.

        :param path: The file or directory path.
        :return: A 2-element tuple containing (directory name, file name).
        """
        return os.path.split(path)

    def join_path(self, *parts: str) -> str:
        """Safely joins path components."""
        return os.path.join(*parts)

    # --- Shell Command Execution API ---
    def run(self, command: str,
            capture_output: bool = True,
            text: bool = True,
            print_output: bool = True) -> subprocess.CompletedProcess:
        """
        Executes a Shell command with optional output printing.

        :param command: The command string to execute.
        :param capture_output: If True, captures stdout and stderr. If False,
                               output streams directly to the parent process.
        :param text: If True, output and errors are returned as text.
        :param print_output: If True, the command's stdout and stderr will be
                             printed. When this is True, capture_output is
                             automatically set to True.
        :return: A subprocess.CompletedProcess object with the execution results.
                 Its key attributes include:
                 - returncode: The command's exit code. 0 for success.
                 - stdout: The standard output of the command.
                 - stderr: The standard error of the command.
        """
        # If output needs to be printed, it must be captured.
        if print_output:
            capture_output = True

        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=capture_output,
            text=text
        )

        if print_output:
            if result.stdout:
                # Print to standard output
                print(result.stdout.rstrip('\n'))
            if result.stderr:
                # Print errors to standard error stream
                print(result.stderr, file=sys.stderr)

        return result

    # --- Script Control API ---
    def exit(self, exit_code: int = 0) -> None:
        """
        Exits the script with a specified exit code.

        :param exit_code: The exit code, defaults to 0.
        """
        sys.exit(exit_code)

sh = ShellAPI()