#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sen63c
# Model-Version: 1.2.0
#

import pytest
from sensirion_i2c_sen63c.device import Sen63cDevice


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x6B,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sen63cDevice(channel)


def test_perform_forced_co2_recalibration1(sensor):
    correction = sensor.perform_forced_co2_recalibration(600)
    print(f"correction: {correction}; "
          )


def test_get_product_name1(sensor):
    product_name = sensor.get_product_name()
    print(f"product_name: {product_name}; "
          )


def test_get_serial_number1(sensor):
    serial_number = sensor.get_serial_number()
    print(f"serial_number: {serial_number}; "
          )


def test_device_reset1(sensor):
    sensor.device_reset()


def test_start_fan_cleaning1(sensor):
    sensor.start_fan_cleaning()


def test_set_temperature_offset_parameters1(sensor):
    sensor.set_temperature_offset_parameters(1, 10, 1, 0)


def test_set_temperature_acceleration_parameters1(sensor):
    sensor.set_temperature_acceleration_parameters(1, 1, 1, 1)


def test_set_co2_sensor_automatic_self_calibration1(sensor):
    sensor.set_co2_sensor_automatic_self_calibration(0)


def test_get_co2_sensor_automatic_self_calibration1(sensor):
    (padding, status
     ) = sensor.get_co2_sensor_automatic_self_calibration()
    print(f"padding: {padding}; "
          f"status: {status}; "
          )


def test_set_ambient_pressure1(sensor):
    sensor.set_ambient_pressure(1013)


def test_get_ambient_pressure1(sensor):
    ambient_pressure = sensor.get_ambient_pressure()
    print(f"ambient_pressure: {ambient_pressure}; "
          )


def test_set_sensor_altitude1(sensor):
    sensor.set_sensor_altitude(0)


def test_get_sensor_altitude1(sensor):
    altitude = sensor.get_sensor_altitude()
    print(f"altitude: {altitude}; "
          )


def test_activate_sht_heater1(sensor):
    sensor.activate_sht_heater()


def test_read_device_status1(sensor):
    device_status = sensor.read_device_status()
    print(f"device_status: {device_status}; "
          )


def test_read_and_clear_device_status1(sensor):
    device_status = sensor.read_and_clear_device_status()
    print(f"device_status: {device_status}; "
          )


def test_start_continuous_measurement1(sensor):
    sensor.start_continuous_measurement()
    (padding, data_ready
     ) = sensor.get_data_ready()
    print(f"padding: {padding}; "
          f"data_ready: {data_ready}; "
          )
    (mass_concentration_pm1p0, mass_concentration_pm2p5, mass_concentration_pm4p0, mass_concentration_pm10p0, humidity,
     temperature, co2
     ) = sensor.read_measured_values()
    print(f"mass_concentration_pm1p0: {mass_concentration_pm1p0}; "
          f"mass_concentration_pm2p5: {mass_concentration_pm2p5}; "
          f"mass_concentration_pm4p0: {mass_concentration_pm4p0}; "
          f"mass_concentration_pm10p0: {mass_concentration_pm10p0}; "
          f"humidity: {humidity}; "
          f"temperature: {temperature}; "
          f"co2: {co2}; "
          )
    (mass_concentration_pm1p0, mass_concentration_pm2p5, mass_concentration_pm4p0, mass_concentration_pm10p0,
     ambient_humidity, ambient_temperature, co2
     ) = sensor.read_measured_values_as_integers()
    print(f"mass_concentration_pm1p0: {mass_concentration_pm1p0}; "
          f"mass_concentration_pm2p5: {mass_concentration_pm2p5}; "
          f"mass_concentration_pm4p0: {mass_concentration_pm4p0}; "
          f"mass_concentration_pm10p0: {mass_concentration_pm10p0}; "
          f"ambient_humidity: {ambient_humidity}; "
          f"ambient_temperature: {ambient_temperature}; "
          f"co2: {co2}; "
          )
    (number_concentration_pm0p5, number_concentration_pm1p0, number_concentration_pm2p5, number_concentration_pm4p0,
     number_concentration_pm10p0
     ) = sensor.read_number_concentration_values()
    print(f"number_concentration_pm0p5: {number_concentration_pm0p5}; "
          f"number_concentration_pm1p0: {number_concentration_pm1p0}; "
          f"number_concentration_pm2p5: {number_concentration_pm2p5}; "
          f"number_concentration_pm4p0: {number_concentration_pm4p0}; "
          f"number_concentration_pm10p0: {number_concentration_pm10p0}; "
          )
    (number_concentration_pm0p5, number_concentration_pm1p0, number_concentration_pm2p5, number_concentration_pm4p0,
     number_concentration_pm10p0
     ) = sensor.read_number_concentration_values_as_integers()
    print(f"number_concentration_pm0p5: {number_concentration_pm0p5}; "
          f"number_concentration_pm1p0: {number_concentration_pm1p0}; "
          f"number_concentration_pm2p5: {number_concentration_pm2p5}; "
          f"number_concentration_pm4p0: {number_concentration_pm4p0}; "
          f"number_concentration_pm10p0: {number_concentration_pm10p0}; "
          )
    (raw_humidity, raw_temperature
     ) = sensor.read_measured_raw_values()
    print(f"raw_humidity: {raw_humidity}; "
          f"raw_temperature: {raw_temperature}; "
          )
    sensor.set_temperature_offset_parameters(1, 10, 1, 0)
    sensor.stop_measurement()

