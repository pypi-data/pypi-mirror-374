"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class RecommendationRegexMatchingPolicy(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REGEX_FIELD_NUMBER: builtins.int
    PERCENTAGE_MATCH_FIELD_NUMBER: builtins.int
    regex: builtins.str
    percentage_match: builtins.int
    def __init__(
        self,
        *,
        regex: builtins.str = ...,
        percentage_match: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["percentage_match", b"percentage_match", "regex", b"regex"]) -> None: ...

global___RecommendationRegexMatchingPolicy = RecommendationRegexMatchingPolicy

@typing_extensions.final
class RecommendationSampleMatchingPolicy(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_SET_ID_FIELD_NUMBER: builtins.int
    FEATURE_SET_MAJOR_VERSION_FIELD_NUMBER: builtins.int
    COLUMN_NAME_FIELD_NUMBER: builtins.int
    SAMPLE_FRACTION_FIELD_NUMBER: builtins.int
    FUZZY_DISTANCE_FIELD_NUMBER: builtins.int
    PERCENTAGE_MATCH_FIELD_NUMBER: builtins.int
    feature_set_id: builtins.str
    feature_set_major_version: builtins.int
    column_name: builtins.str
    sample_fraction: builtins.float
    fuzzy_distance: builtins.int
    percentage_match: builtins.int
    def __init__(
        self,
        *,
        feature_set_id: builtins.str = ...,
        feature_set_major_version: builtins.int = ...,
        column_name: builtins.str = ...,
        sample_fraction: builtins.float = ...,
        fuzzy_distance: builtins.int = ...,
        percentage_match: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column_name", b"column_name", "feature_set_id", b"feature_set_id", "feature_set_major_version", b"feature_set_major_version", "fuzzy_distance", b"fuzzy_distance", "percentage_match", b"percentage_match", "sample_fraction", b"sample_fraction"]) -> None: ...

global___RecommendationSampleMatchingPolicy = RecommendationSampleMatchingPolicy

@typing_extensions.final
class ListRecommendationClassifierResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASSIFIERS_FIELD_NUMBER: builtins.int
    @property
    def classifiers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RecommendationClassifier]: ...
    def __init__(
        self,
        *,
        classifiers: collections.abc.Iterable[global___RecommendationClassifier] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["classifiers", b"classifiers"]) -> None: ...

global___ListRecommendationClassifierResponse = ListRecommendationClassifierResponse

@typing_extensions.final
class RecommendationClassifier(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    REGEX_FIELD_NUMBER: builtins.int
    SAMPLE_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def regex(self) -> global___RecommendationRegexMatchingPolicy: ...
    @property
    def sample(self) -> global___RecommendationSampleMatchingPolicy: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        regex: global___RecommendationRegexMatchingPolicy | None = ...,
        sample: global___RecommendationSampleMatchingPolicy | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["matching_policy", b"matching_policy", "regex", b"regex", "sample", b"sample"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["matching_policy", b"matching_policy", "name", b"name", "regex", b"regex", "sample", b"sample"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["matching_policy", b"matching_policy"]) -> typing_extensions.Literal["regex", "sample"] | None: ...

global___RecommendationClassifier = RecommendationClassifier

@typing_extensions.final
class CreateRecommendationClassifierRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASSIFIER_FIELD_NUMBER: builtins.int
    @property
    def classifier(self) -> global___RecommendationClassifier: ...
    def __init__(
        self,
        *,
        classifier: global___RecommendationClassifier | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["classifier", b"classifier"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["classifier", b"classifier"]) -> None: ...

global___CreateRecommendationClassifierRequest = CreateRecommendationClassifierRequest

@typing_extensions.final
class UpdateRecommendationClassifierRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASSIFIER_FIELD_NUMBER: builtins.int
    @property
    def classifier(self) -> global___RecommendationClassifier: ...
    def __init__(
        self,
        *,
        classifier: global___RecommendationClassifier | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["classifier", b"classifier"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["classifier", b"classifier"]) -> None: ...

global___UpdateRecommendationClassifierRequest = UpdateRecommendationClassifierRequest

@typing_extensions.final
class DeleteRecommendationClassifierRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASSIFIER_NAME_FIELD_NUMBER: builtins.int
    classifier_name: builtins.str
    def __init__(
        self,
        *,
        classifier_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["classifier_name", b"classifier_name"]) -> None: ...

global___DeleteRecommendationClassifierRequest = DeleteRecommendationClassifierRequest
