# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class Firmware(BaseModel):
    """
    Firmware
    """  # noqa: E501

    org: Optional[StrictStr] = None
    product: Optional[StrictStr] = None
    firmware: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    target: Optional[StrictStr] = None
    ver_major: Optional[StrictInt] = None
    ver_minor: Optional[StrictInt] = None
    ver_patch: Optional[StrictInt] = None
    ver_build: Optional[StrictInt] = None
    built: Optional[StrictStr] = None
    builder: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "org",
        "product",
        "firmware",
        "version",
        "target",
        "ver_major",
        "ver_minor",
        "ver_patch",
        "ver_build",
        "built",
        "builder",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Firmware from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Firmware from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "org": obj.get("org"),
                "product": obj.get("product"),
                "firmware": obj.get("firmware"),
                "version": obj.get("version"),
                "target": obj.get("target"),
                "ver_major": obj.get("ver_major"),
                "ver_minor": obj.get("ver_minor"),
                "ver_patch": obj.get("ver_patch"),
                "ver_build": obj.get("ver_build"),
                "built": obj.get("built"),
                "builder": obj.get("builder"),
            }
        )
        return _obj
