# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictBytes,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from notehub_py.models.device_usage import DeviceUsage
from notehub_py.models.tower_location import TowerLocation
from typing import Optional, Set
from typing_extensions import Self


class DeviceSession(BaseModel):
    """
    DeviceSession
    """  # noqa: E501

    session: Optional[StrictStr] = Field(default=None, description="Session UID")
    session_began: Optional[StrictInt] = Field(
        default=None, description="UNIX timestamp of session start"
    )
    why_session_opened: Optional[StrictStr] = Field(
        default=None, description="Reason for session opening"
    )
    session_ended: Optional[StrictInt] = Field(
        default=None, description="UNIX timestamp of session end"
    )
    why_session_closed: Optional[StrictStr] = Field(
        default=None, description="Reason for session closing"
    )
    device: Optional[StrictStr] = Field(default=None, description="Device UID")
    sn: Optional[StrictStr] = Field(default=None, description="Device Serial Number")
    product: Optional[StrictStr] = Field(default=None, description="Product UID")
    fleets: Optional[List[StrictStr]] = Field(
        default=None, description="Array of Fleet UIDs"
    )
    cell: Optional[StrictStr] = Field(
        default=None,
        description='Cell ID where the session originated and quality ("mcc,mnc,lac,cellid")',
    )
    scan: Optional[Union[StrictBytes, StrictStr]] = None
    triangulate: Optional[Dict[str, Any]] = None
    rssi: Optional[StrictInt] = None
    sinr: Optional[StrictInt] = None
    rsrp: Optional[StrictInt] = None
    rsrq: Optional[StrictInt] = None
    bars: Optional[StrictInt] = None
    rat: Optional[StrictStr] = None
    bearer: Optional[StrictStr] = None
    ip: Optional[StrictStr] = None
    bssid: Optional[StrictStr] = None
    ssid: Optional[StrictStr] = None
    iccid: Optional[StrictStr] = None
    apn: Optional[StrictStr] = None
    transport: Optional[StrictStr] = Field(
        default=None, description="Type of network transport"
    )
    tower: Optional[TowerLocation] = None
    tri: Optional[TowerLocation] = None
    when: Optional[StrictInt] = Field(
        default=None,
        description="Last known capture time of a note routed through this session in Unix timestamp",
    )
    where_when: Optional[StrictInt] = Field(
        default=None, description="Unix timestamp of last GPS location"
    )
    where: Optional[StrictStr] = Field(
        default=None, description="Open Location Code from last GPS location"
    )
    where_lat: Optional[Union[StrictFloat, StrictInt]] = None
    where_lon: Optional[Union[StrictFloat, StrictInt]] = None
    where_location: Optional[StrictStr] = None
    where_country: Optional[StrictStr] = None
    where_timezone: Optional[StrictStr] = None
    usage_actual: Optional[StrictBool] = None
    voltage: Optional[Union[StrictFloat, StrictInt]] = None
    temp: Optional[Union[StrictFloat, StrictInt]] = None
    continuous: Optional[StrictBool] = Field(
        default=None, description="Was this a continuous connection?"
    )
    tls: Optional[StrictBool] = Field(default=None, description="Was TLS used?")
    work: Optional[StrictInt] = Field(
        default=None,
        description="Unix timestamp of the last time work was done for this session",
    )
    events: Optional[StrictInt] = Field(
        default=None, description="Number of events routed"
    )
    moved: Optional[StrictInt] = None
    orientation: Optional[StrictStr] = None
    hp_secs_total: Optional[StrictInt] = Field(
        default=None, description="Total number of seconds in high power mode"
    )
    hp_secs_data: Optional[StrictInt] = None
    hp_secs_gps: Optional[StrictInt] = None
    hp_cycles_total: Optional[StrictInt] = None
    hp_cycles_data: Optional[StrictInt] = None
    hp_cycles_gps: Optional[StrictInt] = None
    period: Optional[DeviceUsage] = None
    power_charging: Optional[StrictBool] = None
    power_usb: Optional[StrictBool] = None
    power_primary: Optional[StrictBool] = None
    power_mah: Optional[Union[StrictFloat, StrictInt]] = None
    penalty_secs: Optional[StrictInt] = Field(
        default=None, description="Number of seconds in penalty in the prior session"
    )
    failed_connects: Optional[StrictInt] = Field(
        default=None,
        description="Number of failed connection attempts in the prior session",
    )
    __properties: ClassVar[List[str]] = [
        "session",
        "session_began",
        "why_session_opened",
        "session_ended",
        "why_session_closed",
        "device",
        "sn",
        "product",
        "fleets",
        "cell",
        "scan",
        "triangulate",
        "rssi",
        "sinr",
        "rsrp",
        "rsrq",
        "bars",
        "rat",
        "bearer",
        "ip",
        "bssid",
        "ssid",
        "iccid",
        "apn",
        "transport",
        "tower",
        "tri",
        "when",
        "where_when",
        "where",
        "where_lat",
        "where_lon",
        "where_location",
        "where_country",
        "where_timezone",
        "usage_actual",
        "voltage",
        "temp",
        "continuous",
        "tls",
        "work",
        "events",
        "moved",
        "orientation",
        "hp_secs_total",
        "hp_secs_data",
        "hp_secs_gps",
        "hp_cycles_total",
        "hp_cycles_data",
        "hp_cycles_gps",
        "period",
        "power_charging",
        "power_usb",
        "power_primary",
        "power_mah",
        "penalty_secs",
        "failed_connects",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tower
        if self.tower:
            _dict["tower"] = self.tower.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tri
        if self.tri:
            _dict["tri"] = self.tri.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict["period"] = self.period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "session": obj.get("session"),
                "session_began": obj.get("session_began"),
                "why_session_opened": obj.get("why_session_opened"),
                "session_ended": obj.get("session_ended"),
                "why_session_closed": obj.get("why_session_closed"),
                "device": obj.get("device"),
                "sn": obj.get("sn"),
                "product": obj.get("product"),
                "fleets": obj.get("fleets"),
                "cell": obj.get("cell"),
                "scan": obj.get("scan"),
                "triangulate": obj.get("triangulate"),
                "rssi": obj.get("rssi"),
                "sinr": obj.get("sinr"),
                "rsrp": obj.get("rsrp"),
                "rsrq": obj.get("rsrq"),
                "bars": obj.get("bars"),
                "rat": obj.get("rat"),
                "bearer": obj.get("bearer"),
                "ip": obj.get("ip"),
                "bssid": obj.get("bssid"),
                "ssid": obj.get("ssid"),
                "iccid": obj.get("iccid"),
                "apn": obj.get("apn"),
                "transport": obj.get("transport"),
                "tower": (
                    TowerLocation.from_dict(obj["tower"])
                    if obj.get("tower") is not None
                    else None
                ),
                "tri": (
                    TowerLocation.from_dict(obj["tri"])
                    if obj.get("tri") is not None
                    else None
                ),
                "when": obj.get("when"),
                "where_when": obj.get("where_when"),
                "where": obj.get("where"),
                "where_lat": obj.get("where_lat"),
                "where_lon": obj.get("where_lon"),
                "where_location": obj.get("where_location"),
                "where_country": obj.get("where_country"),
                "where_timezone": obj.get("where_timezone"),
                "usage_actual": obj.get("usage_actual"),
                "voltage": obj.get("voltage"),
                "temp": obj.get("temp"),
                "continuous": obj.get("continuous"),
                "tls": obj.get("tls"),
                "work": obj.get("work"),
                "events": obj.get("events"),
                "moved": obj.get("moved"),
                "orientation": obj.get("orientation"),
                "hp_secs_total": obj.get("hp_secs_total"),
                "hp_secs_data": obj.get("hp_secs_data"),
                "hp_secs_gps": obj.get("hp_secs_gps"),
                "hp_cycles_total": obj.get("hp_cycles_total"),
                "hp_cycles_data": obj.get("hp_cycles_data"),
                "hp_cycles_gps": obj.get("hp_cycles_gps"),
                "period": (
                    DeviceUsage.from_dict(obj["period"])
                    if obj.get("period") is not None
                    else None
                ),
                "power_charging": obj.get("power_charging"),
                "power_usb": obj.get("power_usb"),
                "power_primary": obj.get("power_primary"),
                "power_mah": obj.get("power_mah"),
                "penalty_secs": obj.get("penalty_secs"),
                "failed_connects": obj.get("failed_connects"),
            }
        )
        return _obj
