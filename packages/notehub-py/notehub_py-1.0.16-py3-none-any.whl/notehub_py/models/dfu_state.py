# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class DFUState(BaseModel):
    """
    DFUState
    """  # noqa: E501

    type: Optional[StrictStr] = None
    file: Optional[StrictStr] = Field(default=None, description="Firmware filename")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Length of firmware file"
    )
    crc32: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Used for image verification"
    )
    md5: Optional[StrictStr] = Field(
        default=None, description="Used for image verification"
    )
    mode: Optional[StrictStr] = Field(
        default=None,
        description='* "idle"          - nothing downloading or downloaded * "error"         - halted and in the error state * "downloading"   - transferring data from cloud to module * "sideloading"   - transferring data via request to module * "ready"         - DFU data is ready/verified and waiting on external storage * "ready-retry"   - DFU data is ready/verified and retrying * "updating"      - currently updating * "completed"     - DFU is done successfully ',
    )
    status: Optional[StrictStr] = Field(default=None, description="Status message")
    began: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The time when the DFU began"
    )
    retry: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Value of _fw_retry environment var at time of DFU initialization",
    )
    errors: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The number of consecutive errors the DFU process has encountered",
    )
    read: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The amount the notecard has read of the image from notehub",
    )
    updated: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Last updated timestamp"
    )
    version: Optional[StrictStr] = Field(
        default=None,
        description="Last known version, which is generally a JSON object contained within the firmware image",
    )
    __properties: ClassVar[List[str]] = [
        "type",
        "file",
        "length",
        "crc32",
        "md5",
        "mode",
        "status",
        "began",
        "retry",
        "errors",
        "read",
        "updated",
        "version",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["card", "user"]):
            raise ValueError("must be one of enum values ('card', 'user')")
        return value

    @field_validator("mode")
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "idle",
                "error",
                "downloading",
                "sideloading",
                "ready",
                "ready-retry",
                "updating",
                "completed",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('idle', 'error', 'downloading', 'sideloading', 'ready', 'ready-retry', 'updating', 'completed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DFUState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DFUState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "file": obj.get("file"),
                "length": obj.get("length"),
                "crc32": obj.get("crc32"),
                "md5": obj.get("md5"),
                "mode": obj.get("mode"),
                "status": obj.get("status"),
                "began": obj.get("began"),
                "retry": obj.get("retry"),
                "errors": obj.get("errors"),
                "read": obj.get("read"),
                "updated": obj.get("updated"),
                "version": obj.get("version"),
            }
        )
        return _obj
