# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.data_set_field import DataSetField
from typing import Optional, Set
from typing_extensions import Self


class DataSet(BaseModel):
    """
    DataSet
    """  # noqa: E501

    name: Optional[StrictStr] = Field(
        default=None, description="The name of the data set"
    )
    time: Optional[StrictStr] = Field(
        default=None,
        description="JSONata expression resulting in the relevant time field",
    )
    lat: Optional[StrictStr] = Field(
        default=None, description="JSONata expression resulting in the latitude field"
    )
    lon: Optional[StrictStr] = Field(
        default=None, description="JSONata expression resulting in the Longitude field"
    )
    fields: Optional[List[DataSetField]] = None
    __properties: ClassVar[List[str]] = ["name", "time", "lat", "lon", "fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict["fields"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "time": obj.get("time"),
                "lat": obj.get("lat"),
                "lon": obj.get("lon"),
                "fields": (
                    [DataSetField.from_dict(_item) for _item in obj["fields"]]
                    if obj.get("fields") is not None
                    else None
                ),
            }
        )
        return _obj
