# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class QuestionDataResponseLineChart(BaseModel):
    """
    QuestionDataResponseLineChart
    """  # noqa: E501

    type: StrictStr = Field(
        description="Graph type must be 'lineChart' for a line chart."
    )
    title: StrictStr = Field(description="Title of the chart.")
    var_property: StrictStr = Field(
        description="The property displayed as the Y-axis for the line chart.",
        alias="property",
    )
    display_value: StrictStr = Field(
        description="Label of the Y-axis for the line chart.", alias="displayValue"
    )
    split_by: Optional[StrictStr] = Field(
        default=None,
        description="Optional. Split the data by this property to create multiple lines on the chart.",
        alias="splitBy",
    )
    start_date: Optional[datetime] = Field(
        default=None,
        description="Optional start date for filtering/charting data.",
        alias="startDate",
    )
    end_date: Optional[datetime] = Field(
        default=None,
        description="Optional end date for filtering/charting data.",
        alias="endDate",
    )
    __properties: ClassVar[List[str]] = [
        "type",
        "title",
        "property",
        "displayValue",
        "splitBy",
        "startDate",
        "endDate",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["lineChart"]):
            raise ValueError("must be one of enum values ('lineChart')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionDataResponseLineChart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionDataResponseLineChart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "title": obj.get("title"),
                "property": obj.get("property"),
                "displayValue": obj.get("displayValue"),
                "splitBy": obj.get("splitBy"),
                "startDate": obj.get("startDate"),
                "endDate": obj.get("endDate"),
            }
        )
        return _obj
