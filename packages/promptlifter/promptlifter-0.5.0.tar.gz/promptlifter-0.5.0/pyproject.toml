[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "promptlifter"
version = "0.5.0"
description = "LLM-powered conversation interface with intelligent context management, real-time search integration, and seamless conversation flow"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PromptLifter Team", email = "promptlifter@thinkata.com"}
]
maintainers = [
    {name = "PromptLifter Team", email = "promptlifter@thinkata.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.13"
dependencies = [
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "google-generativeai>=0.3.0",
    "pinecone>=7.3.0",
    "tavily-python>=0.3.0",
]
keywords = ["llm", "conversation", "ai", "machine-learning", "context-management", "search", "vector-search", "chatbot", "tavily", "pinecone", "ollama", "openai", "anthropic", "real-time-search", "conversation-flow"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
promptlifter = "promptlifter.main:main"

[project.urls]
Homepage = "https://github.com/Thinkata/promptlifter"
Repository = "https://github.com/Thinkata/promptlifter"
Documentation = "https://github.com/Thinkata/promptlifter#readme"
Changelog = "https://github.com/Thinkata/promptlifter/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/Thinkata/promptlifter/issues"
"Source Code" = "https://github.com/Thinkata/promptlifter"

[tool.setuptools.packages.find]
include = ["promptlifter*"]

[tool.setuptools.package-data]
promptlifter = ["*.yaml", "*.yml", "*.json"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=promptlifter",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "llm: Tests that require LLM services",
    "search: Tests that require search services",
    "pinecone: Tests that require Pinecone",
    "tavily: Tests that require Tavily",
]
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["promptlifter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 