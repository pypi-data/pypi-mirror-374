- hosts:
    - master
    - worker
  tags:
    - dl
    - volcano
    - hccl-controller
    - ascend-device-plugin
    - noded
    - npu-exporter
    - ascend-operator
    - clusterd
    - resilience-controller
  tasks:
    - name: collect extra info
      shell: kubectl get nodes -o wide||true
      register: cluster_info
      delegate_to: "{{ groups['master'][0]|default('localhost') }}"
      run_once: yes

- hosts:
    - localhost
    - master
    - worker
  tags: always
  gather_facts: True
  environment:
    DEPLOYER_CHECK_MODE: "{{deployer_check_mode}}"
  tasks:
    - name: collect basic info
      collect_info:
        tags: "{{ ansible_run_tags }}"
        is_ipv6: "{{working_on_ipv6}}"

    - name: Check connectivity to target hosts
      ping:

    - name: collect info
      generate_package_config:
        ascend_deployer_work_dir: "{{ ascend_deployer_work_dir }}"
        python_version: "{{ python_version }}"
        arch: "{{ansible_architecture}}"
        card: "{{card_info}}"
      delegate_to: localhost

    # Only supports the same architecture for all master
    - name: Get master node0 architecture
      command: uname -m
      register: master0_arch
      delegate_to: "{{ groups['master'][0] }}"
      when:
        - groups['master'] is defined
        - groups['master'] | length > 0

    # Only supports the same architecture for all worker
    - name: Get worker node0 architecture
      command: uname -m
      register: worker0_arch
      delegate_to: "{{ groups['worker'][0] }}"
      when:
        - groups['worker'] is defined
        - groups['worker'] | length > 0

    - name: Get master node architecture
      command: uname -m
      register: master_arch
      when:
        - groups['master'] is defined
        - groups['master'] | length > 0
        - "'master' in group_names"

    - name: check user compatibility npu cann dl ai_framework for installation
      check_for_install:
        tags: "{{ ansible_run_tags }}"
        python_version: "{{ python_version }}"
        force_upgrade_npu: "{{ force_upgrade_npu | default('false')}}"
        npu_num: "{{ npu_num | default(-1)}}"
        hosts_name: "{{ hosts_name | default('')}}"
        group_names: "{{ group_names }}"
        master_groups: "{{ groups['master'] }}"
        worker_groups: "{{ groups['worker'] }}"
        host_info: "{{ hostvars }}"
        current_hostname: "{{ inventory_hostname }}"
        ascend_deployer_work_dir: "{{ ascend_deployer_work_dir }}"
        resource_dir: "{{ resource_path }}"
        packages: "{{ packages }}"
        node_name: "{{NODE_NAME}}"
        cluster_info: "{{cluster_info | default({})}}"
        davinci_devices: "{{ davinci | default([]) }}"
        weights_path: "{{ WEIGHTS_PATH | default('')}}"
        ip_address: "{{ansible_default_ipv4.address | default(ansible_default_ipv6.address)}}"
        mtos_sys_dir: "{{ resource_dir }}/MTOS_22.03LTS-SP4_aarch64"
        use_k8s_version: "{{ use_k8s_version }}"
        master0_arch: "{{ master0_arch.stdout | default('') }}"
        worker0_arch: "{{ worker0_arch.stdout | default('') }}"
        master_arch: "{{ master_arch.stdout | default('') }}"
        groups: "{{ groups }}"
      register: check_result

    - name: show check message
      debug:
        var: check_result.stdout_lines


- hosts:
    - localhost
  tags: always
  tasks:
    # 1. 获取所有主机的变量字典值列表
    # 2. 筛选出包含check_result属性的主机
    # 3. 提取每个主机的check_result_json数据
    # 4. 添加本地主机的检查结果（特殊处理）
    # 5. 安全处理空值情况，保证始终返回可迭代对象
    # 6. 去除重复数据条目
    # 7. 明确转换为列表类型
  - name: Collect the check results of all hosts.
    set_fact:
      all_results:  >-
        {{
            (hostvars.values()
            | selectattr('check_result', 'defined')
            | map(attribute='check_result.check_result_json'))
            + [{'localhost': hostvars.localhost.check_result.check_result_json}
            if (hostvars.localhost.check_result is defined
            and hostvars.localhost.check_result.check_result_json is defined)
            else {}]
            | default([])
            | unique
            | list
        }}

  - name: output json
    generate_check_result_json:
      check_results: "{{ all_results }}"

- hosts:
    - localhost
    - master
    - worker
  tags: always
  tasks:
    - name: Fail if check_result is not correct
      fail:
        msg: "The pre-check task failed, please check the show check message above or check the ~/.ascend_deployer/deploy_info/check_res_output.json file!"
      when: check_result.fail_flag | bool