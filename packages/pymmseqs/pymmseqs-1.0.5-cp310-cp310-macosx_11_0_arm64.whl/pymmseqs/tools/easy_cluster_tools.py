# pymmseqs/tools/easy_cluster_tools.py

def parse_fasta_clusters(file_path, seq_id_separator="|", seq_id_index=1):
    """
    Generator that parses a FASTA file and yields clusters one at a time as (rep, members) tuples.

    Special function for the [cluster_prefix]_all_seqs.fasta file generated by mmseqs2 easy-cluster.
    
    Parameters:
    -----------
    file_path : str
        Path to the FASTA file containing clustered sequences.
    
    Yields:
    -------
    tuple
        (representative, members) where:
        - representative: str, the header of the representative sequence (excluding '>').
        - members: list, a list of member dictionaries with 'seq_id', 'header', and 'sequence'.
    """
    current_rep = None
    current_members = []

    with open(file_path, 'r') as fh:
        # Process file line by line, stripping whitespace and skipping empty lines
        lines = (line.strip() for line in fh if line.strip())
        lines_iter = iter(lines)
        try:
            current_line = next(lines_iter)
        except StopIteration:
            return

        while True:
            if current_line.startswith(">"):
                try:
                    next_line = next(lines_iter)
                except StopIteration:
                    # End of file reached
                    if current_rep is not None and current_members:
                        yield current_rep, current_members
                    break

                if next_line.startswith(">"):
                    # Two consecutive headers: current_line is a representative
                    if current_rep is not None:
                        # Yield the previous cluster before starting a new one
                        yield current_rep, current_members
                    current_rep = current_line[1:].strip()
                    current_members = []
                    current_line = next_line
                else:
                    # current_line is a member header
                    member_header = current_line[1:].strip()
                    seq_lines = [next_line]
                    while True:
                        try:
                            peek_line = next(lines_iter)
                        except StopIteration:
                            # End of file after sequence lines
                            current_line = None
                            break
                        if peek_line.startswith(">"):
                            current_line = peek_line
                            break
                        else:
                            seq_lines.append(peek_line)
                    sequence = "".join(seq_lines)
                    try:
                        seq_id = member_header.split()[0].split(seq_id_separator)[seq_id_index]
                        member = {
                            "seq_id": seq_id,
                            "header": member_header,
                            "sequence": sequence
                        }
                    except:
                        member = {
                            "header": member_header,
                            "sequence": sequence
                        }
                    if current_rep is not None:
                        current_members.append(member)
                    else:
                        print("Warning: Found a member before any representative!")
            else:
                # Skip non-header lines
                try:
                    current_line = next(lines_iter)
                except StopIteration:
                    break

            if current_line is None:
                # Yield the last cluster if it exists
                if current_rep is not None and current_members:
                    yield current_rep, current_members
                break
