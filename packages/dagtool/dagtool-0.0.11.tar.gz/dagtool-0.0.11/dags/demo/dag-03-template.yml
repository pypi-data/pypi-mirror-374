name: 03_template
type: dag
docs: |
  ## Template DAG

  This is the demo dag for passing template data to DAG object.
start_date: "{{ vars('start_date') }}"
catchup: "{{ vars('catchup') }}"
tags:
  - "group:demo"
  - "uses:true"
  - "domain:demo"
vars:
  gcs_path: "gcs://{{ vars('project_id') }}/{{ vars('bucket_name') }}/data"
tasks:
  - task: start
    uses: debug
    params:
      custom_macros: "{{ custom_macros }}"

  - task: macros
    upstream: start
    uses: debug
    params:
      variable_00: "{{ vars('project_id') }}"
      variable_01: "{{ vars('bucket_name') }}"
      variable_02: "{{ vars('catchup') }}"
      variable_03: "{{ vars('schedule_interval') }}"
      variable_04: "{{ vars('start_date') }}"
      variable_05: "{{ vars('max_active_runs') }}"
      variable_06: "{{ vars('batch_size') }}"
      variable_07: "{{ vars('transform_driver_request') }}"
      variable_08: "{{ vars('dp_pyspark_version') }}"
      variable_not_exists_01: "{{ vars('foo') }}"
      variable_not_exists_02: "{{ vars('foo', 'default') }}"
      env_01: "{{ env('AIRFLOW_ENV') }}"
      env_02: "{{ env('AIRFLOW_HOME') }}"
      env_not_exists_01: "{{ env('FOO') }}"
      env_not_exists_02: "{{ env('FOO', 'default') }}"

  - task: combine_macros
    upstream: macros
    uses: debug
    params:
      variable_combine: "{{ gcs_path }}"

  - task: filter
    upstream: macros
    uses: debug
    params:
      convert_dt: "{{ data_interval_start.in_timezone('Asia/Bangkok').strftime('%Y-%m-%d %H:00:00%z') }}"

  - task: custom_filter
    upstream: filter
    uses: debug
    params:
      convert_dt_filter_01: "{{ data_interval_start | fmt('%Y-%m-%d %H:00:00%z') }}"
      convert_dt_filter_02: "{{ data_interval_start | fmt('%Y-%m-%d') }}"
      convert_dt_filter_03: "{{ data_interval_start | fmt('%Y0101') }}"
      convert_dt_filter_04: "{{ data_interval_start | tz('Asia/Bangkok') }}"
      convert_dt_filter_05: "{{ data_interval_start | tz('UTC') }}"
      convert_dt_filter_06: "{{ data_interval_start | tz }}"
      convert_dt_filter_07: "{{ data_interval_start | tz('Asia/Bangkok') | fmt('%Y-%m-%d %H:00:00%z') }}"
