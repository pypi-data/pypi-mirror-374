{"version":3,"file":"tag-40RALpC4.js","sources":["../../src/stores/dataset.ts","../../src/api/tag.ts","../../src/stores/tag.ts"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { getDatasets, createDataset, updateDataset, deleteDataset, deleteBatchDatasets, bindSamplesByName as addSamplesToDataset, unbindSample } from '@/api/dataset';\nimport type { Dataset, GetDatasetsParams, CreateDatasetParams, UpdateDatasetParams, DeleteDatasetParams, DeleteBatchDatasetsParams, AddSamplesToDatasetParams, UnbindSampleParams } from '@/api/dataset';\n\nexport const useDatasetStore = defineStore('dataset', {\n  state: () => ({\n    datasets: [] as Dataset[],\n    total: 0,\n    loading: false,\n    lastFetchTime: 0,\n    currentProjectId: null as number | string | null,\n    currentParams: {} as GetDatasetsParams\n  }),\n  \n  getters: {\n    getDatasetById: (state) => (id: number) => {\n      return state.datasets.find(dataset => dataset.id === id);\n    }\n  },\n  \n  actions: {\n    async fetchDatasets(projectId: number | string, params: Partial<GetDatasetsParams> = {}) {\n      // 如果已经有数据且在短时间内（如5秒）请求过，且参数相同，直接返回缓存\n      const now = Date.now();\n      const isSameParams = JSON.stringify({ ...this.currentParams, ...params }) === \n                          JSON.stringify(this.currentParams);\n      \n      if (\n        this.datasets.length > 0 && \n        this.currentProjectId === projectId &&\n        now - this.lastFetchTime < 5000 && \n        isSameParams &&\n        !params.forceRefresh\n      ) {\n        return { datasets: this.datasets, total: this.total };\n      }\n      \n      this.loading = true;\n      try {\n        const requestParams: GetDatasetsParams = {\n          project_id: projectId as number,\n          ...params\n        };\n        \n        delete requestParams.forceRefresh;\n        this.currentParams = requestParams;\n        \n        const response = await getDatasets(requestParams);\n        \n        if (response.data.code === 200) {\n          this.datasets = response.data.data.datasets || [];\n          this.total = response.data.data.total || 0;\n          this.lastFetchTime = now;\n          this.currentProjectId = projectId;\n        }\n        return { datasets: this.datasets, total: this.total };\n      } catch (error) {\n        console.error('获取数据集列表失败:', error);\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async createDataset(params: CreateDatasetParams) {\n      const response = await createDataset(params);\n      if (response.data.code === 200) {\n        // 强制刷新数据集列表\n        await this.fetchDatasets(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async updateDataset(params: UpdateDatasetParams) {\n      const response = await updateDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        const index = this.datasets.findIndex(dataset => dataset.id === params.id);\n        if (index !== -1) {\n          this.datasets[index] = { ...this.datasets[index], ...response.data.data };\n        }\n      }\n      return response;\n    },\n    \n    async deleteDataset(params: DeleteDatasetParams) {\n      const response = await deleteDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        this.datasets = this.datasets.filter(dataset => dataset.id !== params.dataset_id);\n        if (this.total > 0) this.total--;\n      }\n      return response;\n    },\n    \n    async deleteBatchDatasets(params: DeleteBatchDatasetsParams) {\n      const response = await deleteBatchDatasets(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，移除已删除的数据集\n        this.datasets = this.datasets.filter(dataset => !params.dataset_ids.includes(dataset.id));\n        // 更新总数\n        this.total = Math.max(0, this.total - params.dataset_ids.length);\n      }\n      return response;\n    },\n    \n    async addSamplesToDataset(params: AddSamplesToDatasetParams) {\n      const response = await addSamplesToDataset(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，增加样本数量\n        const index = this.datasets.findIndex(dataset => dataset.id === params.dataset_id);\n        if (index !== -1) {\n          this.datasets[index].sample_count += params.sample_ids.length;\n        }\n      }\n      return response;\n    },\n    \n    /**\n     * 从数据集中移除样本\n     * @param params 移除样本参数\n     * @returns 移除结果\n     */\n    async unbindSampleFromDataset(params: UnbindSampleParams) {\n      const response = await unbindSample(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，减少样本数量\n        const index = this.datasets.findIndex(dataset => dataset.id === params.dataset_id);\n        if (index !== -1 && this.datasets[index].sample_count > 0) {\n          this.datasets[index].sample_count -= 1; // 减少1个样本\n        }\n      }\n      return response;\n    }\n  }\n}); ","import type { AxiosResponse } from 'axios'\nimport { request } from '@/utils/request'\nimport type { IResponse, IListResp } from '@/types/response'\nimport axios from 'axios'\n\nconst api = {\n  projectTags: '/tags/list',\n  create: '/tags/create',\n  update: '/tags/update',\n  delete: '/tags/delete',\n  batchCreate: '/tags/batch',\n  bindSamples: '/tags/bind_samples',\n  deleteBatch: '/tags/batch_delete',\n  bindSamplesByFilter: '/tags/bind_samples_with_filter',\n  unbindSample: '/tags/unbind_sample'\n}\n\n// 标签接口参数类型定义\nexport interface Tag {\n  id: number\n  name: string\n  project_id: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface CreateTagParams {\n  names: string[]\n  project_id: number\n}\n\nexport interface UpdateTagParams {\n  id: number\n  name: string\n}\n\nexport interface DeleteTagParams {\n  id: number\n}\n\nexport interface BindSamplesParams {\n  tag_ids: number[]\n  sample_ids: number[]\n}\n\nexport interface TagItem {\n  name: string  // 标签名称\n}\n\nexport interface BatchCreateTagsParams {\n  project_id: number\n  tags: TagItem[]\n}\n\nexport interface ProjectTagsParams {\n  project_id: number\n  tag_id?: number[]\n  name?: string\n  page?: number\n  page_size?: number\n  forceRefresh?: boolean\n}\n\n/**\n * 获取标签列表\n * @param params 查询参数\n * @returns 标签列表\n */\nexport function getTags(params: ProjectTagsParams) {\n  return request.get<IResponse<IListResp<Tag>>>(api.projectTags, { params })\n}\n\n/**\n * 创建标签\n * @param data 创建标签参数\n * @returns 创建的标签\n */\nexport function createTag(data: CreateTagParams) {\n  return request.post<IResponse<Tag>>(api.create, data)\n}\n\n/**\n * 批量创建标签\n * @param data 批量创建标签参数\n * @returns 创建结果\n */\nexport function batchCreateTags(data: BatchCreateTagsParams) {\n  return request.post<IResponse<{ success: boolean; created_count: number }>>(api.batchCreate, data)\n}\n\n/**\n * 更新标签\n * @param data 更新标签参数\n * @returns 更新的标签\n */\nexport function updateTag(data: UpdateTagParams) {\n  return request.patch<IResponse<Tag>>(api.update, data)\n}\n\n/**\n * 删除标签\n * @param data 删除标签参数\n * @returns 删除结果\n */\nexport function deleteTag(data: DeleteTagParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.delete, data)\n}\n\n/**\n * 批量绑定标签到样本\n * @param data 绑定参数\n * @returns 绑定结果\n */\nexport function tagBindSamples(data: BindSamplesParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamples, data)\n}\n\n// 获取标签列表的接口\nexport const getTagsList = async (): Promise<{ code: number; data: Tag[]; msg?: string }> => {\n  const response = await axios.get('/api/tags')\n  return response.data\n}\n\n/**\n * 批量删除标签\n * @param data 批量删除标签参数\n * @returns 删除结果\n */\nexport interface DeleteBatchTagsParams {\n  tag_ids: number[]\n  project_id: number\n} \n\nexport function deleteBatchTags(data: DeleteBatchTagsParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.deleteBatch, data)\n}\n\n/**\n * 根据筛选条件绑定标签\n * @param data 绑定参数\n * @returns 绑定结果\n */\nexport interface BindSamplesByFilterParams {\n  tag_ids: number[];\n  project_id: number;\n  status?: number | string;\n  id?: number | string;\n  name?: string;\n  creator_name?: string;\n  label_id?: number | string;\n  tag_id?: number | string;\n  sort?: string;\n  unSelectedIds?: number[];\n}\n\nexport function tagBindSamplesByFilter(data: BindSamplesByFilterParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.bindSamplesByFilter, data);\n}\n\n/**\n * 解绑样本\n * @param data 解绑参数\n * @returns 解绑结果\n */\nexport interface UnbindSampleParams {\n  tag_id: number\n  sample_id: number\n}\n\nexport function tagUnbindSample(data: UnbindSampleParams) {\n  return request.post<IResponse<{ success: boolean }>>(api.unbindSample, data)\n}\n","import { defineStore } from 'pinia';\nimport { getTags, deleteTag, updateTag, createTag, batchCreateTags, tagBindSamples, deleteBatchTags, tagUnbindSample } from '@/api/tag';\nimport type { Tag, ProjectTagsParams, CreateTagParams, UpdateTagParams, BatchCreateTagsParams, BindSamplesParams, DeleteBatchTagsParams, UnbindSampleParams } from '@/api/tag';\n\nexport const useTagStore = defineStore('tag', {\n  state: () => ({\n    tags: [] as Tag[],\n    total: 0,\n    loading: false,\n    lastFetchTime: 0,\n    currentProjectId: null as number | string | null,\n    currentParams: {} as ProjectTagsParams\n  }),\n  \n  getters: {\n    getTagById: (state) => (id: number) => {\n      return state.tags.find(tag => tag.id === id);\n    },\n    \n    getTagsByIds: (state) => (ids: number[]) => {\n      return state.tags.filter(tag => ids.includes(tag.id));\n    }\n  },\n  \n  actions: {\n    async fetchTags(projectId: number | string, params: Partial<ProjectTagsParams> = {}) {\n      // 如果已经有数据且在短时间内（如5秒）请求过，且参数相同，直接返回缓存\n      const now = Date.now();\n      const isSameParams = JSON.stringify({ ...this.currentParams, ...params }) === \n                          JSON.stringify(this.currentParams);\n      \n      if (\n        this.tags.length > 0 && \n        this.currentProjectId === projectId &&\n        now - this.lastFetchTime < 5000 && \n        isSameParams &&\n        !params.forceRefresh\n      ) {\n        return { tags: this.tags, total: this.total };\n      }\n      \n      this.loading = true;\n      try {\n        const requestParams: ProjectTagsParams = {\n          project_id: projectId as number,\n          ...params\n        };\n        \n        delete requestParams.forceRefresh;\n        this.currentParams = requestParams;\n        \n        const response = await getTags(requestParams);\n        \n        if (response.data.code === 200) {\n          this.tags = response.data.data.tags || [];\n          this.total = response.data.data.total || 0;\n          this.lastFetchTime = now;\n          this.currentProjectId = projectId;\n        }\n        return { tags: this.tags, total: this.total };\n      } catch (error) {\n        console.error('获取标签列表失败:', error);\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async deleteTag(params: { tag_id: number, project_id: number | string }) {\n      const response = await deleteTag(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        this.tags = this.tags.filter(tag => tag.id !== params.tag_id);\n        if (this.total > 0) this.total--;\n      }\n      return response;\n    },\n    \n    async updateTag(params: UpdateTagParams) {\n      const response = await updateTag(params);\n      if (response.data.code === 200) {\n        // 更新本地状态\n        const index = this.tags.findIndex(tag => tag.id === params.id);\n        if (index !== -1) {\n          this.tags[index] = { ...this.tags[index], ...response.data.data };\n        }\n      }\n      return response;\n    },\n    \n    async createTag(params: CreateTagParams) {\n      const response = await createTag(params);\n      if (response.data.code === 200) {\n        // 强制刷新标签列表\n        await this.fetchTags(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async batchCreateTags(params: BatchCreateTagsParams) {\n      const response = await batchCreateTags(params);\n      if (response.data.code === 200) {\n        // 强制刷新标签列表\n        await this.fetchTags(params.project_id, { forceRefresh: true });\n      }\n      return response;\n    },\n    \n    async bindSamplesToTags(params: BindSamplesParams) {\n      return await tagBindSamples(params);\n    },\n    \n    async deleteBatchTags(params: DeleteBatchTagsParams) {\n      const response = await deleteBatchTags(params);\n      if (response.data.code === 200) {\n        // 更新本地状态，移除已删除的标签\n        this.tags = this.tags.filter(tag => !params.tag_ids.includes(tag.id));\n        // 更新总数\n        this.total = Math.max(0, this.total - params.tag_ids.length);\n      }\n      return response;\n    },\n\n    async unbindSample(params: UnbindSampleParams) {\n      const response = await tagUnbindSample(params);\n      return response;\n    }\n  }\n}); "],"names":["useDatasetStore","defineStore","state","id","dataset","projectId","params","now","isSameParams","requestParams","response","getDatasets","error","createDataset","updateDataset","index","deleteDataset","deleteBatchDatasets","addSamplesToDataset","unbindSample","api","getTags","request","createTag","data","batchCreateTags","updateTag","deleteTag","tagBindSamples","deleteBatchTags","tagBindSamplesByFilter","tagUnbindSample","useTagStore","tag","ids"],"mappings":"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"}