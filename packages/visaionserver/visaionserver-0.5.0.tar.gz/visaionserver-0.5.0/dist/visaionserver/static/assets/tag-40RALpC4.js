import{al as o,a5 as n}from"./index-DeXzsHYB.js";import{u as c,b as h,c as l,e as u,f as g,h as f,g as p}from"./dataset-C69Q8yLu.js";const x=o("dataset",{state:()=>({datasets:[],total:0,loading:!1,lastFetchTime:0,currentProjectId:null,currentParams:{}}),getters:{getDatasetById:t=>a=>t.datasets.find(e=>e.id===a)},actions:{async fetchDatasets(t,a={}){const e=Date.now(),i=JSON.stringify({...this.currentParams,...a})===JSON.stringify(this.currentParams);if(this.datasets.length>0&&this.currentProjectId===t&&e-this.lastFetchTime<5e3&&i&&!a.forceRefresh)return{datasets:this.datasets,total:this.total};this.loading=!0;try{const s={project_id:t,...a};delete s.forceRefresh,this.currentParams=s;const d=await p(s);return d.data.code===200&&(this.datasets=d.data.data.datasets||[],this.total=d.data.data.total||0,this.lastFetchTime=e,this.currentProjectId=t),{datasets:this.datasets,total:this.total}}catch(s){throw console.error("获取数据集列表失败:",s),s}finally{this.loading=!1}},async createDataset(t){const a=await f(t);return a.data.code===200&&await this.fetchDatasets(t.project_id,{forceRefresh:!0}),a},async updateDataset(t){const a=await g(t);if(a.data.code===200){const e=this.datasets.findIndex(i=>i.id===t.id);e!==-1&&(this.datasets[e]={...this.datasets[e],...a.data.data})}return a},async deleteDataset(t){const a=await u(t);return a.data.code===200&&(this.datasets=this.datasets.filter(e=>e.id!==t.dataset_id),this.total>0&&this.total--),a},async deleteBatchDatasets(t){const a=await l(t);return a.data.code===200&&(this.datasets=this.datasets.filter(e=>!t.dataset_ids.includes(e.id)),this.total=Math.max(0,this.total-t.dataset_ids.length)),a},async addSamplesToDataset(t){const a=await h(t);if(a.data.code===200){const e=this.datasets.findIndex(i=>i.id===t.dataset_id);e!==-1&&(this.datasets[e].sample_count+=t.sample_ids.length)}return a},async unbindSampleFromDataset(t){const a=await c(t);if(a.data.code===200){const e=this.datasets.findIndex(i=>i.id===t.dataset_id);e!==-1&&this.datasets[e].sample_count>0&&(this.datasets[e].sample_count-=1)}return a}}}),r={projectTags:"/tags/list",create:"/tags/create",update:"/tags/update",delete:"/tags/delete",batchCreate:"/tags/batch",bindSamples:"/tags/bind_samples",deleteBatch:"/tags/batch_delete",bindSamplesByFilter:"/tags/bind_samples_with_filter",unbindSample:"/tags/unbind_sample"};function m(t){return n.get(r.projectTags,{params:t})}function y(t){return n.post(r.create,t)}function T(t){return n.post(r.batchCreate,t)}function w(t){return n.patch(r.update,t)}function S(t){return n.post(r.delete,t)}function b(t){return n.post(r.bindSamples,t)}function _(t){return n.post(r.deleteBatch,t)}function F(t){return n.post(r.bindSamplesByFilter,t)}function P(t){return n.post(r.unbindSample,t)}const j=o("tag",{state:()=>({tags:[],total:0,loading:!1,lastFetchTime:0,currentProjectId:null,currentParams:{}}),getters:{getTagById:t=>a=>t.tags.find(e=>e.id===a),getTagsByIds:t=>a=>t.tags.filter(e=>a.includes(e.id))},actions:{async fetchTags(t,a={}){const e=Date.now(),i=JSON.stringify({...this.currentParams,...a})===JSON.stringify(this.currentParams);if(this.tags.length>0&&this.currentProjectId===t&&e-this.lastFetchTime<5e3&&i&&!a.forceRefresh)return{tags:this.tags,total:this.total};this.loading=!0;try{const s={project_id:t,...a};delete s.forceRefresh,this.currentParams=s;const d=await m(s);return d.data.code===200&&(this.tags=d.data.data.tags||[],this.total=d.data.data.total||0,this.lastFetchTime=e,this.currentProjectId=t),{tags:this.tags,total:this.total}}catch(s){throw console.error("获取标签列表失败:",s),s}finally{this.loading=!1}},async deleteTag(t){const a=await S(t);return a.data.code===200&&(this.tags=this.tags.filter(e=>e.id!==t.tag_id),this.total>0&&this.total--),a},async updateTag(t){const a=await w(t);if(a.data.code===200){const e=this.tags.findIndex(i=>i.id===t.id);e!==-1&&(this.tags[e]={...this.tags[e],...a.data.data})}return a},async createTag(t){const a=await y(t);return a.data.code===200&&await this.fetchTags(t.project_id,{forceRefresh:!0}),a},async batchCreateTags(t){const a=await T(t);return a.data.code===200&&await this.fetchTags(t.project_id,{forceRefresh:!0}),a},async bindSamplesToTags(t){return await b(t)},async deleteBatchTags(t){const a=await _(t);return a.data.code===200&&(this.tags=this.tags.filter(e=>!t.tag_ids.includes(e.id)),this.total=Math.max(0,this.total-t.tag_ids.length)),a},async unbindSample(t){return await P(t)}}});export{j as a,F as b,y as c,m as g,b as t,x as u};
//# sourceMappingURL=tag-40RALpC4.js.map
