use crate::utils::constants::{
    ARRAY_SIZE, LARGE_POSITIVE_VALUE, OMEGA_LOSS_MINIMUM, OMEGA_NOCONFIDENCE_VALUE,
    OMEGA_SCALE_FACTOR, RATIO_SCALE_FACTOR, STATISTICAL_CONFIDENCE_MINIMUM_N,
};

pub fn omega(
    log_returns: [i64; ARRAY_SIZE],
    actual_len: u32,
    weights: [i64; ARRAY_SIZE],
    use_weighting: bool,
    bypass_confidence: bool,
) -> i64 {
    if !bypass_confidence & actual_len < STATISTICAL_CONFIDENCE_MINIMUM_N {
        OMEGA_NOCONFIDENCE_VALUE
    } else {
        if use_weighting {
            let mut weighted_positive_sum: i64 = 0;
            let mut weighted_negative_sum: i64 = 0;
            let weight_scale: i64 = 100000;

            for i in 0..ARRAY_SIZE {
                if (i as u32) < actual_len {
                    let weight = weights[i] as i64;
                    let log_return = log_returns[i] as i64;
                    if log_return > 0 {
                        weighted_positive_sum += log_return * weight;
                    } else if log_return < 0 {
                        weighted_negative_sum += log_return * weight;
                    }
                }
            }

            let descaled_positive_sum = weighted_positive_sum / weight_scale;
            let descaled_negative_sum = weighted_negative_sum / weight_scale;
            let abs_weighted_negative_sum = -descaled_negative_sum;

            let effective_denominator = if abs_weighted_negative_sum >= OMEGA_LOSS_MINIMUM {
                abs_weighted_negative_sum
            } else {
                OMEGA_LOSS_MINIMUM
            };
            ((descaled_positive_sum * RATIO_SCALE_FACTOR) / effective_denominator) as i64
        } else {
            let mut positive_sum: u64 = 0;
            let mut negative_sum: u64 = 0;

            for i in 0..ARRAY_SIZE {
                if (i as u32) < actual_len {
                    if log_returns[i] > 0 {
                        positive_sum = positive_sum + (log_returns[i] as u64);
                    } else if log_returns[i] < 0 {
                        negative_sum = negative_sum + ((-log_returns[i]) as u64);
                    }
                }
            }

            let effective_denominator = if negative_sum >= OMEGA_LOSS_MINIMUM as u64 {
                negative_sum
            } else {
                OMEGA_LOSS_MINIMUM as u64
            };
            ((positive_sum * RATIO_SCALE_FACTOR as u64) / effective_denominator) as i64
        }
    }
}

#[test]
fn test_omega_all_positive() {
    let mut returns = [0; ARRAY_SIZE];
    for i in 0..5 {
        returns[i] = 100;
    }

    let weights = [100000; ARRAY_SIZE];
    let result = omega(returns, 5, weights, false, false);
    assert(result == 10000000);
}

#[test]
fn test_omega_all_negative() {
    let mut returns = [0; ARRAY_SIZE];
    for i in 0..5 {
        returns[i] = -100;
    }

    let weights = [100000; ARRAY_SIZE];
    let result = omega(returns, 5, weights, false, false);
    assert(result == 0);
}

#[test]
fn test_omega_mixed_returns() {
    let mut returns = [0; ARRAY_SIZE];
    returns[0] = 1000;
    returns[1] = -500;
    returns[2] = 800;
    returns[3] = -300;

    let weights = [100000; ARRAY_SIZE];
    let result = omega(returns, 4, weights, false, false);
    assert(result == 22500000);
}

#[test]
fn test_omega_zero_returns() {
    let mut returns = [0; ARRAY_SIZE];
    for i in 0..5 {
        returns[i] = 0;
    }

    let weights = [100000; ARRAY_SIZE];
    let result = omega(returns, 5, weights, false, false);
    assert(result == 10000000);
}
