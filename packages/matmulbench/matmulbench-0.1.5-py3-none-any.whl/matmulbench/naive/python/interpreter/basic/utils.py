from itertools import permutations
from .randutils import get_matrices

def generate_all_permutations(input_list):
    return list(permutations(input_list))

def run_permutation(permutation, M, N, K):
    A,B,C = get_matrices(M, N, K)

    #GENERATED by ChatGPT, seems correct to my eyes
    # Map from number to loop variable name and range
    loop_vars = {
        1: ('i', range(M)),
        2: ('j', range(N)),
        3: ('k', range(K))
    }

    var_names = []
    ranges = []
    for x in permutation:
        name, rng = loop_vars[x]
        var_names.append(name)
        ranges.append(rng)

    for a in ranges[0]:
        for b in ranges[1]:
            for c in ranges[2]:
                # Map loop variables to actual names
                loop_vals = {var_names[0]: a, var_names[1]: b, var_names[2]: c}
                i = loop_vals['i']
                j = loop_vals['j']
                k = loop_vals['k']
                C[i, j] += A[i, k] * B[k, j]

    return C


def run_permutation_hardcoded(permutation, M, N, K):
    A,B,C = get_matrices(M, N, K)
    func_name = "".join(permutation)
    globals()[func_name](A, B, C)
    return C

def ijk(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for i in range(M):
        for j in range(N):
            for k in range(K):
                C[i, j] += A[i, k] * B[k, j]

def ikj(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for i in range(M):
        for k in range(K):
            for j in range(N):
                C[i, j] += A[i, k] * B[k, j]

def jik(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for j in range(N):
        for i in range(M):
            for k in range(K):
                C[i, j] += A[i, k] * B[k, j]

def jki(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for j in range(N):
        for k in range(K):
            for i in range(M):
                C[i, j] += A[i, k] * B[k, j]

def kij(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for k in range(K):
        for i in range(M):
            for j in range(N):
                C[i, j] += A[i, k] * B[k, j]

def kji(A, B, C):
    M, K = A.shape
    _, N = B.shape
    for k in range(K):
        for j in range(N):
            for i in range(M):
                C[i, j] += A[i, k] * B[k, j]