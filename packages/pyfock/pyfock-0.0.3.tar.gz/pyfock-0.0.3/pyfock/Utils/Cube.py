import numpy as np
import numba

def generate_cube_coords(mol, nx=100, ny=100, nz=100, padding=5.0):
    """
    Generate coordinates for a cube file centered at molecule's COM.
    
    Parameters:
    -----------
    mol : molecule object
        Molecule with get_center_of_charge() method and atomic coordinates
    nx, ny, nz : int
        Number of grid points in each direction
    padding : float
        Extra space around molecule in Bohr
        
    Returns:
    --------
    coords : ndarray, shape (nx*ny*nz, 3)
        Grid coordinates in Bohr
    origin : ndarray, shape (3,)
        Origin of the cube
    spacing : ndarray, shape (3,)
        Grid spacing in each direction
    """
    COM = mol.get_center_of_charge(units='bohrs') # Center of Charge in Bohrs
    
    # Get molecular extents
    atom_coords = mol.coordsBohrs # Atomic coordinates in Bohrs
    min_coords = np.min(atom_coords, axis=0)
    max_coords = np.max(atom_coords, axis=0)
    
    # Calculate cube dimensions with padding
    extents = max_coords - min_coords + 2 * padding
    
    # Grid spacing
    spacing = extents / np.array([nx-1, ny-1, nz-1])
    
    # Origin such that COM is at center
    origin = COM - extents / 2.0
    
    # Generate grid coordinates
    x = np.linspace(origin[0], origin[0] + extents[0], nx)
    y = np.linspace(origin[1], origin[1] + extents[1], ny)
    z = np.linspace(origin[2], origin[2] + extents[2], nz)
    
    # Create meshgrid and flatten
    X, Y, Z = np.meshgrid(x, y, z, indexing='ij')
    coords = np.column_stack([X.ravel(), Y.ravel(), Z.ravel()])
    
    return coords, origin, spacing


def write_cube_file(filename, mol, density_values, origin, spacing, nx, ny, nz):
    """
    Write a cube file with density values.
    
    Parameters:
    -----------
    filename : str
        Output cube file name
    mol : molecule object
        Molecule with atomic information
    density_values : ndarray, shape (nx*ny*nz,)
        Density values at grid points
    origin : ndarray, shape (3,)
        Origin coordinates
    spacing : ndarray, shape (3,)
        Grid spacing
    nx, ny, nz : int
        Number of grid points in each direction
    """
    atoms = mol.atomicSpecies  # Assuming returns list of atoms
    coords = mol.coordsBohrs  # Atomic coordinates in Angstroms
    
    with open(filename, 'w') as f:
        # Header lines
        f.write("Cube file\n")
        f.write("Generated by PyFock\n")
        
        # Number of atoms and origin
        f.write(f"{mol.natoms:5d} {origin[0]:12.6f} {origin[1]:12.6f} {origin[2]:12.6f}\n")
        
        # Grid dimensions and spacing
        f.write(f"{nx:5d} {spacing[0]:12.6f} {0.0:12.6f} {0.0:12.6f}\n")
        f.write(f"{ny:5d} {0.0:12.6f} {spacing[1]:12.6f} {0.0:12.6f}\n")
        f.write(f"{nz:5d} {0.0:12.6f} {0.0:12.6f} {spacing[2]:12.6f}\n")
        
        # Atomic information
        for i in range(mol.natoms):
            atomic_num = mol.Zcharges[i]  # Assuming atom object has this
            charge = float(atomic_num)  # Nuclear charge
            f.write(f"{atomic_num:5d} {charge:12.6f} {coords[i,0]:12.6f} {coords[i,1]:12.6f} {coords[i,2]:12.6f}\n")
        
        # Density values
        density_3d = density_values.reshape(nx, ny, nz)
        for i in range(nx):
            for j in range(ny):
                for k in range(0, nz, 6):  # 6 values per line
                    line_vals = density_3d[i, j, k:k+6]
                    f.write("".join(f"{val:13.5E}" for val in line_vals) + "\n")
