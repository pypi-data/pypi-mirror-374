# This file is autogenerated by pyziggy
# See pyziggy.generator.generate_device_bases()

"""
Autogenerated classes abstracting over parameters that are commonly occurring
together. These are used by the pyziggy generator when populating your ``AvailableDevices``
class. User code should access these classes through the ``AvailableDevices`` object, but
it's not supposed to instantiate them.

For example if a device has a toggleable state parameter, a settable
brightness and settable color_temp parameter at the same time, it will inherit from
:class:`pyziggy.device_bases.LightWithColorTemp`, as opposed to inheriting just from
:class:`pyziggy.devices_client.Device` and having the same parameters.

This allows you to write more succinct automation code with type safety.

For example, you can write the following code to set all of your lights, that have this
capability, to a common color temperature::

    for device in devices.get_devices():
        if isinstance(device, LightWithColorTemp):
            device.color_temp.set(370)
"""

from pyziggy.parameters import (
    NumericParameter,
    QueryableNumericParameter,
    SettableAndQueryableNumericParameter,
    EnumParameter,
    SettableEnumParameter,
    BinaryParameter,
    SettableToggleParameter,
    SettableAndQueryableToggleParameter,
    CompositeParameter,
    _int_to_enum,
)


class LightWithDimming:
    def __init__(self, arg0, arg1):
        self.state = SettableAndQueryableToggleParameter("state")
        self.brightness = SettableAndQueryableNumericParameter("brightness", arg0, arg1)


class LightWithColorTemp(LightWithDimming):
    def __init__(self, arg0, arg1, arg2, arg3):
        LightWithDimming.__init__(self, arg0, arg1)
        self.color_temp = SettableAndQueryableNumericParameter("color_temp", arg2, arg3)


class CompositeParameterVariant(CompositeParameter):
    def __init__(self, property: str, arg0, arg1, arg2, arg3):
        self.x = SettableAndQueryableNumericParameter("x", arg0, arg1)
        self.y = SettableAndQueryableNumericParameter("y", arg2, arg3)
        CompositeParameter.__init__(self, property)


class CompositeParameterVariant0(CompositeParameter):
    def __init__(self, property: str, arg0, arg1, arg2, arg3):
        self.hue = SettableAndQueryableNumericParameter("hue", arg0, arg1)
        self.saturation = SettableAndQueryableNumericParameter("saturation", arg2, arg3)
        CompositeParameter.__init__(self, property)


class LightWithColor(LightWithColorTemp):
    def __init__(
        self, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11
    ):
        LightWithColorTemp.__init__(self, arg0, arg1, arg2, arg3)
        self.color_xy = CompositeParameterVariant("color", arg4, arg5, arg6, arg7)
        self.color_hs = CompositeParameterVariant0("color", arg8, arg9, arg10, arg11)


__all__ = [
    "LightWithColor",
    "LightWithColorTemp",
    "LightWithDimming",
]
