import json
import os
import shutil
import unittest
from pathlib import Path

from pyziggy.generator import generate_device_bases
from pyziggy.generator import generate_devices_client
from pyziggy.run import _run_mypy


# Interprets the provided path constituents relative to the location of this
# script, and returns an absolute Path to the resulting location.
#
# E.g. rel_to_py(".") returns an absolute path to the directory containing this
# script.
def rel_to_py(*paths) -> Path:
    return Path(
        os.path.realpath(
            os.path.join(os.path.realpath(os.path.dirname(__file__)), *paths)
        )
    )


class TestStringMethods(unittest.TestCase):
    def test_generate_devices_client(self):
        generate_device_bases()

        def load_devices_json():
            with open(rel_to_py("resources", "devices.json"), "r") as file:
                return json.load(file)

        devices_json = load_devices_json()

        test_build_dir = rel_to_py("build")

        if test_build_dir.exists():
            shutil.rmtree(test_build_dir)

        test_build_dir.mkdir()

        autogenerate_dir = test_build_dir / "pyziggy_autogenerate"
        autogenerate_dir.mkdir()

        generate_devices_client(devices_json, autogenerate_dir / "available_devices.py")

        for artifact in ["automation.py", "device_helpers.py"]:
            shutil.copy(rel_to_py("resources", artifact), test_build_dir / artifact)

        mypy_pass = _run_mypy(test_build_dir / "automation.py")

        self.assertTrue(
            mypy_pass,
            "Test automation passes mypy check with the autogenerated classes",
        )


if __name__ == "__main__":
    unittest.main()
