name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest markdown-it-py psutil
    
    - name: Build Rust extension
      run: maturin build --release
    
    - name: List built wheels
      run: |
        echo "Contents of target/wheels:"
        ls target/wheels/ || dir target\wheels
    
    - name: Install built wheel
      run: |
        python -c "import glob; import subprocess; wheels = glob.glob('target/wheels/*.whl'); print('Found wheels:', wheels); subprocess.run(['pip', 'install'] + wheels)"
    
    - name: Add python package to PYTHONPATH (Unix)
      if: runner.os != 'Windows'
      run: echo "PYTHONPATH=${{ github.workspace }}/python" >> $GITHUB_ENV
    
    - name: Add python package to PYTHONPATH (Windows)
      if: runner.os == 'Windows'  
      run: echo "PYTHONPATH=${{ github.workspace }}\python" >> $env:GITHUB_ENV
    
    - name: Run tests
      run: pytest tests/ -v
    
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy maturin markdown-it-py
    
    - name: Lint Python code with ruff
      run: ruff check python/
    
    - name: Check Python formatting with black
      run: black --check python/
    
    - name: Type check with mypy
      run: mypy python/markdown_it_accel/ || true  # Allow failures for now
    
    - name: Format Rust code
      run: cargo fmt --check
    
    - name: Lint Rust code with clippy
      run: cargo clippy -- -D warnings

  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.platform.runner }}
    if: github.event_name == 'release' && github.event.action == 'published'
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: windows-latest
            target: x64
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.platform.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: auto
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
        path: dist/

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build sdist
      run: maturin sdist --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build-wheels, build-sdist]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/project/markdown-it-accel/
    permissions:
      id-token: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    
    - name: List distribution files
      run: ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true