[project]
name = "friendli"
version = "0.11.0"
description = "Python Client SDK Generated by Speakeasy."
authors = [{ name = "FriendliAI Engineering", email = "eng@friendli.ai" }]
requires-python = ">=3.9.2"
readme = "README.md"
dependencies = [
    "httpcore >=1.0.9",
    "httpx >=0.28.1",
    "pydantic >=2.11.2",
]
license = { text = "Copyright (c) 2025-present, FriendliAI Inc. All rights reserved." }

[project.urls]
Repository = "https://github.com/friendliai/friendli-python.git"

[dependency-groups]
dev = [
    "nox>=2025.5.1",
]
lint = [
    "black>=25.1.0",
    "mypy>=1.15.0",
    "ruff>=0.12.9",
]
test = [
    "pytest>=8.4.1",
]

[build-system]
requires = ["uv_build>=0.8.3,<0.9.0"]
build-backend = "uv_build"

[tool.license]
space = 1
width = 88

[tool.sdk-transpiler]
script = "transpiler.py"
src = "src/friendli_core"
dest = "src/friendli/core"

[tool.black]
line-length = 88
target-version = ["py313"]

[tool.ruff]
show-fixes = true
src = ["src", "test"]

# Same as Black.
line-length = 88
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes `E` and `F` codes by default.
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "D",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "EXE",
  "ISC",
  "ICN",
  "G",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "ARG",
  "PTH",
  "ERA",
  "PGH",
  "PL",
  "TRY",
  "RUF",
]
ignore = [
  "B010",     # Allow setattr
  "D301",     # https://docs.astral.sh/ruff/rules/escape-sequence-in-docstring/
  "D415",     # https://docs.astral.sh/ruff/rules/missing-terminal-punctuation/
  "E501",     # https://docs.astral.sh/ruff/rules/line-too-long/
  "E741",     # Ambiguous variable name, to be removed later
  "N818",     # Allow non-Error suffix in exception names
  "PGH003",   # TODO: We can turn this one later
  "PIE796",   # Enum can use auto
  "PLR0913",  # Too many argument
  "TID252",   # Allow relative imports
  "W505"      # https://docs.astral.sh/ruff/rules/doc-line-too-long/
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "D",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "EXE",
  "ISC",
  "ICN",
  "G",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "ARG",
  "PTH",
  "PGH",
  "PL",
  "TRY",
  "RUF",
  "TC001"
]
unfixable = ["ERA"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
task-tags = ["TODO", "FIXME", "XXX"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "TC001"]
# no documentation and function annotation required for tests
"test/**/*" = [
  "D",
  "ANN202",
  "ANN001",
  "ANN201",
  "S101",
  "TC003",
  "FBT001",
  "TC002",
  "DTZ005",
  "S311",
  "PLR0915", # Too-many-statements
  "PLR2004", # Can assert with magic numbers
]
"e2etest/**/*" = [
  "T201"
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
# required-imports = ["from __future__ import annotations"]
# TODO: Remove this once we have a proper way to handle annotations
known-first-party = ["sdk_transpiler"]
known-local-folder = ["test"]
forced-separate = ["test"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 7

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true
namespace_packages = true

# https://github.com/python/mypy/issues/4717
# (AJ) Such check should be removed from mypy
disable_error_code = ["type-abstract", "misc", "call-overload"]
# Ignoring "misc", "call-overload" is needed for SDK generation GitHub Workflow to run.

[tool.pytest.ini_options]
addopts = "-rf"

[tool.coverage.run]
branch = true
source_pkgs = ["sdk_transpiler"]
omit = ["**/*/__main__.py"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload", "if TYPE_CHECKING:"]
skip_covered = true
sort = "Cover"

[tool.poetry.group.dev.dependencies] # This is needed for SDK generation GitHub Workflow to run.
mypy = "==1.15.0"
pylint = "==3.2.3"
