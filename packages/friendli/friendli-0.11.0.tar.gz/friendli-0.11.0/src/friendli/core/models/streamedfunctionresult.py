"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict

from friendli.core.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)


class StreamedFunctionResultTypedDict(TypedDict):
    arguments: str
    "The arguments for calling the function, generated by the model in JSON format.\n    Ensure to validate these arguments in your code before invoking the function since the model may not always produce valid JSON.\n    "
    name: NotRequired[Nullable[str]]
    "The name of the function to call."


class StreamedFunctionResult(BaseModel):
    arguments: str
    "The arguments for calling the function, generated by the model in JSON format.\n    Ensure to validate these arguments in your code before invoking the function since the model may not always produce valid JSON.\n    "
    name: OptionalNullable[str] = UNSET
    "The name of the function to call."

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name"]
        nullable_fields = ["name"]
        null_default_fields = []
        serialized = handler(self)
        m = {}
        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)
            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )
            if (val is not None and val != UNSET_SENTINEL) or (
                val != UNSET_SENTINEL
                and (k not in optional_fields or (optional_nullable and is_set))
            ):
                m[k] = val
        return m
