"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

import io
from typing import IO, Annotated, Union

import pydantic
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict

from friendli.core.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)
from friendli.core.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata


class DedicatedListEndpointsRequestTypedDict(TypedDict):
    project_id: NotRequired[Nullable[str]]
    "The ID of the project. If omitted, query all endpoints under the team."
    cursor: NotRequired[Nullable[Union[bytes, IO[bytes], io.BufferedReader]]]
    "Cursor for pagination"
    limit: NotRequired[Nullable[int]]
    "Limit of items per page"
    x_friendli_team: NotRequired[Nullable[str]]
    "ID of team to run requests as (optional parameter)."


class DedicatedListEndpointsRequest(BaseModel):
    project_id: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ""
    "The ID of the project. If omitted, query all endpoints under the team."
    cursor: Annotated[
        OptionalNullable[Union[bytes, IO[bytes], io.BufferedReader]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    "Cursor for pagination"
    limit: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 20
    "Limit of items per page"
    x_friendli_team: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="X-Friendli-Team"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = UNSET
    "ID of team to run requests as (optional parameter)."

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["project_id", "cursor", "limit", "X-Friendli-Team"]
        nullable_fields = ["project_id", "cursor", "limit", "X-Friendli-Team"]
        null_default_fields = []
        serialized = handler(self)
        m = {}
        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)
            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )
            if (val is not None and val != UNSET_SENTINEL) or (
                val != UNSET_SENTINEL
                and (k not in optional_fields or (optional_nullable and is_set))
            ):
                m[k] = val
        return m
