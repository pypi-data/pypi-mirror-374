"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from typing import Annotated, List

import pydantic
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict

from friendli.core.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)


class ChatLogprobsContentTopLogprobTypedDict(TypedDict):
    logprob: float
    "The log probability of this token."
    token: str
    "The token."
    bytes_: NotRequired[Nullable[List[int]]]
    "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."


class ChatLogprobsContentTopLogprob(BaseModel):
    logprob: float
    "The log probability of this token."
    token: str
    "The token."
    bytes_: Annotated[OptionalNullable[List[int]], pydantic.Field(alias="bytes")] = (
        UNSET
    )
    "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["bytes"]
        nullable_fields = ["bytes"]
        null_default_fields = []
        serialized = handler(self)
        m = {}
        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)
            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )
            if (val is not None and val != UNSET_SENTINEL) or (
                val != UNSET_SENTINEL
                and (k not in optional_fields or (optional_nullable and is_set))
            ):
                m[k] = val
        return m
