# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from crypticorn.trade.client.models.margin_mode import MarginMode
from crypticorn.trade.client.models.market_type import MarketType
from crypticorn.trade.client.models.strategy_exchange_info import StrategyExchangeInfo


class Strategy(BaseModel):
    """
    Strategy model for read operations.
    """  # noqa: E501

    created_at: StrictInt = Field(description="Timestamp of creation")
    updated_at: StrictInt = Field(description="Timestamp of last update")
    id: StrictStr = Field(description="Unique identifier for the resource")
    name: StrictStr = Field(description="Name of the strategy")
    description: StrictStr = Field(description="Description of the strategy")
    exchanges: List[StrategyExchangeInfo] = Field(
        description="Exchanges supported by the strategy."
    )
    enabled: StrictBool = Field(
        description="Whether the strategy is enabled. If false, no bots will be created or updated for this strategy, open trades will be rejected. Existing bots will be marked as stopping."
    )
    performance_fee: Union[
        Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
        Annotated[int, Field(le=1, strict=True, ge=0)],
    ] = Field(description="Performance fee for the strategy")
    identifier: StrictStr = Field(
        description="Unique human readable identifier for the strategy e.g. 'daily_trend_momentum'"
    )
    margin_mode: Optional[MarginMode] = None
    leverage: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Leverage for the strategy"
    )
    market_type: MarketType = Field(description="Market of operation of the strategy")
    __properties: ClassVar[List[str]] = [
        "created_at",
        "updated_at",
        "id",
        "name",
        "description",
        "exchanges",
        "enabled",
        "performance_fee",
        "identifier",
        "margin_mode",
        "leverage",
        "market_type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Strategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exchanges (list)
        _items = []
        if self.exchanges:
            for _item_exchanges in self.exchanges:
                if _item_exchanges:
                    _items.append(_item_exchanges.to_dict())
            _dict["exchanges"] = _items
        # set to None if margin_mode (nullable) is None
        # and model_fields_set contains the field
        if self.margin_mode is None and "margin_mode" in self.model_fields_set:
            _dict["margin_mode"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Strategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "exchanges": (
                    [
                        StrategyExchangeInfo.from_dict(_item)
                        for _item in obj["exchanges"]
                    ]
                    if obj.get("exchanges") is not None
                    else None
                ),
                "enabled": obj.get("enabled"),
                "performance_fee": obj.get("performance_fee"),
                "identifier": obj.get("identifier"),
                "margin_mode": obj.get("margin_mode"),
                "leverage": obj.get("leverage"),
                "market_type": obj.get("market_type"),
            }
        )
        return _obj
