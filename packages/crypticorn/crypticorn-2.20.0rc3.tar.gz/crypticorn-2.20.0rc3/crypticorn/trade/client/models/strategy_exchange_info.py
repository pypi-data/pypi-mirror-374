# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from crypticorn.trade.client.models.exchange import Exchange


class StrategyExchangeInfo(BaseModel):
    """
    StrategyExchangeInfo
    """  # noqa: E501

    exchange: Exchange = Field(description="Exchange name. Of type Exchange")
    base_asset: Optional[StrictStr] = Field(
        default="USDT",
        description="Base asset for the strategy. This is the asset that will be used to trade with. Default is USDT.",
    )
    min_amount: StrictInt = Field(
        description="Minimum amount for the strategy on the exchange in the base asset."
    )
    max_amount: Optional[StrictInt] = Field(
        default=100000,
        description="Maximum amount for the strategy on the exchange in the base asset.",
    )
    __properties: ClassVar[List[str]] = [
        "exchange",
        "base_asset",
        "min_amount",
        "max_amount",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StrategyExchangeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StrategyExchangeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "exchange": obj.get("exchange"),
                "base_asset": (
                    obj.get("base_asset")
                    if obj.get("base_asset") is not None
                    else "USDT"
                ),
                "min_amount": obj.get("min_amount"),
                "max_amount": (
                    obj.get("max_amount")
                    if obj.get("max_amount") is not None
                    else 100000
                ),
            }
        )
        return _obj
