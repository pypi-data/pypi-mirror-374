# coding: utf-8

"""
Klines Service API

API for retrieving OHLCV data, funding rates, and symbol information from Binance.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class SymbolInfo(BaseModel):
    """
    Comprehensive symbol information for UDF charting library compatibility.
    """  # noqa: E501

    name: StrictStr = Field(description="Symbol name identifier")
    exchange_traded: StrictStr = Field(
        description="Exchange where symbol is traded", alias="exchange-traded"
    )
    exchange_listed: StrictStr = Field(
        description="Exchange where symbol is listed", alias="exchange-listed"
    )
    timezone: StrictStr = Field(description="Timezone for symbol trading hours")
    minmov: StrictInt = Field(description="Minimum price movement")
    minmov2: StrictInt = Field(description="Secondary minimum price movement")
    pointvalue: StrictInt = Field(description="Point value for price calculations")
    session: StrictStr = Field(description="Trading session hours")
    has_intraday: StrictBool = Field(description="Whether intraday data is available")
    has_no_volume: StrictBool = Field(description="Whether volume data is unavailable")
    description: StrictStr = Field(description="Human-readable symbol description")
    type: StrictStr = Field(description="Symbol type classification")
    supported_resolutions: List[StrictStr] = Field(
        description="List of supported time resolutions"
    )
    pricescale: StrictInt = Field(description="Price scale factor for decimal places")
    ticker: StrictStr = Field(description="Symbol ticker identifier")
    __properties: ClassVar[List[str]] = [
        "name",
        "exchange-traded",
        "exchange-listed",
        "timezone",
        "minmov",
        "minmov2",
        "pointvalue",
        "session",
        "has_intraday",
        "has_no_volume",
        "description",
        "type",
        "supported_resolutions",
        "pricescale",
        "ticker",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "exchange-traded": obj.get("exchange-traded"),
                "exchange-listed": obj.get("exchange-listed"),
                "timezone": obj.get("timezone"),
                "minmov": obj.get("minmov"),
                "minmov2": obj.get("minmov2"),
                "pointvalue": obj.get("pointvalue"),
                "session": obj.get("session"),
                "has_intraday": obj.get("has_intraday"),
                "has_no_volume": obj.get("has_no_volume"),
                "description": obj.get("description"),
                "type": obj.get("type"),
                "supported_resolutions": obj.get("supported_resolutions"),
                "pricescale": obj.get("pricescale"),
                "ticker": obj.get("ticker"),
            }
        )
        return _obj
