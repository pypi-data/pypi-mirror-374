# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Self

from crypticorn.trade.client.models.api_error_identifier import ApiErrorIdentifier
from crypticorn.trade.client.models.api_error_level import ApiErrorLevel
from crypticorn.trade.client.models.api_error_type import ApiErrorType


class NotificationCreate(BaseModel):
    """
    Notification model for creating new system alerts and messages.
    """  # noqa: E501

    viewed: Optional[StrictBool] = Field(
        default=False, description="Whether the notification has been marked as seen"
    )
    sent: Optional[StrictBool] = Field(
        default=False, description="Whether the notification has been sent as an email"
    )
    identifier: ApiErrorIdentifier = Field(
        description="Identifier string. Must match the mapping key in the frontend."
    )
    level: ApiErrorLevel = Field(
        description="Level of the notification. Of type ApiErrorLevel"
    )
    type: ApiErrorType = Field(
        description="Type of the notification. Of type ApiErrorType"
    )
    __properties: ClassVar[List[str]] = [
        "viewed",
        "sent",
        "identifier",
        "level",
        "type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "viewed": obj.get("viewed") if obj.get("viewed") is not None else False,
                "sent": obj.get("sent") if obj.get("sent") is not None else False,
                "identifier": obj.get("identifier"),
                "level": obj.get("level"),
                "type": obj.get("type"),
            }
        )
        return _obj
