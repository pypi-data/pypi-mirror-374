# coding: utf-8

"""
Trading API

API for automated trading and exchange interface. This API is used to trade on the exchange and manage bots, API keys, orders, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from crypticorn.trade.client.models.api_error_identifier import ApiErrorIdentifier
from crypticorn.trade.client.models.bot_status import BotStatus


class Bot(BaseModel):
    """
    Trading bot model for read operations.
    """  # noqa: E501

    user_id: StrictStr = Field(description="UID for the user")
    created_at: StrictInt = Field(description="Timestamp of creation")
    updated_at: StrictInt = Field(description="Timestamp of last update")
    id: StrictStr = Field(description="Unique identifier for the resource")
    name: StrictStr = Field(description="Name of the bot")
    allocation: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Initial allocation for the bot"
    )
    status: BotStatus = Field(description="Status of the bot")
    strategy_id: StrictStr = Field(
        description="UID for the trading strategy used by the bot"
    )
    api_key_id: StrictStr = Field(description="UID for the API key")
    status_code: Optional[ApiErrorIdentifier] = None
    current_allocation: Optional[StrictStr] = Field(
        default="0",
        description="Initial allocation for the bot + accumulated PnL of the orders after the last allocation change",
    )
    current_exposure: Optional[StrictStr] = Field(
        default="0",
        description="Current exposure of the bot, aka. the sum of the absolute values of the open positions",
    )
    __properties: ClassVar[List[str]] = [
        "user_id",
        "created_at",
        "updated_at",
        "id",
        "name",
        "allocation",
        "status",
        "strategy_id",
        "api_key_id",
        "status_code",
        "current_allocation",
        "current_exposure",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if status_code (nullable) is None
        # and model_fields_set contains the field
        if self.status_code is None and "status_code" in self.model_fields_set:
            _dict["status_code"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "user_id": obj.get("user_id"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "allocation": obj.get("allocation"),
                "status": obj.get("status"),
                "strategy_id": obj.get("strategy_id"),
                "api_key_id": obj.get("api_key_id"),
                "status_code": obj.get("status_code"),
                "current_allocation": (
                    obj.get("current_allocation")
                    if obj.get("current_allocation") is not None
                    else "0"
                ),
                "current_exposure": (
                    obj.get("current_exposure")
                    if obj.get("current_exposure") is not None
                    else "0"
                ),
            }
        )
        return _obj
