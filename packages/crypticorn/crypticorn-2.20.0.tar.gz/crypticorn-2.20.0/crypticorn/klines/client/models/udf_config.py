# coding: utf-8

"""
Klines Service API

API for retrieving OHLCV data, funding rates, and symbol information from Binance.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from crypticorn.klines.client.models.internal_exchange import InternalExchange
from crypticorn.klines.client.models.symbol_type import SymbolType


class UDFConfig(BaseModel):
    """
    Universal Data Feed configuration for charting library compatibility.
    """  # noqa: E501

    supported_resolutions: List[StrictStr] = Field(
        description="List of supported time resolutions"
    )
    supports_group_request: Optional[StrictBool] = Field(
        default=False, description="Whether grouped symbol requests are supported"
    )
    supports_marks: Optional[StrictBool] = Field(
        default=False, description="Whether chart marks are supported"
    )
    supports_search: Optional[StrictBool] = Field(
        default=True, description="Whether symbol search is supported"
    )
    supports_timescale_marks: Optional[StrictBool] = Field(
        default=False, description="Whether timescale marks are supported"
    )
    supports_time: Optional[StrictBool] = Field(
        default=True, description="Whether server time is supported"
    )
    exchanges: List[InternalExchange] = Field(description="List of available exchanges")
    symbols_types: List[SymbolType] = Field(
        description="List of supported symbol types"
    )
    currency_codes: List[StrictStr] = Field(
        description="List of supported currency codes"
    )
    supported_markets: List[StrictStr] = Field(
        description="List of supported market types"
    )
    __properties: ClassVar[List[str]] = [
        "supported_resolutions",
        "supports_group_request",
        "supports_marks",
        "supports_search",
        "supports_timescale_marks",
        "supports_time",
        "exchanges",
        "symbols_types",
        "currency_codes",
        "supported_markets",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UDFConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in symbols_types (list)
        _items = []
        if self.symbols_types:
            for _item_symbols_types in self.symbols_types:
                if _item_symbols_types:
                    _items.append(_item_symbols_types.to_dict())
            _dict["symbols_types"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UDFConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "supported_resolutions": obj.get("supported_resolutions"),
                "supports_group_request": (
                    obj.get("supports_group_request")
                    if obj.get("supports_group_request") is not None
                    else False
                ),
                "supports_marks": (
                    obj.get("supports_marks")
                    if obj.get("supports_marks") is not None
                    else False
                ),
                "supports_search": (
                    obj.get("supports_search")
                    if obj.get("supports_search") is not None
                    else True
                ),
                "supports_timescale_marks": (
                    obj.get("supports_timescale_marks")
                    if obj.get("supports_timescale_marks") is not None
                    else False
                ),
                "supports_time": (
                    obj.get("supports_time")
                    if obj.get("supports_time") is not None
                    else True
                ),
                "exchanges": obj.get("exchanges"),
                "symbols_types": (
                    [SymbolType.from_dict(_item) for _item in obj["symbols_types"]]
                    if obj.get("symbols_types") is not None
                    else None
                ),
                "currency_codes": obj.get("currency_codes"),
                "supported_markets": obj.get("supported_markets"),
            }
        )
        return _obj
