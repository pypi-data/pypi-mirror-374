# coding: utf-8

"""
Klines Service API

API for retrieving OHLCV data, funding rates, and symbol information from Binance.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from crypticorn.klines.client.api_client import ApiClient, RequestSerialized
from crypticorn.klines.client.api_response import ApiResponse
from crypticorn.klines.client.models.funding_rate_response import FundingRateResponse
from crypticorn.klines.client.rest import RESTResponseType

# Import async_to_sync for sync methods
try:
    from asgiref.sync import async_to_sync

    _HAS_ASGIREF = True
except ImportError:
    _HAS_ASGIREF = False

    def async_to_sync(async_func):
        """Fallback decorator that raises an error if asgiref is not available."""

        def wrapper(*args, **kwargs):
            raise ImportError(
                "asgiref is required for sync methods. Install with: pip install asgiref"
            )

        return wrapper


class FundingRatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None, is_sync: bool = False) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client
        self.is_sync = is_sync

    @validate_call
    def get_funding_rates(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FundingRateResponse:
        """Funding Rate"""
        if self.is_sync:
            return self._get_funding_rates_sync(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_funding_rates_async(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_funding_rates_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FundingRateResponse]:
        """Funding Rate with HTTP info"""
        if self.is_sync:
            return self._get_funding_rates_sync_with_http_info(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_funding_rates_async_with_http_info(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    @validate_call
    def get_funding_rates_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Funding Rate without preloading content"""
        if self.is_sync:
            return self._get_funding_rates_sync_without_preload_content(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

        else:
            return self._get_funding_rates_async_without_preload_content(
                symbol=symbol,
                start=start,
                end=end,
                limit=limit,
                _request_timeout=_request_timeout,
                _request_auth=_request_auth,
                _content_type=_content_type,
                _headers=_headers,
                _host_index=_host_index,
            )

    # Private async implementation methods
    @validate_call
    async def _get_funding_rates_async(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FundingRateResponse:
        """Funding Rate

        Retrieve funding rate data for a specific symbol in the futures market.

        :param symbol: Trading pair symbol (e.g., BTCUSDT) (required)
        :type symbol: str
        :param start: Start timestamp in milliseconds
        :type start: int
        :param end: End timestamp in milliseconds
        :type end: int
        :param limit: Number of funding rates to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_funding_rates_serialize(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FundingRateResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def _get_funding_rates_async_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FundingRateResponse]:
        """Funding Rate

        Retrieve funding rate data for a specific symbol in the futures market.

        :param symbol: Trading pair symbol (e.g., BTCUSDT) (required)
        :type symbol: str
        :param start: Start timestamp in milliseconds
        :type start: int
        :param end: End timestamp in milliseconds
        :type end: int
        :param limit: Number of funding rates to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_funding_rates_serialize(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FundingRateResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data, response_types_map=_response_types_map
        )

    @validate_call
    async def _get_funding_rates_async_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Funding Rate

        Retrieve funding rate data for a specific symbol in the futures market.

        :param symbol: Trading pair symbol (e.g., BTCUSDT) (required)
        :type symbol: str
        :param start: Start timestamp in milliseconds
        :type start: int
        :param end: End timestamp in milliseconds
        :type end: int
        :param limit: Number of funding rates to return
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_funding_rates_serialize(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "FundingRateResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data

    # Private sync implementation methods
    @validate_call
    def _get_funding_rates_sync(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FundingRateResponse:
        """Synchronous version of get_funding_rates"""
        return async_to_sync(self._get_funding_rates_async)(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_funding_rates_sync_with_http_info(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FundingRateResponse]:
        """Synchronous version of get_funding_rates_with_http_info"""
        return async_to_sync(self._get_funding_rates_async_with_http_info)(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    @validate_call
    def _get_funding_rates_sync_without_preload_content(
        self,
        symbol: Annotated[
            StrictStr, Field(description="Trading pair symbol (e.g., BTCUSDT)")
        ],
        start: Annotated[
            Optional[StrictInt], Field(description="Start timestamp in milliseconds")
        ] = None,
        end: Annotated[
            Optional[StrictInt], Field(description="End timestamp in milliseconds")
        ] = None,
        limit: Annotated[
            Optional[Annotated[int, Field(strict=True, ge=1)]],
            Field(description="Number of funding rates to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Synchronous version of get_funding_rates_without_preload_content"""
        return async_to_sync(self._get_funding_rates_async_without_preload_content)(
            symbol=symbol,
            start=start,
            end=end,
            limit=limit,
            _request_timeout=_request_timeout,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

    def _get_funding_rates_serialize(
        self,
        symbol,
        start,
        end,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if symbol is not None:

            _query_params.append(("symbol", symbol))

        if start is not None:

            _query_params.append(("start", start))

        if end is not None:

            _query_params.append(("end", end))

        if limit is not None:

            _query_params.append(("limit", limit))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["APIKeyHeader", "HTTPBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/funding",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
