[project]
name = "rago"
version = "0.14.4"  # semantic-release
description = "RAG framework"
readme = "README.md"
authors = [
  { name = "Ivan Ogasawara", email = "ivan.ogasawara@gmail.com" },
]
license = { text = "MIT" }
requires-python = ">=3.9,<4"

# Minimal core deps
dependencies = [
  "typeguard >=4.0",
  "pydantic >=2",
  "joblib >=1.4.2",
  "pypdf >=5",
  "torch >=2",
  "langchain >=0.3.7",
  "langchain-community >=0.3.7",
  "instructor >=1",
  # OpenAI is also required by `instructor`, but keeping it explicit is fine
  "openai >=1.52.2",

  # NumPy: macOS stays on 1.x; others use 2.x (with your Python guards)
  "numpy >=1.26,<2 ; python_version <  '3.13' and sys_platform == 'darwin'",
  "numpy >=2       ; python_version >= '3.13' and sys_platform == 'darwin'",
  "numpy >=2,<2.1  ; python_version <  '3.10' and sys_platform != 'darwin'",
  "numpy >=2,<2.2  ; python_version == '3.10' and sys_platform != 'darwin'",
  "numpy >=2       ; python_version >= '3.11' and sys_platform != 'darwin'",

  # --- FAISS: macOS needs a more conservative pin; others can use newer ---
  "faiss-cpu >=1.8.0,<1.9 ; sys_platform == 'darwin' and python_version < '3.13'",
  "faiss-cpu >=1.9.0      ; sys_platform != 'darwin' or python_version >= '3.13'",

  # Helpful backports on older Pythons
  "typing-extensions >=4.8 ; python_version < '3.11'",
]

[project.optional-dependencies]
# Vector / ANN
chromadb = ["chromadb >=0.3.23"]

# LLM providers (opt-in)
google = ["google-generativeai >=0.8.3"]
cohere = ["cohere >=5.13.4"]
fireworks = ["fireworks-ai >=0.15.11,<1.0.0"]
together = ["together >=1.4.0"]
ollama = ["ollama >=0.4.8"]

# Common RAG stack without forcing torch install path
base = [
  "transformers >=4",
  "sentence-transformers >=3.2.0",
  "sentencepiece >=0.2.0",
  "langdetect >=1",
]

# Convenience bundle
all = [
  "google-generativeai >=0.8.3",
  "cohere >=5.13.4",
  "fireworks-ai >=0.15.11,<1.0.0",
  "together >=1.4.0",
  "ollama >=0.4.8",
  "spacy >=3.8.0",
  "chromadb >=0.3.23",
  # base
  "transformers >=4",
  "sentence-transformers >=3.2.0",
  "sentencepiece >=0.2.0",
  "langdetect >=1",
]

dev = [
  "pytest >=6",
  "pytest-cov >=6.2",
  "coverage >=7.10",
  "pre-commit >=4.3",
  "ruff >=0.12.0",
  "mypy >=1.17.0",
  "bandit >=1.8",
  "vulture >=2.14",
  "mccabe >=0.7",
  "ipython >=6",
  "ipykernel >=5",
  "python-dotenv >=1.1",
  "Jinja2 >=3.1.2",
  "makim==1.27.0",
  "mkdocs >=1.6",
  "mkdocs-exclude >=1.0.2",
  "mkdocs-jupyter >=0.25",
  "mkdocs-literate-nav >=0.6",
  "mkdocs-macros-plugin >=1.3",
  "mkdocs-material >=9.6",
  "mkdocstrings >=0.30",
  "mkdocstrings-python >=1.17",
  "mkdocs-gen-files >=0.5.0",
  "build>=1.3.0",
  "twine>=6.1.0",
]

[project.urls]
Homepage = "https://github.com/osl-incubator/rago"
Issues = "https://github.com/osl-incubator/rago/issues"

[build-system]
requires = ["setuptools>=70.1.0,<80.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
rago = ["py.typed"]

# ----- Tooling configs (kept from your setup, adjusted to Python 3.11) -----
[tool.pytest.ini_options]
testpaths = ["tests"]
markers = ["skip_on_ci: Skip these tests in CI"]

[tool.bandit]
exclude_dirs = ["tests"]
targets = "./"

[tool.vulture]
exclude = ["tests"]
ignore_decorators = []
ignore_names = []
make_whitelist = true
min_confidence = 80
paths = ["./"]
sort_by_size = true
verbose = false

[tool.ruff]
line-length = 79
force-exclude = true
src = ["./"]
exclude = ["docs"]
fix = true

[tool.ruff.lint]
ignore = ["F811","PLR0911","PLR0912","PLR0913","RUF012"]
select = ["E","F","D","YTT","RUF","I001"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.format]
quote-style = "single"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
strict = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = ["scripts/"]
