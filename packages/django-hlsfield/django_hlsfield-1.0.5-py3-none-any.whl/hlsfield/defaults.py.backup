"""
üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è django-hlsfield

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–∞.
–ó–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ Django settings —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º HLSFIELD_.

–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ settings.py:
    HLSFIELD_FFMPEG = "/usr/local/bin/ffmpeg"
    HLSFIELD_DEFAULT_LADDER = [
        {"height": 720, "v_bitrate": 2500, "a_bitrate": 128},
        {"height": 1080, "v_bitrate": 4500, "a_bitrate": 160},
    ]

–ê–≤—Ç–æ—Ä: django-hlsfield team
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import logging
import os
import uuid

logger = logging.getLogger(__name__)


# ==============================================================================
# –ë–ï–ó–û–ü–ê–°–ù–´–ô –î–û–°–¢–£–ü –ö DJANGO SETTINGS
# ==============================================================================

def _get_django_settings():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç Django settings"""
    from django.core.exceptions import ImproperlyConfigured
    try:
        import django
        if not hasattr(django, 'apps') or not django.apps.apps.ready:
            return None

        from django.conf import settings as django_settings

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not hasattr(django_settings, 'configured') or not django_settings.configured:
            return None

        # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        getattr(django_settings, 'DEBUG', False)
        return django_settings
    except (ImportError, ImproperlyConfigured, AttributeError):
        # Django –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        return None
    except Exception:
        # –î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        return None


def _get_setting(name: str, default):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Django settings –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default.

    Args:
        name: –ò–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º HLSFIELD_
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ default
    """
    settings = _get_django_settings()

    if settings is None:
        return default

    try:
        return getattr(settings, name, default)
    except Exception:
        logger.debug(f"Could not get setting {name}, using default")
        return default


# ==============================================================================
# –ü–£–¢–ò –ö –ë–ò–ù–ê–†–ù–´–ú –§–ê–ô–õ–ê–ú FFMPEG
# ==============================================================================

# –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É ffmpeg
FFMPEG = _get_setting("HLSFIELD_FFMPEG", "ffmpeg")

# –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É ffprobe
FFPROBE = _get_setting("HLSFIELD_FFPROBE", "ffprobe")

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π ffmpeg –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
FFMPEG_TIMEOUT = int(_get_setting("HLSFIELD_FFMPEG_TIMEOUT", 300))  # 5 –º–∏–Ω—É—Ç

# ==============================================================================
# –õ–ï–°–¢–ù–ò–¶–´ –ö–ê–ß–ï–°–¢–í –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
# ==============================================================================

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—á–µ—Å—Ç–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è)
DEFAULT_LADDER = _get_setting("HLSFIELD_DEFAULT_LADDER", [
    {"height": 240, "v_bitrate": 300, "a_bitrate": 64},  # –ú–æ–±–∏–ª—å–Ω—ã–π 3G
    {"height": 360, "v_bitrate": 800, "a_bitrate": 96},  # –ú–æ–±–∏–ª—å–Ω—ã–π 4G/WiFi
    {"height": 480, "v_bitrate": 1200, "a_bitrate": 96},  # SD –∫–∞—á–µ—Å—Ç–≤–æ
    {"height": 720, "v_bitrate": 2500, "a_bitrate": 128},  # HD –∫–∞—á–µ—Å—Ç–≤–æ
    {"height": 1080, "v_bitrate": 4500, "a_bitrate": 160},  # Full HD
])

# –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
MOBILE_LADDER = _get_setting("HLSFIELD_MOBILE_LADDER", [
    {"height": 240, "v_bitrate": 300, "a_bitrate": 64},
    {"height": 360, "v_bitrate": 600, "a_bitrate": 96},
    {"height": 480, "v_bitrate": 900, "a_bitrate": 96},
])

# Premium –ª–µ—Å—Ç–Ω–∏—Ü–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ –±–∏—Ç—Ä–µ–π—Ç–∞–º–∏
PREMIUM_LADDER = _get_setting("HLSFIELD_PREMIUM_LADDER", [
    {"height": 480, "v_bitrate": 1500, "a_bitrate": 128},
    {"height": 720, "v_bitrate": 3000, "a_bitrate": 128},
    {"height": 1080, "v_bitrate": 6000, "a_bitrate": 160},
    {"height": 1440, "v_bitrate": 12000, "a_bitrate": 192},  # 2K
    {"height": 2160, "v_bitrate": 25000, "a_bitrate": 256},  # 4K
])

# ==============================================================================
# –ü–ê–†–ê–ú–ï–¢–†–´ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò
# ==============================================================================

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ HLS –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SEGMENT_DURATION = int(_get_setting("HLSFIELD_SEGMENT_DURATION", 6))

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ DASH –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ —á–µ–º HLS)
DASH_SEGMENT_DURATION = int(_get_setting("HLSFIELD_DASH_SEGMENT_DURATION", 4))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ (–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞)
MAX_SEGMENTS_IN_PLAYLIST = int(_get_setting("HLSFIELD_MAX_SEGMENTS", 1000))

# ==============================================================================
# –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í
# ==============================================================================

# Layout –¥–ª—è sidecar —Ñ–∞–π–ª–æ–≤: "nested" –∏–ª–∏ "flat"
# nested: videos/abc123/hls/master.m3u8, videos/abc123/preview.jpg
# flat: videos/abc123.mp4, videos/abc123_hls_master.m3u8, videos/abc123_preview.jpg
SIDECAR_LAYOUT = _get_setting("HLSFIELD_SIDECAR_LAYOUT", "nested")

# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è nested layout
PREVIEW_FILENAME = _get_setting("HLSFIELD_PREVIEW_FILENAME", "preview.jpg")
META_FILENAME = _get_setting("HLSFIELD_META_FILENAME", "meta.json")

# –ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
HLS_SUBDIR = _get_setting("HLSFIELD_HLS_SUBDIR", "hls")
DASH_SUBDIR = _get_setting("HLSFIELD_DASH_SUBDIR", "dash")
ADAPTIVE_SUBDIR = _get_setting("HLSFIELD_ADAPTIVE_SUBDIR", "adaptive")

# ==============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô UPLOAD_TO
# ==============================================================================

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upload_to –¥–ª—è –ø–æ–ª–µ–π –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è
USE_DEFAULT_UPLOAD_TO = bool(_get_setting("HLSFIELD_USE_DEFAULT_UPLOAD_TO", True))

# Dotted path –∫ —Ñ—É–Ω–∫—Ü–∏–∏ upload_to (–Ω–∞–ø—Ä–∏–º–µ—Ä: "myapp.utils.video_upload_to")
DEFAULT_UPLOAD_TO_PATH = _get_setting("HLSFIELD_DEFAULT_UPLOAD_TO", None)


def default_upload_to(instance, filename: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è upload_to –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/{uuid8}/{filename}

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
        filename: –ò–º—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞

    Returns:
        str: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]  # 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π UUID
    return f"videos/{folder}/{stem}{ext}"


def date_based_upload_to(instance, filename: str) -> str:
    """
    Upload_to –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/2025/01/15/{uuid4}/{filename}
    """
    from datetime import datetime

    now = datetime.now()
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex

    return f"videos/{now.year:04d}/{now.month:02d}/{now.day:02d}/{folder}/{stem}{ext}"


def user_based_upload_to(instance, filename: str) -> str:
    """
    Upload_to –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/users/{user_id}/{uuid8}/{filename}
    """
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "anonymous"
    if hasattr(instance, 'user') and hasattr(instance.user, 'id'):
        user_id = str(instance.user.id)
    elif hasattr(instance, 'owner') and hasattr(instance.owner, 'id'):
        user_id = str(instance.owner.id)

    return f"videos/users/{user_id}/{folder}/{stem}{ext}"


# ==============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò
# ==============================================================================

# –í—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∫–∞–¥—Ä–∞
DEFAULT_PREVIEW_AT = float(_get_setting("HLSFIELD_DEFAULT_PREVIEW_AT", 3.0))

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
PROCESS_ON_SAVE = bool(_get_setting("HLSFIELD_PROCESS_ON_SAVE", True))

# –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –ø—Ä–µ–≤—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
CREATE_PREVIEW = bool(_get_setting("HLSFIELD_CREATE_PREVIEW", True))

# –ò–∑–≤–ª–µ–∫–∞—Ç—å –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
EXTRACT_METADATA = bool(_get_setting("HLSFIELD_EXTRACT_METADATA", True))

# ==============================================================================
# –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
# ==============================================================================

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
MAX_FILE_SIZE = int(_get_setting("HLSFIELD_MAX_FILE_SIZE", 2 * 1024 ** 3))  # 2GB

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
MIN_FILE_SIZE = int(_get_setting("HLSFIELD_MIN_FILE_SIZE", 1000))  # 1KB

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ MIME —Ç–∏–ø—ã
ALLOWED_MIME_TYPES = _get_setting("HLSFIELD_ALLOWED_MIME_TYPES", [
    'video/mp4',
    'video/avi',
    'video/mov',
    'video/wmv',
    'video/flv',
    'video/webm',
    'video/quicktime',
    'video/x-msvideo',
    'video/x-ms-wmv',
])

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = _get_setting("HLSFIELD_ALLOWED_EXTENSIONS", [
    '.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm', '.mkv',
    '.m4v', '.3gp', '.ogv', '.asf'
])

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ (–≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö)
MAX_VIDEO_HEIGHT = int(_get_setting("HLSFIELD_MAX_VIDEO_HEIGHT", 8192))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
MIN_VIDEO_HEIGHT = int(_get_setting("HLSFIELD_MIN_VIDEO_HEIGHT", 144))

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_VIDEO_DURATION = int(_get_setting("HLSFIELD_MAX_VIDEO_DURATION", 7200))  # 2 —á–∞—Å–∞

# ==============================================================================
# CELERY –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================================================================

# –ò–º—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
CELERY_QUEUE = _get_setting("HLSFIELD_CELERY_QUEUE", "default")

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (0-9, –≥–¥–µ 9 = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
CELERY_PRIORITY = int(_get_setting("HLSFIELD_CELERY_PRIORITY", 5))

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–¥–∞—á Celery –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CELERY_TASK_TIMEOUT = int(_get_setting("HLSFIELD_CELERY_TASK_TIMEOUT", 3600))  # 1 —á–∞—Å

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
CELERY_TASK_RETRY = int(_get_setting("HLSFIELD_CELERY_TASK_RETRY", 3))

# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CELERY_RETRY_DELAY = int(_get_setting("HLSFIELD_CELERY_RETRY_DELAY", 60))

# ==============================================================================
# –ö–û–î–ò–†–û–í–ê–ù–ò–ï –ò –ö–ê–ß–ï–°–¢–í–û
# ==============================================================================

# –ü—Ä–µ—Å–µ—Ç FFmpeg –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫–æ—Ä–æ—Å—Ç—å vs –∫–∞—á–µ—Å—Ç–≤–æ)
# ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow
FFMPEG_PRESET = _get_setting("HLSFIELD_FFMPEG_PRESET", "veryfast")

# –ü—Ä–æ—Ñ–∏–ª—å H.264 (baseline, main, high)
H264_PROFILE = _get_setting("HLSFIELD_H264_PROFILE", "main")

# –£—Ä–æ–≤–µ–Ω—å H.264 (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏)
H264_LEVEL = _get_setting("HLSFIELD_H264_LEVEL", "4.1")

# Pixel format (yuv420p –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
PIXEL_FORMAT = _get_setting("HLSFIELD_PIXEL_FORMAT", "yuv420p")

# –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
AUDIO_CODEC = _get_setting("HLSFIELD_AUDIO_CODEC", "aac")

# –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
AUDIO_SAMPLE_RATE = int(_get_setting("HLSFIELD_AUDIO_SAMPLE_RATE", 48000))

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –∫–∞–Ω–∞–ª–æ–≤
AUDIO_CHANNELS = int(_get_setting("HLSFIELD_AUDIO_CHANNELS", 2))

# ==============================================================================
# –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ==============================================================================

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π FFmpeg
VERBOSE_LOGGING = bool(_get_setting("HLSFIELD_VERBOSE_LOGGING", False))

# –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ FFmpeg –ª–æ–≥–∏ –Ω–∞ –¥–∏—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
SAVE_FFMPEG_LOGS = bool(_get_setting("HLSFIELD_SAVE_FFMPEG_LOGS", False))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ FFmpeg
FFMPEG_LOG_DIR = _get_setting("HLSFIELD_FFMPEG_LOG_DIR", "/tmp/hlsfield_logs")

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ENABLE_PERFORMANCE_METRICS = bool(_get_setting("HLSFIELD_ENABLE_PERFORMANCE_METRICS", False))

# –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞
SAVE_TRANSCODING_STATS = bool(_get_setting("HLSFIELD_SAVE_TRANSCODING_STATS", False))

# ==============================================================================
# STORAGE –ò CDN
# ==============================================================================

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ CDN –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
USE_CDN = bool(_get_setting("HLSFIELD_USE_CDN", False))

# –ë–∞–∑–æ–≤—ã–π URL CDN (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
CDN_BASE_URL = _get_setting("HLSFIELD_CDN_BASE_URL", "")

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
PLAYLIST_CACHE_TTL = int(_get_setting("HLSFIELD_PLAYLIST_CACHE_TTL", 300))  # 5 –º–∏–Ω—É—Ç

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SEGMENT_CACHE_TTL = int(_get_setting("HLSFIELD_SEGMENT_CACHE_TTL", 86400))  # 24 —á–∞—Å–∞

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∂–∞—Ç–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
COMPRESS_PLAYLISTS = bool(_get_setting("HLSFIELD_COMPRESS_PLAYLISTS", True))

# ==============================================================================
# –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
ENABLE_EXPERIMENTAL = bool(_get_setting("HLSFIELD_ENABLE_EXPERIMENTAL", False))

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ (NVENC, VAAPI)
ENABLE_GPU_ACCELERATION = bool(_get_setting("HLSFIELD_ENABLE_GPU_ACCELERATION", False))

# –¢–∏–ø GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è: 'nvenc', 'vaapi', 'videotoolbox'
GPU_ACCELERATION_TYPE = _get_setting("HLSFIELD_GPU_ACCELERATION_TYPE", "nvenc")

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ AV1 –∫–æ–¥–µ–∫ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
ENABLE_AV1_CODEC = bool(_get_setting("HLSFIELD_ENABLE_AV1_CODEC", False))

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ HEVC (H.265) –∫–æ–¥–µ–∫
ENABLE_HEVC_CODEC = bool(_get_setting("HLSFIELD_ENABLE_HEVC_CODEC", False))

# –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ WebVTT —Å—É–±—Ç–∏—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
AUTO_GENERATE_SUBTITLES = bool(_get_setting("HLSFIELD_AUTO_GENERATE_SUBTITLES", False))

# ==============================================================================
# –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# ==============================================================================

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞
MAX_CONCURRENT_TRANSCODING = int(_get_setting("HLSFIELD_MAX_CONCURRENT_TRANSCODING", 2))

# –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π IO –≤ –±–∞–π—Ç–∞—Ö
IO_BUFFER_SIZE = int(_get_setting("HLSFIELD_IO_BUFFER_SIZE", 1024 * 1024))  # 1MB

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å FFmpeg
ENABLE_FFMPEG_THREADING = bool(_get_setting("HLSFIELD_ENABLE_FFMPEG_THREADING", True))

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è FFmpeg (0 = –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
FFMPEG_THREADS = int(_get_setting("HLSFIELD_FFMPEG_THREADS", 0))

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
DEVICE_SPECIFIC_OPTIMIZATION = bool(_get_setting("HLSFIELD_DEVICE_SPECIFIC_OPTIMIZATION", False))

# ==============================================================================
# DEVELOPMENT –ò DEBUG
# ==============================================================================

# –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
KEEP_TEMP_FILES = bool(_get_setting("HLSFIELD_KEEP_TEMP_FILES", False))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (None = system temp)
TEMP_DIR = _get_setting("HLSFIELD_TEMP_DIR", None)

# –í–∫–ª—é—á–∞—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ debug —Ä–µ–∂–∏–º–µ
DEBUG_VALIDATION = bool(_get_setting("HLSFIELD_DEBUG_VALIDATION", False))

# –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SIMULATE_SLOW_NETWORK = bool(_get_setting("HLSFIELD_SIMULATE_SLOW_NETWORK", False))

# ==============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
# ==============================================================================

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏
SUPPORTED_VIDEO_CODECS = [
    'h264', 'libx264', 'h265', 'libx265', 'hevc', 'vp8', 'vp9', 'av1'
]

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∏
SUPPORTED_AUDIO_CODECS = [
    'aac', 'mp3', 'opus', 'vorbis'
]

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
SUPPORTED_CONTAINERS = [
    'mp4', 'mov', 'avi', 'mkv', 'webm', 'flv', '3gp'
]

# –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
FILE_SIGNATURES = {
    b'\x00\x00\x00\x14ftypqt': 'video/quicktime',
    b'\x00\x00\x00\x18ftypisom': 'video/mp4',
    b'\x00\x00\x00\x1cftypisom': 'video/mp4',
    b'\x00\x00\x00\x20ftypisom': 'video/mp4',
    b'RIFF': 'video/avi',
    b'FLV\x01': 'video/x-flv',
}


# ==============================================================================
# RUNTIME –ò–ù–§–û–†–ú–ê–¶–ò–Ø
# ==============================================================================

def get_runtime_info() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ runtime –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    import shutil
    import sys

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
    ffmpeg_available = shutil.which(FFMPEG) is not None
    ffprobe_available = shutil.which(FFPROBE) is not None

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    try:
        import psutil
        cpu_count = psutil.cpu_count()
        memory_total = psutil.virtual_memory().total
        disk_free = psutil.disk_usage('/').free
    except ImportError:
        cpu_count = os.cpu_count()
        memory_total = None
        disk_free = None

    # Django –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    django_settings = _get_django_settings()
    django_configured = django_settings is not None

    return {
        'ffmpeg': {
            'ffmpeg_path': FFMPEG,
            'ffprobe_path': FFPROBE,
            'ffmpeg_available': ffmpeg_available,
            'ffprobe_available': ffprobe_available,
            'timeout': FFMPEG_TIMEOUT,
        },
        'processing': {
            'default_ladder_count': len(DEFAULT_LADDER),
            'segment_duration': SEGMENT_DURATION,
            'max_file_size_mb': MAX_FILE_SIZE // (1024 * 1024),
            'process_on_save': PROCESS_ON_SAVE,
        },
        'system': {
            'cpu_count': cpu_count,
            'memory_total_gb': memory_total // (1024 ** 3) if memory_total else None,
            'disk_free_gb': disk_free // (1024 ** 3) if disk_free else None,
            'python_version': sys.version,
        },
        'django': {
            'configured': django_configured,
            'settings_module': os.environ.get('DJANGO_SETTINGS_MODULE'),
        },
        'features': {
            'use_cdn': USE_CDN,
            'gpu_acceleration': ENABLE_GPU_ACCELERATION,
            'experimental': ENABLE_EXPERIMENTAL,
            'verbose_logging': VERBOSE_LOGGING,
        }
    }


def validate_settings() -> list[str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º.

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    """
    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
    import shutil
    if not shutil.which(FFMPEG):
        issues.append(f"FFmpeg not found at '{FFMPEG}'. Install FFmpeg or set HLSFIELD_FFMPEG path.")

    if not shutil.which(FFPROBE):
        issues.append(f"FFprobe not found at '{FFPROBE}'. Install FFmpeg or set HLSFIELD_FFPROBE path.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ—Å—Ç–Ω–∏—Ü—É –∫–∞—á–µ—Å—Ç–≤
    try:
        from .fields import validate_ladder
        validate_ladder(DEFAULT_LADDER)
    except Exception as e:
        issues.append(f"Invalid DEFAULT_LADDER: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if TEMP_DIR and not os.path.isdir(TEMP_DIR):
        issues.append(f"TEMP_DIR '{TEMP_DIR}' does not exist")

    if SAVE_FFMPEG_LOGS and not os.path.isdir(os.path.dirname(FFMPEG_LOG_DIR)):
        issues.append(f"FFmpeg log directory parent does not exist: {FFMPEG_LOG_DIR}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if MAX_FILE_SIZE <= 0:
        issues.append("MAX_FILE_SIZE must be positive")

    if SEGMENT_DURATION <= 0 or SEGMENT_DURATION > 60:
        issues.append("SEGMENT_DURATION must be between 1 and 60 seconds")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º upload_to —Ñ—É–Ω–∫—Ü–∏—é
    if DEFAULT_UPLOAD_TO_PATH:
        try:
            from importlib import import_module
            module_path, func_name = DEFAULT_UPLOAD_TO_PATH.rsplit(".", 1)
            module = import_module(module_path)
            func = getattr(module, func_name)
            if not callable(func):
                issues.append(f"DEFAULT_UPLOAD_TO_PATH '{DEFAULT_UPLOAD_TO_PATH}' is not callable")
        except Exception as e:
            issues.append(f"Cannot import DEFAULT_UPLOAD_TO_PATH '{DEFAULT_UPLOAD_TO_PATH}': {e}")

    return issues


# ==============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ==============================================================================

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è hlsfield"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger('hlsfield')

    if VERBOSE_LOGGING:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    # –î–æ–±–∞–≤–ª—è–µ–º handler –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if _get_django_settings():
    setup_logging()
