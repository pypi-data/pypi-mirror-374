"""
üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FFmpeg –∏ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –ó–∞–ø—É—Å–∫–∞ FFmpeg –∫–æ–º–∞–Ω–¥
- –ê–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ FFprobe
- –°–æ–∑–¥–∞–Ω–∏—è HLS –∏ DASH —Å—Ç—Ä–∏–º–æ–≤
- –ò–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∫–∞–¥—Ä–æ–≤
- –†–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ storage

–ê–≤—Ç–æ—Ä: akula993
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import json
import logging
import os
import shutil
import subprocess
import tempfile
import time
from contextlib import contextmanager
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from . import defaults
from .exceptions import (
    FFmpegError,
    FFmpegNotFoundError,
    InvalidVideoError,
    StorageError,
    TimeoutError,
    TranscodingError,
    ConfigurationError
)

logger = logging.getLogger(__name__)


# ==============================================================================
# –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================

@contextmanager
def tempdir(prefix: str = "hlsfield_"):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.

    Args:
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Yields:
        Path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    """
    temp_base = defaults.TEMP_DIR or tempfile.gettempdir()
    temp_path = Path(tempfile.mkdtemp(prefix=prefix, dir=temp_base))

    try:
        logger.debug(f"Created temporary directory: {temp_path}")
        yield temp_path
    finally:
        try:
            if not defaults.KEEP_TEMP_FILES:
                shutil.rmtree(temp_path, ignore_errors=True)
                logger.debug(f"Cleaned up temporary directory: {temp_path}")
            else:
                logger.debug(f"Keeping temporary directory for debug: {temp_path}")
        except Exception as e:
            logger.warning(f"Could not clean up temporary directory {temp_path}: {e}")


def ensure_binary_available(binary_name: str, path: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    Args:
        binary_name: –ò–º—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—à–∏–±–æ–∫
        path: –ü—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—É

    Returns:
        str: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Raises:
        FFmpegNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    if os.path.isabs(path) and os.path.isfile(path) and os.access(path, os.X_OK):
        return path

    # –ò—â–µ–º –≤ PATH
    full_path = shutil.which(path)
    if full_path:
        return full_path

    raise FFmpegNotFoundError(f"{binary_name} not found: {path}")


def get_file_info(file_path: Union[str, Path]) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    """
    path = Path(file_path)

    if not path.exists():
        raise InvalidVideoError(f"File does not exist: {path}")

    stat = path.stat()

    return {
        'size': stat.st_size,
        'mtime': stat.st_mtime,
        'extension': path.suffix.lower(),
        'name': path.name,
        'stem': path.stem,
    }


# ==============================================================================
# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î FFMPEG
# ==============================================================================

def run(cmd: List[str], timeout_sec: Optional[int] = None, log_output: bool = False) -> subprocess.CompletedProcess:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏.

    Args:
        cmd: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        timeout_sec: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (None = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default)
        log_output: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ stdout/stderr

    Returns:
        CompletedProcess: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

    Raises:
        FFmpegNotFoundError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        FFmpegError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
        TimeoutError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç
    """
    if not cmd:
        raise ValueError("Command cannot be empty")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    binary_path = ensure_binary_available(cmd[0], cmd[0])
    cmd[0] = binary_path

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º default —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if timeout_sec is None:
        timeout_sec = defaults.FFMPEG_TIMEOUT

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd_str = ' '.join(cmd)
    logger.debug(f"Executing command: {cmd_str}")

    if defaults.SAVE_FFMPEG_LOGS:
        _save_command_to_log(cmd_str)

    start_time = time.time()

    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=timeout_sec,
            check=False  # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        )

        elapsed = time.time() - start_time
        logger.debug(f"Command completed in {elapsed:.2f}s with code {result.returncode}")

        # –õ–æ–≥–∏—Ä—É–µ–º output –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if log_output or defaults.VERBOSE_LOGGING:
            if result.stdout:
                logger.debug(f"STDOUT: {result.stdout}")
            if result.stderr:
                logger.debug(f"STDERR: {result.stderr}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if result.returncode != 0:
            _handle_ffmpeg_error(cmd, result.returncode, result.stdout, result.stderr)

        return result

    except subprocess.TimeoutExpired as e:
        logger.error(f"Command timed out after {timeout_sec}s: {cmd_str}")
        raise TimeoutError(f"Command timed out after {timeout_sec} seconds") from e

    except FileNotFoundError as e:
        raise FFmpegNotFoundError(cmd[0]) from e

    except Exception as e:
        logger.error(f"Unexpected error running command {cmd_str}: {e}")
        raise FFmpegError(cmd, -1, "", str(e)) from e


def _handle_ffmpeg_error(cmd: List[str], returncode: int, stdout: str, stderr: str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ FFmpeg –∏ –±—Ä–æ—Å–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"""

    error_message = stderr.lower()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    if "no such file or directory" in error_message:
        raise InvalidVideoError("Input file not found or inaccessible")

    if "invalid data found" in error_message or "moov atom not found" in error_message:
        raise InvalidVideoError("File is corrupted or not a valid video")

    if "permission denied" in error_message:
        raise StorageError("Permission denied accessing file")

    if "no space left" in error_message or "disk full" in error_message:
        raise StorageError("Insufficient disk space")

    if "unknown encoder" in error_message or "encoder not found" in error_message:
        raise ConfigurationError("Required encoder not available in FFmpeg")

    if "protocol not found" in error_message:
        raise ConfigurationError("Network protocol not supported")

    if "memory" in error_message and "allocate" in error_message:
        raise TranscodingError("Out of memory during transcoding")

    # –û–±—â–∞—è –æ—à–∏–±–∫–∞ FFmpeg
    raise FFmpegError(cmd, returncode, stdout, stderr)


def _save_command_to_log(cmd_str: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""

    try:
        log_dir = Path(defaults.FFMPEG_LOG_DIR)
        log_dir.mkdir(parents=True, exist_ok=True)

        log_file = log_dir / f"ffmpeg_{int(time.time())}.log"

        with log_file.open('w') as f:
            f.write(f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Command: {cmd_str}\n\n")

    except Exception as e:
        logger.warning(f"Could not save FFmpeg command to log: {e}")


# ==============================================================================
# –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û–§–ê–ô–õ–û–í –ß–ï–†–ï–ó FFPROBE
# ==============================================================================

def ffprobe_streams(input_path: Union[str, Path]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–∞—Ö.

    Args:
        input_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–∞—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–µ

    Raises:
        InvalidVideoError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        FFmpegNotFoundError: –ï—Å–ª–∏ ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    cmd = [
        defaults.FFPROBE,
        "-v", "error",
        "-print_format", "json",
        "-show_format",
        "-show_streams",
        str(input_path)
    ]

    try:
        result = run(cmd, timeout_sec=30)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        try:
            data = json.loads(result.stdout)
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse ffprobe output: {result.stdout}")
            raise InvalidVideoError("FFprobe returned invalid JSON") from e

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'streams' not in data:
            raise InvalidVideoError("No streams found in video file")

        return data

    except FFmpegError as e:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É ffprobe –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
        if "Invalid data found" in str(e):
            raise InvalidVideoError("File is not a valid video or is corrupted") from e
        elif "No such file" in str(e):
            raise InvalidVideoError(f"Video file not found: {input_path}") from e
        else:
            raise InvalidVideoError(f"Cannot analyze video file: {e}") from e


def pick_video_audio_streams(info: Dict[str, Any]) -> tuple[Optional[Dict], Optional[Dict]]:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ffprobe.

    Args:
        info: –†–µ–∑—É–ª—å—Ç–∞—Ç ffprobe_streams()

    Returns:
        tuple: (video_stream, audio_stream) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    video_stream = None
    audio_stream = None

    streams = info.get("streams", [])

    # –ò—â–µ–º –ø–æ—Ç–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for stream in streams:
        codec_type = stream.get("codec_type")

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        if codec_type == "video" and video_stream is None:
            video_stream = stream

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        if codec_type == "audio" and audio_stream is None:
            audio_stream = stream

    return video_stream, audio_stream


def analyze_video_complexity(input_path: Union[str, Path]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        input_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É

    Returns:
        dict: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
    """
    try:
        info = ffprobe_streams(input_path)
        video_stream, audio_stream = pick_video_audio_streams(info)

        analysis = {
            'has_video': video_stream is not None,
            'has_audio': audio_stream is not None,
            'complexity': 'medium',  # default
            'recommended_preset': 'veryfast',
            'estimated_transcode_time': 1.0,  # –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }

        if video_stream:
            width = int(video_stream.get('width', 0))
            height = int(video_stream.get('height', 0))

            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
            pixels = width * height

            if pixels > 1920 * 1080:  # > FullHD
                analysis['complexity'] = 'high'
                analysis['recommended_preset'] = 'fast'
                analysis['estimated_transcode_time'] = 2.0
            elif pixels < 640 * 480:  # < VGA
                analysis['complexity'] = 'low'
                analysis['recommended_preset'] = 'medium'
                analysis['estimated_transcode_time'] = 0.5

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏—Ç—Ä–µ–π—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if 'bit_rate' in video_stream:
                bitrate = int(video_stream['bit_rate'])
                if bitrate > 10_000_000:  # > 10 Mbps
                    analysis['complexity'] = 'high'
                    analysis['estimated_transcode_time'] *= 1.5

        # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if format_info := info.get('format'):
            try:
                duration = float(format_info.get('duration', 0))
                analysis['duration'] = duration

                # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                if duration > 3600:  # > 1 —á–∞—Å
                    analysis['estimated_transcode_time'] *= 1.2

            except (ValueError, TypeError):
                pass

        return analysis

    except Exception as e:
        logger.warning(f"Could not analyze video complexity: {e}")
        return {
            'has_video': True,
            'has_audio': True,
            'complexity': 'medium',
            'recommended_preset': 'veryfast',
            'estimated_transcode_time': 1.0,
        }


# ==============================================================================
# –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–†–ï–í–¨–Æ –ö–ê–î–†–û–í
# ==============================================================================

def extract_preview(input_path: Path, out_image: Path, at_sec: float = 3.0,
                    width: Optional[int] = None, height: Optional[int] = None) -> Path:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ —Å retry –ª–æ–≥–∏–∫–æ–π.

    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
        out_image: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
        at_sec: –í—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        width: –®–∏—Ä–∏–Ω–∞ –ø—Ä–µ–≤—å—é (None = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è)
        height: –í—ã—Å–æ—Ç–∞ –ø—Ä–µ–≤—å—é (None = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è)

    Returns:
        Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–≤—å—é

    Raises:
        TranscodingError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é
    """
    max_attempts = 3
    attempt_times = [at_sec, 1.0, 0.0]  # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è

    for attempt in range(max_attempts):
        try:
            seek_time = attempt_times[attempt] if attempt < len(attempt_times) else attempt

            cmd = [
                defaults.FFMPEG, "-y",
                "-ss", str(seek_time),
                "-i", str(input_path),
                "-frames:v", "1",
                "-q:v", "2",  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ JPEG
                "-f", "image2"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if width or height:
                if width and height:
                    scale = f"scale={width}:{height}"
                elif width:
                    scale = f"scale={width}:-1"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                else:
                    scale = f"scale=-1:{height}"

                cmd.extend(["-vf", scale])

            cmd.append(str(out_image))

            run(cmd, timeout_sec=60)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if out_image.exists() and out_image.stat().st_size > 100:
                logger.debug(f"Preview extracted at {seek_time}s on attempt {attempt + 1}")
                return out_image
            else:
                logger.warning(f"Preview file too small on attempt {attempt + 1}")

        except Exception as e:
            logger.warning(f"Preview extraction attempt {attempt + 1} failed: {e}")

            # –û—á–∏—â–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ñ–∞–π–ª
            if out_image.exists():
                try:
                    out_image.unlink()
                except:
                    pass

    raise TranscodingError(f"Failed to extract preview after {max_attempts} attempts")


def create_preview_sprites(input_path: Path, out_dir: Path,
                           interval: int = 10, sprite_cols: int = 10) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–π—Ç –ø—Ä–µ–≤—å—é –¥–ª—è timeline navigation.

    Args:
        input_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
        out_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        sprite_cols: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–ø—Ä–∞–π—Ç–µ

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–∞—Ö
    """
    out_dir.mkdir(parents=True, exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    info = ffprobe_streams(input_path)
    duration = 0

    if format_info := info.get('format'):
        try:
            duration = float(format_info.get('duration', 0))
        except (ValueError, TypeError):
            pass

    if duration <= 0:
        raise TranscodingError("Cannot determine video duration for sprites")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø—Ä–∞–π—Ç–æ–≤
    total_thumbs = int(duration // interval)
    sprite_rows = (total_thumbs + sprite_cols - 1) // sprite_cols

    sprites_info = {
        'interval': interval,
        'total_thumbs': total_thumbs,
        'sprite_cols': sprite_cols,
        'sprite_rows': sprite_rows,
        'sprites': []
    }

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã
    thumbs_dir = out_dir / "thumbs"
    thumbs_dir.mkdir(exist_ok=True)

    cmd = [
        defaults.FFMPEG, "-y",
        "-i", str(input_path),
        "-vf", f"fps=1/{interval},scale=160:90",  # –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–µ–≤—å—é
        "-q:v", "5",
        str(thumbs_dir / "thumb_%04d.jpg")
    ]

    run(cmd, timeout_sec=int(duration * 0.1) + 60)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å–ø—Ä–∞–π—Ç—ã
    thumb_files = sorted(thumbs_dir.glob("thumb_*.jpg"))

    for sprite_idx in range(sprite_rows):
        start_idx = sprite_idx * sprite_cols
        end_idx = min(start_idx + sprite_cols, len(thumb_files))

        if start_idx >= len(thumb_files):
            break

        sprite_thumbs = thumb_files[start_idx:end_idx]
        sprite_file = out_dir / f"sprite_{sprite_idx:04d}.jpg"

        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–π—Ç
        _create_sprite_from_thumbs(sprite_thumbs, sprite_file, sprite_cols, 1)

        sprites_info['sprites'].append({
            'file': sprite_file.name,
            'start_time': start_idx * interval,
            'end_time': (end_idx - 1) * interval,
            'thumbs_count': len(sprite_thumbs)
        })

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    shutil.rmtree(thumbs_dir, ignore_errors=True)

    return sprites_info


def _create_sprite_from_thumbs(thumb_files: List[Path], output: Path,
                               cols: int, rows: int):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø—Ä–∞–π—Ç –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    if not thumb_files:
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageMagick –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ FFmpeg
    if shutil.which('montage'):
        cmd = [
            'montage',
            *[str(f) for f in thumb_files],
            '-tile', f'{cols}x{rows}',
            '-geometry', '+0+0',
            str(output)
        ]
    else:
        # Fallback –Ω–∞ FFmpeg (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)
        inputs = []
        for f in thumb_files:
            inputs.extend(['-i', str(f)])

        filter_complex = f"hstack=inputs={len(thumb_files)}"

        cmd = [
            defaults.FFMPEG, "-y",
            *inputs,
            '-filter_complex', filter_complex,
            str(output)
        ]

    run(cmd, timeout_sec=60)


# ==============================================================================
# HLS –¢–†–ê–ù–°–ö–û–î–ò–ù–ì
# ==============================================================================

def transcode_hls_variants(input_path: Path, out_dir: Path,
                           ladder: List[Dict], segment_duration: int = 6) -> Path:
    """
    –°–æ–∑–¥–∞–µ—Ç HLS –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏.

    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
        out_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HLS —Ñ–∞–π–ª–æ–≤
        ladder: –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—á–µ—Å—Ç–≤
        segment_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        Path: –ü—É—Ç—å –∫ master.m3u8 –ø–ª–µ–π–ª–∏—Å—Ç—É

    Raises:
        TranscodingError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞
    """
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from .fields import validate_ladder
        validate_ladder(ladder)

        if not (2 <= segment_duration <= 60):
            raise ConfigurationError(f"Invalid segment duration: {segment_duration}")

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        out_dir.mkdir(parents=True, exist_ok=True)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        logger.info(f"Analyzing input video: {input_path}")
        info = ffprobe_streams(input_path)
        video_stream, audio_stream = pick_video_audio_streams(info)

        if not video_stream:
            raise InvalidVideoError("No video stream found in input file")

        has_audio = audio_stream is not None
        source_height = int(video_stream.get('height', 0))
        source_width = int(video_stream.get('width', 0))

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–µ—Å—Ç–Ω–∏—Ü—É - —É–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        filtered_ladder = _filter_ladder_by_source(ladder, source_height)

        logger.info(f"Transcoding {len(filtered_ladder)} HLS variants for {source_width}x{source_height} video")

        # –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        variant_infos = []
        failed_variants = []

        for rung in filtered_ladder:
            try:
                variant_info = _create_hls_variant(
                    input_path, out_dir, rung, segment_duration, has_audio
                )
                variant_infos.append(variant_info)

                logger.info(f"Created HLS variant: {variant_info['height']}p "
                            f"({variant_info['segments_count']} segments)")

            except Exception as e:
                logger.error(f"Failed to create {rung['height']}p HLS variant: {e}")
                failed_variants.append((rung['height'], str(e)))
                continue

        if not variant_infos:
            raise TranscodingError("No HLS variants were successfully created")

        if failed_variants:
            logger.warning(f"Some HLS variants failed: {failed_variants}")

        # –°–æ–∑–¥–∞–µ–º master –ø–ª–µ–π–ª–∏—Å—Ç
        master_playlist = _create_hls_master_playlist(out_dir, variant_infos)

        logger.info(f"HLS master playlist created: {master_playlist} "
                    f"({len(variant_infos)} variants)")

        return master_playlist

    except Exception as e:
        logger.error(f"HLS transcoding failed: {e}")
        if isinstance(e, (TranscodingError, ConfigurationError, InvalidVideoError)):
            raise
        raise TranscodingError(f"HLS transcoding failed: {e}") from e


def _filter_ladder_by_source(ladder: List[Dict], source_height: int) -> List[Dict]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—É –∫–∞—á–µ—Å—Ç–≤ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é"""

    # –£–±–∏—Ä–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ (—Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º)
    filtered = [r for r in ladder if r['height'] <= source_height * 1.1]

    # –ï—Å–ª–∏ –≤—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ
    if not filtered:
        filtered = [min(ladder, key=lambda x: x['height'])]
        logger.warning(f"All ladder heights exceed source {source_height}p, using lowest")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    return sorted(filtered, key=lambda x: x['height'])


def _create_hls_variant(input_path: Path, out_dir: Path, rung: Dict,
                        segment_duration: int, has_audio: bool) -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞ HLS"""

    height = int(rung["height"])
    v_bitrate = int(rung["v_bitrate"])
    a_bitrate = int(rung["a_bitrate"]) if has_audio else 0

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    variant_dir = out_dir / f"v{height}"
    variant_dir.mkdir(exist_ok=True)

    playlist_file = variant_dir / "index.m3u8"

    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É FFmpeg
    cmd = [
        defaults.FFMPEG, "-y",
        "-i", str(input_path),
        "-map", "0:v:0",  # –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫
    ]

    # –í–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    vf_parts = []

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    vf_parts.append(f"scale=w=-2:h={height}:force_original_aspect_ratio=decrease")

    # Padding –¥–æ —á–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ H.264)
    vf_parts.append("pad=ceil(iw/2)*2:ceil(ih/2)*2")

    cmd.extend([
        "-vf", ",".join(vf_parts),
        "-c:v", "libx264",
        "-profile:v", defaults.H264_PROFILE,
        "-preset", defaults.FFMPEG_PRESET,
        "-b:v", f"{v_bitrate}k",
        "-maxrate", f"{int(v_bitrate * 1.07)}k",  # +7% burst
        "-bufsize", f"{v_bitrate * 2}k",
        "-pix_fmt", defaults.PIXEL_FORMAT,
        "-g", str(segment_duration * 30),  # GOP = segment * fps
        "-keyint_min", str(segment_duration * 30),
        "-sc_threshold", "0",  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ keyframes
    ])

    # –ê—É–¥–∏–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if has_audio and a_bitrate > 0:
        cmd.extend([
            "-map", "0:a:0",
            "-c:a", defaults.AUDIO_CODEC,
            "-b:a", f"{a_bitrate}k",
            "-ac", str(defaults.AUDIO_CHANNELS),
            "-ar", str(defaults.AUDIO_SAMPLE_RATE),
        ])
    else:
        cmd.append("-an")  # –ë–µ–∑ –∞—É–¥–∏–æ

    # HLS —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cmd.extend([
        "-f", "hls",
        "-hls_time", str(segment_duration),
        "-hls_playlist_type", "vod",
        "-hls_segment_type", "mpegts",
        "-hls_segment_filename", str(variant_dir / "seg_%04d.ts"),
        "-hls_flags", "single_file+independent_segments",
        str(playlist_file)
    ])

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    complexity = analyze_video_complexity(input_path)
    estimated_time = int(complexity['estimated_transcode_time'] *
                         complexity.get('duration', 300))  # default 5 min
    timeout_sec = max(300, estimated_time * 2)  # –º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥
    run(cmd, timeout_sec=timeout_sec)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not playlist_file.exists():
        raise TranscodingError(f"HLS playlist not created: {playlist_file}")

    segment_files = list(variant_dir.glob("seg_*.ts"))
    if not segment_files:
        raise TranscodingError(f"No HLS segments created in {variant_dir}")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è master –ø–ª–µ–π–ª–∏—Å—Ç–∞
    approx_width = int((height * 16 / 9) // 2 * 2)  # 16:9 aspect ratio, —á–µ—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞

    return {
        "height": height,
        "width": approx_width,
        "bandwidth": (v_bitrate + a_bitrate) * 1000,  # –≤ bps
        "playlist": playlist_file.name,
        "dir": variant_dir.name,
        "resolution": f"{approx_width}x{height}",
        "segments_count": len(segment_files),
        "video_bitrate": v_bitrate,
        "audio_bitrate": a_bitrate,
    }


def _create_hls_master_playlist(out_dir: Path, variants: List[Dict]) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç master.m3u8 –ø–ª–µ–π–ª–∏—Å—Ç"""

    master_file = out_dir / "master.m3u8"

    lines = [
        "#EXTM3U",
        "#EXT-X-VERSION:3"
    ]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    sorted_variants = sorted(variants, key=lambda x: x["height"])

    for variant in sorted_variants:
        # EXT-X-STREAM-INF line
        stream_inf = f"#EXT-X-STREAM-INF:BANDWIDTH={variant['bandwidth']}"
        stream_inf += f",RESOLUTION={variant['resolution']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥–µ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        codecs = "avc1.42E01E"  # H.264 Baseline Profile
        if variant['audio_bitrate'] > 0:
            codecs += ",mp4a.40.2"  # AAC-LC
        stream_inf += f",CODECS=\"{codecs}\""

        lines.append(stream_inf)
        lines.append(f"{variant['dir']}/{variant['playlist']}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    master_file.write_text("\n".join(lines) + "\n", encoding="utf-8")

    return master_file


# ==============================================================================
# DASH –¢–†–ê–ù–°–ö–û–î–ò–ù–ì
# ==============================================================================

def transcode_dash_variants(input_path: Path, out_dir: Path,
                            ladder: List[Dict], segment_duration: int = 4) -> Path:
    """
    –°–æ–∑–¥–∞–µ—Ç DASH –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º.

    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
        out_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è DASH —Ñ–∞–π–ª–æ–≤
        ladder: –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—á–µ—Å—Ç–≤
        segment_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤

    Returns:
        Path: –ü—É—Ç—å –∫ manifest.mpd
    """
    try:
        from .fields import validate_ladder
        validate_ladder(ladder)

        out_dir.mkdir(parents=True, exist_ok=True)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        info = ffprobe_streams(input_path)
        video_stream, audio_stream = pick_video_audio_streams(info)

        if not video_stream:
            raise InvalidVideoError("No video stream found")

        has_audio = audio_stream is not None
        source_height = int(video_stream.get('height', 0))

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–µ—Å—Ç–Ω–∏—Ü—É
        filtered_ladder = _filter_ladder_by_source(ladder, source_height)

        logger.info(f"Creating DASH with {len(filtered_ladder)} representations")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg –¥–ª—è DASH
        cmd = [
            defaults.FFMPEG, "-y",
            "-i", str(input_path)
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        video_maps = []
        filter_complex_parts = []

        for i, rung in enumerate(filtered_ladder):
            height = int(rung["height"])
            v_bitrate = int(rung["v_bitrate"])

            # –§–∏–ª—å—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            scale_filter = f"scale=w=-2:h={height}:force_original_aspect_ratio=decrease"
            pad_filter = "pad=ceil(iw/2)*2:ceil(ih/2)*2"

            filter_complex_parts.append(f"[0:v]{scale_filter},{pad_filter}[v{i}]")

            # –î–æ–±–∞–≤–ª—è–µ–º map –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            video_maps.extend(["-map", f"[v{i}]"])

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            cmd.extend([
                f"-c:v:{i}", "libx264",
                f"-preset:v:{i}", defaults.FFMPEG_PRESET,
                f"-profile:v:{i}", defaults.H264_PROFILE,
                f"-b:v:{i}", f"{v_bitrate}k",
                f"-maxrate:v:{i}", f"{int(v_bitrate * 1.07)}k",
                f"-bufsize:v:{i}", f"{v_bitrate * 2}k",
                f"-pix_fmt:v:{i}", defaults.PIXEL_FORMAT,
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ
        if has_audio:
            for i, rung in enumerate(filtered_ladder):
                a_bitrate = int(rung["a_bitrate"])
                if a_bitrate > 0:
                    video_maps.extend(["-map", "0:a:0"])
                    cmd.extend([
                        f"-c:a:{i}", defaults.AUDIO_CODEC,
                        f"-b:a:{i}", f"{a_bitrate}k",
                        f"-ac:a:{i}", str(defaults.AUDIO_CHANNELS),
                        f"-ar:a:{i}", str(defaults.AUDIO_SAMPLE_RATE),
                    ])

        # Filter complex
        if filter_complex_parts:
            cmd.extend(["-filter_complex", ";".join(filter_complex_parts)])

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ maps
        cmd.extend(video_maps)

        # DASH —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        manifest_file = out_dir / "manifest.mpd"

        cmd.extend([
            "-f", "dash",
            "-seg_duration", str(segment_duration),
            "-use_template", "1" if defaults._get_setting("HLSFIELD_DASH_USE_TEMPLATE", True) else "0",
            "-use_timeline", "1" if defaults._get_setting("HLSFIELD_DASH_USE_TIMELINE", True) else "0",
            "-init_seg_name", "init-$RepresentationID$.$ext$",
            "-media_seg_name", "chunk-$RepresentationID$-$Number%05d$.$ext$",
            "-adaptation_sets", "id=0,streams=v id=1,streams=a" if has_audio else "id=0,streams=v",
            str(manifest_file)
        ])

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥
        complexity = analyze_video_complexity(input_path)
        estimated_time = int(complexity['estimated_transcode_time'] *
                             complexity.get('duration', 300))
        timeout_sec = max(600, estimated_time * 2)  # DASH –æ–±—ã—á–Ω–æ –¥–æ–ª—å—à–µ HLS

        run(cmd, timeout_sec=timeout_sec)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not manifest_file.exists():
            raise TranscodingError("DASH manifest not created")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã —Å–µ–≥–º–µ–Ω—Ç—ã
        segment_files = list(out_dir.glob("chunk-*.m4s"))
        if not segment_files:
            raise TranscodingError("No DASH segments created")

        logger.info(f"DASH manifest created: {manifest_file} "
                    f"({len(segment_files)} segments)")

        return manifest_file

    except Exception as e:
        logger.error(f"DASH transcoding failed: {e}")
        if isinstance(e, (TranscodingError, ConfigurationError, InvalidVideoError)):
            raise
        raise TranscodingError(f"DASH transcoding failed: {e}") from e


# ==============================================================================
# –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô HLS + DASH –¢–†–ê–ù–°–ö–û–î–ò–ù–ì
# ==============================================================================

def transcode_adaptive_variants(input_path: Path, out_dir: Path,
                                ladder: List[Dict], segment_duration: int = 6) -> Dict[str, Path]:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ HLS –∏ DASH —Å—Ç—Ä–∏–º—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.

    Args:
        input_path: –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        out_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        ladder: –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—á–µ—Å—Ç–≤
        segment_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤

    Returns:
        dict: –ü—É—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞–º
    """
    try:
        out_dir.mkdir(parents=True, exist_ok=True)

        hls_dir = out_dir / "hls"
        dash_dir = out_dir / "dash"

        logger.info(f"Starting adaptive transcoding (HLS + DASH) for {input_path.name}")

        # –°–æ–∑–¥–∞–µ–º HLS
        logger.info("Creating HLS stream...")
        hls_master = transcode_hls_variants(input_path, hls_dir, ladder, segment_duration)

        # –°–æ–∑–¥–∞–µ–º DASH (—Å –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–∏–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)
        logger.info("Creating DASH stream...")
        dash_segment_duration = max(2, segment_duration - 2)  # –ù–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–Ω—å—à–µ
        dash_manifest = transcode_dash_variants(input_path, dash_dir, ladder, dash_segment_duration)

        logger.info("Adaptive transcoding completed successfully")

        return {
            "hls_master": hls_master,
            "dash_manifest": dash_manifest,
            "hls_dir": hls_dir,
            "dash_dir": dash_dir,
        }

    except Exception as e:
        logger.error(f"Adaptive transcoding failed: {e}")
        if isinstance(e, (TranscodingError, ConfigurationError, InvalidVideoError)):
            raise
        raise TranscodingError(f"Adaptive transcoding failed: {e}") from e


# ==============================================================================
# –†–ê–ë–û–¢–ê –°–û STORAGE
# ==============================================================================

def pull_to_local(storage, name: str, dst_dir: Path) -> Path:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ storage –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.

    Args:
        storage: Django storage backend
        name: –ò–º—è —Ñ–∞–π–ª–∞ –≤ storage
        dst_dir: –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

    Returns:
        Path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

    Raises:
        StorageError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –ø—É—Ç—å (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ storage)
        try:
            direct_path = Path(storage.path(name))
            if direct_path.exists() and direct_path.is_file():
                logger.debug(f"Using direct file access: {direct_path}")
                return direct_path
        except (AttributeError, NotImplementedError):
            # Storage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ –ø—É—Ç–∏
            pass

        # –ö–æ–ø–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ storage API
        dst = dst_dir / Path(name).name

        logger.debug(f"Downloading {name} to {dst}")

        file_info = get_file_info_from_storage(storage, name)
        total_size = file_info.get('size', 0)

        with storage.open(name, "rb") as src:
            with dst.open("wb") as out:
                copied = 0
                chunk_size = min(defaults.IO_BUFFER_SIZE, 1024 * 1024)  # 1MB max
                last_log_time = time.time()

                while True:
                    chunk = src.read(chunk_size)
                    if not chunk:
                        break

                    out.write(chunk)
                    copied += len(chunk)

                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    now = time.time()
                    if total_size > 50 * 1024 * 1024 and now - last_log_time > 5:  # > 50MB, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
                        progress = (copied / total_size * 100) if total_size > 0 else 0
                        logger.info(f"Download progress: {progress:.1f}% ({copied / (1024 * 1024):.1f}MB)")
                        last_log_time = now

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if not dst.exists():
            raise StorageError(f"Downloaded file does not exist: {dst}")

        actual_size = dst.stat().st_size
        if actual_size == 0:
            raise StorageError(f"Downloaded file is empty: {dst}")

        if total_size > 0 and abs(actual_size - total_size) > 1024:  # –¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1KB
            logger.warning(f"Size mismatch: expected {total_size}, got {actual_size}")

        logger.debug(f"Successfully downloaded {actual_size} bytes")
        return dst

    except Exception as e:
        logger.error(f"Error pulling file {name}: {e}")

        # –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'dst' in locals() and dst.exists():
            try:
                dst.unlink()
            except:
                pass

        if isinstance(e, StorageError):
            raise
        raise StorageError(f"Cannot download file {name}: {e}") from e


def get_file_info_from_storage(storage, name: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ storage"""

    info = {'name': name}

    try:
        if hasattr(storage, 'size'):
            info['size'] = storage.size(name)
    except:
        pass

    try:
        if hasattr(storage, 'get_modified_time'):
            info['modified'] = storage.get_modified_time(name)
    except:
        pass

    try:
        if hasattr(storage, 'url'):
            info['url'] = storage.url(name)
    except:
        pass

    return info


def save_tree_to_storage(local_root: Path, storage, base_path: str) -> List[str]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ storage.

    Args:
        local_root: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
        storage: Django storage backend
        base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –≤ storage

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π

    Raises:
        StorageError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    saved_paths = []

    try:
        for root, dirs, files in os.walk(local_root):
            for filename in files:
                local_file_path = Path(root) / filename

                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                rel_path = local_file_path.relative_to(local_root)
                storage_key = f"{base_path.rstrip('/')}/{str(rel_path).replace(os.sep, '/')}"

                logger.debug(f"Saving {local_file_path} -> {storage_key}")

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                try:
                    with local_file_path.open("rb") as fh:
                        saved_name = storage.save(storage_key, fh)
                        saved_paths.append(saved_name)

                except Exception as e:
                    logger.error(f"Failed to save {storage_key}: {e}")
                    raise StorageError(f"Cannot save file {storage_key}: {e}") from e

        logger.info(f"Saved {len(saved_paths)} files to storage under {base_path}")
        return saved_paths

    except Exception as e:
        logger.error(f"Error saving file tree: {e}")
        if isinstance(e, StorageError):
            raise
        raise StorageError(f"Cannot save file tree: {e}") from e


def cleanup_storage_path(storage, path: str, max_attempts: int = 3) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ storage —Å retry –ª–æ–≥–∏–∫–æ–π.

    Args:
        storage: Django storage backend
        path: –ü—É—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        max_attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    """
    for attempt in range(max_attempts):
        try:
            if storage.exists(path):
                storage.delete(path)
                logger.debug(f"Deleted from storage: {path}")
            return True

        except Exception as e:
            if attempt == max_attempts - 1:
                logger.warning(f"Failed to delete {path} after {max_attempts} attempts: {e}")
                return False

            # Exponential backoff
            time.sleep(0.1 * (2 ** attempt))

    return False


# ==============================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
# ==============================================================================

def validate_video_file(file_path: Union[str, Path]) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Raises:
        InvalidVideoError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
    """
    path = Path(file_path)

    validation = {
        'valid': False,
        'issues': [],
        'warnings': [],
        'info': {}
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not path.exists():
        validation['issues'].append("File does not exist")
        return validation

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    size = path.stat().st_size
    validation['info']['size'] = size

    if size < defaults.MIN_FILE_SIZE:
        validation['issues'].append(f"File too small: {size} bytes")

    if size > defaults.MAX_FILE_SIZE:
        validation['issues'].append(f"File too large: {size} bytes")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    ext = path.suffix.lower()
    validation['info']['extension'] = ext

    if ext not in defaults.ALLOWED_EXTENSIONS:
        validation['issues'].append(f"Unsupported extension: {ext}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ FFprobe
    try:
        info = ffprobe_streams(path)
        video_stream, audio_stream = pick_video_audio_streams(info)

        validation['info']['has_video'] = video_stream is not None
        validation['info']['has_audio'] = audio_stream is not None

        if video_stream:
            width = int(video_stream.get('width', 0))
            height = int(video_stream.get('height', 0))

            validation['info']['width'] = width
            validation['info']['height'] = height
            validation['info']['codec'] = video_stream.get('codec_name', 'unknown')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            if height < defaults.MIN_VIDEO_HEIGHT:
                validation['issues'].append(f"Height too small: {height}p")

            if height > defaults.MAX_VIDEO_HEIGHT:
                validation['issues'].append(f"Height too large: {height}p")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            if width % 2 != 0 or height % 2 != 0:
                validation['warnings'].append("Odd dimensions may cause encoding issues")

        else:
            validation['issues'].append("No video stream found")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if format_info := info.get('format'):
            try:
                duration = float(format_info.get('duration', 0))
                validation['info']['duration'] = duration

                if duration > defaults.MAX_VIDEO_DURATION:
                    validation['issues'].append(f"Video too long: {duration}s")

            except (ValueError, TypeError):
                validation['warnings'].append("Could not determine video duration")

    except Exception as e:
        validation['issues'].append(f"Cannot analyze video: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    validation['valid'] = len(validation['issues']) == 0

    return validation


def estimate_transcoding_time(file_path: Union[str, Path], ladder: List[Dict]) -> Dict[str, Any]:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        ladder: –õ–µ—Å—Ç–Ω–∏—Ü–∞ –∫–∞—á–µ—Å—Ç–≤

    Returns:
        dict: –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞
    """
    try:
        complexity = analyze_video_complexity(file_path)
        duration = complexity.get('duration', 0)

        if duration <= 0:
            return {'estimated_seconds': 0, 'confidence': 'low'}

        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        base_multiplier = complexity.get('estimated_transcode_time', 1.0)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—á–µ—Å—Ç–≤
        quality_multiplier = len(ladder) * 0.3 + 0.7  # –æ—Ç 1.0 –¥–æ ~2.2

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –ª–µ—Å—Ç–Ω–∏—Ü–µ
        resolution_factor = 1.0
        total_pixels = sum(r['height'] * r['height'] * 16 // 9 for r in ladder)  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
        avg_pixels = total_pixels / len(ladder)

        if avg_pixels > 1920 * 1080:
            resolution_factor = 1.5
        elif avg_pixels < 640 * 480:
            resolution_factor = 0.7

        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        estimated = duration * base_multiplier * quality_multiplier * resolution_factor

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        estimated = int(estimated * 1.2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
        confidence = 'high'
        if complexity.get('complexity') == 'high':
            confidence = 'medium'
            estimated = int(estimated * 1.3)

        return {
            'estimated_seconds': estimated,
            'confidence': confidence,
            'factors': {
                'duration': duration,
                'complexity': complexity.get('complexity', 'medium'),
                'qualities_count': len(ladder),
                'resolution_factor': resolution_factor,
            }
        }

    except Exception as e:
        logger.warning(f"Could not estimate transcoding time: {e}")
        return {
            'estimated_seconds': 300,  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'confidence': 'low',
            'error': str(e)
        }


# ==============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
# ==============================================================================

def get_video_info_quick(file_path: Union[str, Path]) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É

    Returns:
        dict: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ show_format –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        cmd = [
            defaults.FFPROBE,
            "-v", "error",
            "-print_format", "json",
            "-show_format",
            str(file_path)
        ]

        result = run(cmd, timeout_sec=15)
        data = json.loads(result.stdout)

        format_info = data.get('format', {})

        return {
            'duration': float(format_info.get('duration', 0)),
            'size': int(format_info.get('size', 0)),
            'bitrate': int(format_info.get('bit_rate', 0)),
            'format_name': format_info.get('format_name', 'unknown'),
            'nb_streams': int(format_info.get('nb_streams', 0)),
        }

    except Exception as e:
        logger.warning(f"Quick video info failed: {e}")
        return {
            'duration': 0,
            'size': 0,
            'bitrate': 0,
            'format_name': 'unknown',
            'nb_streams': 0,
        }


def calculate_optimal_bitrates(width: int, height: int, fps: float = 30.0) -> Dict[str, int]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.

    Args:
        width: –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–µ–æ
        height: –í—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ
        fps: –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤

    Returns:
        dict: –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã
    """
    pixels = width * height
    fps_factor = fps / 30.0  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 30fps

    # –ë–∞–∑–æ–≤—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–≤ bps)
    base_bpp = {
        'low': 0.05,  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        'medium': 0.08,  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        'high': 0.12,  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        'max': 0.16  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    }

    bitrates = {}

    for quality, bpp in base_bpp.items():
        # –ë–∞–∑–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç
        base_bitrate = pixels * bpp * fps_factor

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if height >= 2160:  # 4K
            base_bitrate *= 0.8  # 4K –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–∂–∏–º–∞–µ—Ç—Å—è
        elif height <= 480:  # SD
            base_bitrate *= 1.2  # SD –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        bitrates[quality] = int(base_bitrate / 1000) * 1000  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –∫–∏–ª–æ–±–∏—Ç

    return bitrates


def create_test_video(output_path: Path, duration: int = 10,
                      width: int = 640, height: int = 480) -> Path:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        width: –®–∏—Ä–∏–Ω–∞
        height: –í—ã—Å–æ—Ç–∞

    Returns:
        Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    cmd = [
        defaults.FFMPEG, "-y",
        "-f", "lavfi",
        "-i", f"testsrc=duration={duration}:size={width}x{height}:rate=30",
        "-f", "lavfi",
        "-i", f"sine=frequency=1000:duration={duration}",
        "-c:v", "libx264",
        "-preset", "ultrafast",
        "-c:a", "aac",
        "-b:a", "64k",
        "-t", str(duration),
        str(output_path)
    ]

    run(cmd, timeout_sec=duration + 30)

    if not output_path.exists():
        raise TranscodingError(f"Test video not created: {output_path}")

    logger.info(f"Test video created: {output_path} ({duration}s, {width}x{height})")
    return output_path


# ==============================================================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
# ==============================================================================

__all__ = [
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    'tempdir',

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    'run',
    'ensure_binary_available',

    # –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
    'ffprobe_streams',
    'pick_video_audio_streams',
    'analyze_video_complexity',
    'validate_video_file',
    'estimate_transcoding_time',
    'get_video_info_quick',

    # –ü—Ä–µ–≤—å—é
    'extract_preview',
    'create_preview_sprites',

    # –¢—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥
    'transcode_hls_variants',
    'transcode_dash_variants',
    'transcode_adaptive_variants',

    # Storage
    'pull_to_local',
    'save_tree_to_storage',
    'cleanup_storage_path',
    'get_file_info_from_storage',

    # –£—Ç–∏–ª–∏—Ç—ã
    'get_file_info',
    'calculate_optimal_bitrates',
    'create_test_video',
]
