import torch

inputs = torch.tensor([[[[-8.4784, -1.7658, -4.3228, -2.4005],
                         [-7.9506, 3.6116, -8.0676, -0.5735],
                         [3.1285, -3.0337, 5.1067, 1.1351],
                         [4.9473, 5.7744, -3.9730, 3.2708]],
                        [[-3.8939, 2.8211, -4.7024, 4.1631],
                         [1.8220, -3.5221, -4.4145, 2.3285],
                         [8.3972, 4.3191, -0.8691, -0.4368],
                         [5.1155, -6.2551, 2.9920, -2.9822]],
                        [[5.2072, -3.2105, 0.4450, 3.0391],
                         [6.1851, -1.3229, 8.2106, -7.6144],
                         [-1.6054, -8.9746, 0.7456, 2.5540],
                         [-3.6433, 3.7379, -1.4590, -7.8209]]],
                       [[[6.9096, 5.5491, 4.5505, 7.1790],
                         [3.3095, 4.7852, 7.4685, -1.8133],
                         [-7.0191, -4.4261, -1.2014, -0.9890],
                         [-0.0610, 5.1576, 2.8871, -6.6545]],
                        [[-2.7036, -2.1172, 5.4775, -3.2650],
                         [-3.7655, -1.4470, -2.2893, -2.2159],
                         [-8.8060, 8.0189, 4.7900, -4.2587],
                         [-5.6154, 0.3131, 5.1280, -6.4588]],
                        [[-3.3991, 3.7645, -5.8051, -1.0022],
                         [-6.7869, 8.3477, 4.8514, -8.3189],
                         [-4.9690, 3.1903, 0.4932, 2.3851],
                         [-7.3627, -4.8190, 4.0836, -6.8625]]]])

size = torch.Size([3, 3])
broadcasts_input = False

print('ans is: ', torch.nn.functional.upsample_bilinear(inputs, size=size))

torch26_ans = torch.tensor([[[[-8.4784, -3.0443, -2.4005],
                              [-2.4111, -0.5958, 0.2808],
                              [4.9473, 0.9007, 3.2708]],
                             [[-3.8939, -0.9407, 4.1631],
                              [5.1096, -1.1217, 0.9459],
                              [5.1155, -1.6315, -2.9822]],
                             [[5.2072, -1.3828, 3.0391],
                              [2.2898, -0.3353, -2.5302],
                              [-3.6433, 1.1395, -7.8209]]],
                            [[[6.9096, 5.0498, 7.1790],
                              [-1.8548, 1.6566, -1.4011],
                              [-0.0610, 4.0223, -6.6545]],
                             [[-2.7036, 1.6802, -3.2650],
                              [-6.2857, 2.2681, -3.2373],
                              [-5.6154, 2.7205, -6.4588]],
                             [[-3.3991, -1.0203, -1.0022],
                              [-5.8779, 4.2207, -2.9669],
                              [-7.3627, -0.3677, -6.8625]]]])

import torchax

torchax.enable_globally()
torchax.enable_accuracy_mode()
env = torchax.default_env()
env.config.debug_print_each_op = True
#env.config.debug_print_each_op_operands = True

input2 = inputs.to('jax')
print('ans torchax is: ', torch.nn.functional.upsample_bilinear(input2, size))
breakpoint()
