[build-system]
requires = ["hatchling>=1.21"]
build-backend = "hatchling.build"

[project]
name = "meta-learning-toolkit"
version = "2.4.0"
description = "Production-ready meta-learning algorithms with research-accurate implementations of MAML, Prototypical Networks, and test-time compute scaling"
readme = "README.md"
license = {text = "Custom Non-Commercial License"}
authors = [{name = "Benedict Chen", email = "benedict@benedictchen.com"}]
maintainers = [{name = "Benedict Chen", email = "benedict@benedictchen.com"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["meta-learning", "few-shot", "MAML", "prototypical-networks", "test-time-compute"]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "scipy>=1.7.0", 
    "scikit-learn>=1.0.0",
    "tqdm>=4.64.0",
    "pyyaml>=6.0",
    "requests>=2.25.0",
    "rich>=12.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-benchmark>=4.0",
    "pytest-mock>=3.10",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
datasets = [
    "torchvision>=0.15.0",
    "pillow>=9.0.0",
    "h5py>=3.7.0",
]
visualization = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "wandb>=0.15.0",
]
research = [
    "learn2learn>=0.1.7",
    "higher>=0.2.1",
    "torchmeta>=1.8.0",
]
all = [
    "pytest>=7.0", "pytest-cov>=4.0", "pytest-benchmark>=4.0", "pytest-mock>=3.10",
    "ruff>=0.1.0", "mypy>=1.5.0", "pre-commit>=3.0.0", "build>=0.10.0", "twine>=4.0.0",
    "torchvision>=0.15.0", "pillow>=9.0.0", "h5py>=3.7.0",
    "matplotlib>=3.5.0", "seaborn>=0.11.0", "wandb>=0.15.0",
    "learn2learn>=0.1.7", "higher>=0.2.1", "torchmeta>=1.8.0"
]

[project.urls]
Homepage = "https://github.com/benedictchen/meta-learning"
Documentation = "https://github.com/benedictchen/meta-learning/blob/main/README.md"
Repository = "https://github.com/benedictchen/meta-learning"
Issues = "https://github.com/benedictchen/meta-learning/issues"
Funding = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=WXQKYYKPHWXHS"
Sponsor = "https://github.com/sponsors/benedictchen"

[project.scripts]
mlfew = "meta_learning.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/meta_learning"]

[tool.hatch.build.targets.sdist]
exclude = [
    "data",
    "data/**",
    "htmlcov",
    "htmlcov/**",
    ".coverage*",
    "*.pyc",
    "__pycache__/**",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--cov=src/meta_learning",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "benchmark: marks performance benchmark tests",
    "regression: marks mathematical correctness regression tests",
    "deterministic: marks tests requiring deterministic behavior",
    "memory_intensive: marks tests that use significant memory",
    "parametrize: marks parametrized tests with multiple inputs",
    "property_based: marks property-based testing with hypothesis"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::FutureWarning", 
    "ignore::UserWarning:torch.*",
    "ignore::UserWarning:sklearn.*",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning:numpy.*",
    "error::UserWarning:meta_learning.*"
]
minversion = "7.0"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests", "*Test"]
python_functions = ["test_*"]

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src"]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "ICN", "PIE", "T20", "RET", "SIM", "ARG", "PL", "R", "C90"]
ignore = ["E501", "S101", "PLR2004", "PLR0913", "S311", "B008", "C901"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101", "PLR2004", "ARG001"]
"src/meta_learning/cli.py" = ["T20"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "tqdm.*",
    "rich.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.coverage.xml]
output = "coverage.xml"

# Black configuration for consistent formatting
[tool.black]
line-length = 127
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  old_archive
  | \.pytest_cache
  | build
  | dist
)/
'''

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["old_archive/*", "build/*", "dist/*"]