"""
Deprecated SO terms mapping to current recommended replacements
Generated by chatgpt
"""

deprecated_so_mapping: dict[str, dict[str, str | dict[str, str]]] = {
    "stem_loop": {
        "deprecated_id": "SO:0000313",
        "replacement": {"so_name": "misc_structure", "so_id": "SO:0000002"},
    },
    "sequence_variant": {
        "deprecated_id": "SO:0001060",
        "replacement": {"so_name": "sequence_alteration", "so_id": "SO:0001059"},
    },
    "transcript_variant": {
        "deprecated_id": "SO:0001576",
        "replacement": {
            "so_name": "transcript",
            "so_id": "SO:0000673",
        },  # use more specific subtype if known
    },
    "gene_segment": {
        "deprecated_id": "SO:0000706",
        "replacement": {"so_name": "gene", "so_id": "SO:0000704"},
    },  # or 'region' if it's more generic
    "pre_miRNA": {
        "deprecated_id": "SO:0001244",
        "replacement": {"so_name": "miRNA_primary_transcript", "so_id": "SO:0000647"},
    },
    "oriT": {
        "deprecated_id": "SO:0000724",
        "replacement": {"so_name": "rep_origin", "so_id": "SO:0000296"},
    },
    "EST_match": {
        "deprecated_id": "SO:0000345",
        "replacement": {
            "so_name": "nucleotide_match",
            "so_id": "SO:0001983",
        },  # 'match' (SO:0000349) also possible
    },
    "STS": {
        "deprecated_id": "SO:0000331",
        "replacement": {"so_name": "biological_region", "so_id": "SO:0001411"},
    },
}
