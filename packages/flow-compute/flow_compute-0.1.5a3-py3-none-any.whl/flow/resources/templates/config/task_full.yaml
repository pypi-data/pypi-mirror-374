# Save as task.yaml and run with: flow run task.yaml
#
# Full TaskConfig template with common fields and guidance. Edit as needed.
# Comments explain typical usage and constraints.

# Identifier and uniqueness policy
name: flow-task                 # Letters/digits/._-; referenced by status/logs/ssh
unique_name: true               # Append -xxxxxx suffix automatically (recommended)

# Resource selector (choose one)
instance_type: 8xh100           # e.g., h100, 8xh100, a100-40gb, 4xa100
# min_gpu_memory_gb: 80         # Alternative: any GPU meeting this memory

# What to run (string, list, or multi-line block)
# Examples:
#   command: "nvidia-smi"
#   command: [python, train.py, --epochs, '10']
#   command: |
#     echo "hello"
#     nvidia-smi
command: |
  echo "Hello from Flow!"
  nvidia-smi
  echo "Edit this command to run your workload"

# Container image (any valid Docker image reference)
image: nvidia/cuda:12.1.0-runtime-ubuntu22.04

# Working directory inside the container
working_dir: /workspace

# Environment variables (key/value map)
env: {}
# env:
#   WANDB_MODE: offline
#   TOKEN: ${MY_TOKEN}

# Networking
ports: []                       # High ports only (>=1024), e.g., [8080, 8888]

# Pricing and priority
priority: med                   # low | med | high
max_price_per_hour: null        # Optional limit price (USD). Set a number to cap bids.

# Code upload (local project to /workspace)
upload_code: true               # Upload current directory by default
upload_strategy: auto           # auto | embedded | scp | none (embedded ~10KB limit; scp for larger uploads)
upload_timeout: 600             # Seconds to wait for code upload
# code_root: ./                 # Override project directory to upload
# allow_docker_cache: false     # Advanced: mount /var/lib/docker to persist image layers (single-node only)

# Volumes and mounts
volumes: []                     # Persistent volumes (attach to single-instance tasks)
# - name: training-data
#   mount_path: /data
#   size_gb: 100
#   interface: file             # file (multi-attach) | block (single-attach)
# Notes:
#   - Do not mount at /workspace when upload_code: true (conflicts with code upload).
#   - Restricted mount targets (e.g., /, /root) are not allowed.
#   - Block storage cannot be attached to multi-instance tasks (num_instances > 1).

data_mounts: []                 # Read-only datasets (e.g., s3://...) shared across nodes
# - source: s3://my-bucket/path
#   target: /data

# Distributed and topology
num_instances: 1                # Number of instances (multi-node when >1)
distributed_mode: null          # auto | manual | null (auto: Flow sets rendezvous; manual: you set envs)
internode_interconnect: null    # e.g., IB_3200, Ethernet
intranode_interconnect: null    # e.g., SXM5, PCIe

# Scheduling and region
allocation_mode: spot           # spot | reserved | auto
reservation_id: null            # When targeting an existing reservation (string ID)
scheduled_start_time: null      # ISO8601, e.g., 2025-09-01T12:00:00Z (for reserved capacity)
reserved_duration_hours: null   # Integer hours (3..336) when using reserved capacity
region: null                    # Region/zone, e.g., us-central1-b (provider dependent)

# Runtime bounds and retries
max_run_time_hours: null        # 0 or null disables monitoring (max total runtime)
min_run_time_hours: null        # Minimum guaranteed runtime hours
deadline_hours: null            # Overall time budget (>= max_run_time_hours when set)
retries: null                   # Retry policy (object). Examples:
# retries:
#   max_retries: 3              # 0..10 attempts
#   backoff_coefficient: 2.0    # 1.0 (fixed) or >1.0 (exponential)
#   initial_delay: 1.0          # seconds before first retry
#   max_delay: 60.0             # optional cap in seconds

# SSH access
ssh_keys: []                    # Authorized SSH keys; accepted forms:
#   - sshkey_abc123             # Platform key ID (from provider)
#   - ~/.ssh/id_ed25519         # Path to private key (or .pub; resolves to private)
#   - id_ed25519                # File name in ~/.ssh or ~/.flow/keys
