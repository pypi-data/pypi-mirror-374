# SPDX-FileCopyrightText: Copyright (c) 2023-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0

from collections.abc import Iterable
from typing import Any

from ..data.logical_array import LogicalArray
from ..data.logical_store import LogicalStore, LogicalStorePartition
from ..partitioning.constraint import Constraint, Variable
from ..type.types import Type
from ..utilities.unconstructable import Unconstructable
from .projection import SymbolicPoint

class AutoTask(Unconstructable):
    def lock(self) -> None: ...
    def add_input(
        self,
        array_or_store: LogicalArray | LogicalStore,
        variable: Variable | None = None,
    ) -> Variable: ...
    def add_output(
        self,
        array_or_store: LogicalArray | LogicalStore,
        variable: Variable | None = None,
    ) -> Variable: ...
    def add_reduction(
        self,
        array_or_store: LogicalArray | LogicalStore,
        redop: int,
        variable: Variable | None = None,
    ) -> Variable: ...
    def add_scalar_arg(
        self, value: Any, dtype: Type | tuple[Type, ...] | None = None
    ) -> None: ...
    def add_constraint(self, constraint: Constraint) -> None: ...
    def find_or_declare_partition(self, array: LogicalArray) -> Variable: ...
    def declare_partition(self) -> Variable: ...
    def provenance(self) -> str: ...
    def set_concurrent(self, concurrent: bool) -> None: ...
    def set_side_effect(self, has_side_effect: bool) -> None: ...
    def throws_exception(self, exception_type: type) -> None: ...
    @property
    def exception_types(self) -> tuple[type, ...]: ...
    def add_communicator(self, name: str) -> None: ...
    def execute(self) -> None: ...
    def add_alignment(
        self,
        array_or_store1: LogicalArray | LogicalStore,
        array_or_store2: LogicalArray | LogicalStore,
    ) -> None: ...
    def add_broadcast(
        self,
        array_or_store: LogicalArray | LogicalStore,
        axes: int | Iterable[int] | None = None,
    ) -> None: ...
    def add_nccl_communicator(self) -> None: ...
    def add_cpu_communicator(self) -> None: ...
    def add_cal_communicator(self) -> None: ...
    @property
    def raw_handle(self) -> int: ...

class ManualTask(Unconstructable):
    def add_input(
        self,
        arg: LogicalStore | LogicalStorePartition,
        projection: SymbolicPoint | None = None,
    ) -> None: ...
    def add_output(
        self,
        arg: LogicalStore | LogicalStorePartition,
        projection: SymbolicPoint | None = None,
    ) -> None: ...
    def add_reduction(
        self,
        arg: LogicalStore | LogicalStorePartition,
        redop: int,
        projection: SymbolicPoint | None = None,
    ) -> None: ...
    def add_scalar_arg(
        self, value: Any, dtype: Type | tuple[Type, ...] | None = None
    ) -> None: ...
    def provenance(self) -> str: ...
    def set_concurrent(self, concurrent: bool) -> None: ...
    def set_side_effect(self, has_side_effect: bool) -> None: ...
    def throws_exception(self, exception_type: type) -> None: ...
    @property
    def exception_types(self) -> tuple[type, ...]: ...
    def add_communicator(self, name: str) -> None: ...
    def execute(self) -> None: ...
    def add_nccl_communicator(self) -> None: ...
    def add_cpu_communicator(self) -> None: ...
    def add_cal_communicator(self) -> None: ...
    @property
    def raw_handle(self) -> int: ...
