# SPDX-FileCopyrightText: Copyright (c) 2023-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0

import builtins
from collections.abc import Iterable
from dataclasses import dataclass
from typing import Any

from .mapping import TaskTarget

class EmptyMachineError(Exception): ...

@dataclass(frozen=True)
class ProcessorSlice:
    target: TaskTarget
    slice: slice

class ProcessorRange:
    @staticmethod
    def create(low: int, high: int, per_node_count: int) -> ProcessorRange: ...
    @staticmethod
    def create_empty() -> ProcessorRange: ...
    @property
    def low(self) -> int: ...
    @property
    def high(self) -> int: ...
    @property
    def per_node_count(self) -> int: ...
    @property
    def count(self) -> int: ...
    def __len__(self) -> int: ...
    @property
    def empty(self) -> bool: ...
    def slice(self, sl: slice) -> ProcessorRange: ...
    def __getitem__(self, key: int | builtins.slice) -> ProcessorRange: ...
    def get_node_range(self) -> tuple[int, ...]: ...
    def __and__(self, other: object) -> ProcessorRange: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...

class Machine:
    def __init__(
        self, ranges: dict[TaskTarget, ProcessorRange] | None = None
    ): ...
    @property
    def preferred_target(self) -> TaskTarget: ...
    def get_processor_range(
        self, target: TaskTarget | None = None
    ) -> ProcessorRange: ...
    def get_node_range(
        self, target: TaskTarget | None = None
    ) -> tuple[int, ...]: ...
    @property
    def valid_targets(self) -> tuple[int]: ...
    @property
    def empty(self) -> bool: ...
    def count(self, target: TaskTarget | None = None) -> int: ...
    def __len__(self) -> int: ...
    def only(self, targets: TaskTarget | Iterable[TaskTarget]) -> Machine: ...
    def slice(
        self, sl: slice, target: TaskTarget | None = None
    ) -> Machine: ...
    def __getitem__(
        self, slicer: TaskTarget | builtins.slice | int | ProcessorSlice
    ) -> Machine: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __and__(self, other: object) -> Machine: ...
    def __enter__(self) -> None: ...
    def __exit__(self, _: Any, __: Any, ___: Any) -> None: ...
