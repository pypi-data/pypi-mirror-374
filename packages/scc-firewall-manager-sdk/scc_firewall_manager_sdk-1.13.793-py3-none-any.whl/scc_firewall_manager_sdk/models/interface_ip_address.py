# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.13.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InterfaceIpAddress(BaseModel):
    """
    InterfaceIpAddress
    """ # noqa: E501
    ip_address: Optional[StrictStr] = Field(default=None, description="A unique network address assigned to a physical or logical port, enabling it to communicate on a specific network segment and enforce security policies for traffic traversing that interface.", alias="ipAddress")
    netmask: Optional[StrictStr] = Field(default=None, description="A 32-bit number that defines the network portion of the IP address, differentiating it from the host portion. It determines the size of the local network segment directly connected to that interface, allowing to identify which traffic belongs to its local network and which needs to be routed.")
    setroute: Optional[StrictBool] = Field(default=None, description="Indicates whether a default route using the gateway information provided by the DHCP server is created automatically. Essentially, the DHCP-assigned gateway is used as the next-hop for routing traffic")
    standby_ip_address: Optional[StrictStr] = Field(default=None, description="A secondary IP address configured on an interface, specifically for use in a high-availability (HA) pair. This address remains inactive on the standby unit until a failover occurs, at which point the standby assumes ownership of this IP address (along with the primary IP) to maintain network connectivity for devices.", alias="standbyIpAddress")
    __properties: ClassVar[List[str]] = ["ipAddress", "netmask", "setroute", "standbyIpAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceIpAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceIpAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipAddress": obj.get("ipAddress"),
            "netmask": obj.get("netmask"),
            "setroute": obj.get("setroute"),
            "standbyIpAddress": obj.get("standbyIpAddress")
        })
        return _obj


