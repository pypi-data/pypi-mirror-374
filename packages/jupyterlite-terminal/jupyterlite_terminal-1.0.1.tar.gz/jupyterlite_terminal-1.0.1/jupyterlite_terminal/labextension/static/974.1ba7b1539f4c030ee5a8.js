"use strict";(self.webpackChunk_jupyterlite_terminal=self.webpackChunk_jupyterlite_terminal||[]).push([[974],{1974:(e,t,n)=>{n.r(t),n.d(t,{ILiteTerminalAPIClient:()=>d,default:()=>g});var i=n(1436),s=n(3566),r=n(6234),a=n(5010),l=n(155),o=n(8397),c=n(2394);class h extends c.BaseShell{constructor(e){super(e)}initWorker(e){return console.log("Terminal create webworker"),new Worker(new URL(n.p+n.u(671),n.b),{type:void 0})}}class m{constructor(e={}){var t;this._externalCommands=[],this._shells=new Map,this.serverSettings=null!==(t=e.serverSettings)&&void 0!==t?t:s.ServerConnection.makeSettings(),this._shellManager=new c.ShellManager}set browsingContextId(e){console.log("LiteTerminalAPIClient browsingContextId",e),this._browsingContextId=e}async handleStdin(e){return await this._shellManager.handleStdin(e)}get isAvailable(){return"true"===String(o.PageConfig.getOption("terminalsAvailable")).toLowerCase()}async startNew(e){var t;const n=null!==(t=null==e?void 0:e.name)&&void 0!==t?t:this._nextAvailableName(),{baseUrl:i,wsUrl:s}=this.serverSettings,r=new h({mountpoint:"/drive",baseUrl:i,wasmBaseUrl:o.URLExt.join(i,"extensions/@jupyterlite/terminal/static/wasm/"),browsingContextId:this._browsingContextId,aliases:this._aliases,environment:this._environment,externalCommands:this._externalCommands,shellId:n,shellManager:this._shellManager,outputCallback:e=>{var t;const n=JSON.stringify(["stdout",e]);null===(t=r.socket)||void 0===t||t.send(n)}});this._shells.set(n,r);const a=o.URLExt.join(s,"terminals","websocket",n),c=new l.Server(a);return c.on("connection",e=>{(async(e,t)=>{e.socket=t,t.on("message",async t=>{const n=JSON.parse(t),i=n[0],s=n.slice(1);if(await e.ready,"stdin"===i)await e.input(s[0]);else if("set_size"===i){const t=s[0],n=s[1];await e.setSize(t,n)}});const n=JSON.stringify(["setup"]);console.log("Terminal returning handshake via socket"),t.send(n),e.start()})(r,e)}),r.disposed.connect(()=>{this.shutdown(n),c.close()}),{name:n}}async listRunning(){return this._models}registerAlias(e,t){void 0===this._aliases&&(this._aliases={}),this._aliases[e]=t}registerEnvironmentVariable(e,t){void 0===this._environment&&(this._environment={}),this._environment[e]=t}registerExternalCommand(e){this._externalCommands.push(e)}async shutdown(e){var t,n;const i=this._shells.get(e);void 0!==i&&(null===(t=i.socket)||void 0===t||t.send(JSON.stringify(["disconnect"])),null===(n=i.socket)||void 0===n||n.close(),this._shells.delete(e),i.dispose())}themeChange(e){for(const e of this._shells.values())e.themeChange()}get _models(){return Array.from(this._shells.keys(),e=>({name:e}))}_nextAvailableName(){for(let e=1;;++e){const t=`${e}`;if(!this._shells.has(t))return t}}}const d=new(n(7262).Token)("@jupyterlite/terminal:client"),g=[{id:"@jupyterlite/terminal:client",description:"The client for Lite terminals",autoStart:!0,provides:d,optional:[s.IServerSettings],activate:(e,t)=>new m({serverSettings:{...s.ServerConnection.makeSettings(),...t,WebSocket:l.WebSocket}})},{id:"@jupyterlite/terminal:manager",description:"A JupyterLite extension providing a custom terminal manager",autoStart:!0,provides:s.ITerminalManager,requires:[d],activate:(e,t)=>(console.log("JupyterLite extension @jupyterlite/terminal:manager activated"),new s.TerminalManager({terminalAPIClient:t,serverSettings:t.serverSettings}))},{id:"@jupyterlite/terminal:service-worker",autoStart:!0,requires:[d],optional:[r.IServiceWorkerManager],activate:(e,t,n)=>{void 0!==n?(t.browsingContextId=n.browsingContextId,n.registerStdinHandler("terminal",t.handleStdin.bind(t))):console.warn("Service worker is not available for terminals")}},{id:"@jupyterlite/terminal:theme-change",autoStart:!0,requires:[d,a.ISettingRegistry],optional:[i.IThemeManager],activate:(e,t,n,i)=>{let s;null==i||i.themeChanged.connect(async(e,n)=>{if("inherit"===s){const e=!i.isLight(n.newValue);t.themeChange(e)}}),n.load("@jupyterlab/terminal-extension:plugin").then(e=>{s=e.composite.theme,e.changed.connect(()=>{const n=e.composite.theme;n!==s&&(t.themeChange(),s=n)})})}}]}}]);