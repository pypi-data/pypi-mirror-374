#!/usr/bin/env python3
"""
Main robot node for the {project_name} project.
"""

import asyncio
import time
import math
from datetime import datetime

from tide.core.node import BaseNode
from tide.models.common import Twist2D, Pose2D
from tide.models.serialization import to_zenoh_value, from_zenoh_value
from tide import CmdTopic, StateTopic


class RobotNode(BaseNode):
    """
    Main robot control node.
    """
    ROBOT_ID = "{robot_id}"  # Robot's unique ID
    GROUP = "control"    # Group for this node's topics
    
    def __init__(self, *, config=None):
        super().__init__(config=config)
        
        # State variables
        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0
        
        self.linear_vel = 0.0
        self.angular_vel = 0.0
        
        self.last_update = time.time()
        
        # Subscribe to command velocity
        self.subscribe(CmdTopic.TWIST.value, self._on_cmd_vel)
        
        print(f"RobotNode started for robot {{self.ROBOT_ID}}")
    
    def _on_cmd_vel(self, data):
        """Handle incoming command velocity messages."""
        try:
            # Convert from Zenoh data to Twist2D
            cmd = from_zenoh_value(data, Twist2D)
            
            # Extract linear and angular velocity
            self.linear_vel = cmd.linear.x
            self.angular_vel = cmd.angular
            
            print(f"Received command: linear={{self.linear_vel}}, angular={{self.angular_vel}}")
        except Exception as e:
            print(f"Error processing command: {{e}}")
    
    async def step(self):
        """Main processing loop, called at the node's update rate."""
        # Calculate time delta for integration
        now = time.time()
        dt = now - self.last_update
        self.last_update = now
        
        # Simple motion model - integrate velocity
        self.theta += self.angular_vel * dt
        self.x += self.linear_vel * math.cos(self.theta) * dt
        self.y += self.linear_vel * math.sin(self.theta) * dt
        
        # Publish the current pose
        pose = Pose2D(x=self.x, y=self.y, theta=self.theta)
        await self.put(StateTopic.POSE2D.value, to_zenoh_value(pose))
