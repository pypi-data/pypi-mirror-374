name: Publish to PyPI

on:
  push:
    branches:
      - master

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --dev
        
      - name: Check if version already published
        id: version-check
        run: |
          PACKAGE_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          PACKAGE_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

          # Check if version exists using JSON output for exact matching
          if pip index versions "$PACKAGE_NAME" --json 2>/dev/null | jq -e --arg version "$PACKAGE_VERSION" '.versions | index($version) != null' > /dev/null; then
            echo "Version $PACKAGE_VERSION already published, skipping..."
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION not published, proceeding..."
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.version-check.outputs.skip == 'false'
        run: uv build

      - name: Publish to PyPI with trusted publishing
        if: steps.version-check.outputs.skip == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create git tag
        if: steps.version-check.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version-check.outputs.version }}" -m "Release v${{ steps.version-check.outputs.version }}"
          git push origin "v${{ steps.version-check.outputs.version }}"
