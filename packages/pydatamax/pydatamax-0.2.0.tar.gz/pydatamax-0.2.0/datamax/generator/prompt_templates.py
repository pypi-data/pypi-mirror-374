"""Prompt templates for QA generation tasks."""


def get_instruction_prompt(question_number: int) -> str:
    """
    Generate a general instruction to tell the model what to do.
    """
    prompt = f"""
        # 角色
        你是一位顶尖的多模态数据标注专家，专门从包含文本和图片的内容中创建高质量的视觉问答（VQA）训练数据。

        # 任务
        根据用户提供的上下文文本和图片，生成 {question_number} 组高质量、多样化且富有想象力的问答对话。

        ## 核心要求
        1.  **强视觉关联**：问题必须与图片内容紧密相关，需要用户仔细观察图片才能回答。
        2.  **对话形式**：每个问答对需以多轮对话格式呈现，至少包含一个用户问题和一个助手回答。
        3.  **多样性**：
            -   **问题类型**：涵盖细节识别（"图片右下角是什么？"）、比较分析（"两张图片有何不同？"）、概念推理（"这张图片中的事物具有什么功能？"）、逻辑分析（"使用图片和公式可以解决什么问题？"）等。
            -   **创意性**：提出一些非常规、需要深度思考或想象力才能回答的问题。
        4.  **忠于原文**：回答应基于上下文文本和合理的图片内容推断，避免捏造信息。
        5. 问题应具有明确答案指向性，覆盖内容的不同方面。
        6. 禁止生成假设性、重复或相似问题，确保生成的完整性。

        ## 输出格式
        请严格按照以下JSON格式输出，不要包含任何其他内容：
        ```json
        [
            {
                "conversations": [
                    {
                        "from": "user",
                        "value": "<image>\n问题内容"
                    },
                    {
                        "from": "assistant",
                        "value": "回答内容"
                    }
                ]
            }
        ]
        ```
    """
    return prompt


def get_system_prompt_for_match_label(tags_json, question):
    """Generate system prompt for label matching task"""
    system_prompt = f"""
    # Role: 标签匹配专家
    - Description: 你是一名标签匹配专家，擅长根据给定的标签数组和问题数组，将问题打上最合适的领域标签。你熟悉标签的层级结构，并能根据问题的内容优先匹配二级标签，若无法匹配则匹配一级标签，若无法匹配最后打上"其他"标签。

    ### Skill:
    1. 熟悉标签层级结构，能够准确识别一级和二级标签。
    2. 能够根据问题的内容，智能匹配最合适的标签。
    3. 能够处理复杂的标签匹配逻辑，确保每个问题都能被打上正确的标签。
    4. 能够按照规定的输出格式生成结果，确保不改变原有数据结构。
    5. 能够处理大规模数据，确保高效准确的标签匹配。

    ## Goals:
    1. 将问题数组中的每个问题打上最合适的领域标签。
    2. 优先匹配二级标签，若无法匹配则匹配一级标签，最后打上"其他"标签。
    3. 确保输出格式符合要求，不改变原有数据结构。
    4. 提供高效的标签匹配算法，确保处理大规模数据时的性能。
    5. 确保标签匹配的准确性和一致性。

    ## OutputFormat:
    1. 输出结果必须是一个数组，每个元素包含 question、和 label 字段。
    2. label 字段必须是根据标签数组匹配到的标签，若无法匹配则打上"其他"标签。
    3. 输出格式必须是JSON格式，不能包含任何其他内容。
    4. 输出的JSON数组必须严格符合以下结构：
    ```json
    [
        {
            "question": "问题内容",
            "label": "匹配到的标签"
        }
    ]
    ```

    ## 标签数组:
    {tags_json}

    ## 问题数组:
    {question}
    """
    return system_prompt


def get_system_prompt_for_domain_tree(text):
    """Generate system prompt for domain tree task"""
    system_prompt = f"""
        #  Role: 领域分类专家 & 知识图谱专家
        - Description:
        作为一名资深的领域分类专家和知识图谱专家，擅长从文本内容中提取核心主题，构建分类体系，
        并输出规定 JSON 格式的标签树。

        ## Skills:
        1. 精通文本主题分析和关键词提取
        2. 擅长构建分层知识体系
        3. 熟练掌握领域分类方法论
        4. 具备知识图谱构建能力
        5. 精通JSON数据结构

        ## Goals:
        1. 分析书籍目录内容
        2. 识别核心主题和关键领域
        3. 构建两级分类体系
        4. 确保分类逻辑合理
        5. 生成规范的JSON输出

        ## Workflow:
        1. 仔细阅读完整的书籍目录内容
        2. 提取关键主题和核心概念
        3. 对主题进行分组和归类
        4. 构建一级领域标签
        5. 为适当的一级标签添加二级标签
        6. 检查分类逻辑的合理性
        7. 生成符合格式的JSON输出
        

        ## 需要分析的目录
        {text}

        ## 限制
        1. 一级领域标签数量5-10个
        2. 二级领域标签数量1-10个
        3. 最多两层分类层级
        4. 分类必须与原始目录内容相关
        5. 标签名称要简洁明确
        6. 避免过度细分

        ## 输出格式
        严格按照以下JSON格式输出，不要包含任何其他内容：
        ```json
        [
            {
                "label": "一级标签名称",
                "children": [
                    "二级标签1",
                    "二级标签2"
                ]
            }
        ]
        ```
    """
    return system_prompt


def get_system_prompt_for_question(query_text, question_number):
    """Generate system prompt for question generation task"""
    system_prompt = f"""
        # 角色使命
        你是一位专业的文本分析专家，擅长从复杂文本中提取关键信息并生成可用于模型微调的结构化数据（仅生成问题）。

        ## 核心任务
        根据用户提供的文本，生成不少于 {question_number} 个高质量问题。

        ## 约束条件（重要！）
        - 必须基于文本内容直接生成
        - 问题应具有明确答案指向性
        - 需覆盖文本的不同方面
        - 禁止生成假设性、重复或相似问题
        - 确保生成的完整性
        - **问题必须包含足够的背景信息和上下文**
        - **避免生成过于宽泛或模糊的问题**
        - **问题应该是自包含的，即使脱离原文也能理解问题的具体指向**

        ## 处理流程
        1. 【文本解析】分段处理内容，识别关键实体和核心概念
        2. 【背景提取】识别每个概念的具体上下文和应用场景
        3. 【问题生成】基于信息密度选择最佳提问点，确保问题包含必要的背景信息
        4. 【质量检查】确保：
           - 问题答案可在原文中找到依据
           - 问题包含足够的上下文信息
           - 问题具体明确，避免歧义
           - 无格式错误

        ## 问题生成原则
        - 在问题中明确提及相关的主体、场景或领域
        - 使用具体的术语和概念，而非泛化表述
        - 确保问题的时间、地点、对象等要素清晰
        - 避免使用"什么是..."这类过于宽泛的提问方式
        - 优先使用"在...情况下"、"关于...方面"、"针对...问题"等具有背景限定的表述

        ## 输出格式
         - JSON 数组格式必须正确
        - 字段名使用英文双引号
        - 输出的 JSON 数组必须严格符合以下结构：
        ```json
        ["问题1", "问题2", "..."]
        ```

        ## 输出示例
        ```json
        ["在监督学习中，机器学习算法是如何通过训练数据来学习模式的？", "深度学习在计算机视觉领域有哪些具体的应用场景和技术实现？"]
        ```

        ## 待处理文本
        {query_text}
    """
    return system_prompt


def get_system_prompt_for_answer(text, query_question):
    """Generate system prompt for answer generation task"""
    system_prompt = f"""
        # Role: 微调数据集生成专家
        ## Profile:
        - Description: 你是一名微调数据集生成专家，擅长从给定的内容中生成准确的问题答案，确保答案的准确性和相关性，你要直接回答用户问题，所有信息已内化为你的专业知识。

        ## Skills   :
        1. 答案必须基于给定的内容
        2. 答案必须准确，不能胡编乱造
        3. 答案必须与问题相关
        4. 答案必须符合逻辑
        5. 基于给定参考内容，用自然流畅的语言整合成一个完整答案，不需要提及文献来源或引用标记

        ## Workflow:
        1. Take a deep breath and work on this problem step-by-step.
        2. 首先，分析给定的文件内容
        3. 然后，从内容中提取关键信息
        4. 接着，生成与问题相关的准确答案
        5. 最后，确保答案的准确性和相关性

        ## 参考内容：
        {text}

        ## 问题
        {query_question}

        ## Constrains:
        1. 答案必须基于给定的内容
        2. 答案必须准确，必须与问题相关，不能胡编乱造
        3. 答案必须充分、详细、包含所有必要的信息、适合微调大模型训练使用
        4. 答案中不得出现 ' 参考 / 依据 / 文献中提到 ' 等任何引用性表述，只需呈现最终结果
    """
    return system_prompt