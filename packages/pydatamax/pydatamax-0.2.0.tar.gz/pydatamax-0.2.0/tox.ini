[tox]
minversion = 4.0
envlist = 
    py{310,311,312}
    lint
    type
    security
    docs
    coverage
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps = 
    -r{toxinidir}/test-requirements.txt
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
commands =
    pytest {posargs:tests/} \
        --cov=datamax \
        --cov=pydatamax \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage-{envname}.xml \
        --cov-report=html:{toxworkdir}/htmlcov-{envname} \
        --junit-xml={toxworkdir}/junit-{envname}.xml \
        --tb=short \
        -v

[testenv:lint]
deps =
    flake8>=5.0.0
    flake8-docstrings>=1.7.0
    flake8-bugbear>=23.0.0
    flake8-comprehensions>=3.12.0
    flake8-simplify>=0.20.0
    flake8-bandit>=4.1.0
    black>=22.0.0
    isort>=5.10.0
commands =
    flake8 datamax pydatamax tests
    black --check --diff datamax pydatamax tests
    isort --check-only --diff datamax pydatamax tests

[testenv:format]
deps =
    black>=22.0.0
    isort>=5.10.0
    autoflake>=2.1.0
commands =
    autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive datamax pydatamax tests
    isort datamax pydatamax tests
    black datamax pydatamax tests

[testenv:type]
deps =
    mypy>=1.0.0
    types-requests>=2.31.0
    types-python-dateutil>=2.8.0
    types-PyYAML>=6.0.0
    types-setuptools>=68.0.0
commands =
    mypy datamax pydatamax --ignore-missing-imports

[testenv:security]
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r datamax pydatamax -f json -o {toxworkdir}/bandit-report.json
    bandit -r datamax pydatamax
    safety check --json --output {toxworkdir}/safety-report.json
    safety check

[testenv:docs]
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.2.0
    myst-parser>=0.18.0
    sphinx-autodoc-typehints>=1.19.0
commands =
    sphinx-build -W -b html docs {toxworkdir}/docs_out

[testenv:coverage]
deps =
    coverage>=7.2.0
    -r{toxinidir}/test-requirements.txt
commands =
    coverage erase
    pytest tests/ \
        --cov=datamax \
        --cov=pydatamax \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage.xml \
        --cov-report=html:{toxworkdir}/htmlcov \
        --cov-fail-under=80
    coverage report --show-missing
    coverage html

[testenv:build]
deps =
    build>=0.10.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*

[testenv:clean]
deps = coverage
commands = coverage erase
skip_install = true

[testenv:integration]
deps = 
    -r{toxinidir}/test-requirements.txt
setenv =
    PYTHONPATH = {toxinidir}
commands =
    pytest tests/ -m integration -v

[testenv:unit]
deps = 
    -r{toxinidir}/test-requirements.txt
setenv =
    PYTHONPATH = {toxinidir}
commands =
    pytest tests/ -m "not integration and not network" -v

[testenv:network]
deps = 
    -r{toxinidir}/test-requirements.txt
setenv =
    PYTHONPATH = {toxinidir}
commands =
    pytest tests/ -m network -v

[testenv:benchmark]
deps = 
    -r{toxinidir}/test-requirements.txt
    pytest-benchmark>=4.0.0
commands =
    pytest tests/ -m benchmark --benchmark-only

# Flake8 configuration
[flake8]
max-line-length = 88
max-complexity = 10
select = E,W,F,C,B
ignore =
    E203,  # whitespace before ':'
    E501,  # line too long
    W503,  # line break before binary operator
    F401,  # imported but unused
    E402   # module level import not at top of file
exclude =
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv,
    env,
    .env,
    node_modules,
    .mypy_cache,
    .pytest_cache,
    .coverage,
    htmlcov,
    .tasks
per-file-ignores =
    __init__.py:F401
    tests/*:F401,F811,E501
    setup.py:E501

# Coverage configuration
[coverage:run]
source = datamax,pydatamax
omit =
    */tests/*
    */test_*
    setup.py
    */venv/*
    */virtualenv/*
    */.tox/*
    */site-packages/*
branch = true
parallel = true

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
ignore_errors = true
show_missing = true
skip_covered = false
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml