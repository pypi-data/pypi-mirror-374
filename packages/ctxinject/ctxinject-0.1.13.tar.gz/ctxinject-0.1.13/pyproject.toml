[project]
name = "ctxinject"
version = "0.1.13"
description = "Context-based dependency injection for Python"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["DI", "context", "async"]
authors = [
    { name = "rodbell", email = "bellirodrigo2@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",  
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

# Core dependencies (always required)
dependencies = [
    "typemapping>=0.1.7",
    "typing-extensions>=4.0.0",
    "orjson>=3.8.0",
    "python-dateutil>=2.8.0",
    "anyio>=3.0.0"
]

[project.optional-dependencies]
# Development dependencies (includes pydantic for 100% test coverage)
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=5.0.0",
    "ruff>=0.11.10",
    "twine",
    "build",
    "pydantic>=2.0.0",  # For full test coverage
    "pydantic[email]>=2.0.0",
    "requests"
]

# Enhanced validation with Pydantic (optional for end users)
pydantic = [
    "pydantic>=2.0.0",
    "pydantic[email]>=2.0.0"
]

full = ["ctxinject[dev,pydantic]"]


# ============================================================================
# BUILD
# ============================================================================


[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["ctxinject*"]

[tool.setuptools.package-data]
typemapping = ["py.typed"]

# ============================================================================
# TESTING WITH PYTEST
# ============================================================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config", 
    "--color=yes",
    "--durations=10",
    "--cov=ctxinject",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests that test individual components in isolation",
    "integration: Integration tests that test component interactions", 
    "async_test: Tests that involve async functionality",
    "slow: Tests that take longer to run (>1 second)",
    "performance: Performance and benchmarking tests",
    "pydantic: Tests that specifically test pydantic features",
]
asyncio_mode = "auto"
minversion = "6.0"
timeout = 300
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# CODE COVERAGE
# ============================================================================

[tool.coverage.run]
source = ["ctxinject"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/mypy_injectable_plugin.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# CODE FORMATTING WITH BLACK
# ============================================================================

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# ============================================================================
# IMPORT SORTING WITH ISORT
# ============================================================================

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
known_first_party = ["ctxinject"]
known_third_party = ["typemapping", "pytest", "pydantic", "orjson", "dateutil"]
src_paths = ["ctxinject", "tests"]

# ============================================================================
# LINTING WITH FLAKE8 (configured here for reference, uses setup.cfg)
# ============================================================================

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build", 
    "dist",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]
max-complexity = 10
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]