[build-system]
requires = ["setuptools>=77", "setuptools-rust", "setuptools-scm>=8.1"]
build-backend = "setuptools.build_meta"

[project]
name = "bermuda"
dynamic = [
    "version",
]
description = "Spatial algorithms for napari project, compiled for performance"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "numpy>=1.22.2",
]
license = " BSD-3-Clause"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
"Bug Tracker" = "https://github.com/napari/bermuda/issues"
Documentation = "https://github.com/napari/bermuda/blob/main/README.md"
"Source Code" = "https://github.com/napari/bermuda"

[tool.setuptools_scm]
write_to = "python/bermuda/_version.py"

[tool.setuptools.packages]
# Pure Python packages/modules
find = { where = ["python"] }

[[tool.setuptools-rust.ext-modules]]
target="bermuda._bermuda"
path="crates/bermuda/Cargo.toml"

[dependency-groups]
test = [
    "pytest>=8.3.4",
]
dev = [
    "ipython>=8.18.1",
    {include-group = "test"},
    "napari>=0.5.6",
    "pyqt6>=6.9.1",
]

[tool.uv]
cache-keys = [{ file = "pyproject.toml" }, { file = "**/*.rs" }]

[tool.ruff]
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*vendored*",
    "*_vendor*",
]

fix = true

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TC", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specyfic rules
    "NPY201", # checks compatibility with numpy version 2.0
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "SLOT", # flake8-slots
    "PT", # flake8-pytest-style
    "T20", # flake8-print
]
ignore = [
    "E501", "TC001", "TC002", "TC003",
    "A003", # flake8-builtins - we have class attributes violating these rule
    "COM812", # flake8-commas - we don't like adding comma on single line of arguments
    "COM819", # conflicts with ruff-format
    "SIM117", # flake8-simplify - we some of merged with statements are not looking great with black, reanble after drop python 3.9
    "RET504", # not fixed yet https://github.com/charliermarsh/ruff/issues/2950
    "TRY003", # require implement multiple exception class
    "RUF005", # problem with numpy compatybility, see https://github.com/charliermarsh/ruff/issues/2142#issuecomment-1451038741
    "B028", # need to be fixed
    "PYI015", # it produces bad looking files (@jni opinion)
    "W191", "Q000", "Q001", "Q002", "Q003", "ISC001", # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["B011", "INP001", "TRY301", "B018", "RUF012"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party=['napari']
combine-as-imports = true


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-groups = ["test"]
enable = ["pypy", "cpython-freethreading"]
build = "*64"

[tool.cibuildwheel.linux]
before-all = [
    "curl https://sh.rustup.rs -sSf | sh -s -- -y",
    "VERSION=$(grep '^channel' rust-toolchain.toml | cut -d '\"' -f2) && rustup toolchain install $VERSION && rustup override set $VERSION",
    "rustup show"
]
environment = { PATH="$HOME/.cargo/bin:$PATH" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET="10.12"}

[tool.cibuildwheel.windows]
skip = ["cp39*arm64", "cp310*arm64"]

[[tool.cibuildwheel.overrides]]
select = "*-macosx*arm64"
environment = { MACOSX_DEPLOYMENT_TARGET="11.0"}

[[tool.cibuildwheel.overrides]]
select = "*cp31{2,3}*macosx*x86_64*"
environment = { MACOSX_DEPLOYMENT_TARGET="10.13"}

[[tool.cibuildwheel.overrides]]
select = "*cp31{4,5,6,7}*macosx*x86_64*"
environment = { MACOSX_DEPLOYMENT_TARGET="10.15"}

[[tool.cibuildwheel.overrides]]
select = "*pp31*macosx*x86_64*"
environment = { MACOSX_DEPLOYMENT_TARGET="10.15"}
