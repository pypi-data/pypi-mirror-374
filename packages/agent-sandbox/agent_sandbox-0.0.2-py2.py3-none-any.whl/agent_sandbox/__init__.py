# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Annotations,
        AnnotationsAudienceItem,
        AudioContent,
        BlobResourceContents,
        Button,
        CallToolResult,
        CallToolResultContentItem,
        CallToolResultContentItem_Audio,
        CallToolResultContentItem_Image,
        CallToolResultContentItem_Resource,
        CallToolResultContentItem_ResourceLink,
        CallToolResultContentItem_Text,
        ClickAction,
        DoubleClickAction,
        DragToAction,
        EmbeddedResource,
        HotkeyAction,
        HttpValidationError,
        ImageContent,
        KeyDownAction,
        KeyUpAction,
        ListToolsResult,
        MouseDownAction,
        MouseUpAction,
        MoveToAction,
        PingBody,
        PressAction,
        Resolution,
        Resource,
        ResourceLink,
        Response,
        ResponseCallToolResult,
        ResponseListStr,
        ResponseListToolsResult,
        RightClickAction,
        ScrollAction,
        TextContent,
        TextResourceContents,
        Tool,
        ToolAnnotations,
        TypingAction,
        ValidationError,
        ValidationErrorLocItem,
    )
    from .errors import UnprocessableEntityError
    from . import browser, file, jupyter, mcp, nodejs, sandbox, shell
    from .browser import (
        Action,
        Action_Click,
        Action_DoubleClick,
        Action_DragTo,
        Action_Hotkey,
        Action_KeyDown,
        Action_KeyUp,
        Action_MouseDown,
        Action_MouseUp,
        Action_MoveTo,
        Action_Press,
        Action_RightClick,
        Action_Scroll,
        Action_Typing,
    )
    from .client import AsyncSandbox, Sandbox
    from .file import Command
_dynamic_imports: typing.Dict[str, str] = {
    "Action": ".browser",
    "Action_Click": ".browser",
    "Action_DoubleClick": ".browser",
    "Action_DragTo": ".browser",
    "Action_Hotkey": ".browser",
    "Action_KeyDown": ".browser",
    "Action_KeyUp": ".browser",
    "Action_MouseDown": ".browser",
    "Action_MouseUp": ".browser",
    "Action_MoveTo": ".browser",
    "Action_Press": ".browser",
    "Action_RightClick": ".browser",
    "Action_Scroll": ".browser",
    "Action_Typing": ".browser",
    "Annotations": ".types",
    "AnnotationsAudienceItem": ".types",
    "AsyncSandbox": ".client",
    "AudioContent": ".types",
    "BlobResourceContents": ".types",
    "Button": ".types",
    "CallToolResult": ".types",
    "CallToolResultContentItem": ".types",
    "CallToolResultContentItem_Audio": ".types",
    "CallToolResultContentItem_Image": ".types",
    "CallToolResultContentItem_Resource": ".types",
    "CallToolResultContentItem_ResourceLink": ".types",
    "CallToolResultContentItem_Text": ".types",
    "ClickAction": ".types",
    "Command": ".file",
    "DoubleClickAction": ".types",
    "DragToAction": ".types",
    "EmbeddedResource": ".types",
    "HotkeyAction": ".types",
    "HttpValidationError": ".types",
    "ImageContent": ".types",
    "KeyDownAction": ".types",
    "KeyUpAction": ".types",
    "ListToolsResult": ".types",
    "MouseDownAction": ".types",
    "MouseUpAction": ".types",
    "MoveToAction": ".types",
    "PingBody": ".types",
    "PressAction": ".types",
    "Resolution": ".types",
    "Resource": ".types",
    "ResourceLink": ".types",
    "Response": ".types",
    "ResponseCallToolResult": ".types",
    "ResponseListStr": ".types",
    "ResponseListToolsResult": ".types",
    "RightClickAction": ".types",
    "Sandbox": ".client",
    "ScrollAction": ".types",
    "TextContent": ".types",
    "TextResourceContents": ".types",
    "Tool": ".types",
    "ToolAnnotations": ".types",
    "TypingAction": ".types",
    "UnprocessableEntityError": ".errors",
    "ValidationError": ".types",
    "ValidationErrorLocItem": ".types",
    "browser": ".",
    "file": ".",
    "jupyter": ".",
    "mcp": ".",
    "nodejs": ".",
    "sandbox": ".",
    "shell": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Action",
    "Action_Click",
    "Action_DoubleClick",
    "Action_DragTo",
    "Action_Hotkey",
    "Action_KeyDown",
    "Action_KeyUp",
    "Action_MouseDown",
    "Action_MouseUp",
    "Action_MoveTo",
    "Action_Press",
    "Action_RightClick",
    "Action_Scroll",
    "Action_Typing",
    "Annotations",
    "AnnotationsAudienceItem",
    "AsyncSandbox",
    "AudioContent",
    "BlobResourceContents",
    "Button",
    "CallToolResult",
    "CallToolResultContentItem",
    "CallToolResultContentItem_Audio",
    "CallToolResultContentItem_Image",
    "CallToolResultContentItem_Resource",
    "CallToolResultContentItem_ResourceLink",
    "CallToolResultContentItem_Text",
    "ClickAction",
    "Command",
    "DoubleClickAction",
    "DragToAction",
    "EmbeddedResource",
    "HotkeyAction",
    "HttpValidationError",
    "ImageContent",
    "KeyDownAction",
    "KeyUpAction",
    "ListToolsResult",
    "MouseDownAction",
    "MouseUpAction",
    "MoveToAction",
    "PingBody",
    "PressAction",
    "Resolution",
    "Resource",
    "ResourceLink",
    "Response",
    "ResponseCallToolResult",
    "ResponseListStr",
    "ResponseListToolsResult",
    "RightClickAction",
    "Sandbox",
    "ScrollAction",
    "TextContent",
    "TextResourceContents",
    "Tool",
    "ToolAnnotations",
    "TypingAction",
    "UnprocessableEntityError",
    "ValidationError",
    "ValidationErrorLocItem",
    "browser",
    "file",
    "jupyter",
    "mcp",
    "nodejs",
    "sandbox",
    "shell",
]
