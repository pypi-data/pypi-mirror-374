import sys
import click

from tai_sql import pm as sqlpm
from tai_sql.generators import BaseGenerator
from tai_api import pm, AuthConfig, AuthType
from tai_api.generators import AuthDatabaseGenerator, MainFileGenerator

from .database import rundbconfig

@click.command()
def set_auth():
    """Genera recursos para la seguridad de la API"""
    
    click.echo("üîê Configuraci√≥n de Autenticaci√≥n - tai-api")
    click.echo("=" * 50)
    
    # Verificar configuraci√≥n de tai-api
    config = pm.get_project_config()
    if not config:
        click.echo("‚ùå No se encontr√≥ la configuraci√≥n del proyecto tai-api.", err=True)
        click.echo("   Aseg√∫rate de haber inicializado el proyecto con tai-api init.", err=True)
        sys.exit(1)
    
    # Seleccionar tipo de autenticaci√≥n
    click.echo("\nüìã Selecciona el tipo de autenticaci√≥n:")
    click.echo("   1. Database - Autenticaci√≥n basada en base de datos")
    click.echo("   2. Keycloak - Autenticaci√≥n con Keycloak (pr√≥ximamente)")
    
    while True:
        choice = click.prompt(
            "\nüî¢ Selecciona una opci√≥n (1 o 2)", 
            type=int,
            show_default=False
        )
        
        if choice == 1:
            click.echo("‚úÖ Has seleccionado: Database")
            auth_type = "database"
            break
        elif choice == 2:
            click.echo("‚úÖ Has seleccionado: Keycloak")
            auth_type = "keycloak"
            break
        else:
            click.echo("‚ùå Opci√≥n no v√°lida. Por favor selecciona 1 o 2.")
    
    if auth_type == "database":

        # Verificar configuraci√≥n de tai-sql
        sqlconfig = sqlpm.get_project_config()
        if not sqlconfig:
            click.echo("‚ùå No se encontr√≥ la configuraci√≥n de tai-sql.", err=True)
            click.echo("   Aseg√∫rate de haber inicializado el proyecto con tai-sql init.", err=True)
            sys.exit(1)
        
        # Establecer esquema por defecto si existe
        if sqlconfig.default_schema:
            sqlpm.set_current_schema(sqlconfig.default_schema)
        
        # Verificar que existe informaci√≥n de la base de datos
        if not sqlpm.db or not sqlpm.db.tables:
            click.echo("‚ùå No se encontr√≥ informaci√≥n de tablas en la base de datos.", err=True)
            sys.exit(1)

        # Obtener configuraci√≥n de la base de datos
        db_auth_config = rundbconfig()
        
        # Crear configuraci√≥n de autenticaci√≥n
        auth_config = AuthConfig(
            type=AuthType.DATABASE,
            config=db_auth_config
        )
        
        # Guardar en la configuraci√≥n del proyecto
        try:
            pm.update_auth_config(auth_config)
        except ValueError as e:
            click.echo(f"‚ùå Error al guardar la configuraci√≥n: {e}", err=True)
            sys.exit(1)
        
        # Mostrar mensaje de configuraci√≥n
        click.echo("\n‚öôÔ∏è  Configuraci√≥n de autenticaci√≥n...")
        click.echo("-" * 40)
        click.echo(f"üìù Configuraci√≥n seleccionada: database")
        click.echo(f"   ‚Ä¢ Tabla: {db_auth_config.table_name}")
        click.echo(f"   ‚Ä¢ Campo username: {db_auth_config.username_field}")
        click.echo(f"   ‚Ä¢ Campo password: {db_auth_config.password_field}")
        
        if db_auth_config.has_session_management:
            click.echo(f"   ‚Ä¢ Campo session_id: {db_auth_config.session_id_field}")
            click.echo("   ‚Ä¢ ‚úÖ Manejo de sesiones concurrentes habilitado")
        else:
            click.echo("   ‚Ä¢ ‚ùå Manejo de sesiones concurrentes deshabilitado")
            click.echo("")
        
        auth_generator = AuthDatabaseGenerator(output_dir=pm.config.auth_namespace.as_posix())
        main_file_generator = MainFileGenerator(
            output_dir=pm.config.main_namespace.as_posix()
        )

        generators: list[BaseGenerator] = [auth_generator, main_file_generator]

        for generator in generators:

            generator_name = generator.__class__.__name__
            click.echo(f"Ejecutando: {click.style(generator_name, bold=True)}")
                
            # El generador se encargar√° de descubrir los modelos internamente
            result = generator.generate()
            
            click.echo(f"‚úÖ Generador {generator_name} completado con √©xito.")
            if result:
                click.echo(f"   Recursos en: {result}")
            click.echo("")
            
    elif auth_type == "keycloak":
        click.echo("üöß Esta opci√≥n est√° en desarrollo y se implementar√° en futuras versiones.")
        click.echo("   Por ahora, puedes usar la opci√≥n 'Database'.")
        # Aqu√≠ podr√≠as llamar a una funci√≥n para configurar Keycloak si estuviera implementada
        sys.exit(0)
    else:
        click.echo("‚ùå Opci√≥n no v√°lida.", err=True)
        sys.exit(1)
