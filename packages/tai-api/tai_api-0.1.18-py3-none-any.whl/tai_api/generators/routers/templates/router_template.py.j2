{#- Template Jinja2 para generar routers de FastAPI -#}
{#- Este template genera endpoints CRUD completos para cada tabla -#}
{#- Confia en los manejadores globales de excepciones para el manejo de errores -#}
{{ imports|join('\n') }}

{% set router_name = model.tablename + "_router" %}
{% set pk_path_params = "/{" + (model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | list | zip(model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='type') | map('replace', 'datetime', 'str') | map('replace', 'time', 'str') | map('replace', 'date', 'str') | list) | map('join', ':') | join('}/{')) + "}" %}
{% import "macros.j2" as macros %}
{% set zip = zip %}

logger = Alphi.get_logger_by_name("tai-api")

{{ router_name }} = APIRouter(
    prefix="/{{ model.tablename | replace('_', '-') }}",
    tags=["{{ model.name }}"]
)

@{{ router_name }}.get("", 
    response_model=APIResponse[List[{{ model.name }}Read]],
    response_description="Lista de registros de {{ model.tablename }} obtenido exitosamente",
    operation_id="{{ model.tablename }}_find_many",
    summary="Busca varios registros en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "Lista de registros de {{ model.tablename }} obtenido exitosamente",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/APIResponse_List_{{ model.name }}Read__"
                    }
                }
            },
            "links": {{ macros.generate_find_many_links(model) | indent(12) }}
        },
        422: {
            "description": "Error de validación en parámetros",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "El límite no puede ser negativo",
                                "field": "limit",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
@document_paginated_response(
    success_description="{{ model.name }}s obtenidos exitosamente",
    data_description="Lista de objetos {{ model.name }} con toda la información registrada. Cada elemento contiene la estructura completa del modelo {{ model.name }}Read con todos sus campos documentados."
)
async def {{ model.tablename }}_find_many(
    {{ macros.generate_pagination_parameters() | indent(4) }}
    {{ macros.generate_query_parameters(model).rstrip('\n') | indent(4) }}
    {{ macros.generate_includes_parameter() }}
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[List[{{ model.name }}Read]]:
    """
    ## Resumen
    Obtiene una lista de `{{ model.tablename }}s` con filtros opcionales y soporte para paginación.
    
    Este endpoint permite realizar búsquedas flexibles aplicando filtros opcionales
    por cualquiera de los campos disponibles, con soporte completo para paginación
    mediante los parámetros limit y offset.

    ## Resultado
    En `APIResponse.data`, retorna un listado de objetos donde cada uno representa un registro de la tabla `{{ model.tablename }}` que incluye todos sus atributos

    ## Datos
    Para cada registro en `data` se incluye:
    {% for column in model.columns %}
    - **{{ column.name }}** ({{ column.type }}{% if column.nullable %}, opcional{% endif %}): {{ column.description }}
    {% endfor %}
    
    ## Parámetros de Filtrado
    
    Todos los parámetros de filtrado son opcionales y se pueden combinar:
    {{ macros.generate_query_args(model) | indent(4) }}
    
    ## Parámetros de Paginación
    
    - **limit**: Número máximo de registros a retornar. Solo admite valores positivos. Si no se especifica, retorna todos los registros que coincidan con los filtros.
    - **order_by**: Lista de nombres de columnas para ordenar los resultados.⚠️ **IMPORTANTE**: los nombres de columnas deben existir, si no serán omitidas.
    - **order**: Dirección de ordenamiento: 'ASC' para ascendente (por defecto), 'DESC' para descendente. Solo aplica si order_by está definido.
    - **offset**: Número de registros a omitir desde el inicio. Solo admite valores positivos. Si no se especifica, inicia desde el primer registro.
    
    ## Consulta combinada (recomendado para pocos registros)
    ⚠️ **IMPORTANTE**: Usa siempre el parámetro `includes` para cargar relaciones en una sola consulta y evitar múltiples llamadas al API.
    
    ⚠️ **WARNING**: Si la relación incluida tiene muchos registros relacionados, la respuesta puede ser muy grande y lenta. Mejor consultar su endpoint directamente con filtros.
    
    El parametro `includes` permite cargar relaciones asociadas a los registros.
    {% if model.relations %}

    ### Relaciones disponibles
    {% for relation in model.relations %}
    - **{{ relation.name }}**: {% if relation.direction == 'one-to-many' %}lista de {{ relation.target }} relacionados{% else %}{{ relation.target }} relacionado{% endif %} ({{ relation.direction }})

        {% if relation.description %}
        - **descripción**: {{ relation.description | indent(10) }}
        {% endif %}
    {% endfor %}
    
    ### Ejemplos básicos:
    #### Solo datos básicos
    `{{model.tablename }} = GET /{{model.tablename }}`
    
    {% for relation in model.relations %}
    #### Incluir {{ relation.name }}
    `{{model.tablename }} = GET /{{model.tablename }}?includes={{ relation.name }}`
    
    {% endfor %}
    {% if model.relations|length > 1 %}
    #### Múltiples relaciones en una sola consulta
    `{{model.tablename }} = GET /{{model.tablename }}?{% for relation in model.relations[:2] %}includes={{ relation.name }}{{ "&" if not loop.last }}{% endfor %}`
    
    {% endif %}
    #### Relaciones anidadas
    {% for relation in model.relations %}
    Puedes incluir los datos de {{ relation.name }} y además incluir sus propias relaciones  
    `{{ model.tablename }} = GET /{{ model.tablename }}?includes={{ relation.name }}.{nested_relation}`  
    {% endfor %}
    {% endif %}
    """
    result = await api.{{ model.tablename }}.find_many(
        limit=limit,
        offset=offset,
        order_by=order_by,
        order=order,
        {{ macros.asing_parameters(model).rstrip('\n') | indent(8) }}
        includes=includes
    )
    
    # Obtener el total para metadatos de paginación si es necesario
    total = None
    if limit is not None or offset is not None:
        try:
            total = await api.{{ model.tablename }}.count(
                {{ macros.asing_parameters(model).rstrip('\n') | indent(16) }}
            )
        except Exception as e:
            logger.warning(f"No se pudo obtener el total de registros: {str(e)}")
    
    return PaginatedResponse.success_paginated(
        data=result,
        total=total,
        limit=limit,
        offset=offset,
        message=f"{{ model.name }}s obtenidos exitosamente"
    )

{% if not model.is_view %}
@{{ router_name }}.get("{{ pk_path_params }}", 
    response_model=APIResponse[{{ model.name }}Read],
    response_description="Registro único de {{ model.tablename }} obtenido exitosamente",
    operation_id="{{ model.tablename }}_find",
    summary="Busca un registro en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "Registro único de {{ model.tablename }} obtenido exitosamente",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/APIResponse_{{ model.name }}Read_"
                    }
                }
            },
            "links": {{ macros.generate_find_links(model) | indent(12) }}
        },
        422: {
            "description": "Error de validación en parámetros",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }} debe ser mayor a 0",
                                "field": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }}",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        404: {
            "description": "{{ model.name }} no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "{{ model.name }} no encontrado",
                        "errors": [
                            {
                                "code": "RECORD_NOT_FOUND",
                                "message": "{{ model.name }} no encontrado",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
@document_api_response(
    success_description="{{ model.name }} obtenido exitosamente",
    data_description="Objeto {{ model.name }} completo con toda la información registrada. Contiene todos los campos definidos en el modelo {{ model.name }}Read con sus valores actuales."
)
async def {{ model.tablename }}_find(
    {{ macros.generate_path_parameters(model).rstrip('\n') | indent(4) }}
    {{ macros.generate_includes_parameter() }}
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[{{ model.name }}Read]:
    """
    ## Resumen
    Obtiene un {{ model.name }} específico por su clave primaria.
    
    Este endpoint permite recuperar un registro individual de {{ model.name }}
    utilizando su identificador único (clave primaria). Opcionalmente puede
    incluir datos de relaciones asociadas.

    ## Resultado
    Si la consulta es exitosa, en `APIResponse.data`, retorna un objeto que representa un registro de la tabla `{{ model.tablename }}` que incluye todos sus atributos

    Si no se encuentra el registro, devuelve un error 404 `RECORD_NOT_FOUND`.

    ## Datos
    Para cada registro en `data` se incluye:
    {% for column in model.columns %}
    - **{{ column.name }}** ({{ column.type }}{% if column.nullable %}, opcional{% endif %}): {{ column.description }}
    {% endfor %}
    
    ## Parámetros de Identificación
    
    {% for column in model.columns if column.args.get('primary_key', False) %}
    - **{{ column.name }}**: {{ column.name }} del {{ model.name }} a buscar (tipo: {{ column.type }})
    {% endfor %}
    
    ## Consulta combinada (RECOMENDADO)
    ⚠️ **IMPORTANTE**: Usa siempre el parámetro `includes` para cargar relaciones en una sola consulta y evitar múltiples llamadas al API.
    
    El parametro `includes` permite cargar relaciones asociadas a los registros.
    {% if model.relations %}

    ### Relaciones disponibles (usar con parámetro 'includes'):
    {% for relation in model.relations %}
    - {{ relation.name }}: {% if relation.direction == 'one-to-many' %}Lista de {{ relation.target }} relacionados{% else %}{{ relation.target }} relacionado{% endif %} ({{ relation.direction }})
        {% if relation.description %}
        {{ relation.description | indent(10) }}
        {% endif %}
    {% endfor %}
    
    ### Uso del parámetro 'includes':
    Para cargar relaciones específicas, usa el parámetro 'includes' en la consulta:
    
    ### Ejemplos básicos:
    #### Solo datos básicos
    `{{model.tablename }} = GET /{{model.tablename }}{{ pk_path_params }}`
    
    {% for relation in model.relations %}
    #### Incluir {{ relation.name }}
    `{{model.tablename }} = GET /{{model.tablename }}{{ pk_path_params }}?includes={{ relation.name }}`
    
    {% endfor %}
    {% if model.relations|length > 1 %}
    #### Múltiples relaciones en una sola consulta
    `{{model.tablename }} = GET /{{model.tablename }}{{ pk_path_params }}?{% for relation in model.relations[:2] %}includes={{ relation.name }}{{ "&" if not loop.last }}{% endfor %}`
    
    {% endif %}
    #### Relaciones anidadas
    {% for relation in model.relations %}
    Puedes incluir los datos de {{ relation.name }} y además incluir sus propias relaciones  
    `{{ model.tablename }} = GET /{{ model.tablename }}{{ pk_path_params }}?includes={{ relation.name }}.{nested_relation}`
    {% endfor %}
    {% endif %}
    """
    # Validaciones básicas de entrada
    {% for column in model.columns if column.args.get('primary_key', False) and column.args.get('autoincrement', False) %}
    {% if column.type in ['int', 'BigInteger'] %}
    if {{ column.name }} <= 0:
        raise ValidationException("{{ column.name }} debe ser mayor a 0", "{{ column.name }}")
    {% endif %}
    {% endfor %}
    
    result = await api.{{ model.tablename }}.find(
        {% for column in model.columns if column.args.get('primary_key', False) %}
        {{ column.name }}={{ column.name }},
        {% endfor %}
        includes=includes
    )
    
    if result is None:
        raise RecordNotFoundException("{{ model.name }}")
        
    return APIResponse.success(
        data=result,
        message="{{ model.name }} obtenido exitosamente"
    )

@{{ router_name }}.get("/count", 
    response_model=APIResponse[int],
    response_description="Número de registros de {{ model.tablename }} según los filtros aplicados",
    operation_id="{{ model.tablename }}_count",
    summary="Cuenta registros en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "Conteo realizado exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "status": "success",
                        "data": 42,
                        "message": "Conteo realizado exitosamente",
                        "errors": None,
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_count(
    {{ macros.generate_query_parameters(model).rstrip('\n') | indent(4) }}
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[int]:
    """
    Cuenta el número de {{ model.name }}s que coinciden con los filtros.
    """
    result = await api.{{ model.tablename }}.count(
        {{ macros.asing_parameters(model).rstrip('\n') | indent(8) }}
    )
    
    return APIResponse.success(
        data=result,
        message="Conteo realizado exitosamente"
    )

@{{ router_name }}.get("/exists", 
    response_model=APIResponse[bool],
    operation_id="{{ model.tablename }}_exists",
    summary="Verifica existencia en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "Verificación realizada exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "status": "success",
                        "data": True,
                        "message": "Verificación realizada exitosamente",
                        "errors": None,
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_exists(
    {{ macros.generate_query_parameters(model).rstrip('\n') | indent(4) }}
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[bool]:
    """
    Verifica si existe al menos un {{ model.tablename }} que coincida con los filtros.
    """
    result = await api.{{ model.tablename }}.exists(
        {{ macros.asing_parameters(model).rstrip('\n') | indent(8) }}
    )
    
    return APIResponse.success(
        data=result,
        message="Verificación realizada exitosamente"
    )

@{{ router_name }}.post("", 
    response_model=APIResponse[{{ model.name }}Read],
    status_code=201,
    operation_id="{{ model.tablename }}_create",
    summary="Crea un registro en la tabla {{ model.tablename }}",
    responses={
        422: {
            "description": "Error de validación en los datos de entrada",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "El campo es requerido",
                                "field": "{{ model.columns | rejectattr('args.primary_key', 'equalto', True) | rejectattr('args.nullable', 'equalto', True) | map(attribute='name') | first | default('campo') }}",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        409: {
            "description": "Registro duplicado",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "El registro ya existe",
                        "errors": [
                            {
                                "code": "DUPLICATE_RECORD",
                                "message": "El registro ya existe",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        422: {
            "description": "Violación de clave foránea",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Violación de clave foránea",
                        "errors": [
                            {
                                "code": "FOREIGN_KEY_VIOLATION",
                                "message": "La referencia especificada no existe",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_create(
    {{ model.tablename }}: {{ model.name }}Create,
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[{{ model.name }}Read]:
    """
    Crea un nuevo {{ model.name }}.
    """
    result = await api.{{ model.tablename }}.create({{ model.tablename }})
    
    return APIResponse.success(
        data=result,
        message="{{ model.name }} creado exitosamente"
    )

@{{ router_name }}.patch("{{ pk_path_params }}", 
    response_model=APIResponse[int],
    operation_id="{{ model.tablename }}_update",
    summary="Actualiza un registro en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "{{ model.name }} actualizado exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "status": "success",
                        "data": 1,
                        "message": "{{ model.name }} actualizado exitosamente",
                        "errors": None,
                        "meta": None
                    }
                }
            }
        },
        422: {
            "description": "Error de validación en parámetros o datos",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }} debe ser mayor a 0",
                                "field": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }}",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        404: {
            "description": "{{ model.name }} no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "{{ model.name }} no encontrado",
                        "errors": [
                            {
                                "code": "RECORD_NOT_FOUND",
                                "message": "{{ model.name }} no encontrado",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        422: {
            "description": "Violación de clave foránea",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Violación de clave foránea",
                        "errors": [
                            {
                                "code": "FOREIGN_KEY_VIOLATION",
                                "message": "La referencia especificada no existe",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_update(
    {{ macros.generate_path_parameters(model).rstrip('\n') | indent(4) }}
    values: {{ model.name }}UpdateValues = Body(...),
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[int]:
    """
    Actualiza un {{ model.name }} específico.
    """
    # Validaciones básicas de entrada
    {% for column in model.columns if column.args.get('primary_key', False) %}
    {% if column.type in ['int', 'BigInteger'] %}
    if {{ column.name }} <= 0:
        raise ValidationException("{{ column.name }} debe ser mayor a 0", "{{ column.name }}")
    {% endif %}
    {% endfor %}
    
    # Verificar que el registro existe antes de actualizar
    existing = await api.{{ model.tablename }}.find(
        {% for column in model.columns if column.args.get('primary_key', False) %}
        {{ column.name }}={{ column.name }},
        {% endfor %}
    )
    
    if existing is None:
        raise RecordNotFoundException("{{ model.name }}")
    
    result = await api.{{ model.tablename }}.update(
        {% for column in model.columns if column.args.get('primary_key', False) %}
        {{ column.name }}={{ column.name }},
        {% endfor %}
        updated_values=values
    )
    
    if result == 0:
        raise RecordNotFoundException("{{ model.name }}")
        
    return APIResponse.success(
        data=result,
        message="{{ model.name }} actualizado exitosamente"
    )

@{{ router_name }}.patch("", 
    response_model=APIResponse[int],
    operation_id="{{ model.tablename }}_update_many",
    summary="Actualiza múltiples registros en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "{{ model.name }}s actualizados exitosamente",
            "content": {
                "application/json": {
                    "examples": {
                        "records_updated": {
                            "summary": "Registros actualizados",
                            "value": {
                                "status": "success",
                                "data": 5,
                                "message": "5 {{ model.name }}s actualizados exitosamente",
                                "errors": None,
                                "meta": None
                            }
                        },
                        "no_records_found": {
                            "summary": "No se encontraron registros",
                            "value": {
                                "status": "success",
                                "data": 0,
                                "message": "No se encontraron registros que coincidan con los criterios",
                                "errors": None,
                                "meta": None
                            }
                        }
                    }
                }
            }
        },
        422: {
            "description": "Error de validación en los datos",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "Los criterios de búsqueda son requeridos",
                                "field": "filters",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_update_many(
    payload: {{ model.name }}Update,
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[int]:
    """
    Actualiza múltiples {{ model.name }}s.
    """
    result = await api.{{ model.tablename }}.update_many(payload)
    
    message = f"{result} {{ model.name }}s actualizados exitosamente" if result > 0 else "No se encontraron registros que coincidan con los criterios"
    
    return APIResponse.success(
        data=result,
        message=message
    )

@{{ router_name }}.delete("{{ pk_path_params }}", 
    response_model=APIResponse[int],
    operation_id="{{ model.tablename }}_delete",
    summary="Elimina un registro en la tabla {{ model.tablename }}",
    responses={
        200: {
            "description": "{{ model.name }} eliminado exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "status": "success",
                        "data": 1,
                        "message": "{{ model.name }} eliminado exitosamente",
                        "errors": None,
                        "meta": None
                    }
                }
            }
        },
        422: {
            "description": "Error de validación en parámetros",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error de validación",
                        "errors": [
                            {
                                "code": "VALIDATION_ERROR",
                                "message": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }} debe ser mayor a 0",
                                "field": "{{ model.columns | selectattr('args.primary_key', 'equalto', True) | map(attribute='name') | first }}",
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        404: {
            "description": "{{ model.name }} no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "{{ model.name }} no encontrado",
                        "errors": [
                            {
                                "code": "RECORD_NOT_FOUND",
                                "message": "{{ model.name }} no encontrado",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        422: {
            "description": "Violación de clave foránea",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Violación de clave foránea",
                        "errors": [
                            {
                                "code": "FOREIGN_KEY_VIOLATION",
                                "message": "No se puede eliminar el registro porque está siendo referenciado",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        },
        500: {
            "description": "Error interno del servidor",
            "content": {
                "application/json": {
                    "example": {
                        "status": "error",
                        "data": None,
                        "message": "Error interno del servidor",
                        "errors": [
                            {
                                "code": "DATABASE_ERROR",
                                "message": "Error en la base de datos",
                                "field": None,
                                "details": None
                            }
                        ],
                        "meta": None
                    }
                }
            }
        }
    }
)
async def {{ model.tablename }}_delete(
    {{ macros.generate_path_parameters(model).rstrip('\n') | indent(4) }}
    api: {{ crud_class }} = Depends({{ crud_class }})
) -> APIResponse[int]:
    """
    Elimina un {{ model.name }} por su primary key.
    """
    # Validaciones básicas de entrada
    {% for column in model.columns if column.args.get('primary_key', False) %}
    {% if column.type in ['int', 'BigInteger'] %}
    if {{ column.name }} <= 0:
        raise ValidationException("{{ column.name }} debe ser mayor a 0", "{{ column.name }}")
    {% endif %}
    {% endfor %}
    
    # Verificar que el registro existe antes de eliminar
    existing = await api.{{ model.tablename }}.find(
        {% for column in model.columns if column.args.get('primary_key', False) %}
        {{ column.name }}={{ column.name }},
        {% endfor %}
    )
    
    if existing is None:
        raise RecordNotFoundException("{{ model.name }}")
    
    result = await api.{{ model.tablename }}.delete(
        {% for column in model.columns if column.args.get('primary_key', False) %}
        {{ column.name }}={{ column.name }},
        {% endfor %}
    )
    
    if result == 0:
        raise RecordNotFoundException("{{ model.name }}")
        
    return APIResponse.success(
        data=result,
        message="{{ model.name }} eliminado exitosamente"
    )
{% endif %}
