"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.geometry_pb2
import kerfed.protos.common.v1.model_pb2
import kerfed.protos.common.v1.ndarray_pb2
import kerfed.protos.common.v1.outcome_pb2
import kerfed.protos.common.v1.path_pb2
import kerfed.protos.common.v1.post_pb2
import kerfed.protos.common.v1.stock_pb2
import kerfed.protos.common.v1.tool_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _GpuDetail:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _GpuDetailEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_GpuDetail.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    GPU_DETAIL_UNSPECIFIED: _GpuDetail.ValueType  # 0
    """Defaults to STANDARD"""
    GPU_DETAIL_DRAFT: _GpuDetail.ValueType  # 1
    """Targeted to take less than 1.0 seconds."""
    GPU_DETAIL_STANDARD: _GpuDetail.ValueType  # 2
    """Targeted to take approximately 2.0 seconds"""
    GPU_DETAIL_HIGH: _GpuDetail.ValueType  # 3
    """Targeted to take less than 1 minute."""

class GpuDetail(_GpuDetail, metaclass=_GpuDetailEnumTypeWrapper):
    """What voxel and toolplane resolution strategy should be
    used when computing milled carving columes.
    """

GPU_DETAIL_UNSPECIFIED: GpuDetail.ValueType  # 0
"""Defaults to STANDARD"""
GPU_DETAIL_DRAFT: GpuDetail.ValueType  # 1
"""Targeted to take less than 1.0 seconds."""
GPU_DETAIL_STANDARD: GpuDetail.ValueType  # 2
"""Targeted to take approximately 2.0 seconds"""
GPU_DETAIL_HIGH: GpuDetail.ValueType  # 3
"""Targeted to take less than 1 minute."""
global___GpuDetail = GpuDetail

class _FixtureStrategy:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FixtureStrategyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FixtureStrategy.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FIXTURE_STRATEGY_UNSPECIFIED: _FixtureStrategy.ValueType  # 0
    """There is no plan, dude."""
    FIXTURE_STRATEGY_VICE: _FixtureStrategy.ValueType  # 1
    """There is a pair of parallel edges we can clamp on."""
    FIXTURE_STRATEGY_CHUCK: _FixtureStrategy.ValueType  # 2
    """There is a cylindrical surface we can clamp on."""
    FIXTURE_STRATEGY_HOLDDOWN: _FixtureStrategy.ValueType  # 3
    """Using a T-slot table and "hold-down" setup clamps."""

class FixtureStrategy(_FixtureStrategy, metaclass=_FixtureStrategyEnumTypeWrapper): ...

FIXTURE_STRATEGY_UNSPECIFIED: FixtureStrategy.ValueType  # 0
"""There is no plan, dude."""
FIXTURE_STRATEGY_VICE: FixtureStrategy.ValueType  # 1
"""There is a pair of parallel edges we can clamp on."""
FIXTURE_STRATEGY_CHUCK: FixtureStrategy.ValueType  # 2
"""There is a cylindrical surface we can clamp on."""
FIXTURE_STRATEGY_HOLDDOWN: FixtureStrategy.ValueType  # 3
"""Using a T-slot table and "hold-down" setup clamps."""
global___FixtureStrategy = FixtureStrategy

@typing_extensions.final
class MillSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MATERIAL_ID_FIELD_NUMBER: builtins.int
    MACHINE_FIELD_NUMBER: builtins.int
    TOOLS_FIELD_NUMBER: builtins.int
    DETAIL_FIELD_NUMBER: builtins.int
    RETURN_VOLUME_FIELD_NUMBER: builtins.int
    RETURN_GCODE_FIELD_NUMBER: builtins.int
    RETURN_PLAN_FIELD_NUMBER: builtins.int
    SKIP_FIXTURE_COLLISIONS_FIELD_NUMBER: builtins.int
    DEFAULT_RADIAL_DEPTH_OF_CUT_FIELD_NUMBER: builtins.int
    DEFAULT_RADIAL_FINISH_FIELD_NUMBER: builtins.int
    DEFAULT_BIARC_FIELD_NUMBER: builtins.int
    DEFAULT_SKIP_BALL_FIELD_NUMBER: builtins.int
    PLANE_NORMALS_FIELD_NUMBER: builtins.int
    MAX_DIRECTIONS_FIELD_NUMBER: builtins.int
    SKIP_PRUNE_FIELD_NUMBER: builtins.int
    PREPROCESS_FIELD_NUMBER: builtins.int
    ANGLE_HELIX_FIELD_NUMBER: builtins.int
    material_id: builtins.str
    """What material is this being cut from?"""
    @property
    def machine(self) -> global___MillMachine:
        """The machine analysis should be run with."""
    @property
    def tools(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.tool_pb2.Tool]:
        """The specific tools available."""
    detail: global___GpuDetail.ValueType
    """What resolution should *roughing* operations be calculated
    in. Note that "finish" passes are done directly from the
    tesselated geometry and are not calculated using voxel methods.
    """
    return_volume: builtins.bool
    """Return the KDC file containing voxel data at each radius."""
    return_gcode: builtins.bool
    """Calculate and return G-code toolpaths that are machine-ready."""
    return_plan: builtins.bool
    """Return a `MillPlan` object which is designed to be used programatically."""
    skip_fixture_collisions: builtins.bool
    """Check for fixture collisions."""
    @property
    def default_radial_depth_of_cut(self) -> kerfed.protos.common.v1.model_pb2.RelativeQuantity:
        """If we haven't been passed an array of tools use this
        for the default radial depth of cut (i.e step over).
        The absolute component is distance in meters and the
        relative component is the fraction of tool radius.
        For example, if you have a 0.5" diameter endmill and this value
        is `{absolute: 0.0, relative: 0.24}` (24% of diameter)
        the step over between passes is 0.12".
        """
    @property
    def default_radial_finish(self) -> kerfed.protos.common.v1.model_pb2.RelativeQuantity:
        """How much material should be left on the walls of the part
        in the roughing stage to be removed in the finishing stage?
        This also determines the minimum slot width that can be cut,
        as the tool will not be able to fit into a slot smaller than
        `tool_diameter * (1 + (2 * finish_allowance))`.
        the finish allowance can be specified as an absolute distance in meters
        i.e. 0.010" -> `0.000254`
        """
    @property
    def default_biarc(self) -> kerfed.protos.common.v1.model_pb2.RelativeQuantity:
        """The largest allowable radius of the biarc connection relative
        to the tool radius.
        Default value is `{absolute: 0.0, relative: 0.25}`, i.e.
        for a 1.0" diameter endmill it will try to round the corners
        with a 0.25" radius circular connection. It will also search
        smaller radii down to zero-radius and fall back to a Z connection.
        """
    default_skip_ball: builtins.bool
    """If we haven't been passed an array of tools
    allow there to be ball mills of the same radius
    as the default tools.
    """
    @property
    def plane_normals(self) -> kerfed.protos.common.v1.ndarray_pb2.NDArray:
        """If passed tell the preprocessor to ignore internal heuristics
        and use these (n, 3) float array of unit vectors to assign cut planes.
        """
    max_directions: builtins.int
    """If passed as a nonzero value cap the number of cut planes
    generated by the automatic heuristic at this value
    """
    skip_prune: builtins.bool
    """The total number of operations is `len(tools) * len(preprocess.directions)`
    as every tool is tried from every direction. This generally produces far
    too many operations to be useful unless there is only one tool and one
    direction but may be useful for debugging or specific applications.
    Pruning uses the GPU to determine which tools actually cut anything
    *before* any toolpathing and will return results that are a subset
    of `tools * preprocess.directions`.
    """
    @property
    def preprocess(self) -> global___MillPreprocess:
        """The preprocessed mesh: note most applications should use our default
        preprocessor and *not* pass this as our preprocessor does things
        like plug drill holes and pick stock, but if you have existing internal
        logic you can skip our heuristics by passing this explicitly.
        """
    angle_helix: builtins.float
    """What angle in degrees should a plunging helix use?
    This is typically be between 1.0 - 10.0 and the default is 3.0
    """
    def __init__(
        self,
        *,
        material_id: builtins.str = ...,
        machine: global___MillMachine | None = ...,
        tools: collections.abc.Iterable[kerfed.protos.common.v1.tool_pb2.Tool] | None = ...,
        detail: global___GpuDetail.ValueType = ...,
        return_volume: builtins.bool = ...,
        return_gcode: builtins.bool = ...,
        return_plan: builtins.bool = ...,
        skip_fixture_collisions: builtins.bool = ...,
        default_radial_depth_of_cut: kerfed.protos.common.v1.model_pb2.RelativeQuantity | None = ...,
        default_radial_finish: kerfed.protos.common.v1.model_pb2.RelativeQuantity | None = ...,
        default_biarc: kerfed.protos.common.v1.model_pb2.RelativeQuantity | None = ...,
        default_skip_ball: builtins.bool = ...,
        plane_normals: kerfed.protos.common.v1.ndarray_pb2.NDArray | None = ...,
        max_directions: builtins.int = ...,
        skip_prune: builtins.bool = ...,
        preprocess: global___MillPreprocess | None = ...,
        angle_helix: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["default_biarc", b"default_biarc", "default_radial_depth_of_cut", b"default_radial_depth_of_cut", "default_radial_finish", b"default_radial_finish", "machine", b"machine", "plane_normals", b"plane_normals", "preprocess", b"preprocess"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle_helix", b"angle_helix", "default_biarc", b"default_biarc", "default_radial_depth_of_cut", b"default_radial_depth_of_cut", "default_radial_finish", b"default_radial_finish", "default_skip_ball", b"default_skip_ball", "detail", b"detail", "machine", b"machine", "material_id", b"material_id", "max_directions", b"max_directions", "plane_normals", b"plane_normals", "preprocess", b"preprocess", "return_gcode", b"return_gcode", "return_plan", b"return_plan", "return_volume", b"return_volume", "skip_fixture_collisions", b"skip_fixture_collisions", "skip_prune", b"skip_prune", "tools", b"tools"]) -> None: ...

global___MillSettings = MillSettings

@typing_extensions.final
class MillMachine(google.protobuf.message.Message):
    """The parameters for a milling machine used in CarveWizard.
    All dimensions are in meters.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOOL_PAD_FIELD_NUMBER: builtins.int
    SPINDLE_LENGTH_FIELD_NUMBER: builtins.int
    SPINDLE_RADIUS_FIELD_NUMBER: builtins.int
    SPINDLE_PAD_FIELD_NUMBER: builtins.int
    MAX_Z_TRAVEL_FIELD_NUMBER: builtins.int
    EXTENTS_FIELD_NUMBER: builtins.int
    FEED_MAX_FIELD_NUMBER: builtins.int
    RPM_MAX_FIELD_NUMBER: builtins.int
    USE_FAST_INPLANE_FIELD_NUMBER: builtins.int
    USE_VARIABLES_FIELD_NUMBER: builtins.int
    tool_pad: builtins.float
    """How much to pad the tool for tool-fixture collision checks.
    Pads the radius of the tool and the bottom of the tool.
    """
    spindle_length: builtins.float
    """how long is the spindle cylinder for collision checks"""
    spindle_radius: builtins.float
    """What is the radius of the spindle cylinder."""
    spindle_pad: builtins.float
    """How much should the spindle be padded to avoid collisons."""
    max_z_travel: builtins.float
    """What is the maximum distance that the spindle can travel in Z?"""
    @property
    def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the size of the work volume of the milling machine."""
    feed_max: builtins.float
    """The maximum feed rate in meters per second."""
    rpm_max: builtins.float
    """The maximum spindle speed in rotations per minute."""
    use_fast_inplane: builtins.bool
    """Should shortcut moves in-plane which don't touch
    anything be exported with a G0 (`true`) or G1 (`false`)
    """
    use_variables: builtins.bool
    """Should the G code exported use variables for speeds
    or should it duplicate itself in multiple places.
    """
    def __init__(
        self,
        *,
        tool_pad: builtins.float = ...,
        spindle_length: builtins.float = ...,
        spindle_radius: builtins.float = ...,
        spindle_pad: builtins.float = ...,
        max_z_travel: builtins.float = ...,
        extents: collections.abc.Iterable[builtins.float] | None = ...,
        feed_max: builtins.float = ...,
        rpm_max: builtins.float = ...,
        use_fast_inplane: builtins.bool = ...,
        use_variables: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["extents", b"extents", "feed_max", b"feed_max", "max_z_travel", b"max_z_travel", "rpm_max", b"rpm_max", "spindle_length", b"spindle_length", "spindle_pad", b"spindle_pad", "spindle_radius", b"spindle_radius", "tool_pad", b"tool_pad", "use_fast_inplane", b"use_fast_inplane", "use_variables", b"use_variables"]) -> None: ...

global___MillMachine = MillMachine

@typing_extensions.final
class Drill(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RADIUS_FIELD_NUMBER: builtins.int
    DEPTH_FIELD_NUMBER: builtins.int
    ORIGINS_FIELD_NUMBER: builtins.int
    NORMAL_FIELD_NUMBER: builtins.int
    THRU_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    COUNTERSINK_RADIUS_FIELD_NUMBER: builtins.int
    COUNTERSINK_ANGLE_FIELD_NUMBER: builtins.int
    radius: builtins.float
    """Which drill bit radius is used?"""
    @property
    def depth(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """How deep is each hole?"""
    @property
    def origins(self) -> kerfed.protos.common.v1.ndarray_pb2.NDArray:
        """Where is the origin for each hole"""
    @property
    def normal(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the normal vector for each hole?"""
    thru: builtins.bool
    """Are these drilled holes through the entire part?"""
    @property
    def labels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """What are the labels for the drill, i.e. "17/64 Drill" """
    countersink_radius: builtins.float
    """If this drilled hole has a countersink, what is
    the maximum radius of the cone?
    """
    countersink_angle: builtins.float
    """If this drilled hole has a countersink what is
    the cone angle in radians. A typical value would
    be something like are 82 degrees ~= 1.43
    """
    def __init__(
        self,
        *,
        radius: builtins.float = ...,
        depth: collections.abc.Iterable[builtins.float] | None = ...,
        origins: kerfed.protos.common.v1.ndarray_pb2.NDArray | None = ...,
        normal: collections.abc.Iterable[builtins.float] | None = ...,
        thru: builtins.bool = ...,
        labels: collections.abc.Iterable[builtins.str] | None = ...,
        countersink_radius: builtins.float = ...,
        countersink_angle: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["origins", b"origins"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["countersink_angle", b"countersink_angle", "countersink_radius", b"countersink_radius", "depth", b"depth", "labels", b"labels", "normal", b"normal", "origins", b"origins", "radius", b"radius", "thru", b"thru"]) -> None: ...

global___Drill = Drill

@typing_extensions.final
class MillPreprocess(google.protobuf.message.Message):
    """Before running carving analysis we have to approximate certain information."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIRECTIONS_FIELD_NUMBER: builtins.int
    STOCK_FIELD_NUMBER: builtins.int
    STOCK_GEOMETRY_FIELD_NUMBER: builtins.int
    MESH_FIELD_NUMBER: builtins.int
    DRILLS_FIELD_NUMBER: builtins.int
    COLLISION_FIELD_NUMBER: builtins.int
    @property
    def directions(self) -> kerfed.protos.common.v1.ndarray_pb2.NDArray:
        """an ordered (n, 3) double array of unit vectors of possible directions."""
    @property
    def stock(self) -> kerfed.protos.common.v1.stock_pb2.Stock:
        """What is the stock material this is being constructed out of?"""
    @property
    def stock_geometry(self) -> kerfed.protos.common.v1.geometry_pb2.Geometry:
        """A model of the stock in the frame of the preprocessed mesh."""
    @property
    def mesh(self) -> kerfed.protos.common.v1.geometry_pb2.Geometry:
        """The preprocessor may have edited the geometry."""
    @property
    def drills(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Drill]:
        """The preprocessor may have extracted drill cuts as otherwise these
        would be attempted with an endmill clearance strategy.
        """
    @property
    def collision(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.geometry_pb2.Geometry]:
        """Collision geometry to avoid. Must be the same length as `directions`"""
    def __init__(
        self,
        *,
        directions: kerfed.protos.common.v1.ndarray_pb2.NDArray | None = ...,
        stock: kerfed.protos.common.v1.stock_pb2.Stock | None = ...,
        stock_geometry: kerfed.protos.common.v1.geometry_pb2.Geometry | None = ...,
        mesh: kerfed.protos.common.v1.geometry_pb2.Geometry | None = ...,
        drills: collections.abc.Iterable[global___Drill] | None = ...,
        collision: collections.abc.Iterable[kerfed.protos.common.v1.geometry_pb2.Geometry] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["directions", b"directions", "mesh", b"mesh", "stock", b"stock", "stock_geometry", b"stock_geometry"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["collision", b"collision", "directions", b"directions", "drills", b"drills", "mesh", b"mesh", "stock", b"stock", "stock_geometry", b"stock_geometry"]) -> None: ...

global___MillPreprocess = MillPreprocess

@typing_extensions.final
class Fixture(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRATEGY_FIELD_NUMBER: builtins.int
    COLLISION_FIELD_NUMBER: builtins.int
    NORMAL_FIELD_NUMBER: builtins.int
    strategy: global___FixtureStrategy.ValueType
    """What strategy is this fixture using?"""
    @property
    def collision(self) -> kerfed.protos.common.v1.geometry_pb2.Geometry:
        """Collision geometry for this fixture."""
    @property
    def normal(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the normal vector of this fixture operation."""
    def __init__(
        self,
        *,
        strategy: global___FixtureStrategy.ValueType = ...,
        collision: kerfed.protos.common.v1.geometry_pb2.Geometry | None = ...,
        normal: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["collision", b"collision"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["collision", b"collision", "normal", b"normal", "strategy", b"strategy"]) -> None: ...

global___Fixture = Fixture

@typing_extensions.final
class Cut(google.protobuf.message.Message):
    """A per-tool summary of how much material was removed."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RADIUS_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    SHAPE_FIELD_NUMBER: builtins.int
    IS_ROUGH_FIELD_NUMBER: builtins.int
    @property
    def radius(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """what tool radius is each cut using"""
    @property
    def volume(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """how much volume was removed for each readius"""
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[kerfed.protos.common.v1.tool_pb2.ToolShape.ValueType]:
        """What shape tool was each removal done with?"""
    @property
    def is_rough(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """Was this a roughing (volume-removal) operation?"""
    def __init__(
        self,
        *,
        radius: collections.abc.Iterable[builtins.float] | None = ...,
        volume: collections.abc.Iterable[builtins.float] | None = ...,
        shape: collections.abc.Iterable[kerfed.protos.common.v1.tool_pb2.ToolShape.ValueType] | None = ...,
        is_rough: collections.abc.Iterable[builtins.bool] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["is_rough", b"is_rough", "radius", b"radius", "shape", b"shape", "volume", b"volume"]) -> None: ...

global___Cut = Cut

@typing_extensions.final
class MillFabrication(google.protobuf.message.Message):
    """This is an analysis result suitable for quoting."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    STOCK_FIELD_NUMBER: builtins.int
    FIXTURES_FIELD_NUMBER: builtins.int
    CUTS_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    GCODE_FIELD_NUMBER: builtins.int
    PLAN_FIELD_NUMBER: builtins.int
    PRE_FIELD_NUMBER: builtins.int
    MACHINE_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    @property
    def stock(self) -> kerfed.protos.common.v1.stock_pb2.Stock:
        """What is the raw material this part was milled from?"""
    @property
    def fixtures(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Fixture]:
        """How is this part being held to cut?"""
    @property
    def cuts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Cut]:
        """Ordered list of operations required to generate this part."""
    @property
    def volume(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """the volumetric carving information in KDC format"""
    @property
    def gcode(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.fileblob_pb2.FileBlob]:
        """The "G-code" for the milled part in addition to supporting files.
        There is one G-code file per tool plane and a corresponding Camotics
        simulation definition for each toolplane.
        """
    @property
    def plan(self) -> kerfed.protos.common.v1.path_pb2.MillPlan:
        """The same data as in the G-code but in an internal machine-usable format."""
    @property
    def pre(self) -> global___MillPreprocess:
        """The preprocessor information that was used."""
    @property
    def machine(self) -> global___MillMachine:
        """The machine that this fabrication was calculated for."""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        stock: kerfed.protos.common.v1.stock_pb2.Stock | None = ...,
        fixtures: collections.abc.Iterable[global___Fixture] | None = ...,
        cuts: collections.abc.Iterable[global___Cut] | None = ...,
        volume: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        gcode: collections.abc.Iterable[kerfed.protos.common.v1.fileblob_pb2.FileBlob] | None = ...,
        plan: kerfed.protos.common.v1.path_pb2.MillPlan | None = ...,
        pre: global___MillPreprocess | None = ...,
        machine: global___MillMachine | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "machine", b"machine", "outcome", b"outcome", "plan", b"plan", "pre", b"pre", "stock", b"stock", "volume", b"volume"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cuts", b"cuts", "defaults", b"defaults", "drawing", b"drawing", "fixtures", b"fixtures", "gcode", b"gcode", "machine", b"machine", "outcome", b"outcome", "plan", b"plan", "posts", b"posts", "pre", b"pre", "stock", b"stock", "volume", b"volume"]) -> None: ...

global___MillFabrication = MillFabrication
