"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class NDArray(google.protobuf.message.Message):
    """*
    Represent an N dimensional array
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHAPE_FIELD_NUMBER: builtins.int
    FLOAT64_FIELD_NUMBER: builtins.int
    INT64_FIELD_NUMBER: builtins.int
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """what is the shape of this array"""
    @property
    def float64(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """only one should be populated"""
    @property
    def int64(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        float64: collections.abc.Iterable[builtins.float] | None = ...,
        int64: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["float64", b"float64", "int64", b"int64", "shape", b"shape"]) -> None: ...

global___NDArray = NDArray

@typing_extensions.final
class RigidTransform(google.protobuf.message.Message):
    """A homogenous rigid transform"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUES_FIELD_NUMBER: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """should error if there are not exactly 12 values
        this is skipping the last row of [0, 0, 0, 1]
        and in Python is `transform[:3, :].flatten()`
        """
    def __init__(
        self,
        *,
        values: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["values", b"values"]) -> None: ...

global___RigidTransform = RigidTransform
