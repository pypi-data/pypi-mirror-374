"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.cots_pb2
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.geometry_pb2
import kerfed.protos.common.v1.mill_pb2
import kerfed.protos.common.v1.ndarray_pb2
import kerfed.protos.common.v1.outcome_pb2
import kerfed.protos.common.v1.post_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class FlatFabrication(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    PERIMETER_FIELD_NUMBER: builtins.int
    HOLES_FIELD_NUMBER: builtins.int
    EXTENTS_FIELD_NUMBER: builtins.int
    AREA_FIELD_NUMBER: builtins.int
    RAPIDS_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    FLATTENED_FIELD_NUMBER: builtins.int
    TO_FLATTENED_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    perimeter: builtins.float
    """How long is the internal *and* external boundary."""
    @property
    def holes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The size of the largest dimension of the axis-aligned bounding box
        for each interior curve of the flat pattern.
        """
    @property
    def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The (2,) oriented bounding box size of the flat pattern."""
    area: builtins.float
    """The area of the flat pattern."""
    rapids: builtins.float
    """How much distance is there in a path that visits
    every interior of the flat pattern.
    """
    thickness: builtins.float
    """How thick was the original geometry."""
    @property
    def flattened(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The flattened geometry most likely as our internal
        SVG format which preserves metadata.
        """
    @property
    def to_flattened(self) -> kerfed.protos.common.v1.ndarray_pb2.RigidTransform:
        """A (4, 4) homogeneous rigid transform.
        In 3D the geometry of the source geometry of a
        plate-with-holes is in an entirely arbitrary
        position and rotation.
        When we generate the flat pattern and save it as
        `FlatFabrication.flattened`, it is originally
        a projection onto a plane in that arbitrary frame
        this transform moves the arbitrary frame onto the
        XY plane.
        The scene graph may contain multiple instances of that
        geometry, and we use this transform in the tolerance
        calculation to move every 2D hole on the plane into
        the full 3D scene graph.
        """
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        perimeter: builtins.float = ...,
        holes: collections.abc.Iterable[builtins.float] | None = ...,
        extents: collections.abc.Iterable[builtins.float] | None = ...,
        area: builtins.float = ...,
        rapids: builtins.float = ...,
        thickness: builtins.float = ...,
        flattened: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        to_flattened: kerfed.protos.common.v1.ndarray_pb2.RigidTransform | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "flattened", b"flattened", "outcome", b"outcome", "to_flattened", b"to_flattened"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["area", b"area", "defaults", b"defaults", "drawing", b"drawing", "extents", b"extents", "flattened", b"flattened", "holes", b"holes", "outcome", b"outcome", "perimeter", b"perimeter", "posts", b"posts", "rapids", b"rapids", "thickness", b"thickness", "to_flattened", b"to_flattened"]) -> None: ...

global___FlatFabrication = FlatFabrication

@typing_extensions.final
class CotsFabrication(google.protobuf.message.Message):
    """A commercial-off-the-shelf part like a ball bearing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    MATCHES_FIELD_NUMBER: builtins.int
    CYLINDER_FIELD_NUMBER: builtins.int
    ANNULAR_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    @property
    def matches(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.cots_pb2.CotsMatch]:
        """the part can match to many different commerical parts
        and the same part from a different supplier is a different match.
        """
    @property
    def cylinder(self) -> kerfed.protos.common.v1.geometry_pb2.Cylinder: ...
    @property
    def annular(self) -> kerfed.protos.common.v1.geometry_pb2.AnnularCylinder: ...
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        matches: collections.abc.Iterable[kerfed.protos.common.v1.cots_pb2.CotsMatch] | None = ...,
        cylinder: kerfed.protos.common.v1.geometry_pb2.Cylinder | None = ...,
        annular: kerfed.protos.common.v1.geometry_pb2.AnnularCylinder | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["annular", b"annular", "cylinder", b"cylinder", "defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome", "primitive", b"primitive"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["annular", b"annular", "cylinder", b"cylinder", "defaults", b"defaults", "drawing", b"drawing", "matches", b"matches", "outcome", b"outcome", "posts", b"posts", "primitive", b"primitive"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["primitive", b"primitive"]) -> typing_extensions.Literal["cylinder", "annular"] | None: ...

global___CotsFabrication = CotsFabrication

@typing_extensions.final
class BentFabrication(google.protobuf.message.Message):
    """A part fabricated on a press-brake."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class BentRegions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WKT_FIELD_NUMBER: builtins.int
        TO_3D_FIELD_NUMBER: builtins.int
        wkt: builtins.str
        """a MultiPolygon outline in the "well known text" format"""
        @property
        def to_3d(self) -> kerfed.protos.common.v1.ndarray_pb2.NDArray:
            """a matrix to move each polygon back into 3D (len(wkt.geoms), 4, 4) float"""
        def __init__(
            self,
            *,
            wkt: builtins.str = ...,
            to_3d: kerfed.protos.common.v1.ndarray_pb2.NDArray | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["to_3d", b"to_3d"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["to_3d", b"to_3d", "wkt", b"wkt"]) -> None: ...

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    BEND_COUNT_FIELD_NUMBER: builtins.int
    BEND_SETUPS_FIELD_NUMBER: builtins.int
    BEND_K_FIELD_NUMBER: builtins.int
    BEND_ANGLE_FIELD_NUMBER: builtins.int
    BEND_RADII_FIELD_NUMBER: builtins.int
    FLAT_FIELD_NUMBER: builtins.int
    REGIONS_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    bend_count: builtins.int
    """How many individual bend operations are there?"""
    bend_setups: builtins.int
    """How many bend setups are there? These numbers are
    different because sometimes bends can be combined
    into a single setup operation if they are colinear
    and have the same radius.
    """
    @property
    def bend_k(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """what K-factor was the part flattened with."""
    @property
    def bend_angle(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the angle of each bend?"""
    @property
    def bend_radii(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the radius of each bend?"""
    @property
    def flat(self) -> global___FlatFabrication:
        """The details of the flat pattern."""
    @property
    def regions(self) -> global___BentFabrication.BentRegions:
        """what is the transform for each region back into 3D space"""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        bend_count: builtins.int = ...,
        bend_setups: builtins.int = ...,
        bend_k: collections.abc.Iterable[builtins.float] | None = ...,
        bend_angle: collections.abc.Iterable[builtins.float] | None = ...,
        bend_radii: collections.abc.Iterable[builtins.float] | None = ...,
        flat: global___FlatFabrication | None = ...,
        regions: global___BentFabrication.BentRegions | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "flat", b"flat", "outcome", b"outcome", "regions", b"regions"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bend_angle", b"bend_angle", "bend_count", b"bend_count", "bend_k", b"bend_k", "bend_radii", b"bend_radii", "bend_setups", b"bend_setups", "defaults", b"defaults", "drawing", b"drawing", "flat", b"flat", "outcome", b"outcome", "posts", b"posts", "regions", b"regions"]) -> None: ...

global___BentFabrication = BentFabrication

@typing_extensions.final
class ManualFabrication(google.protobuf.message.Message):
    """A manual fabrication is a placeholder."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome"]) -> None: ...

global___ManualFabrication = ManualFabrication

@typing_extensions.final
class RollFabrication(google.protobuf.message.Message):
    """A part cut from a flat sheet and then rolled into
    a cylinder with cutouts.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    DIAMETER_FIELD_NUMBER: builtins.int
    FLAT_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    height: builtins.float
    """The maximum height of the rolled cylinder in inches."""
    diameter: builtins.float
    """The exterior diameter of the resulting rolled part."""
    @property
    def flat(self) -> global___FlatFabrication:
        """The details of the flat pattern."""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        height: builtins.float = ...,
        diameter: builtins.float = ...,
        flat: global___FlatFabrication | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "flat", b"flat", "outcome", b"outcome"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "diameter", b"diameter", "drawing", b"drawing", "flat", b"flat", "height", b"height", "outcome", b"outcome", "posts", b"posts"]) -> None: ...

global___RollFabrication = RollFabrication

@typing_extensions.final
class TurnFabrication(google.protobuf.message.Message):
    """A part made entirely on a lathe with no milled features."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    DIAMETER_FIELD_NUMBER: builtins.int
    VOLUME_FIELD_NUMBER: builtins.int
    INNER_DIAMETER_FIELD_NUMBER: builtins.int
    PROFILE_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    height: builtins.float
    """the maximum height of the part in inches"""
    diameter: builtins.float
    """the bounding cylinder diameter."""
    volume: builtins.float
    """The final part volume."""
    inner_diameter: builtins.float
    """if there is a thru-bore what is the minimum diameter."""
    @property
    def profile(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """the 2D profile geometry"""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        height: builtins.float = ...,
        diameter: builtins.float = ...,
        volume: builtins.float = ...,
        inner_diameter: builtins.float = ...,
        profile: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome", "profile", b"profile"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "diameter", b"diameter", "drawing", b"drawing", "height", b"height", "inner_diameter", b"inner_diameter", "outcome", b"outcome", "posts", b"posts", "profile", b"profile", "volume", b"volume"]) -> None: ...

global___TurnFabrication = TurnFabrication

@typing_extensions.final
class AddFabrication(google.protobuf.message.Message):
    """A part made through additive fabrication methods
    also known as "3D-printing."
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Plane(google.protobuf.message.Message):
        """A printed part can be aligned with different print
        planes which will effect the final part geometry
        as well as the amount of support material used.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ORIGIN_FIELD_NUMBER: builtins.int
        NORMAL_FIELD_NUMBER: builtins.int
        AREA_FIELD_NUMBER: builtins.int
        HEIGHT_FIELD_NUMBER: builtins.int
        EXTENTS_FIELD_NUMBER: builtins.int
        VOLUME_FIELD_NUMBER: builtins.int
        VOLUME_SUPPORT_FIELD_NUMBER: builtins.int
        @property
        def origin(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """The (3,) position of the plane origin."""
        @property
        def normal(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """The (3,) unit vector for the plane normal."""
        area: builtins.float
        """The projected area of the part onto this plane."""
        height: builtins.float
        """The height this part rises above the plane."""
        @property
        def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
            """The (2,) oriented bounding box size on this plane."""
        volume: builtins.float
        """the total volume of the resulting part when
        printed against this plane.
        """
        volume_support: builtins.float
        """The amount of overhung "support" volume when
        this part is printed against this plane.
        """
        def __init__(
            self,
            *,
            origin: collections.abc.Iterable[builtins.float] | None = ...,
            normal: collections.abc.Iterable[builtins.float] | None = ...,
            area: builtins.float = ...,
            height: builtins.float = ...,
            extents: collections.abc.Iterable[builtins.float] | None = ...,
            volume: builtins.float = ...,
            volume_support: builtins.float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["area", b"area", "extents", b"extents", "height", b"height", "normal", b"normal", "origin", b"origin", "volume", b"volume", "volume_support", b"volume_support"]) -> None: ...

    OUTCOME_FIELD_NUMBER: builtins.int
    POSTS_FIELD_NUMBER: builtins.int
    DRAWING_FIELD_NUMBER: builtins.int
    DEFAULTS_FIELD_NUMBER: builtins.int
    PLANES_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome: ...
    @property
    def posts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.Postprocess]:
        """The `method_id`-specific postprocessing options."""
    @property
    def drawing(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The `method_id`-specific 2D drawing to show to the user."""
    @property
    def defaults(self) -> kerfed.protos.common.v1.config_pb2.PartConfiguration:
        """The default configuration for this method."""
    @property
    def planes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AddFabrication.Plane]:
        """the different printing plane options."""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        posts: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.Postprocess] | None = ...,
        drawing: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        defaults: kerfed.protos.common.v1.config_pb2.PartConfiguration | None = ...,
        planes: collections.abc.Iterable[global___AddFabrication.Plane] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["defaults", b"defaults", "drawing", b"drawing", "outcome", b"outcome", "planes", b"planes", "posts", b"posts"]) -> None: ...

global___AddFabrication = AddFabrication

@typing_extensions.final
class PartFabrication(google.protobuf.message.Message):
    """The overall methods a part may be manufactured with."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PART_ID_FIELD_NUMBER: builtins.int
    GEOM_ID_FIELD_NUMBER: builtins.int
    GEOM_NAME_FIELD_NUMBER: builtins.int
    OUTCOME_FIELD_NUMBER: builtins.int
    EXTENTS_FIELD_NUMBER: builtins.int
    FLAT_FIELD_NUMBER: builtins.int
    BENT_FIELD_NUMBER: builtins.int
    ROLL_FIELD_NUMBER: builtins.int
    MILL_FIELD_NUMBER: builtins.int
    COTS_FIELD_NUMBER: builtins.int
    ADD_FIELD_NUMBER: builtins.int
    TURN_FIELD_NUMBER: builtins.int
    MANUAL_FIELD_NUMBER: builtins.int
    part_id: builtins.str
    """A globally unique UUID4 which can be used for indexing."""
    geom_id: builtins.str
    """What is the spatial hash of the geometry, so that
    if two identical meshes have been uploaded they will
    share the same `geom_id` and can be de-duplicated by this.
    """
    geom_name: builtins.str
    """if this geometry has a human-readable name store it here"""
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome:
        """What is the overall analysis status of this part."""
    @property
    def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The 3D size of the final part in *meters*"""
    @property
    def flat(self) -> global___FlatFabrication:
        """Detailed results about a specific fabrication output.
        Note that the field numbers correspond to the
        `FabricationMethod` enum defined in `config.proto`!
        """
    @property
    def bent(self) -> global___BentFabrication: ...
    @property
    def roll(self) -> global___RollFabrication: ...
    @property
    def mill(self) -> kerfed.protos.common.v1.mill_pb2.MillFabrication: ...
    @property
    def cots(self) -> global___CotsFabrication: ...
    @property
    def add(self) -> global___AddFabrication: ...
    @property
    def turn(self) -> global___TurnFabrication: ...
    @property
    def manual(self) -> global___ManualFabrication: ...
    def __init__(
        self,
        *,
        part_id: builtins.str = ...,
        geom_id: builtins.str = ...,
        geom_name: builtins.str = ...,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        extents: collections.abc.Iterable[builtins.float] | None = ...,
        flat: global___FlatFabrication | None = ...,
        bent: global___BentFabrication | None = ...,
        roll: global___RollFabrication | None = ...,
        mill: kerfed.protos.common.v1.mill_pb2.MillFabrication | None = ...,
        cots: global___CotsFabrication | None = ...,
        add: global___AddFabrication | None = ...,
        turn: global___TurnFabrication | None = ...,
        manual: global___ManualFabrication | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["add", b"add", "bent", b"bent", "cots", b"cots", "flat", b"flat", "manual", b"manual", "mill", b"mill", "outcome", b"outcome", "roll", b"roll", "turn", b"turn"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["add", b"add", "bent", b"bent", "cots", b"cots", "extents", b"extents", "flat", b"flat", "geom_id", b"geom_id", "geom_name", b"geom_name", "manual", b"manual", "mill", b"mill", "outcome", b"outcome", "part_id", b"part_id", "roll", b"roll", "turn", b"turn"]) -> None: ...

global___PartFabrication = PartFabrication
