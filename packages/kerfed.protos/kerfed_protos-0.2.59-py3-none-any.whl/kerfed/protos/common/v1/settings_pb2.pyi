"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.mill_pb2
import kerfed.protos.common.v1.money_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class FabricationSettings(google.protobuf.message.Message):
    """A configuration for the manufacturing analysis."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METHOD_ID_FIELD_NUMBER: builtins.int
    MILL_FIELD_NUMBER: builtins.int
    BENT_FIELD_NUMBER: builtins.int
    FLAT_FIELD_NUMBER: builtins.int
    @property
    def method_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType]:
        """Specify which methods you want the pipeline to analyze.
        If unspecified will run and return all methods.
        Valid options include:
        `mill`, `flat`, `bent`, `roll`, `add`, `cots`.
        """
    @property
    def mill(self) -> kerfed.protos.common.v1.mill_pb2.MillSettings:
        """Detailed settings for the milling geometry"""
    @property
    def bent(self) -> global___BentSettings:
        """Settings for flattening objects, including K-factors, etc"""
    @property
    def flat(self) -> global___FlatSettings:
        """Settings for flat pattern outputs."""
    def __init__(
        self,
        *,
        method_id: collections.abc.Iterable[kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType] | None = ...,
        mill: kerfed.protos.common.v1.mill_pb2.MillSettings | None = ...,
        bent: global___BentSettings | None = ...,
        flat: global___FlatSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bent", b"bent", "flat", b"flat", "mill", b"mill"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bent", b"bent", "flat", b"flat", "method_id", b"method_id", "mill", b"mill"]) -> None: ...

global___FabricationSettings = FabricationSettings

@typing_extensions.final
class KFactor(google.protobuf.message.Message):
    """Bent parts have flat patterns produced using these
    material and radius-ratio specific settings.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MATERIAL_ID_FIELD_NUMBER: builtins.int
    RADIUS_FRACTION_FIELD_NUMBER: builtins.int
    K_FACTOR_FIELD_NUMBER: builtins.int
    material_id: builtins.str
    """a material id match pattern string like `aluminum_6061_t6`
    or including wildcards like `aluminum_*`.
    """
    @property
    def radius_fraction(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the ratio of bend radius to sheet thickness."""
    @property
    def k_factor(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """what is the k-factor at that ratio?
        0.5 means flatten at the centerline of the sheet.
        0.0 means flatten at the inner surface of the bend.
        """
    def __init__(
        self,
        *,
        material_id: builtins.str = ...,
        radius_fraction: collections.abc.Iterable[builtins.float] | None = ...,
        k_factor: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["k_factor", b"k_factor", "material_id", b"material_id", "radius_fraction", b"radius_fraction"]) -> None: ...

global___KFactor = KFactor

@typing_extensions.final
class BentSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    K_FACTOR_FIELD_NUMBER: builtins.int
    @property
    def k_factor(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___KFactor]:
        """For bent sheet metal parts."""
    def __init__(
        self,
        *,
        k_factor: collections.abc.Iterable[global___KFactor] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["k_factor", b"k_factor"]) -> None: ...

global___BentSettings = BentSettings

@typing_extensions.final
class FlatSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UNDERSIZE_HOLES_FIELD_NUMBER: builtins.int
    undersize_holes: builtins.float
    """undersize any "holes" or "interior region that is circular"
    example: `hole_diameter=1.0`, `undersize_holes=0.125`
    the output geometry would have a hole diameter of `0.875`
    """
    def __init__(
        self,
        *,
        undersize_holes: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["undersize_holes", b"undersize_holes"]) -> None: ...

global___FlatSettings = FlatSettings

@typing_extensions.final
class PaymentSettings(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUTOMATIC_CHECKOUT_FIELD_NUMBER: builtins.int
    MATERIAL_PAD_FIELD_NUMBER: builtins.int
    FEE_PERCENT_FIELD_NUMBER: builtins.int
    FEE_FIXED_FIELD_NUMBER: builtins.int
    FEE_MONTHLY_FIELD_NUMBER: builtins.int
    CC_PERCENT_FIELD_NUMBER: builtins.int
    CC_FIXED_FIELD_NUMBER: builtins.int
    automatic_checkout: builtins.bool
    """Enable automatic checkout for the shop. This has two effects
    - checkout via Stripe will be enabled on the frontend
    - "email me this quote" will email the customer directly,
      skipping the manual review stage.
    """
    material_pad: builtins.float
    """Material has costs beyond the list price, including
    shipping from the facility, inventory and storage costs, etc.
    This factor can be set to account for anything not included
    in the list price and will be added to the material cost.
    I.e. if there is a $10 bar-stock, and this value is `0.2`
    the piece of bar stock will be bille  at $12.00.
    """
    fee_percent: builtins.float
    """A percentage fee per-transactions where 1.0% = 0.01"""
    @property
    def fee_fixed(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """A fixed fee per-transaction in USD."""
    @property
    def fee_monthly(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """A fixed fee if the shop is billed monthly."""
    cc_percent: builtins.float
    """Credit card charge rate from supplier.
    For stripe this is 2.9% + $0.30 per transaction.
    """
    @property
    def cc_fixed(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """What is the fixed charge per credit card transaction."""
    def __init__(
        self,
        *,
        automatic_checkout: builtins.bool = ...,
        material_pad: builtins.float = ...,
        fee_percent: builtins.float = ...,
        fee_fixed: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        fee_monthly: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        cc_percent: builtins.float = ...,
        cc_fixed: kerfed.protos.common.v1.money_pb2.Money | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cc_fixed", b"cc_fixed", "fee_fixed", b"fee_fixed", "fee_monthly", b"fee_monthly"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["automatic_checkout", b"automatic_checkout", "cc_fixed", b"cc_fixed", "cc_percent", b"cc_percent", "fee_fixed", b"fee_fixed", "fee_monthly", b"fee_monthly", "fee_percent", b"fee_percent", "material_pad", b"material_pad"]) -> None: ...

global___PaymentSettings = PaymentSettings
