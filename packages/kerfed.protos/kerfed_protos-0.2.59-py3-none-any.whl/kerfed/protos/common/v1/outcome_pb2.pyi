"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.error_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Outcome(google.protobuf.message.Message):
    """Indicate whether something like an analysis or
    pricing calculation succeeded.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_COMPLETED_FIELD_NUMBER: builtins.int
    IS_SUCCESS_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    QUALITY_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    is_completed: builtins.bool
    """Is this outcome completed (is it no longer running?)"""
    is_success: builtins.bool
    """Was this outcome successful?"""
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.error_pb2.Error]:
        """A list of all errors that occurred."""
    quality: builtins.float
    """If there is a qualitative "quality" metric for this outcome.
    For example on a PartFabrication message this represents
    how well the method can make the part between 0.0-1.0.
    A part with pockets can be made with a waterjet but only
    90% of the volume can be accurately fabricated (i.e. `quality~=0.9`)
    where a milling machine can make 100% of the volume (i.e `quality~=1.0`).
    """
    duration: builtins.float
    """If this was a billable compute call how long did the computation take?"""
    def __init__(
        self,
        *,
        is_completed: builtins.bool = ...,
        is_success: builtins.bool = ...,
        errors: collections.abc.Iterable[kerfed.protos.common.v1.error_pb2.Error] | None = ...,
        quality: builtins.float = ...,
        duration: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["duration", b"duration", "errors", b"errors", "is_completed", b"is_completed", "is_success", b"is_success", "quality", b"quality"]) -> None: ...

global___Outcome = Outcome
