"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
machine.proto

Functions and messages supporting an e-commerce
workflow for things like invoices, shipping labels,
etc.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.mill_pb2
import kerfed.protos.common.v1.model_pb2
import kerfed.protos.common.v1.money_pb2
import kerfed.protos.common.v1.settings_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ModelUse:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ModelUseEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ModelUse.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    MODEL_USE_UNSPECIFIED: _ModelUse.ValueType  # 0
    MODEL_USE_SETUP: _ModelUse.ValueType  # 1
    """this model is used to calculate the setup time"""
    MODEL_USE_FEED: _ModelUse.ValueType  # 2
    """this model is used to calculate the feed rate"""
    MODEL_USE_PIERCE: _ModelUse.ValueType  # 3
    """this model is used to calculate the pierce time
    for flat machines, i.e. how long it takes to start a cut.
    """
    MODEL_USE_RAPIDS: _ModelUse.ValueType  # 4
    """this model is used to calculate the rapid speed
    for machines, i.e. how fast the machine can move
    without cutting.
    """
    MODEL_USE_CYCLE: _ModelUse.ValueType  # 5
    """If there is a single model for cycle time, i.e.
    how long each part takes on the machine once all
    the setup work is done.
    """

class ModelUse(_ModelUse, metaclass=_ModelUseEnumTypeWrapper): ...

MODEL_USE_UNSPECIFIED: ModelUse.ValueType  # 0
MODEL_USE_SETUP: ModelUse.ValueType  # 1
"""this model is used to calculate the setup time"""
MODEL_USE_FEED: ModelUse.ValueType  # 2
"""this model is used to calculate the feed rate"""
MODEL_USE_PIERCE: ModelUse.ValueType  # 3
"""this model is used to calculate the pierce time
for flat machines, i.e. how long it takes to start a cut.
"""
MODEL_USE_RAPIDS: ModelUse.ValueType  # 4
"""this model is used to calculate the rapid speed
for machines, i.e. how fast the machine can move
without cutting.
"""
MODEL_USE_CYCLE: ModelUse.ValueType  # 5
"""If there is a single model for cycle time, i.e.
how long each part takes on the machine once all
the setup work is done.
"""
global___ModelUse = ModelUse

@typing_extensions.final
class MaterialConfig(google.protobuf.message.Message):
    """A message for a machine indicating how it performs
    on specific materials, i.e. to calculate the feed
    rate on 0.25" thick aluminum.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MATERIAL_ID_FIELD_NUMBER: builtins.int
    MODEL_ID_FIELD_NUMBER: builtins.int
    MODEL_USE_FIELD_NUMBER: builtins.int
    MODEL_FIELD_NUMBER: builtins.int
    material_id: builtins.str
    """which material does this config correspond to,
    i.e. `aluminum_6061_t6`
    """
    model_id: builtins.str
    """which model does this material use?
    i.e. `01f563b5-cb25-4e74-9765-49adb891d26f``
    """
    model_use: global___ModelUse.ValueType
    """what is this model used for in this instance
    i.e. `pierce`, `feed`, `rapids`
    """
    @property
    def model(self) -> kerfed.protos.common.v1.model_pb2.Model:
        """For an in-line model."""
    def __init__(
        self,
        *,
        material_id: builtins.str = ...,
        model_id: builtins.str = ...,
        model_use: global___ModelUse.ValueType = ...,
        model: kerfed.protos.common.v1.model_pb2.Model | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["model", b"model"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["material_id", b"material_id", "model", b"model", "model_id", b"model_id", "model_use", b"model_use"]) -> None: ...

global___MaterialConfig = MaterialConfig

@typing_extensions.final
class Machine(google.protobuf.message.Message):
    """A machine which can be used to cut various parts."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MACHINE_ID_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    METHOD_ID_FIELD_NUMBER: builtins.int
    SHOP_ID_FIELD_NUMBER: builtins.int
    ADDRESS_ID_FIELD_NUMBER: builtins.int
    WORK_RATE_FIELD_NUMBER: builtins.int
    RAPIDS_FIELD_NUMBER: builtins.int
    EXTENTS_FIELD_NUMBER: builtins.int
    MATERIALS_FIELD_NUMBER: builtins.int
    MODELS_FIELD_NUMBER: builtins.int
    BENT_FIELD_NUMBER: builtins.int
    FLAT_FIELD_NUMBER: builtins.int
    MILL_FIELD_NUMBER: builtins.int
    machine_id: builtins.str
    """What is the unique identifier for this machine
    i.e. `laser2k`
    """
    label: builtins.str
    """What is the user-facing name of the machine
    i.e. "2kW Amada Fiber Laser"
    """
    method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType
    """Which process is this machine for.
    i.e. `flat`, `bent`, etc
    """
    shop_id: builtins.str
    """Which shop does this machine belong to.
    i.e. `atomatic`
    """
    address_id: builtins.str
    """Where is this machine physically located?"""
    @property
    def work_rate(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """How much does this machine bill the customer
        in units of `Money / second`
        """
    rapids: builtins.str
    """What is the maximum speed this machine can move a distance?
    this is a `model_id` contained in `Machine.models`
    """
    @property
    def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """What is the largest part this machine can handle?"""
    @property
    def materials(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MaterialConfig]:
        """Which materials correspond to which cutting models
        keyed {'material_id': {'model_name': 'model_id'}}
        i.e. `{'aluminum_6061_t6`: {'pierce': '000-00'}}`
        """
    @property
    def models(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.model_pb2.Model]:
        """includes the per-material cost information, such as
        feed rate curves, pierce time curves, setup times, etc.
        these are stored separately from materials as many of them
        are duplicates (i.e. different aluminum alloys)
        keyed {'model_id': Model}
        """
    @property
    def bent(self) -> kerfed.protos.common.v1.settings_pb2.BentSettings:
        """Any machine-specific fabrication settings."""
    @property
    def flat(self) -> kerfed.protos.common.v1.settings_pb2.FlatSettings: ...
    @property
    def mill(self) -> kerfed.protos.common.v1.mill_pb2.MillSettings: ...
    def __init__(
        self,
        *,
        machine_id: builtins.str = ...,
        label: builtins.str = ...,
        method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType = ...,
        shop_id: builtins.str = ...,
        address_id: builtins.str = ...,
        work_rate: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        rapids: builtins.str = ...,
        extents: collections.abc.Iterable[builtins.float] | None = ...,
        materials: collections.abc.Iterable[global___MaterialConfig] | None = ...,
        models: collections.abc.Iterable[kerfed.protos.common.v1.model_pb2.Model] | None = ...,
        bent: kerfed.protos.common.v1.settings_pb2.BentSettings | None = ...,
        flat: kerfed.protos.common.v1.settings_pb2.FlatSettings | None = ...,
        mill: kerfed.protos.common.v1.mill_pb2.MillSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bent", b"bent", "flat", b"flat", "mill", b"mill", "work_rate", b"work_rate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["address_id", b"address_id", "bent", b"bent", "extents", b"extents", "flat", b"flat", "label", b"label", "machine_id", b"machine_id", "materials", b"materials", "method_id", b"method_id", "mill", b"mill", "models", b"models", "rapids", b"rapids", "shop_id", b"shop_id", "work_rate", b"work_rate"]) -> None: ...

global___Machine = Machine
