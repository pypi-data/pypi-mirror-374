"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.money_pb2
import kerfed.protos.common.v1.ndarray_pb2
import kerfed.protos.common.v1.tolerance_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _PostKind:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _PostKindEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PostKind.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    POST_KIND_UNSPECIFIED: _PostKind.ValueType  # 0
    """an unspecified postprocessing operation (invalid)"""
    POST_KIND_TAP: _PostKind.ValueType  # 1
    """a tapped hole"""
    POST_KIND_COUNTERSINK: _PostKind.ValueType  # 2
    """a countersunk hole"""
    POST_KIND_COUNTERBORE: _PostKind.ValueType  # 3
    """a counterbored hole"""
    POST_KIND_WELD: _PostKind.ValueType  # 4
    """a welded seam"""
    POST_KIND_BORE: _PostKind.ValueType  # 5
    """a precision reamed or machined hole"""
    POST_KIND_TOLERANCE: _PostKind.ValueType  # 6
    """a tighter than default tolerance"""
    POST_KIND_FINISH: _PostKind.ValueType  # 7
    """a surface finish"""

class PostKind(_PostKind, metaclass=_PostKindEnumTypeWrapper):
    """a postprocessing operation: i.e. tapping, welding, etc"""

POST_KIND_UNSPECIFIED: PostKind.ValueType  # 0
"""an unspecified postprocessing operation (invalid)"""
POST_KIND_TAP: PostKind.ValueType  # 1
"""a tapped hole"""
POST_KIND_COUNTERSINK: PostKind.ValueType  # 2
"""a countersunk hole"""
POST_KIND_COUNTERBORE: PostKind.ValueType  # 3
"""a counterbored hole"""
POST_KIND_WELD: PostKind.ValueType  # 4
"""a welded seam"""
POST_KIND_BORE: PostKind.ValueType  # 5
"""a precision reamed or machined hole"""
POST_KIND_TOLERANCE: PostKind.ValueType  # 6
"""a tighter than default tolerance"""
POST_KIND_FINISH: PostKind.ValueType  # 7
"""a surface finish"""
global___PostKind = PostKind

@typing_extensions.final
class Thread(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_IMPERIAL_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    PITCH_FIELD_NUMBER: builtins.int
    RADIUS_MINOR_FIELD_NUMBER: builtins.int
    RADIUS_MAJOR_FIELD_NUMBER: builtins.int
    is_imperial: builtins.bool
    """if imperial mesaurements are in inches
    otherwise measurements are meters
    """
    description: builtins.str
    """"1/4-20" """
    pitch: builtins.float
    """distance between thread"""
    radius_minor: builtins.float
    """minor radius"""
    radius_major: builtins.float
    """major radius"""
    def __init__(
        self,
        *,
        is_imperial: builtins.bool = ...,
        description: builtins.str = ...,
        pitch: builtins.float = ...,
        radius_minor: builtins.float = ...,
        radius_major: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description", b"description", "is_imperial", b"is_imperial", "pitch", b"pitch", "radius_major", b"radius_major", "radius_minor", b"radius_minor"]) -> None: ...

global___Thread = Thread

@typing_extensions.final
class Countersink(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RADIUS_FIELD_NUMBER: builtins.int
    ANGLE_FIELD_NUMBER: builtins.int
    radius: builtins.float
    """maximum radius"""
    angle: builtins.float
    """cone angle"""
    def __init__(
        self,
        *,
        radius: builtins.float = ...,
        angle: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle", b"angle", "radius", b"radius"]) -> None: ...

global___Countersink = Countersink

@typing_extensions.final
class Counterbore(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RADIUS_FIELD_NUMBER: builtins.int
    DEPTH_FIELD_NUMBER: builtins.int
    radius: builtins.float
    """radius of counterbore"""
    depth: builtins.float
    """how deep the counterbore goes"""
    def __init__(
        self,
        *,
        radius: builtins.float = ...,
        depth: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["depth", b"depth", "radius", b"radius"]) -> None: ...

global___Counterbore = Counterbore

@typing_extensions.final
class Weld(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LENGTH_FIELD_NUMBER: builtins.int
    length: builtins.float
    """how long is this weld"""
    def __init__(
        self,
        *,
        length: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["length", b"length"]) -> None: ...

global___Weld = Weld

@typing_extensions.final
class Bore(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RADIUS_FIELD_NUMBER: builtins.int
    DEPTH_FIELD_NUMBER: builtins.int
    HAS_REAMER_FIELD_NUMBER: builtins.int
    @property
    def radius(self) -> kerfed.protos.common.v1.tolerance_pb2.BilateralTolerance:
        """what is the radius of this bore"""
    depth: builtins.float
    """how deep is this bore"""
    has_reamer: builtins.bool
    """if this radius has a reamer that exists for it."""
    def __init__(
        self,
        *,
        radius: kerfed.protos.common.v1.tolerance_pb2.BilateralTolerance | None = ...,
        depth: builtins.float = ...,
        has_reamer: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["radius", b"radius"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["depth", b"depth", "has_reamer", b"has_reamer", "radius", b"radius"]) -> None: ...

global___Bore = Bore

@typing_extensions.final
class Color(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLOR_ID_FIELD_NUMBER: builtins.int
    LABEL_FIELD_NUMBER: builtins.int
    HEX_FIELD_NUMBER: builtins.int
    color_id: builtins.str
    """The unique color identifier."""
    label: builtins.str
    """The human readable name of this color."""
    hex: builtins.str
    """The hex code for this color."""
    def __init__(
        self,
        *,
        color_id: builtins.str = ...,
        label: builtins.str = ...,
        hex: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["color_id", b"color_id", "hex", b"hex", "label", b"label"]) -> None: ...

global___Color = Color

@typing_extensions.final
class Finish(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FINISH_ID_FIELD_NUMBER: builtins.int
    COLOR_FIELD_NUMBER: builtins.int
    finish_id: builtins.str
    """the unique finish type, i.e. "anodize", "powdercoat" """
    @property
    def color(self) -> global___Color:
        """What color is this finish in"""
    def __init__(
        self,
        *,
        finish_id: builtins.str = ...,
        color: global___Color | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["color", b"color"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["color", b"color", "finish_id", b"finish_id"]) -> None: ...

global___Finish = Finish

@typing_extensions.final
class Postprocess(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POST_ID_FIELD_NUMBER: builtins.int
    GEOM_ID_FIELD_NUMBER: builtins.int
    METHOD_ID_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    GROUP_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    MARKERS_FIELD_NUMBER: builtins.int
    IS_DEFAULT_FIELD_NUMBER: builtins.int
    COUNT_FIELD_NUMBER: builtins.int
    THREAD_FIELD_NUMBER: builtins.int
    COUNTERSINK_FIELD_NUMBER: builtins.int
    COUNTERBORE_FIELD_NUMBER: builtins.int
    WELD_FIELD_NUMBER: builtins.int
    BORE_FIELD_NUMBER: builtins.int
    FINISH_FIELD_NUMBER: builtins.int
    post_id: builtins.str
    """the unique posprocessing uuid"""
    geom_id: builtins.str
    """which geometry does this postprocessing
    operation apply to: if not included should
    be assumed to belong to the parent message.
    however for operations like tolerancing which is:
    f(repeated PartFabrication)={repeated PostProcess}
    we need to know which geometry it's for.
    """
    method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType
    """which manufacturing method is this postprocessing
    operation valid for? i.e. "flat", "bent", etc.
    """
    kind: global___PostKind.ValueType
    """is this welding, tapping, etc."""
    group: builtins.str
    """holes can only be tapped once
    this looks like 'A1', 'B2', etc
    """
    description: builtins.str
    """human readable text description"""
    @property
    def markers(self) -> kerfed.protos.common.v1.ndarray_pb2.NDArray:
        """the location in part coordinates where
        the part should indicate the operation
        """
    is_default: builtins.bool
    """should this postprocessing operation
    be selected by default
    """
    count: builtins.int
    """How many of this part"""
    @property
    def thread(self) -> global___Thread: ...
    @property
    def countersink(self) -> global___Countersink: ...
    @property
    def counterbore(self) -> global___Counterbore: ...
    @property
    def weld(self) -> global___Weld: ...
    @property
    def bore(self) -> global___Bore: ...
    @property
    def finish(self) -> global___Finish: ...
    def __init__(
        self,
        *,
        post_id: builtins.str = ...,
        geom_id: builtins.str = ...,
        method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType = ...,
        kind: global___PostKind.ValueType = ...,
        group: builtins.str = ...,
        description: builtins.str = ...,
        markers: kerfed.protos.common.v1.ndarray_pb2.NDArray | None = ...,
        is_default: builtins.bool = ...,
        count: builtins.int = ...,
        thread: global___Thread | None = ...,
        countersink: global___Countersink | None = ...,
        counterbore: global___Counterbore | None = ...,
        weld: global___Weld | None = ...,
        bore: global___Bore | None = ...,
        finish: global___Finish | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bore", b"bore", "counterbore", b"counterbore", "countersink", b"countersink", "details", b"details", "finish", b"finish", "markers", b"markers", "thread", b"thread", "weld", b"weld"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bore", b"bore", "count", b"count", "counterbore", b"counterbore", "countersink", b"countersink", "description", b"description", "details", b"details", "finish", b"finish", "geom_id", b"geom_id", "group", b"group", "is_default", b"is_default", "kind", b"kind", "markers", b"markers", "method_id", b"method_id", "post_id", b"post_id", "thread", b"thread", "weld", b"weld"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["details", b"details"]) -> typing_extensions.Literal["thread", "countersink", "counterbore", "weld", "bore", "finish"] | None: ...

global___Postprocess = Postprocess

@typing_extensions.final
class FinishOptions(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FINISH_ID_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    COLORS_FIELD_NUMBER: builtins.int
    MATERIAL_ID_FIELD_NUMBER: builtins.int
    finish_id: builtins.str
    """i.e. "anodized" """
    description: builtins.str
    """a blurb describing this finish"""
    @property
    def colors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Color]:
        """color options this finish is available in"""
    @property
    def material_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Material match patterns, i.e. "aluminum_6061" or "steel*" """
    def __init__(
        self,
        *,
        finish_id: builtins.str = ...,
        description: builtins.str = ...,
        colors: collections.abc.Iterable[global___Color] | None = ...,
        material_id: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["colors", b"colors", "description", b"description", "finish_id", b"finish_id", "material_id", b"material_id"]) -> None: ...

global___FinishOptions = FinishOptions

@typing_extensions.final
class PostPrice(google.protobuf.message.Message):
    """A model for how to generate a price for each postprocessing option."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KIND_FIELD_NUMBER: builtins.int
    FINISH_FIELD_NUMBER: builtins.int
    SETUP_FIELD_NUMBER: builtins.int
    UNIT_FIELD_NUMBER: builtins.int
    kind: global___PostKind.ValueType
    """What type of"""
    @property
    def finish(self) -> global___FinishOptions:
        """for a POST_KIND_FINISH message
        What finish options are available
        """
    @property
    def setup(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """What is the fixed fee to set up the group of this operation?"""
    @property
    def unit(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """What is the per-hole or per-meter cost for this?"""
    def __init__(
        self,
        *,
        kind: global___PostKind.ValueType = ...,
        finish: global___FinishOptions | None = ...,
        setup: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        unit: kerfed.protos.common.v1.money_pb2.Money | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["finish", b"finish", "setup", b"setup", "unit", b"unit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["finish", b"finish", "kind", b"kind", "setup", b"setup", "unit", b"unit"]) -> None: ...

global___PostPrice = PostPrice
