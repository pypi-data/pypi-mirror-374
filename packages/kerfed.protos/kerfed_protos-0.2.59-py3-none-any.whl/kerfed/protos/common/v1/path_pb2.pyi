"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
path.proto
Contains toolpath motion primitives.

Note that we use an *implicit unit system*
of meters-kilograms-seconds everywhere
and values other than `mks` are invalid!
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import kerfed.protos.common.v1.geometry_pb2
import kerfed.protos.common.v1.ndarray_pb2
import kerfed.protos.common.v1.tool_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _SegmentTag:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SegmentTagEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SegmentTag.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SEGMENT_TAG_UNSPECIFIED: _SegmentTag.ValueType  # 0
    """must be explicitly specified."""
    SEGMENT_TAG_CUT: _SegmentTag.ValueType  # 1
    """The segment is cutting material away, probably as
    a rough cut: this generally translates to `G1`
    """
    SEGMENT_TAG_CUT_FINISH: _SegmentTag.ValueType  # 2
    """The segment is doing a finish pass, or the edges
    of the segment are touching the finished part.
    """
    SEGMENT_TAG_CUT_PLUNGE: _SegmentTag.ValueType  # 3
    """The segment is doing a finish pass, or the edges
    of the segment are touching the finished part.
    """
    SEGMENT_TAG_CUT_DRILL: _SegmentTag.ValueType  # 4
    """This segment represents a drilling operation."""
    SEGMENT_TAG_MOVE: _SegmentTag.ValueType  # 9
    """The segment is a reposition move and is not cutting
    material away: this generall corresponds `G0`
    """
    SEGMENT_TAG_MOVE_SHORTCUT: _SegmentTag.ValueType  # 10
    """This is a shortcut between cutting segments and
    is not cutting material away.
    """
    SEGMENT_TAG_MOVE_LINK: _SegmentTag.ValueType  # 11
    """This is a move where the intermediate region
    has NOT been checked for collision and is relying on
    a postprocesser to connect or "link" the path.
    A move with this tag MUST be checked before execution
    and any postprocesser should immediately fail if it
    sees this tag.
    """
    SEGMENT_TAG_ERROR: _SegmentTag.ValueType  # 15
    """Some step in the path generation had an error
    and we tagged it as an error for debugging.
    The G-code converter should raise an error on this
    and refuse to output a path of any sort.
    """
    SEGMENT_TAG_SENTINEL: _SegmentTag.ValueType  # 16
    """This segment is a "sentinel" used for internal
    logic and should not be included in an output.
    """

class SegmentTag(_SegmentTag, metaclass=_SegmentTagEnumTypeWrapper):
    """The segment's role in the milling process"""

SEGMENT_TAG_UNSPECIFIED: SegmentTag.ValueType  # 0
"""must be explicitly specified."""
SEGMENT_TAG_CUT: SegmentTag.ValueType  # 1
"""The segment is cutting material away, probably as
a rough cut: this generally translates to `G1`
"""
SEGMENT_TAG_CUT_FINISH: SegmentTag.ValueType  # 2
"""The segment is doing a finish pass, or the edges
of the segment are touching the finished part.
"""
SEGMENT_TAG_CUT_PLUNGE: SegmentTag.ValueType  # 3
"""The segment is doing a finish pass, or the edges
of the segment are touching the finished part.
"""
SEGMENT_TAG_CUT_DRILL: SegmentTag.ValueType  # 4
"""This segment represents a drilling operation."""
SEGMENT_TAG_MOVE: SegmentTag.ValueType  # 9
"""The segment is a reposition move and is not cutting
material away: this generall corresponds `G0`
"""
SEGMENT_TAG_MOVE_SHORTCUT: SegmentTag.ValueType  # 10
"""This is a shortcut between cutting segments and
is not cutting material away.
"""
SEGMENT_TAG_MOVE_LINK: SegmentTag.ValueType  # 11
"""This is a move where the intermediate region
has NOT been checked for collision and is relying on
a postprocesser to connect or "link" the path.
A move with this tag MUST be checked before execution
and any postprocesser should immediately fail if it
sees this tag.
"""
SEGMENT_TAG_ERROR: SegmentTag.ValueType  # 15
"""Some step in the path generation had an error
and we tagged it as an error for debugging.
The G-code converter should raise an error on this
and refuse to output a path of any sort.
"""
SEGMENT_TAG_SENTINEL: SegmentTag.ValueType  # 16
"""This segment is a "sentinel" used for internal
logic and should not be included in an output.
"""
global___SegmentTag = SegmentTag

@typing_extensions.final
class BoundingBox3D(google.protobuf.message.Message):
    """An axis-aligned bounding box in 3d.
    i.e., the box defined as
     lower.x <= x <= upper.x &&
     lower.y <= y <= upper.y &&
     lower.z <= z <= upper.z
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOWER_FIELD_NUMBER: builtins.int
    UPPER_FIELD_NUMBER: builtins.int
    @property
    def lower(self) -> global___Point3D: ...
    @property
    def upper(self) -> global___Point3D: ...
    def __init__(
        self,
        *,
        lower: global___Point3D | None = ...,
        upper: global___Point3D | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["lower", b"lower", "upper", b"upper"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["lower", b"lower", "upper", b"upper"]) -> None: ...

global___BoundingBox3D = BoundingBox3D

@typing_extensions.final
class Point3D(google.protobuf.message.Message):
    """A 3D point in space."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___Point3D = Point3D

@typing_extensions.final
class Segment(google.protobuf.message.Message):
    """A generic segment which can be any of a helix, circular arc,
    or line segment depending on parameter values
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    START_FIELD_NUMBER: builtins.int
    FINAL_FIELD_NUMBER: builtins.int
    ANGLE_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    TOOL_INDEX_FIELD_NUMBER: builtins.int
    RADIUS_OVERRIDE_FIELD_NUMBER: builtins.int
    @property
    def start(self) -> global___Point3D:
        """The starting point of the segment."""
    @property
    def final(self) -> global___Point3D:
        """The ending point of the segment."""
    angle: builtins.float
    """What is the angle of the arc section in radians?
    Straight lines have an angle of 0.0
    This will always take the shortest arc so `angle < pi`
    Counterclockwise arcs are positive and clockwise are negative
    """
    tag: global___SegmentTag.ValueType
    """The segment's role e.g., removing material vs. repositioning"""
    tool_index: builtins.int
    """The index of the tool this segment is cut with."""
    radius_override: builtins.float
    """An override radius used for internal logic."""
    def __init__(
        self,
        *,
        start: global___Point3D | None = ...,
        final: global___Point3D | None = ...,
        angle: builtins.float = ...,
        tag: global___SegmentTag.ValueType = ...,
        tool_index: builtins.int = ...,
        radius_override: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["final", b"final", "start", b"start"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle", b"angle", "final", b"final", "radius_override", b"radius_override", "start", b"start", "tag", b"tag", "tool_index", b"tool_index"]) -> None: ...

global___Segment = Segment

@typing_extensions.final
class ToolPlane(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSFORM_FIELD_NUMBER: builtins.int
    LIMITS_FIELD_NUMBER: builtins.int
    LEVELS_FIELD_NUMBER: builtins.int
    @property
    def transform(self) -> kerfed.protos.common.v1.ndarray_pb2.RigidTransform:
        """Rigid transform relative to world/material frame"""
    @property
    def limits(self) -> global___BoundingBox3D:
        """The limits of tool-tip motion in the above transform"""
    @property
    def levels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The unique depth levels consumed by this tool plane."""
    def __init__(
        self,
        *,
        transform: kerfed.protos.common.v1.ndarray_pb2.RigidTransform | None = ...,
        limits: global___BoundingBox3D | None = ...,
        levels: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["limits", b"limits", "transform", b"transform"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["levels", b"levels", "limits", b"limits", "transform", b"transform"]) -> None: ...

global___ToolPlane = ToolPlane

@typing_extensions.final
class SegmentPath(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SEGMENTS_FIELD_NUMBER: builtins.int
    TOOLS_FIELD_NUMBER: builtins.int
    PLANE_FIELD_NUMBER: builtins.int
    STATS_FIELD_NUMBER: builtins.int
    @property
    def segments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Segment]:
        """Connected segments the end of a tool moves along.
        This is very large and will only be populated if `return_plan=True`
        """
    @property
    def tools(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.tool_pb2.Tool]:
        """The library of tools each segment references in `tool_index`"""
    @property
    def plane(self) -> global___ToolPlane:
        """What are the details about the toolplane for these cuts."""
    @property
    def stats(self) -> global___SegmentStatistics:
        """How long did this path take to execute?"""
    def __init__(
        self,
        *,
        segments: collections.abc.Iterable[global___Segment] | None = ...,
        tools: collections.abc.Iterable[kerfed.protos.common.v1.tool_pb2.Tool] | None = ...,
        plane: global___ToolPlane | None = ...,
        stats: global___SegmentStatistics | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["plane", b"plane", "stats", b"stats"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["plane", b"plane", "segments", b"segments", "stats", b"stats", "tools", b"tools"]) -> None: ...

global___SegmentPath = SegmentPath

@typing_extensions.final
class SegmentStatistics(google.protobuf.message.Message):
    """Hold information about path duration and length."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LENGTH_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    TOOL_LENGTH_FIELD_NUMBER: builtins.int
    TOOL_DURATION_FIELD_NUMBER: builtins.int
    TOOL_CHANGES_FIELD_NUMBER: builtins.int
    length: builtins.float
    """The total path length in meters."""
    duration: builtins.float
    """The duration of the path when executed at 100%
    of the velocity requested by the tool.
    """
    @property
    def tool_length(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """How long did each tool travel, in meters."""
    @property
    def tool_duration(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """How long was each tool being used for in seconds."""
    tool_changes: builtins.int
    """How many tool changes occurred in this path?"""
    def __init__(
        self,
        *,
        length: builtins.float = ...,
        duration: builtins.float = ...,
        tool_length: collections.abc.Iterable[builtins.float] | None = ...,
        tool_duration: collections.abc.Iterable[builtins.float] | None = ...,
        tool_changes: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["duration", b"duration", "length", b"length", "tool_changes", b"tool_changes", "tool_duration", b"tool_duration", "tool_length", b"tool_length"]) -> None: ...

global___SegmentStatistics = SegmentStatistics

@typing_extensions.final
class MillPlan(google.protobuf.message.Message):
    """A message containing all the information required to
    translate the job into a full output format which
    initially includes a PDF plan and a `camotics` simulation
    but could include other simulation formats (i.e. MasterCAM)
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PART_FIELD_NUMBER: builtins.int
    STOCK_FIELD_NUMBER: builtins.int
    PATHS_FIELD_NUMBER: builtins.int
    @property
    def part(self) -> kerfed.protos.common.v1.geometry_pb2.Geometry:
        """The triangulated mesh of the desired part."""
    @property
    def stock(self) -> kerfed.protos.common.v1.geometry_pb2.Geometry:
        """What stock are we starting with."""
    @property
    def paths(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SegmentPath]:
        """Multiple toolpaths and fixtures."""
    def __init__(
        self,
        *,
        part: kerfed.protos.common.v1.geometry_pb2.Geometry | None = ...,
        stock: kerfed.protos.common.v1.geometry_pb2.Geometry | None = ...,
        paths: collections.abc.Iterable[global___SegmentPath] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["part", b"part", "stock", b"stock"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["part", b"part", "paths", b"paths", "stock", b"stock"]) -> None: ...

global___MillPlan = MillPlan
