"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
price.proto

Functions and messages supporting an e-commerce
workflow for things like invoices, shipping labels,
etc.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.address_pb2
import kerfed.protos.common.v1.config_pb2
import kerfed.protos.common.v1.machine_pb2
import kerfed.protos.common.v1.money_pb2
import kerfed.protos.common.v1.operation_pb2
import kerfed.protos.common.v1.outcome_pb2
import kerfed.protos.common.v1.post_pb2
import kerfed.protos.common.v1.stock_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class LinePrice(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PART_ID_FIELD_NUMBER: builtins.int
    METHOD_ID_FIELD_NUMBER: builtins.int
    TOTAL_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    MASS_FIELD_NUMBER: builtins.int
    EXTENTS_FIELD_NUMBER: builtins.int
    OPERATIONS_FIELD_NUMBER: builtins.int
    OUTCOME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    part_id: builtins.str
    """The globally unique identifier for the part this price was generated for."""
    method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType
    """the fabrication method this is valid for, i.e. `flat`"""
    @property
    def total(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """What is the total price for this part at this quantity?"""
    quantity: builtins.int
    """This price is *only valid at a specific quantity.*"""
    mass: builtins.float
    """How much does the *each* part weigh in *kilograms*"""
    @property
    def extents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """How large is *each* part in *meters*"""
    @property
    def operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.operation_pb2.Operation]:
        """if a part consists of "buy metal sheet, cut on laser, ..."
        return a list of these operations which can be displayed
        to the user as an "itemized" price or can be used when
        released to manufacturing as a "todo list".
        ERP systems sometimes have the list
        of operations with a signature and barcode next to each op
        and we could do a thing with a QR code if desired.
        """
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome:
        """If this price had an error list here."""
    description: builtins.str
    """A markdown description of what this price is doing."""
    def __init__(
        self,
        *,
        part_id: builtins.str = ...,
        method_id: kerfed.protos.common.v1.config_pb2.FabricationMethod.ValueType = ...,
        total: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        quantity: builtins.int = ...,
        mass: builtins.float = ...,
        extents: collections.abc.Iterable[builtins.float] | None = ...,
        operations: collections.abc.Iterable[kerfed.protos.common.v1.operation_pb2.Operation] | None = ...,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        description: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["outcome", b"outcome", "total", b"total"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description", b"description", "extents", b"extents", "mass", b"mass", "method_id", b"method_id", "operations", b"operations", "outcome", b"outcome", "part_id", b"part_id", "quantity", b"quantity", "total", b"total"]) -> None: ...

global___LinePrice = LinePrice

@typing_extensions.final
class OrderPrice(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOTAL_FIELD_NUMBER: builtins.int
    LINES_FIELD_NUMBER: builtins.int
    SETUPS_FIELD_NUMBER: builtins.int
    SHIPPING_FIELD_NUMBER: builtins.int
    TAXES_FIELD_NUMBER: builtins.int
    DISCOUNT_FIELD_NUMBER: builtins.int
    NOTE_FIELD_NUMBER: builtins.int
    IS_VALID_FIELD_NUMBER: builtins.int
    @property
    def total(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """the sum price the customer was billed"""
    @property
    def lines(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """the sum price of all parts in this order"""
    @property
    def setups(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """the sum of all setups after combining"""
    @property
    def shipping(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """total shipping cost billed to customer"""
    @property
    def taxes(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """taxes billed to customer"""
    @property
    def discount(self) -> kerfed.protos.common.v1.money_pb2.Money:
        """discount, usually negative: note that it is signed"""
    note: builtins.str
    """a user-facing note about this price"""
    is_valid: builtins.bool
    """is this total price valid and able to be checked out?"""
    def __init__(
        self,
        *,
        total: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        lines: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        setups: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        shipping: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        taxes: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        discount: kerfed.protos.common.v1.money_pb2.Money | None = ...,
        note: builtins.str = ...,
        is_valid: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["discount", b"discount", "lines", b"lines", "setups", b"setups", "shipping", b"shipping", "taxes", b"taxes", "total", b"total"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["discount", b"discount", "is_valid", b"is_valid", "lines", b"lines", "note", b"note", "setups", b"setups", "shipping", b"shipping", "taxes", b"taxes", "total", b"total"]) -> None: ...

global___OrderPrice = OrderPrice

@typing_extensions.final
class PriceMetadata(google.protobuf.message.Message):
    """Contains mappings of IDs to metadata used for pricing."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STOCK_FIELD_NUMBER: builtins.int
    STOCK_OVERHEAD_FIELD_NUMBER: builtins.int
    MACHINES_FIELD_NUMBER: builtins.int
    POST_FIELD_NUMBER: builtins.int
    ADDRESSES_FIELD_NUMBER: builtins.int
    @property
    def stock(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.stock_pb2.Stock]:
        """The available stock materials that can be used by the
        configured parts.
        """
    stock_overhead: builtins.float
    """What is the overhead percentage for stock, reflecting
    all costs including delivery, inventory, uncertainty, etc.
    If a sheet is $100.00 and this value is `0.5` the material
    will be billed at $150.00
    """
    @property
    def machines(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.machine_pb2.Machine]:
        """The available machines that can be used to cut the parts."""
    @property
    def post(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.post_pb2.PostPrice]:
        """What postprocessing operations are available?"""
    @property
    def addresses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.address_pb2.PostalAddress]:
        """What are the facilities that are mailing stuff."""
    def __init__(
        self,
        *,
        stock: collections.abc.Iterable[kerfed.protos.common.v1.stock_pb2.Stock] | None = ...,
        stock_overhead: builtins.float = ...,
        machines: collections.abc.Iterable[kerfed.protos.common.v1.machine_pb2.Machine] | None = ...,
        post: collections.abc.Iterable[kerfed.protos.common.v1.post_pb2.PostPrice] | None = ...,
        addresses: collections.abc.Iterable[kerfed.protos.common.v1.address_pb2.PostalAddress] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["addresses", b"addresses", "machines", b"machines", "post", b"post", "stock", b"stock", "stock_overhead", b"stock_overhead"]) -> None: ...

global___PriceMetadata = PriceMetadata
