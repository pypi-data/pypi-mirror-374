"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.outcome_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class GeometrySummary(google.protobuf.message.Message):
    """A summary of a single geometry found in the scene."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GEOM_ID_FIELD_NUMBER: builtins.int
    NODE_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PREVIEW_FIELD_NUMBER: builtins.int
    geom_id: builtins.str
    """the re-usable id assigned to the geometry"""
    @property
    def node_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The names of the "nodes" which contain this geometry in the scene.
        The length of this list is "how many times was this geometry
        instantiated in the scene," i.e. the "quantity"
        """
    name: builtins.str
    """the human-readable name of the geometry"""
    @property
    def preview(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """A raster image preview of just this geometry."""
    def __init__(
        self,
        *,
        geom_id: builtins.str = ...,
        node_id: collections.abc.Iterable[builtins.str] | None = ...,
        name: builtins.str = ...,
        preview: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["preview", b"preview"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["geom_id", b"geom_id", "name", b"name", "node_id", b"node_id", "preview", b"preview"]) -> None: ...

global___GeometrySummary = GeometrySummary

@typing_extensions.final
class Scene(google.protobuf.message.Message):
    """One or more 2D or 3D parts represented as a single geometry file."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NEUTRAL_FIELD_NUMBER: builtins.int
    ORIGINAL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    GEOMETRIES_FIELD_NUMBER: builtins.int
    PREVIEW_FIELD_NUMBER: builtins.int
    OUTCOME_FIELD_NUMBER: builtins.int
    @property
    def neutral(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The loaded model in our preferred neutral interchange format:
        `glb` for 3D
        `svg` for 2D
        """
    @property
    def original(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """The original file that this scene was loaded from."""
    name: builtins.str
    """The name of the scene, usually set to the input filename."""
    @property
    def geometries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GeometrySummary]:
        """What geometry is contained in this scene"""
    @property
    def preview(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """A raster preview of the whole scene."""
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome:
        """Did the scene loading succeed?"""
    def __init__(
        self,
        *,
        neutral: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        original: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        name: builtins.str = ...,
        geometries: collections.abc.Iterable[global___GeometrySummary] | None = ...,
        preview: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["neutral", b"neutral", "original", b"original", "outcome", b"outcome", "preview", b"preview"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["geometries", b"geometries", "name", b"name", "neutral", b"neutral", "original", b"original", "outcome", b"outcome", "preview", b"preview"]) -> None: ...

global___Scene = Scene
