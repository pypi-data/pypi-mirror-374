"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
geometry.proto
Contains RPC definitions for analysis
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.brand_pb2
import kerfed.protos.common.v1.fab_pb2
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.outcome_pb2
import kerfed.protos.common.v1.scene_pb2
import kerfed.protos.common.v1.settings_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class GeometryRequest(google.protobuf.message.Message):
    """Request a CAD file to be fully analyzed by the geometry pipeline."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    SOURCE_UNITS_FIELD_NUMBER: builtins.int
    BRAND_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    RETURN_PREVIEWS_FIELD_NUMBER: builtins.int
    RETURN_INTERFERENCE_FIELD_NUMBER: builtins.int
    RETURN_PROPRIETARY_FIELD_NUMBER: builtins.int
    TIME_OUT_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """Raw CAD geometry to be analyzed in a supported format."""
    source_units: builtins.str
    """If the raw file is in a format that does not include unit
    information (i.e. SVG, DXF, STL, OBJ) specify the file's units
    through this request. If not passed the pipeline will "guess"
    the unit system from irregular metadata which may be incorrect.
    """
    @property
    def brand(self) -> kerfed.protos.common.v1.brand_pb2.Brand:
        """Apply brand preferences to generated user-facing material
        i.e. apply a specific logo, display units (mm vs inch), address, etc.
        """
    @property
    def settings(self) -> kerfed.protos.common.v1.settings_pb2.FabricationSettings:
        """Edit detailed settings for each manufacturing process
        such as the maximum spindle speed of milling machines,
        k-factors for flattening sheet metal, etc.
        """
    return_previews: builtins.bool
    """Should the pipeline render rasterized previews of each part?"""
    return_interference: builtins.bool
    """Should the pipeline calculate part-part interferences
    and then add additional postprocessing operations where required?
    """
    return_proprietary: builtins.bool
    """Enable potentially expensive proprietary formats
    like SLDPRT, SLDASM, IPT, X_B, etc.
    Note that these are licensed from third parties and are
    disabled for most API accounts unless you have had us enable them.
    """
    time_out: builtins.float
    """How long should the pipeline be allowed to run before timing out?"""
    def __init__(
        self,
        *,
        source: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        source_units: builtins.str = ...,
        brand: kerfed.protos.common.v1.brand_pb2.Brand | None = ...,
        settings: kerfed.protos.common.v1.settings_pb2.FabricationSettings | None = ...,
        return_previews: builtins.bool = ...,
        return_interference: builtins.bool = ...,
        return_proprietary: builtins.bool = ...,
        time_out: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["brand", b"brand", "settings", b"settings", "source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["brand", b"brand", "return_interference", b"return_interference", "return_previews", b"return_previews", "return_proprietary", b"return_proprietary", "settings", b"settings", "source", b"source", "source_units", b"source_units", "time_out", b"time_out"]) -> None: ...

global___GeometryRequest = GeometryRequest

@typing_extensions.final
class GeometryResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTCOME_FIELD_NUMBER: builtins.int
    ANALYSIS_FIELD_NUMBER: builtins.int
    SCENE_FIELD_NUMBER: builtins.int
    @property
    def outcome(self) -> kerfed.protos.common.v1.outcome_pb2.Outcome:
        """Is this geometry analysis complete yet?
        Clients should check `outome.is_completed`
        before accessing other properties.
        """
    @property
    def analysis(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.fab_pb2.PartFabrication]:
        """The fabrication analysis."""
    @property
    def scene(self) -> kerfed.protos.common.v1.scene_pb2.Scene:
        """the loaded file in a neutral format"""
    def __init__(
        self,
        *,
        outcome: kerfed.protos.common.v1.outcome_pb2.Outcome | None = ...,
        analysis: collections.abc.Iterable[kerfed.protos.common.v1.fab_pb2.PartFabrication] | None = ...,
        scene: kerfed.protos.common.v1.scene_pb2.Scene | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["outcome", b"outcome", "scene", b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["analysis", b"analysis", "outcome", b"outcome", "scene", b"scene"]) -> None: ...

global___GeometryResponse = GeometryResponse
