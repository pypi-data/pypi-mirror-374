import msgspec


class Item(msgspec.Struct, tag=True, kw_only=True, dict=True, repr_omit_defaults=True):
    """Represents an item."""
    id: str
    name: str
    deprecated: bool = False

    def __post_init__(self):
        self.inventory_count: int | None = None

    def __repr__(self) -> str:
        if self.inventory_count:
            return super().__repr__() + f"[{self.inventory_count}]"
        else:
            return super().__repr__() + f"[{self.inventory_count}]"

    def __rich_repr__(self):
        if self.inventory_count:
            return super().__rich_repr__() + f"[{self.inventory_count}]"
        else:
            return super().__rich_repr__() + f"[{self.inventory_count}]"


class Trash(Item, tag="trash"):
    """Represents a trash item."""
    pass


class Usable(Item, tag="usable"):
    """Represents a usable item."""
    pass


class Food(Item, tag="food"):
    """Represents a food item."""
    pass


class Ammo(Item, tag="ammo"):
    """Represents a ammo item."""
    pass


class Staff(Item, tag="staff"):
    """Represents a Staff item."""
    pass


class Dagger(Item, tag="dagger"):
    """Represents a Dagger item."""
    pass


class OneHandedSword(Item, tag="oneHandedSword"):
    """Represents a OneHandedSword."""
    pass


class FellingAxe(Item, tag="fellingAxe"):
    """Represents a FellingAxe."""


class UnknownItem(Item):
    """Represents an unknown item generated by the library because of missing class"""


Weapon = Staff | Dagger | OneHandedSword

AnyItem = Trash | Usable | Food | Ammo | Weapon | FellingAxe | UnknownItem
