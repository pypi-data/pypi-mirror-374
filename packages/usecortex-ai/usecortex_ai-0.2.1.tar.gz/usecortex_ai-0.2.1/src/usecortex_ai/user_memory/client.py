# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawUserMemoryClient, RawUserMemoryClient


class UserMemoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserMemoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserMemoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserMemoryClient
        """
        return self._raw_client

    def list_user_memories(
        self, *, tenant_id: str, sub_tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.list_user_memories(tenant_id='tenant_id', sub_tenant_id='sub_tenant_id', )
        """
        _response = self._raw_client.list_user_memories(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def delete_user_memory(
        self,
        *,
        tenant_id: str,
        memory_id: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        memory_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.delete_user_memory(tenant_id='tenant_id', memory_id='memory_id', sub_tenant_id='sub_tenant_id', )
        """
        _response = self._raw_client.delete_user_memory(
            tenant_id=tenant_id, memory_id=memory_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def retrieve_user_memory(
        self,
        *,
        tenant_id: str,
        query: str,
        sub_tenant_id: str,
        max_count: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        query : str

        sub_tenant_id : str

        max_count : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.retrieve_user_memory(tenant_id='tenant_id', query='query', sub_tenant_id='sub_tenant_id', )
        """
        _response = self._raw_client.retrieve_user_memory(
            tenant_id=tenant_id,
            query=query,
            sub_tenant_id=sub_tenant_id,
            max_count=max_count,
            request_options=request_options,
        )
        return _response.data

    def generate_user_memory(
        self,
        *,
        tenant_id: str,
        user_query: str,
        user_name: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        user_query : str

        user_name : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.generate_user_memory(tenant_id='tenant_id', user_query='user_query', user_name='user_name', sub_tenant_id='sub_tenant_id', )
        """
        _response = self._raw_client.generate_user_memory(
            tenant_id=tenant_id,
            user_query=user_query,
            user_name=user_name,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data

    def add_user_memory(
        self,
        *,
        tenant_id: str,
        user_memory: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        user_memory : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.add_user_memory(tenant_id='tenant_id', user_memory='user_memory', sub_tenant_id='sub_tenant_id', )
        """
        _response = self._raw_client.add_user_memory(
            tenant_id=tenant_id, user_memory=user_memory, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data


class AsyncUserMemoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserMemoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserMemoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserMemoryClient
        """
        return self._raw_client

    async def list_user_memories(
        self, *, tenant_id: str, sub_tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.list_user_memories(tenant_id='tenant_id', sub_tenant_id='sub_tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.list_user_memories(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def delete_user_memory(
        self,
        *,
        tenant_id: str,
        memory_id: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        memory_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.delete_user_memory(tenant_id='tenant_id', memory_id='memory_id', sub_tenant_id='sub_tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user_memory(
            tenant_id=tenant_id, memory_id=memory_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def retrieve_user_memory(
        self,
        *,
        tenant_id: str,
        query: str,
        sub_tenant_id: str,
        max_count: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        query : str

        sub_tenant_id : str

        max_count : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.retrieve_user_memory(tenant_id='tenant_id', query='query', sub_tenant_id='sub_tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve_user_memory(
            tenant_id=tenant_id,
            query=query,
            sub_tenant_id=sub_tenant_id,
            max_count=max_count,
            request_options=request_options,
        )
        return _response.data

    async def generate_user_memory(
        self,
        *,
        tenant_id: str,
        user_query: str,
        user_name: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        user_query : str

        user_name : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.generate_user_memory(tenant_id='tenant_id', user_query='user_query', user_name='user_name', sub_tenant_id='sub_tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.generate_user_memory(
            tenant_id=tenant_id,
            user_query=user_query,
            user_name=user_name,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data

    async def add_user_memory(
        self,
        *,
        tenant_id: str,
        user_memory: str,
        sub_tenant_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        tenant_id : str

        user_memory : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.add_user_memory(tenant_id='tenant_id', user_memory='user_memory', sub_tenant_id='sub_tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.add_user_memory(
            tenant_id=tenant_id, user_memory=user_memory, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data
