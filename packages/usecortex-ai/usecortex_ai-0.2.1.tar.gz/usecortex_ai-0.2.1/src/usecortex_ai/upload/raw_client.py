# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .. import core
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from ..errors.service_unavailable_error import ServiceUnavailableError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.actual_error_response import ActualErrorResponse
from ..types.app_sources_upload_data import AppSourcesUploadData
from ..types.batch_upload_data import BatchUploadData
from ..types.processing_status import ProcessingStatus
from ..types.relations import Relations
from ..types.single_upload_data import SingleUploadData
from ..types.source_model import SourceModel

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawUploadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def batch_upload(
        self,
        *,
        tenant_id: str,
        files: typing.List[core.File],
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BatchUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BatchUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/batch_upload",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "files": files,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUploadData,
                    parse_obj_as(
                        type_=BatchUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def batch_update(
        self,
        *,
        tenant_id: str,
        files: typing.List[core.File],
        sub_tenant_id: typing.Optional[str] = None,
        source_ids: typing.Optional[typing.List[str]] = OMIT,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BatchUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        source_ids : typing.Optional[typing.List[str]]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BatchUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/batch_update",
            method="PATCH",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "source_ids": source_ids,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "files": files,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUploadData,
                    parse_obj_as(
                        type_=BatchUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upload_document(
        self,
        *,
        tenant_id: str,
        file: core.File,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        file : core.File
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/upload_document",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_document(
        self,
        *,
        source_id: str,
        tenant_id: str,
        file: core.File,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        file : core.File
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/update_document",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upload_app_sources(
        self,
        *,
        tenant_id: str,
        request: typing.Sequence[SourceModel],
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AppSourcesUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        request : typing.Sequence[SourceModel]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AppSourcesUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/upload_app_sources",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[SourceModel], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AppSourcesUploadData,
                    parse_obj_as(
                        type_=AppSourcesUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upload_markdown(
        self,
        *,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Upload markdown content. If request.document_metadata contains a 'file_id' key (non-empty), it will be used as the file ID;
        otherwise, a new file_id will be generated for that file. This allows file-specific IDs to be set directly in the metadata.

        Parameters
        ----------
        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/upload_markdown",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upload_text(
        self,
        *,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Upload markdown content. If request.document_metadata contains a 'file_id' key (non-empty), it will be used as the file ID;
        otherwise, a new file_id will be generated for that file. This allows file-specific IDs to be set directly in the metadata.

        Parameters
        ----------
        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/upload_text",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_markdown(
        self,
        *,
        source_id: str,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/update_markdown",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_text(
        self,
        *,
        source_id: str,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/update_text",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upload_embeddings(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Sequence[typing.Sequence[float]],
        sub_tenant_id: typing.Optional[str] = None,
        file_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        embeddings : typing.Sequence[typing.Sequence[float]]

        sub_tenant_id : typing.Optional[str]

        file_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/upload_embeddings",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "embeddings": embeddings,
                "file_id": file_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_embeddings(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        embeddings: typing.Optional[typing.Dict[str, typing.Sequence[float]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        embeddings : typing.Optional[typing.Dict[str, typing.Sequence[float]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/update_embeddings",
            method="PATCH",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "embeddings": embeddings,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def scrape_webpage(
        self,
        *,
        web_url: str,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        file_id: typing.Optional[str] = None,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        web_url : str

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        file_id : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/scrape_webpage",
            method="POST",
            params={
                "web_url": web_url,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
                "file_id": file_id,
            },
            data={
                "relations": relations,
            },
            headers={
                "content-type": "application/x-www-form-urlencoded",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_webpage(
        self,
        *,
        web_url: str,
        source_id: str,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        web_url : str

        source_id : str

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SingleUploadData]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/update_webpage",
            method="PATCH",
            params={
                "web_url": web_url,
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "relations": relations,
            },
            headers={
                "content-type": "application/x-www-form-urlencoded",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_source(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/delete_source",
            method="DELETE",
            json={
                "tenant_id": tenant_id,
                "source_ids": source_ids,
                "sub_tenant_id": sub_tenant_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_memory(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/delete_memory",
            method="DELETE",
            json={
                "tenant_id": tenant_id,
                "source_ids": source_ids,
                "sub_tenant_id": sub_tenant_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return HttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def verify_processing(
        self,
        *,
        file_id: str,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ProcessingStatus]:
        """
        Verify the processing status of an uploaded file.

        Returns:
            ProcessingStatusResponse: Processing status information

        Parameters
        ----------
        file_id : str

        tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ProcessingStatus]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "upload/verify_processing",
            method="POST",
            params={
                "file_id": file_id,
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ProcessingStatus,
                    parse_obj_as(
                        type_=ProcessingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawUploadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def batch_upload(
        self,
        *,
        tenant_id: str,
        files: typing.List[core.File],
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BatchUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BatchUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/batch_upload",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "files": files,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUploadData,
                    parse_obj_as(
                        type_=BatchUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def batch_update(
        self,
        *,
        tenant_id: str,
        files: typing.List[core.File],
        sub_tenant_id: typing.Optional[str] = None,
        source_ids: typing.Optional[typing.List[str]] = OMIT,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BatchUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        source_ids : typing.Optional[typing.List[str]]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BatchUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/batch_update",
            method="PATCH",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "source_ids": source_ids,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "files": files,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BatchUploadData,
                    parse_obj_as(
                        type_=BatchUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upload_document(
        self,
        *,
        tenant_id: str,
        file: core.File,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        file : core.File
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/upload_document",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_document(
        self,
        *,
        source_id: str,
        tenant_id: str,
        file: core.File,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[str] = OMIT,
        document_metadata: typing.Optional[str] = OMIT,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        file : core.File
            See core.File for more documentation

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[str]

        document_metadata : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/update_document",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": relations,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
            force_multipart=True,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upload_app_sources(
        self,
        *,
        tenant_id: str,
        request: typing.Sequence[SourceModel],
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[AppSourcesUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        request : typing.Sequence[SourceModel]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AppSourcesUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/upload_app_sources",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[SourceModel], direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AppSourcesUploadData,
                    parse_obj_as(
                        type_=AppSourcesUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upload_markdown(
        self,
        *,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Upload markdown content. If request.document_metadata contains a 'file_id' key (non-empty), it will be used as the file ID;
        otherwise, a new file_id will be generated for that file. This allows file-specific IDs to be set directly in the metadata.

        Parameters
        ----------
        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/upload_markdown",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upload_text(
        self,
        *,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Upload markdown content. If request.document_metadata contains a 'file_id' key (non-empty), it will be used as the file ID;
        otherwise, a new file_id will be generated for that file. This allows file-specific IDs to be set directly in the metadata.

        Parameters
        ----------
        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/upload_text",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_markdown(
        self,
        *,
        source_id: str,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/update_markdown",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_text(
        self,
        *,
        source_id: str,
        tenant_id: str,
        content: str,
        sub_tenant_id: typing.Optional[str] = None,
        tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        relations: typing.Optional[Relations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        source_id : str

        tenant_id : str

        content : str

        sub_tenant_id : typing.Optional[str]

        tenant_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        document_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        relations : typing.Optional[Relations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/update_text",
            method="PATCH",
            params={
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "content": content,
                "tenant_metadata": tenant_metadata,
                "document_metadata": document_metadata,
                "relations": convert_and_respect_annotation_metadata(
                    object_=relations, annotation=Relations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upload_embeddings(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Sequence[typing.Sequence[float]],
        sub_tenant_id: typing.Optional[str] = None,
        file_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        embeddings : typing.Sequence[typing.Sequence[float]]

        sub_tenant_id : typing.Optional[str]

        file_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/upload_embeddings",
            method="POST",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "embeddings": embeddings,
                "file_id": file_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_embeddings(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        embeddings: typing.Optional[typing.Dict[str, typing.Sequence[float]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        embeddings : typing.Optional[typing.Dict[str, typing.Sequence[float]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/update_embeddings",
            method="PATCH",
            params={
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            json={
                "embeddings": embeddings,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def scrape_webpage(
        self,
        *,
        web_url: str,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        file_id: typing.Optional[str] = None,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        web_url : str

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        file_id : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/scrape_webpage",
            method="POST",
            params={
                "web_url": web_url,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
                "file_id": file_id,
            },
            data={
                "relations": relations,
            },
            headers={
                "content-type": "application/x-www-form-urlencoded",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_webpage(
        self,
        *,
        web_url: str,
        source_id: str,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        relations: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SingleUploadData]:
        """
        Parameters
        ----------
        web_url : str

        source_id : str

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        relations : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SingleUploadData]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/update_webpage",
            method="PATCH",
            params={
                "web_url": web_url,
                "source_id": source_id,
                "tenant_id": tenant_id,
                "sub_tenant_id": sub_tenant_id,
            },
            data={
                "relations": relations,
            },
            headers={
                "content-type": "application/x-www-form-urlencoded",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SingleUploadData,
                    parse_obj_as(
                        type_=SingleUploadData,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_source(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/delete_source",
            method="DELETE",
            json={
                "tenant_id": tenant_id,
                "source_ids": source_ids,
                "sub_tenant_id": sub_tenant_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_memory(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[typing.Any]]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/delete_memory",
            method="DELETE",
            json={
                "tenant_id": tenant_id,
                "source_ids": source_ids,
                "sub_tenant_id": sub_tenant_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if _response is None or not _response.text.strip():
                return AsyncHttpResponse(response=_response, data=None)
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def verify_processing(
        self,
        *,
        file_id: str,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ProcessingStatus]:
        """
        Verify the processing status of an uploaded file.

        Returns:
            ProcessingStatusResponse: Processing status information

        Parameters
        ----------
        file_id : str

        tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ProcessingStatus]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "upload/verify_processing",
            method="POST",
            params={
                "file_id": file_id,
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ProcessingStatus,
                    parse_obj_as(
                        type_=ProcessingStatus,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ActualErrorResponse,
                        parse_obj_as(
                            type_=ActualErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
