# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.list_sources_response import ListSourcesResponse
from ..types.sub_tenant_ids_data import SubTenantIdsData
from .raw_client import AsyncRawSourcesClient, RawSourcesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SourcesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSourcesClient
        """
        return self._raw_client

    def get_all(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSourcesResponse:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSourcesResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.sources.get_all(tenant_id='tenant_id', )
        """
        _response = self._raw_client.get_all(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def get_by_ids(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSourcesResponse:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSourcesResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.sources.get_by_ids(tenant_id='tenant_id', source_ids=['source_ids'], )
        """
        _response = self._raw_client.get_by_ids(
            tenant_id=tenant_id, source_ids=source_ids, request_options=request_options
        )
        return _response.data

    def get_sub_tenant_ids(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SubTenantIdsData:
        """
        Get all sub-tenant IDs (tenant IDs) contained within a specific Weaviate collection.
        Fetches the tenant IDs directly from Weaviate using default cluster credentials.

        Args:
            tenant_id: The tenant ID to fetch sub-tenant IDs for
            api_details: Authentication dependency

        Returns:
            SubTenantIdsData: Contains collection_name, sub_tenant_ids list, count, and success message

        Example:
            GET /list/sub_tenant_ids?tenant_id=my_tenant_123

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubTenantIdsData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.sources.get_sub_tenant_ids(tenant_id='tenant_id', )
        """
        _response = self._raw_client.get_sub_tenant_ids(tenant_id=tenant_id, request_options=request_options)
        return _response.data


class AsyncSourcesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSourcesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSourcesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSourcesClient
        """
        return self._raw_client

    async def get_all(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSourcesResponse:
        """
        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSourcesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.sources.get_all(tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_all(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def get_by_ids(
        self,
        *,
        tenant_id: str,
        source_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSourcesResponse:
        """
        Parameters
        ----------
        tenant_id : str

        source_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSourcesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.sources.get_by_ids(tenant_id='tenant_id', source_ids=['source_ids'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_ids(
            tenant_id=tenant_id, source_ids=source_ids, request_options=request_options
        )
        return _response.data

    async def get_sub_tenant_ids(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SubTenantIdsData:
        """
        Get all sub-tenant IDs (tenant IDs) contained within a specific Weaviate collection.
        Fetches the tenant IDs directly from Weaviate using default cluster credentials.

        Args:
            tenant_id: The tenant ID to fetch sub-tenant IDs for
            api_details: Authentication dependency

        Returns:
            SubTenantIdsData: Contains collection_name, sub_tenant_ids list, count, and success message

        Example:
            GET /list/sub_tenant_ids?tenant_id=my_tenant_123

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubTenantIdsData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.sources.get_sub_tenant_ids(tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_sub_tenant_ids(tenant_id=tenant_id, request_options=request_options)
        return _response.data
