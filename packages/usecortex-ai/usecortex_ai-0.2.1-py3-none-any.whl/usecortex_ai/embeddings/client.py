# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.embeddings_create_collection_data import EmbeddingsCreateCollectionData
from ..types.embeddings_delete_data import EmbeddingsDeleteData
from ..types.embeddings_get_data import EmbeddingsGetData
from ..types.embeddings_search_data import EmbeddingsSearchData
from .raw_client import AsyncRawEmbeddingsClient, RawEmbeddingsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EmbeddingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEmbeddingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEmbeddingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEmbeddingsClient
        """
        return self._raw_client

    def delete(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsDeleteData:
        """
        Delete specific embedding chunks from indexed sources.

        This endpoint deletes specified embedding chunks from the Findr backend by sending
        chunk IDs to the backend delete service.

        Args:
            request (EmbeddingsDeleteRequest): The delete request containing:
                - chunk_ids (List[str]): List of chunk IDs to delete
                - tenant_id (str): Tenant identifier for multi-tenancy
                - sub_tenant_id (str, optional): Sub-tenant identifier, defaults to tenant_id
            api_details (dict): Authentication details obtained from API key validation

        Returns:
            EmbeddingsDeleteData: Success response with deletion details

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsDeleteData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.delete(chunk_ids=['chunk_ids'], tenant_id='tenant_id', )
        """
        _response = self._raw_client.delete(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def search(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Optional[typing.Sequence[float]] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        max_chunks: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsSearchData:
        """
        Search for similar embedding chunks using vector similarity.

        This endpoint performs semantic search by sending an embedding vector to the Findr backend
        and returns a list of the most similar chunk IDs based on vector similarity.

        Args:
            request (EmbeddingsSearchRequest): The search request containing:
                - embeddings (List[float]): Single embedding vector for similarity search
                - tenant_id (str): Tenant identifier for multi-tenancy
                - sub_tenant_id (str, optional): Sub-tenant identifier, defaults to tenant_id
                - max_chunks (int, optional): Maximum number of chunk IDs to return (default: 10)
            api_details (dict): Authentication details obtained from API key validation

        Returns:
            EmbeddingsSearchData: List of chunk IDs with similarity scores

        Parameters
        ----------
        tenant_id : str

        embeddings : typing.Optional[typing.Sequence[float]]

        sub_tenant_id : typing.Optional[str]

        max_chunks : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsSearchData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.search(tenant_id='tenant_id', )
        """
        _response = self._raw_client.search(
            tenant_id=tenant_id,
            embeddings=embeddings,
            sub_tenant_id=sub_tenant_id,
            max_chunks=max_chunks,
            request_options=request_options,
        )
        return _response.data

    def get_by_chunk_ids(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsGetData:
        """
        Get embeddings based on chunk IDs.

        This endpoint returns embeddings for a list of chunk IDs.

        Returns:
            EmbeddingsGetData: Embeddings data for the requested chunk IDs

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsGetData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.get_by_chunk_ids(chunk_ids=['chunk_ids'], tenant_id='tenant_id', )
        """
        _response = self._raw_client.get_by_chunk_ids(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def create_collection(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsCreateCollectionData:
        """
        Create an embeddings collection for the given tenant in Findr.

        sub_tenant_id is set to be the same as tenant_id as per requirements.

        Returns:
            EmbeddingsCreateCollectionData: Success response with collection details

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsCreateCollectionData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.create_collection(tenant_id='tenant_id', )
        """
        _response = self._raw_client.create_collection(tenant_id=tenant_id, request_options=request_options)
        return _response.data


class AsyncEmbeddingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEmbeddingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEmbeddingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEmbeddingsClient
        """
        return self._raw_client

    async def delete(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsDeleteData:
        """
        Delete specific embedding chunks from indexed sources.

        This endpoint deletes specified embedding chunks from the Findr backend by sending
        chunk IDs to the backend delete service.

        Args:
            request (EmbeddingsDeleteRequest): The delete request containing:
                - chunk_ids (List[str]): List of chunk IDs to delete
                - tenant_id (str): Tenant identifier for multi-tenancy
                - sub_tenant_id (str, optional): Sub-tenant identifier, defaults to tenant_id
            api_details (dict): Authentication details obtained from API key validation

        Returns:
            EmbeddingsDeleteData: Success response with deletion details

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsDeleteData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.delete(chunk_ids=['chunk_ids'], tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def search(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Optional[typing.Sequence[float]] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        max_chunks: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsSearchData:
        """
        Search for similar embedding chunks using vector similarity.

        This endpoint performs semantic search by sending an embedding vector to the Findr backend
        and returns a list of the most similar chunk IDs based on vector similarity.

        Args:
            request (EmbeddingsSearchRequest): The search request containing:
                - embeddings (List[float]): Single embedding vector for similarity search
                - tenant_id (str): Tenant identifier for multi-tenancy
                - sub_tenant_id (str, optional): Sub-tenant identifier, defaults to tenant_id
                - max_chunks (int, optional): Maximum number of chunk IDs to return (default: 10)
            api_details (dict): Authentication details obtained from API key validation

        Returns:
            EmbeddingsSearchData: List of chunk IDs with similarity scores

        Parameters
        ----------
        tenant_id : str

        embeddings : typing.Optional[typing.Sequence[float]]

        sub_tenant_id : typing.Optional[str]

        max_chunks : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsSearchData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.search(tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            tenant_id=tenant_id,
            embeddings=embeddings,
            sub_tenant_id=sub_tenant_id,
            max_chunks=max_chunks,
            request_options=request_options,
        )
        return _response.data

    async def get_by_chunk_ids(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsGetData:
        """
        Get embeddings based on chunk IDs.

        This endpoint returns embeddings for a list of chunk IDs.

        Returns:
            EmbeddingsGetData: Embeddings data for the requested chunk IDs

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]

        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsGetData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.get_by_chunk_ids(chunk_ids=['chunk_ids'], tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_chunk_ids(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def create_collection(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsCreateCollectionData:
        """
        Create an embeddings collection for the given tenant in Findr.

        sub_tenant_id is set to be the same as tenant_id as per requirements.

        Returns:
            EmbeddingsCreateCollectionData: Success response with collection details

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsCreateCollectionData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.create_collection(tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_collection(tenant_id=tenant_id, request_options=request_options)
        return _response.data
