# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.tenant_stats import TenantStats
from .raw_client import AsyncRawTenantClient, RawTenantClient


class TenantClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTenantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTenantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTenantClient
        """
        return self._raw_client

    def stats(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantStats:
        """
        Get tenant stats.

        This endpoint returns stats for tenant.

        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantStats
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.tenant.stats(tenant_id='tenant_id', )
        """
        _response = self._raw_client.stats(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data


class AsyncTenantClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTenantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTenantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTenantClient
        """
        return self._raw_client

    async def stats(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantStats:
        """
        Get tenant stats.

        This endpoint returns stats for tenant.

        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantStats
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tenant.stats(tenant_id='tenant_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.stats(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data
