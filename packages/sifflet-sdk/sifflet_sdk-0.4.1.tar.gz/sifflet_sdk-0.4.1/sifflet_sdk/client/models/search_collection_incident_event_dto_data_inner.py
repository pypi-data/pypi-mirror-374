# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.assignees_change_incident_event_dto import (
    AssigneesChangeIncidentEventDto,
)
from sifflet_sdk.client.models.collaboration_tool_disconnected_incident_event_dto import (
    CollaborationToolDisconnectedIncidentEventDto,
)
from sifflet_sdk.client.models.collaboration_tool_item_linked_by_monitor_incident_event_dto import (
    CollaborationToolItemLinkedByMonitorIncidentEventDto,
)
from sifflet_sdk.client.models.collaboration_tool_item_linked_by_user_incident_event_dto import (
    CollaborationToolItemLinkedByUserIncidentEventDto,
)
from sifflet_sdk.client.models.collaboration_tool_item_unlinked_incident_event_dto import (
    CollaborationToolItemUnlinkedIncidentEventDto,
)
from sifflet_sdk.client.models.collaboration_tool_status_change_event_dto import (
    CollaborationToolStatusChangeEventDto,
)
from sifflet_sdk.client.models.comment_incident_event_dto import CommentIncidentEventDto
from sifflet_sdk.client.models.creation_by_rule_run_incident_event_dto import (
    CreationByRuleRunIncidentEventDto,
)
from sifflet_sdk.client.models.creation_by_user_incident_event_dto import (
    CreationByUserIncidentEventDto,
)
from sifflet_sdk.client.models.name_change_incident_event_dto import (
    NameChangeIncidentEventDto,
)
from sifflet_sdk.client.models.new_failures_incident_event_dto import (
    NewFailuresIncidentEventDto,
)
from sifflet_sdk.client.models.rules_added_incident_event_dto import (
    RulesAddedIncidentEventDto,
)
from sifflet_sdk.client.models.rules_moved_from_incident_event_dto import (
    RulesMovedFromIncidentEventDto,
)
from sifflet_sdk.client.models.rules_moved_to_incident_event_dto import (
    RulesMovedToIncidentEventDto,
)
from sifflet_sdk.client.models.severity_change_incident_event_dto import (
    SeverityChangeIncidentEventDto,
)
from sifflet_sdk.client.models.status_change_incident_event_dto import (
    StatusChangeIncidentEventDto,
)
from typing_extensions import Literal, Self

SEARCHCOLLECTIONINCIDENTEVENTDTODATAINNER_ONE_OF_SCHEMAS = [
    "AssigneesChangeIncidentEventDto",
    "CollaborationToolDisconnectedIncidentEventDto",
    "CollaborationToolItemLinkedByMonitorIncidentEventDto",
    "CollaborationToolItemLinkedByUserIncidentEventDto",
    "CollaborationToolItemUnlinkedIncidentEventDto",
    "CollaborationToolStatusChangeEventDto",
    "CommentIncidentEventDto",
    "CreationByRuleRunIncidentEventDto",
    "CreationByUserIncidentEventDto",
    "NameChangeIncidentEventDto",
    "NewFailuresIncidentEventDto",
    "RulesAddedIncidentEventDto",
    "RulesMovedFromIncidentEventDto",
    "RulesMovedToIncidentEventDto",
    "SeverityChangeIncidentEventDto",
    "StatusChangeIncidentEventDto",
]


class SearchCollectionIncidentEventDtoDataInner(BaseModel):
    """
    SearchCollectionIncidentEventDtoDataInner
    """

    # data type: AssigneesChangeIncidentEventDto
    oneof_schema_1_validator: Optional[AssigneesChangeIncidentEventDto] = None
    # data type: CollaborationToolDisconnectedIncidentEventDto
    oneof_schema_2_validator: Optional[CollaborationToolDisconnectedIncidentEventDto] = None
    # data type: CollaborationToolItemLinkedByMonitorIncidentEventDto
    oneof_schema_3_validator: Optional[CollaborationToolItemLinkedByMonitorIncidentEventDto] = None
    # data type: CollaborationToolItemLinkedByUserIncidentEventDto
    oneof_schema_4_validator: Optional[CollaborationToolItemLinkedByUserIncidentEventDto] = None
    # data type: CollaborationToolItemUnlinkedIncidentEventDto
    oneof_schema_5_validator: Optional[CollaborationToolItemUnlinkedIncidentEventDto] = None
    # data type: CollaborationToolStatusChangeEventDto
    oneof_schema_6_validator: Optional[CollaborationToolStatusChangeEventDto] = None
    # data type: CommentIncidentEventDto
    oneof_schema_7_validator: Optional[CommentIncidentEventDto] = None
    # data type: CreationByRuleRunIncidentEventDto
    oneof_schema_8_validator: Optional[CreationByRuleRunIncidentEventDto] = None
    # data type: CreationByUserIncidentEventDto
    oneof_schema_9_validator: Optional[CreationByUserIncidentEventDto] = None
    # data type: NameChangeIncidentEventDto
    oneof_schema_10_validator: Optional[NameChangeIncidentEventDto] = None
    # data type: NewFailuresIncidentEventDto
    oneof_schema_11_validator: Optional[NewFailuresIncidentEventDto] = None
    # data type: RulesAddedIncidentEventDto
    oneof_schema_12_validator: Optional[RulesAddedIncidentEventDto] = None
    # data type: RulesMovedFromIncidentEventDto
    oneof_schema_13_validator: Optional[RulesMovedFromIncidentEventDto] = None
    # data type: RulesMovedToIncidentEventDto
    oneof_schema_14_validator: Optional[RulesMovedToIncidentEventDto] = None
    # data type: SeverityChangeIncidentEventDto
    oneof_schema_15_validator: Optional[SeverityChangeIncidentEventDto] = None
    # data type: StatusChangeIncidentEventDto
    oneof_schema_16_validator: Optional[StatusChangeIncidentEventDto] = None
    actual_instance: Optional[
        Union[
            AssigneesChangeIncidentEventDto,
            CollaborationToolDisconnectedIncidentEventDto,
            CollaborationToolItemLinkedByMonitorIncidentEventDto,
            CollaborationToolItemLinkedByUserIncidentEventDto,
            CollaborationToolItemUnlinkedIncidentEventDto,
            CollaborationToolStatusChangeEventDto,
            CommentIncidentEventDto,
            CreationByRuleRunIncidentEventDto,
            CreationByUserIncidentEventDto,
            NameChangeIncidentEventDto,
            NewFailuresIncidentEventDto,
            RulesAddedIncidentEventDto,
            RulesMovedFromIncidentEventDto,
            RulesMovedToIncidentEventDto,
            SeverityChangeIncidentEventDto,
            StatusChangeIncidentEventDto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "AssigneesChangeIncidentEventDto",
        "CollaborationToolDisconnectedIncidentEventDto",
        "CollaborationToolItemLinkedByMonitorIncidentEventDto",
        "CollaborationToolItemLinkedByUserIncidentEventDto",
        "CollaborationToolItemUnlinkedIncidentEventDto",
        "CollaborationToolStatusChangeEventDto",
        "CommentIncidentEventDto",
        "CreationByRuleRunIncidentEventDto",
        "CreationByUserIncidentEventDto",
        "NameChangeIncidentEventDto",
        "NewFailuresIncidentEventDto",
        "RulesAddedIncidentEventDto",
        "RulesMovedFromIncidentEventDto",
        "RulesMovedToIncidentEventDto",
        "SeverityChangeIncidentEventDto",
        "StatusChangeIncidentEventDto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = SearchCollectionIncidentEventDtoDataInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: AssigneesChangeIncidentEventDto
        if not isinstance(v, AssigneesChangeIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssigneesChangeIncidentEventDto`")
        else:
            match += 1
        # validate data type: CollaborationToolDisconnectedIncidentEventDto
        if not isinstance(v, CollaborationToolDisconnectedIncidentEventDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CollaborationToolDisconnectedIncidentEventDto`"
            )
        else:
            match += 1
        # validate data type: CollaborationToolItemLinkedByMonitorIncidentEventDto
        if not isinstance(v, CollaborationToolItemLinkedByMonitorIncidentEventDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CollaborationToolItemLinkedByMonitorIncidentEventDto`"
            )
        else:
            match += 1
        # validate data type: CollaborationToolItemLinkedByUserIncidentEventDto
        if not isinstance(v, CollaborationToolItemLinkedByUserIncidentEventDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CollaborationToolItemLinkedByUserIncidentEventDto`"
            )
        else:
            match += 1
        # validate data type: CollaborationToolItemUnlinkedIncidentEventDto
        if not isinstance(v, CollaborationToolItemUnlinkedIncidentEventDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CollaborationToolItemUnlinkedIncidentEventDto`"
            )
        else:
            match += 1
        # validate data type: CollaborationToolStatusChangeEventDto
        if not isinstance(v, CollaborationToolStatusChangeEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CollaborationToolStatusChangeEventDto`")
        else:
            match += 1
        # validate data type: CommentIncidentEventDto
        if not isinstance(v, CommentIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CommentIncidentEventDto`")
        else:
            match += 1
        # validate data type: CreationByRuleRunIncidentEventDto
        if not isinstance(v, CreationByRuleRunIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreationByRuleRunIncidentEventDto`")
        else:
            match += 1
        # validate data type: CreationByUserIncidentEventDto
        if not isinstance(v, CreationByUserIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreationByUserIncidentEventDto`")
        else:
            match += 1
        # validate data type: NameChangeIncidentEventDto
        if not isinstance(v, NameChangeIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NameChangeIncidentEventDto`")
        else:
            match += 1
        # validate data type: NewFailuresIncidentEventDto
        if not isinstance(v, NewFailuresIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NewFailuresIncidentEventDto`")
        else:
            match += 1
        # validate data type: RulesAddedIncidentEventDto
        if not isinstance(v, RulesAddedIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RulesAddedIncidentEventDto`")
        else:
            match += 1
        # validate data type: RulesMovedFromIncidentEventDto
        if not isinstance(v, RulesMovedFromIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RulesMovedFromIncidentEventDto`")
        else:
            match += 1
        # validate data type: RulesMovedToIncidentEventDto
        if not isinstance(v, RulesMovedToIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RulesMovedToIncidentEventDto`")
        else:
            match += 1
        # validate data type: SeverityChangeIncidentEventDto
        if not isinstance(v, SeverityChangeIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SeverityChangeIncidentEventDto`")
        else:
            match += 1
        # validate data type: StatusChangeIncidentEventDto
        if not isinstance(v, StatusChangeIncidentEventDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StatusChangeIncidentEventDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in SearchCollectionIncidentEventDtoDataInner with oneOf schemas: AssigneesChangeIncidentEventDto, CollaborationToolDisconnectedIncidentEventDto, CollaborationToolItemLinkedByMonitorIncidentEventDto, CollaborationToolItemLinkedByUserIncidentEventDto, CollaborationToolItemUnlinkedIncidentEventDto, CollaborationToolStatusChangeEventDto, CommentIncidentEventDto, CreationByRuleRunIncidentEventDto, CreationByUserIncidentEventDto, NameChangeIncidentEventDto, NewFailuresIncidentEventDto, RulesAddedIncidentEventDto, RulesMovedFromIncidentEventDto, RulesMovedToIncidentEventDto, SeverityChangeIncidentEventDto, StatusChangeIncidentEventDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in SearchCollectionIncidentEventDtoDataInner with oneOf schemas: AssigneesChangeIncidentEventDto, CollaborationToolDisconnectedIncidentEventDto, CollaborationToolItemLinkedByMonitorIncidentEventDto, CollaborationToolItemLinkedByUserIncidentEventDto, CollaborationToolItemUnlinkedIncidentEventDto, CollaborationToolStatusChangeEventDto, CommentIncidentEventDto, CreationByRuleRunIncidentEventDto, CreationByUserIncidentEventDto, NameChangeIncidentEventDto, NewFailuresIncidentEventDto, RulesAddedIncidentEventDto, RulesMovedFromIncidentEventDto, RulesMovedToIncidentEventDto, SeverityChangeIncidentEventDto, StatusChangeIncidentEventDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `AssigneesChangeIncidentEventDto`
        if _data_type == "ASSIGNEES_CHANGE":
            instance.actual_instance = AssigneesChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolDisconnectedIncidentEventDto`
        if _data_type == "COLLABORATION_TOOL_DISCONNECTED":
            instance.actual_instance = CollaborationToolDisconnectedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemLinkedByUserIncidentEventDto`
        if _data_type == "COLLABORATION_TOOL_ITEM_LINKED":
            instance.actual_instance = CollaborationToolItemLinkedByUserIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemLinkedByMonitorIncidentEventDto`
        if _data_type == "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR":
            instance.actual_instance = CollaborationToolItemLinkedByMonitorIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemUnlinkedIncidentEventDto`
        if _data_type == "COLLABORATION_TOOL_ITEM_UNLINKED":
            instance.actual_instance = CollaborationToolItemUnlinkedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolStatusChangeEventDto`
        if _data_type == "COLLABORATION_TOOL_STATUS_CHANGE":
            instance.actual_instance = CollaborationToolStatusChangeEventDto.from_json(json_str)
            return instance

        # check if data type is `CommentIncidentEventDto`
        if _data_type == "COMMENT":
            instance.actual_instance = CommentIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CreationByRuleRunIncidentEventDto`
        if _data_type == "CREATION_BY_RULE_RUN":
            instance.actual_instance = CreationByRuleRunIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CreationByUserIncidentEventDto`
        if _data_type == "CREATION_BY_USER":
            instance.actual_instance = CreationByUserIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `NameChangeIncidentEventDto`
        if _data_type == "NAME_CHANGE":
            instance.actual_instance = NameChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `NewFailuresIncidentEventDto`
        if _data_type == "NEW_FAILURES":
            instance.actual_instance = NewFailuresIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesAddedIncidentEventDto`
        if _data_type == "RULES_ADDED":
            instance.actual_instance = RulesAddedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesMovedFromIncidentEventDto`
        if _data_type == "RULES_MOVED_FROM":
            instance.actual_instance = RulesMovedFromIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesMovedToIncidentEventDto`
        if _data_type == "RULES_MOVED_TO":
            instance.actual_instance = RulesMovedToIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `SeverityChangeIncidentEventDto`
        if _data_type == "SEVERITY_CHANGE":
            instance.actual_instance = SeverityChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `StatusChangeIncidentEventDto`
        if _data_type == "STATUS_CHANGE":
            instance.actual_instance = StatusChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `AssigneesChangeIncidentEventDto`
        if _data_type == "AssigneesChangeIncidentEventDto":
            instance.actual_instance = AssigneesChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolDisconnectedIncidentEventDto`
        if _data_type == "CollaborationToolDisconnectedIncidentEventDto":
            instance.actual_instance = CollaborationToolDisconnectedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemLinkedByMonitorIncidentEventDto`
        if _data_type == "CollaborationToolItemLinkedByMonitorIncidentEventDto":
            instance.actual_instance = CollaborationToolItemLinkedByMonitorIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemLinkedByUserIncidentEventDto`
        if _data_type == "CollaborationToolItemLinkedByUserIncidentEventDto":
            instance.actual_instance = CollaborationToolItemLinkedByUserIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolItemUnlinkedIncidentEventDto`
        if _data_type == "CollaborationToolItemUnlinkedIncidentEventDto":
            instance.actual_instance = CollaborationToolItemUnlinkedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CollaborationToolStatusChangeEventDto`
        if _data_type == "CollaborationToolStatusChangeEventDto":
            instance.actual_instance = CollaborationToolStatusChangeEventDto.from_json(json_str)
            return instance

        # check if data type is `CommentIncidentEventDto`
        if _data_type == "CommentIncidentEventDto":
            instance.actual_instance = CommentIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CreationByRuleRunIncidentEventDto`
        if _data_type == "CreationByRuleRunIncidentEventDto":
            instance.actual_instance = CreationByRuleRunIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `CreationByUserIncidentEventDto`
        if _data_type == "CreationByUserIncidentEventDto":
            instance.actual_instance = CreationByUserIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `NameChangeIncidentEventDto`
        if _data_type == "NameChangeIncidentEventDto":
            instance.actual_instance = NameChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `NewFailuresIncidentEventDto`
        if _data_type == "NewFailuresIncidentEventDto":
            instance.actual_instance = NewFailuresIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesAddedIncidentEventDto`
        if _data_type == "RulesAddedIncidentEventDto":
            instance.actual_instance = RulesAddedIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesMovedFromIncidentEventDto`
        if _data_type == "RulesMovedFromIncidentEventDto":
            instance.actual_instance = RulesMovedFromIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `RulesMovedToIncidentEventDto`
        if _data_type == "RulesMovedToIncidentEventDto":
            instance.actual_instance = RulesMovedToIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `SeverityChangeIncidentEventDto`
        if _data_type == "SeverityChangeIncidentEventDto":
            instance.actual_instance = SeverityChangeIncidentEventDto.from_json(json_str)
            return instance

        # check if data type is `StatusChangeIncidentEventDto`
        if _data_type == "StatusChangeIncidentEventDto":
            instance.actual_instance = StatusChangeIncidentEventDto.from_json(json_str)
            return instance

        # deserialize data into AssigneesChangeIncidentEventDto
        try:
            instance.actual_instance = AssigneesChangeIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CollaborationToolDisconnectedIncidentEventDto
        try:
            instance.actual_instance = CollaborationToolDisconnectedIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CollaborationToolItemLinkedByMonitorIncidentEventDto
        try:
            instance.actual_instance = CollaborationToolItemLinkedByMonitorIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CollaborationToolItemLinkedByUserIncidentEventDto
        try:
            instance.actual_instance = CollaborationToolItemLinkedByUserIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CollaborationToolItemUnlinkedIncidentEventDto
        try:
            instance.actual_instance = CollaborationToolItemUnlinkedIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CollaborationToolStatusChangeEventDto
        try:
            instance.actual_instance = CollaborationToolStatusChangeEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CommentIncidentEventDto
        try:
            instance.actual_instance = CommentIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreationByRuleRunIncidentEventDto
        try:
            instance.actual_instance = CreationByRuleRunIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreationByUserIncidentEventDto
        try:
            instance.actual_instance = CreationByUserIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NameChangeIncidentEventDto
        try:
            instance.actual_instance = NameChangeIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NewFailuresIncidentEventDto
        try:
            instance.actual_instance = NewFailuresIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RulesAddedIncidentEventDto
        try:
            instance.actual_instance = RulesAddedIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RulesMovedFromIncidentEventDto
        try:
            instance.actual_instance = RulesMovedFromIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RulesMovedToIncidentEventDto
        try:
            instance.actual_instance = RulesMovedToIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SeverityChangeIncidentEventDto
        try:
            instance.actual_instance = SeverityChangeIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StatusChangeIncidentEventDto
        try:
            instance.actual_instance = StatusChangeIncidentEventDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into SearchCollectionIncidentEventDtoDataInner with oneOf schemas: AssigneesChangeIncidentEventDto, CollaborationToolDisconnectedIncidentEventDto, CollaborationToolItemLinkedByMonitorIncidentEventDto, CollaborationToolItemLinkedByUserIncidentEventDto, CollaborationToolItemUnlinkedIncidentEventDto, CollaborationToolStatusChangeEventDto, CommentIncidentEventDto, CreationByRuleRunIncidentEventDto, CreationByUserIncidentEventDto, NameChangeIncidentEventDto, NewFailuresIncidentEventDto, RulesAddedIncidentEventDto, RulesMovedFromIncidentEventDto, RulesMovedToIncidentEventDto, SeverityChangeIncidentEventDto, StatusChangeIncidentEventDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into SearchCollectionIncidentEventDtoDataInner with oneOf schemas: AssigneesChangeIncidentEventDto, CollaborationToolDisconnectedIncidentEventDto, CollaborationToolItemLinkedByMonitorIncidentEventDto, CollaborationToolItemLinkedByUserIncidentEventDto, CollaborationToolItemUnlinkedIncidentEventDto, CollaborationToolStatusChangeEventDto, CommentIncidentEventDto, CreationByRuleRunIncidentEventDto, CreationByUserIncidentEventDto, NameChangeIncidentEventDto, NewFailuresIncidentEventDto, RulesAddedIncidentEventDto, RulesMovedFromIncidentEventDto, RulesMovedToIncidentEventDto, SeverityChangeIncidentEventDto, StatusChangeIncidentEventDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            AssigneesChangeIncidentEventDto,
            CollaborationToolDisconnectedIncidentEventDto,
            CollaborationToolItemLinkedByMonitorIncidentEventDto,
            CollaborationToolItemLinkedByUserIncidentEventDto,
            CollaborationToolItemUnlinkedIncidentEventDto,
            CollaborationToolStatusChangeEventDto,
            CommentIncidentEventDto,
            CreationByRuleRunIncidentEventDto,
            CreationByUserIncidentEventDto,
            NameChangeIncidentEventDto,
            NewFailuresIncidentEventDto,
            RulesAddedIncidentEventDto,
            RulesMovedFromIncidentEventDto,
            RulesMovedToIncidentEventDto,
            SeverityChangeIncidentEventDto,
            StatusChangeIncidentEventDto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
