# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from sifflet_sdk.client.models.datasource_ingestion_run_dto import (
    DatasourceIngestionRunDto,
)
from typing_extensions import Self


class DatasourceWithIngestionRun(BaseModel):
    """
    DatasourceWithIngestionRun
    """  # noqa: E501

    datasource_id: StrictStr = Field(alias="datasourceId")
    datasource_qualified_name: StrictStr = Field(alias="datasourceQualifiedName")
    deletable: Optional[StrictBool] = None
    id: StrictStr
    last_datasource_ingestion_run_dto: Optional[DatasourceIngestionRunDto] = Field(
        default=None, alias="lastDatasourceIngestionRunDto"
    )
    last_successful_datasource_ingestion_run_dto: Optional[DatasourceIngestionRunDto] = Field(
        default=None, alias="lastSuccessfulDatasourceIngestionRunDto"
    )
    __properties: ClassVar[List[str]] = [
        "datasourceId",
        "datasourceQualifiedName",
        "deletable",
        "id",
        "lastDatasourceIngestionRunDto",
        "lastSuccessfulDatasourceIngestionRunDto",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasourceWithIngestionRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_datasource_ingestion_run_dto
        if self.last_datasource_ingestion_run_dto:
            _dict["lastDatasourceIngestionRunDto"] = self.last_datasource_ingestion_run_dto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_successful_datasource_ingestion_run_dto
        if self.last_successful_datasource_ingestion_run_dto:
            _dict["lastSuccessfulDatasourceIngestionRunDto"] = (
                self.last_successful_datasource_ingestion_run_dto.to_dict()
            )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasourceWithIngestionRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "datasourceId": obj.get("datasourceId"),
                "datasourceQualifiedName": obj.get("datasourceQualifiedName"),
                "deletable": obj.get("deletable"),
                "id": obj.get("id"),
                "lastDatasourceIngestionRunDto": (
                    DatasourceIngestionRunDto.from_dict(obj["lastDatasourceIngestionRunDto"])
                    if obj.get("lastDatasourceIngestionRunDto") is not None
                    else None
                ),
                "lastSuccessfulDatasourceIngestionRunDto": (
                    DatasourceIngestionRunDto.from_dict(obj["lastSuccessfulDatasourceIngestionRunDto"])
                    if obj.get("lastSuccessfulDatasourceIngestionRunDto") is not None
                    else None
                ),
            }
        )
        return _obj
