# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.asset_data_quality_dto import AssetDataQualityDto
from sifflet_sdk.client.models.asset_overview_details import AssetOverviewDetails
from sifflet_sdk.client.models.asset_schema_dto import AssetSchemaDto
from typing_extensions import Self


class DatasetAssetOverview(BaseModel):
    """
    DatasetAssetOverview
    """  # noqa: E501

    details: Optional[AssetOverviewDetails] = None
    id: Optional[StrictStr] = None
    urn: Optional[StrictStr] = None
    data_quality: Optional[AssetDataQualityDto] = Field(default=None, alias="dataQuality")
    var_schema: Optional[AssetSchemaDto] = Field(default=None, alias="schema")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["details", "id", "urn", "dataQuality", "schema", "type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "JDBC_TABLE",
                "JDBC_DYNAMIC_TABLE",
                "JDBC_EXTERNAL_TABLE",
                "JDBC_VIEW",
                "JDBC_DATASET",
                "JDBC_SNOWFLAKE_STREAM",
                "JDBC_DATASET_REF",
                "STORAGE_BUCKET_S3",
                "BIGQUERY_TABLE",
                "BIGQUERY_VIEW",
                "BIGQUERY_EXTERNAL_TABLE",
                "BIGQUERY_MATERIALIZED_VIEW",
                "BIGQUERY_DATASET_REF",
                "STORAGE_BUCKET_GCP",
                "STORAGE_GOOGLE_DRIVE",
                "LOOKER_QUERY",
                "LOOKER_VIEW",
                "LOOKER_SQL_TABLE",
                "MICROSTRATEGY_DATASET_REF",
                "TABLEAU_QUERY",
                "TABLEAU_DATABASE_TABLE",
                "DBT_TABLE_REF",
                "DBT_SOURCE_DATASET_REF",
                "DBT_EPHEMERAL_REF",
                "DBT_VIEW_REF",
                "DBT_SEED",
                "DBT_UNKNOWN",
                "DBT_MODEL",
                "FIVETRAN_DATASET_REF",
                "POWERBI_TABLE_REF",
                "POWERBI_SEMANTIC_MODEL",
                "QLIK_DATASET",
                "QLIK_NODE",
                "QLIK_DATASET_REF",
                "QUICKSIGHT_TABLE_REF",
                "DATABRICKS_STREAMING_TABLE",
                "DATABRICKS_UNKNOWN",
                "GENERIC_DROPPED_TABLE",
                "GENERIC_TEMP_TABLE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('JDBC_TABLE', 'JDBC_DYNAMIC_TABLE', 'JDBC_EXTERNAL_TABLE', 'JDBC_VIEW', 'JDBC_DATASET', 'JDBC_SNOWFLAKE_STREAM', 'JDBC_DATASET_REF', 'STORAGE_BUCKET_S3', 'BIGQUERY_TABLE', 'BIGQUERY_VIEW', 'BIGQUERY_EXTERNAL_TABLE', 'BIGQUERY_MATERIALIZED_VIEW', 'BIGQUERY_DATASET_REF', 'STORAGE_BUCKET_GCP', 'STORAGE_GOOGLE_DRIVE', 'LOOKER_QUERY', 'LOOKER_VIEW', 'LOOKER_SQL_TABLE', 'MICROSTRATEGY_DATASET_REF', 'TABLEAU_QUERY', 'TABLEAU_DATABASE_TABLE', 'DBT_TABLE_REF', 'DBT_SOURCE_DATASET_REF', 'DBT_EPHEMERAL_REF', 'DBT_VIEW_REF', 'DBT_SEED', 'DBT_UNKNOWN', 'DBT_MODEL', 'FIVETRAN_DATASET_REF', 'POWERBI_TABLE_REF', 'POWERBI_SEMANTIC_MODEL', 'QLIK_DATASET', 'QLIK_NODE', 'QLIK_DATASET_REF', 'QUICKSIGHT_TABLE_REF', 'DATABRICKS_STREAMING_TABLE', 'DATABRICKS_UNKNOWN', 'GENERIC_DROPPED_TABLE', 'GENERIC_TEMP_TABLE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetAssetOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict["details"] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_quality
        if self.data_quality:
            _dict["dataQuality"] = self.data_quality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict["schema"] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetAssetOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "details": AssetOverviewDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
                "id": obj.get("id"),
                "urn": obj.get("urn"),
                "dataQuality": (
                    AssetDataQualityDto.from_dict(obj["dataQuality"]) if obj.get("dataQuality") is not None else None
                ),
                "schema": AssetSchemaDto.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
                "type": obj.get("type"),
            }
        )
        return _obj
