# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.jit_user_permissions_dto import JitUserPermissionsDto
from typing_extensions import Self


class Saml2ConfigDto(BaseModel):
    """
    Saml2ConfigDto
    """  # noqa: E501

    auto_provision_users: StrictBool = Field(alias="autoProvisionUsers")
    idp_issuer: StrictStr = Field(alias="idpIssuer")
    idp_platform: StrictStr = Field(alias="idpPlatform")
    idp_sso_url: StrictStr = Field(alias="idpSsoUrl")
    jit_user_permissions: Optional[JitUserPermissionsDto] = Field(default=None, alias="jitUserPermissions")
    registration_id: StrictStr = Field(alias="registrationId")
    test_id: Optional[StrictStr] = Field(default=None, alias="testId")
    username_password_auth: StrictBool = Field(alias="usernamePasswordAuth")
    x509_certificate: StrictStr = Field(alias="x509Certificate")
    __properties: ClassVar[List[str]] = [
        "autoProvisionUsers",
        "idpIssuer",
        "idpPlatform",
        "idpSsoUrl",
        "jitUserPermissions",
        "registrationId",
        "testId",
        "usernamePasswordAuth",
        "x509Certificate",
    ]

    @field_validator("idp_platform")
    def idp_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["OKTA", "GOOGLE", "AZURE", "OTHER"]):
            raise ValueError("must be one of enum values ('OKTA', 'GOOGLE', 'AZURE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Saml2ConfigDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of jit_user_permissions
        if self.jit_user_permissions:
            _dict["jitUserPermissions"] = self.jit_user_permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Saml2ConfigDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "autoProvisionUsers": obj.get("autoProvisionUsers"),
                "idpIssuer": obj.get("idpIssuer"),
                "idpPlatform": obj.get("idpPlatform"),
                "idpSsoUrl": obj.get("idpSsoUrl"),
                "jitUserPermissions": (
                    JitUserPermissionsDto.from_dict(obj["jitUserPermissions"])
                    if obj.get("jitUserPermissions") is not None
                    else None
                ),
                "registrationId": obj.get("registrationId"),
                "testId": obj.get("testId"),
                "usernamePasswordAuth": obj.get("usernamePasswordAuth"),
                "x509Certificate": obj.get("x509Certificate"),
            }
        )
        return _obj
