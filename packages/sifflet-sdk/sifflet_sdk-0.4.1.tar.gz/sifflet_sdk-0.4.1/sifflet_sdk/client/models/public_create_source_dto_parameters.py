# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.public_airflow_parameters_dto import (
    PublicAirflowParametersDto,
)
from sifflet_sdk.client.models.public_athena_parameters_dto import (
    PublicAthenaParametersDto,
)
from sifflet_sdk.client.models.public_big_query_parameters_dto import (
    PublicBigQueryParametersDto,
)
from sifflet_sdk.client.models.public_databricks_parameters_dto import (
    PublicDatabricksParametersDto,
)
from sifflet_sdk.client.models.public_dbt_cloud_parameters_dto import (
    PublicDbtCloudParametersDto,
)
from sifflet_sdk.client.models.public_dbt_parameters_dto import PublicDbtParametersDto
from sifflet_sdk.client.models.public_declarative_parameters_dto import (
    PublicDeclarativeParametersDto,
)
from sifflet_sdk.client.models.public_fivetran_parameters_dto import (
    PublicFivetranParametersDto,
)
from sifflet_sdk.client.models.public_looker_parameters_dto import (
    PublicLookerParametersDto,
)
from sifflet_sdk.client.models.public_mssql_parameters_dto import (
    PublicMssqlParametersDto,
)
from sifflet_sdk.client.models.public_mysql_parameters_dto import (
    PublicMysqlParametersDto,
)
from sifflet_sdk.client.models.public_oracle_parameters_dto import (
    PublicOracleParametersDto,
)
from sifflet_sdk.client.models.public_postgresql_parameters_dto import (
    PublicPostgresqlParametersDto,
)
from sifflet_sdk.client.models.public_power_bi_parameters_dto import (
    PublicPowerBiParametersDto,
)
from sifflet_sdk.client.models.public_quicksight_parameters_dto import (
    PublicQuicksightParametersDto,
)
from sifflet_sdk.client.models.public_redshift_parameters_dto import (
    PublicRedshiftParametersDto,
)
from sifflet_sdk.client.models.public_snowflake_parameters_dto import (
    PublicSnowflakeParametersDto,
)
from sifflet_sdk.client.models.public_synapse_parameters_dto import (
    PublicSynapseParametersDto,
)
from sifflet_sdk.client.models.public_tableau_parameters_dto import (
    PublicTableauParametersDto,
)
from typing_extensions import Literal, Self

PUBLICCREATESOURCEDTOPARAMETERS_ONE_OF_SCHEMAS = [
    "PublicAirflowParametersDto",
    "PublicAthenaParametersDto",
    "PublicBigQueryParametersDto",
    "PublicDatabricksParametersDto",
    "PublicDbtCloudParametersDto",
    "PublicDbtParametersDto",
    "PublicDeclarativeParametersDto",
    "PublicFivetranParametersDto",
    "PublicLookerParametersDto",
    "PublicMssqlParametersDto",
    "PublicMysqlParametersDto",
    "PublicOracleParametersDto",
    "PublicPostgresqlParametersDto",
    "PublicPowerBiParametersDto",
    "PublicQuicksightParametersDto",
    "PublicRedshiftParametersDto",
    "PublicSnowflakeParametersDto",
    "PublicSynapseParametersDto",
    "PublicTableauParametersDto",
]


class PublicCreateSourceDtoParameters(BaseModel):
    """
    PublicCreateSourceDtoParameters
    """

    # data type: PublicAirflowParametersDto
    oneof_schema_1_validator: Optional[PublicAirflowParametersDto] = None
    # data type: PublicAthenaParametersDto
    oneof_schema_2_validator: Optional[PublicAthenaParametersDto] = None
    # data type: PublicBigQueryParametersDto
    oneof_schema_3_validator: Optional[PublicBigQueryParametersDto] = None
    # data type: PublicDatabricksParametersDto
    oneof_schema_4_validator: Optional[PublicDatabricksParametersDto] = None
    # data type: PublicDbtCloudParametersDto
    oneof_schema_5_validator: Optional[PublicDbtCloudParametersDto] = None
    # data type: PublicDbtParametersDto
    oneof_schema_6_validator: Optional[PublicDbtParametersDto] = None
    # data type: PublicDeclarativeParametersDto
    oneof_schema_7_validator: Optional[PublicDeclarativeParametersDto] = None
    # data type: PublicFivetranParametersDto
    oneof_schema_8_validator: Optional[PublicFivetranParametersDto] = None
    # data type: PublicLookerParametersDto
    oneof_schema_9_validator: Optional[PublicLookerParametersDto] = None
    # data type: PublicMssqlParametersDto
    oneof_schema_10_validator: Optional[PublicMssqlParametersDto] = None
    # data type: PublicMysqlParametersDto
    oneof_schema_11_validator: Optional[PublicMysqlParametersDto] = None
    # data type: PublicOracleParametersDto
    oneof_schema_12_validator: Optional[PublicOracleParametersDto] = None
    # data type: PublicPostgresqlParametersDto
    oneof_schema_13_validator: Optional[PublicPostgresqlParametersDto] = None
    # data type: PublicPowerBiParametersDto
    oneof_schema_14_validator: Optional[PublicPowerBiParametersDto] = None
    # data type: PublicQuicksightParametersDto
    oneof_schema_15_validator: Optional[PublicQuicksightParametersDto] = None
    # data type: PublicRedshiftParametersDto
    oneof_schema_16_validator: Optional[PublicRedshiftParametersDto] = None
    # data type: PublicSnowflakeParametersDto
    oneof_schema_17_validator: Optional[PublicSnowflakeParametersDto] = None
    # data type: PublicSynapseParametersDto
    oneof_schema_18_validator: Optional[PublicSynapseParametersDto] = None
    # data type: PublicTableauParametersDto
    oneof_schema_19_validator: Optional[PublicTableauParametersDto] = None
    actual_instance: Optional[
        Union[
            PublicAirflowParametersDto,
            PublicAthenaParametersDto,
            PublicBigQueryParametersDto,
            PublicDatabricksParametersDto,
            PublicDbtCloudParametersDto,
            PublicDbtParametersDto,
            PublicDeclarativeParametersDto,
            PublicFivetranParametersDto,
            PublicLookerParametersDto,
            PublicMssqlParametersDto,
            PublicMysqlParametersDto,
            PublicOracleParametersDto,
            PublicPostgresqlParametersDto,
            PublicPowerBiParametersDto,
            PublicQuicksightParametersDto,
            PublicRedshiftParametersDto,
            PublicSnowflakeParametersDto,
            PublicSynapseParametersDto,
            PublicTableauParametersDto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "PublicAirflowParametersDto",
        "PublicAthenaParametersDto",
        "PublicBigQueryParametersDto",
        "PublicDatabricksParametersDto",
        "PublicDbtCloudParametersDto",
        "PublicDbtParametersDto",
        "PublicDeclarativeParametersDto",
        "PublicFivetranParametersDto",
        "PublicLookerParametersDto",
        "PublicMssqlParametersDto",
        "PublicMysqlParametersDto",
        "PublicOracleParametersDto",
        "PublicPostgresqlParametersDto",
        "PublicPowerBiParametersDto",
        "PublicQuicksightParametersDto",
        "PublicRedshiftParametersDto",
        "PublicSnowflakeParametersDto",
        "PublicSynapseParametersDto",
        "PublicTableauParametersDto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = PublicCreateSourceDtoParameters.model_construct()
        error_messages = []
        match = 0
        # validate data type: PublicAirflowParametersDto
        if not isinstance(v, PublicAirflowParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicAirflowParametersDto`")
        else:
            match += 1
        # validate data type: PublicAthenaParametersDto
        if not isinstance(v, PublicAthenaParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicAthenaParametersDto`")
        else:
            match += 1
        # validate data type: PublicBigQueryParametersDto
        if not isinstance(v, PublicBigQueryParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicBigQueryParametersDto`")
        else:
            match += 1
        # validate data type: PublicDatabricksParametersDto
        if not isinstance(v, PublicDatabricksParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicDatabricksParametersDto`")
        else:
            match += 1
        # validate data type: PublicDbtCloudParametersDto
        if not isinstance(v, PublicDbtCloudParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicDbtCloudParametersDto`")
        else:
            match += 1
        # validate data type: PublicDbtParametersDto
        if not isinstance(v, PublicDbtParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicDbtParametersDto`")
        else:
            match += 1
        # validate data type: PublicDeclarativeParametersDto
        if not isinstance(v, PublicDeclarativeParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicDeclarativeParametersDto`")
        else:
            match += 1
        # validate data type: PublicFivetranParametersDto
        if not isinstance(v, PublicFivetranParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicFivetranParametersDto`")
        else:
            match += 1
        # validate data type: PublicLookerParametersDto
        if not isinstance(v, PublicLookerParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicLookerParametersDto`")
        else:
            match += 1
        # validate data type: PublicMssqlParametersDto
        if not isinstance(v, PublicMssqlParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicMssqlParametersDto`")
        else:
            match += 1
        # validate data type: PublicMysqlParametersDto
        if not isinstance(v, PublicMysqlParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicMysqlParametersDto`")
        else:
            match += 1
        # validate data type: PublicOracleParametersDto
        if not isinstance(v, PublicOracleParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicOracleParametersDto`")
        else:
            match += 1
        # validate data type: PublicPostgresqlParametersDto
        if not isinstance(v, PublicPostgresqlParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicPostgresqlParametersDto`")
        else:
            match += 1
        # validate data type: PublicPowerBiParametersDto
        if not isinstance(v, PublicPowerBiParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicPowerBiParametersDto`")
        else:
            match += 1
        # validate data type: PublicQuicksightParametersDto
        if not isinstance(v, PublicQuicksightParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicQuicksightParametersDto`")
        else:
            match += 1
        # validate data type: PublicRedshiftParametersDto
        if not isinstance(v, PublicRedshiftParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicRedshiftParametersDto`")
        else:
            match += 1
        # validate data type: PublicSnowflakeParametersDto
        if not isinstance(v, PublicSnowflakeParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicSnowflakeParametersDto`")
        else:
            match += 1
        # validate data type: PublicSynapseParametersDto
        if not isinstance(v, PublicSynapseParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicSynapseParametersDto`")
        else:
            match += 1
        # validate data type: PublicTableauParametersDto
        if not isinstance(v, PublicTableauParametersDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicTableauParametersDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in PublicCreateSourceDtoParameters with oneOf schemas: PublicAirflowParametersDto, PublicAthenaParametersDto, PublicBigQueryParametersDto, PublicDatabricksParametersDto, PublicDbtCloudParametersDto, PublicDbtParametersDto, PublicDeclarativeParametersDto, PublicFivetranParametersDto, PublicLookerParametersDto, PublicMssqlParametersDto, PublicMysqlParametersDto, PublicOracleParametersDto, PublicPostgresqlParametersDto, PublicPowerBiParametersDto, PublicQuicksightParametersDto, PublicRedshiftParametersDto, PublicSnowflakeParametersDto, PublicSynapseParametersDto, PublicTableauParametersDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in PublicCreateSourceDtoParameters with oneOf schemas: PublicAirflowParametersDto, PublicAthenaParametersDto, PublicBigQueryParametersDto, PublicDatabricksParametersDto, PublicDbtCloudParametersDto, PublicDbtParametersDto, PublicDeclarativeParametersDto, PublicFivetranParametersDto, PublicLookerParametersDto, PublicMssqlParametersDto, PublicMysqlParametersDto, PublicOracleParametersDto, PublicPostgresqlParametersDto, PublicPowerBiParametersDto, PublicQuicksightParametersDto, PublicRedshiftParametersDto, PublicSnowflakeParametersDto, PublicSynapseParametersDto, PublicTableauParametersDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `PublicAirflowParametersDto`
        if _data_type == "AIRFLOW":
            instance.actual_instance = PublicAirflowParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicAthenaParametersDto`
        if _data_type == "ATHENA":
            instance.actual_instance = PublicAthenaParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicBigQueryParametersDto`
        if _data_type == "BIGQUERY":
            instance.actual_instance = PublicBigQueryParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDatabricksParametersDto`
        if _data_type == "DATABRICKS":
            instance.actual_instance = PublicDatabricksParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDbtParametersDto`
        if _data_type == "DBT":
            instance.actual_instance = PublicDbtParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDbtCloudParametersDto`
        if _data_type == "DBT_CLOUD":
            instance.actual_instance = PublicDbtCloudParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDeclarativeParametersDto`
        if _data_type == "DECLARATIVE":
            instance.actual_instance = PublicDeclarativeParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicFivetranParametersDto`
        if _data_type == "FIVETRAN":
            instance.actual_instance = PublicFivetranParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicLookerParametersDto`
        if _data_type == "LOOKER":
            instance.actual_instance = PublicLookerParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicMssqlParametersDto`
        if _data_type == "MSSQL":
            instance.actual_instance = PublicMssqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicMysqlParametersDto`
        if _data_type == "MYSQL":
            instance.actual_instance = PublicMysqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicOracleParametersDto`
        if _data_type == "ORACLE":
            instance.actual_instance = PublicOracleParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicPostgresqlParametersDto`
        if _data_type == "POSTGRESQL":
            instance.actual_instance = PublicPostgresqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicPowerBiParametersDto`
        if _data_type == "POWER_BI":
            instance.actual_instance = PublicPowerBiParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicQuicksightParametersDto`
        if _data_type == "QUICKSIGHT":
            instance.actual_instance = PublicQuicksightParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicRedshiftParametersDto`
        if _data_type == "REDSHIFT":
            instance.actual_instance = PublicRedshiftParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicSnowflakeParametersDto`
        if _data_type == "SNOWFLAKE":
            instance.actual_instance = PublicSnowflakeParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicSynapseParametersDto`
        if _data_type == "SYNAPSE":
            instance.actual_instance = PublicSynapseParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicTableauParametersDto`
        if _data_type == "TABLEAU":
            instance.actual_instance = PublicTableauParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicAirflowParametersDto`
        if _data_type == "PublicAirflowParametersDto":
            instance.actual_instance = PublicAirflowParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicAthenaParametersDto`
        if _data_type == "PublicAthenaParametersDto":
            instance.actual_instance = PublicAthenaParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicBigQueryParametersDto`
        if _data_type == "PublicBigQueryParametersDto":
            instance.actual_instance = PublicBigQueryParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDatabricksParametersDto`
        if _data_type == "PublicDatabricksParametersDto":
            instance.actual_instance = PublicDatabricksParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDbtCloudParametersDto`
        if _data_type == "PublicDbtCloudParametersDto":
            instance.actual_instance = PublicDbtCloudParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDbtParametersDto`
        if _data_type == "PublicDbtParametersDto":
            instance.actual_instance = PublicDbtParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicDeclarativeParametersDto`
        if _data_type == "PublicDeclarativeParametersDto":
            instance.actual_instance = PublicDeclarativeParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicFivetranParametersDto`
        if _data_type == "PublicFivetranParametersDto":
            instance.actual_instance = PublicFivetranParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicLookerParametersDto`
        if _data_type == "PublicLookerParametersDto":
            instance.actual_instance = PublicLookerParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicMssqlParametersDto`
        if _data_type == "PublicMssqlParametersDto":
            instance.actual_instance = PublicMssqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicMysqlParametersDto`
        if _data_type == "PublicMysqlParametersDto":
            instance.actual_instance = PublicMysqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicOracleParametersDto`
        if _data_type == "PublicOracleParametersDto":
            instance.actual_instance = PublicOracleParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicPostgresqlParametersDto`
        if _data_type == "PublicPostgresqlParametersDto":
            instance.actual_instance = PublicPostgresqlParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicPowerBiParametersDto`
        if _data_type == "PublicPowerBiParametersDto":
            instance.actual_instance = PublicPowerBiParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicQuicksightParametersDto`
        if _data_type == "PublicQuicksightParametersDto":
            instance.actual_instance = PublicQuicksightParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicRedshiftParametersDto`
        if _data_type == "PublicRedshiftParametersDto":
            instance.actual_instance = PublicRedshiftParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicSnowflakeParametersDto`
        if _data_type == "PublicSnowflakeParametersDto":
            instance.actual_instance = PublicSnowflakeParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicSynapseParametersDto`
        if _data_type == "PublicSynapseParametersDto":
            instance.actual_instance = PublicSynapseParametersDto.from_json(json_str)
            return instance

        # check if data type is `PublicTableauParametersDto`
        if _data_type == "PublicTableauParametersDto":
            instance.actual_instance = PublicTableauParametersDto.from_json(json_str)
            return instance

        # deserialize data into PublicAirflowParametersDto
        try:
            instance.actual_instance = PublicAirflowParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicAthenaParametersDto
        try:
            instance.actual_instance = PublicAthenaParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicBigQueryParametersDto
        try:
            instance.actual_instance = PublicBigQueryParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicDatabricksParametersDto
        try:
            instance.actual_instance = PublicDatabricksParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicDbtCloudParametersDto
        try:
            instance.actual_instance = PublicDbtCloudParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicDbtParametersDto
        try:
            instance.actual_instance = PublicDbtParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicDeclarativeParametersDto
        try:
            instance.actual_instance = PublicDeclarativeParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicFivetranParametersDto
        try:
            instance.actual_instance = PublicFivetranParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicLookerParametersDto
        try:
            instance.actual_instance = PublicLookerParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicMssqlParametersDto
        try:
            instance.actual_instance = PublicMssqlParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicMysqlParametersDto
        try:
            instance.actual_instance = PublicMysqlParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicOracleParametersDto
        try:
            instance.actual_instance = PublicOracleParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicPostgresqlParametersDto
        try:
            instance.actual_instance = PublicPostgresqlParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicPowerBiParametersDto
        try:
            instance.actual_instance = PublicPowerBiParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicQuicksightParametersDto
        try:
            instance.actual_instance = PublicQuicksightParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicRedshiftParametersDto
        try:
            instance.actual_instance = PublicRedshiftParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicSnowflakeParametersDto
        try:
            instance.actual_instance = PublicSnowflakeParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicSynapseParametersDto
        try:
            instance.actual_instance = PublicSynapseParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicTableauParametersDto
        try:
            instance.actual_instance = PublicTableauParametersDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into PublicCreateSourceDtoParameters with oneOf schemas: PublicAirflowParametersDto, PublicAthenaParametersDto, PublicBigQueryParametersDto, PublicDatabricksParametersDto, PublicDbtCloudParametersDto, PublicDbtParametersDto, PublicDeclarativeParametersDto, PublicFivetranParametersDto, PublicLookerParametersDto, PublicMssqlParametersDto, PublicMysqlParametersDto, PublicOracleParametersDto, PublicPostgresqlParametersDto, PublicPowerBiParametersDto, PublicQuicksightParametersDto, PublicRedshiftParametersDto, PublicSnowflakeParametersDto, PublicSynapseParametersDto, PublicTableauParametersDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into PublicCreateSourceDtoParameters with oneOf schemas: PublicAirflowParametersDto, PublicAthenaParametersDto, PublicBigQueryParametersDto, PublicDatabricksParametersDto, PublicDbtCloudParametersDto, PublicDbtParametersDto, PublicDeclarativeParametersDto, PublicFivetranParametersDto, PublicLookerParametersDto, PublicMssqlParametersDto, PublicMysqlParametersDto, PublicOracleParametersDto, PublicPostgresqlParametersDto, PublicPowerBiParametersDto, PublicQuicksightParametersDto, PublicRedshiftParametersDto, PublicSnowflakeParametersDto, PublicSynapseParametersDto, PublicTableauParametersDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            PublicAirflowParametersDto,
            PublicAthenaParametersDto,
            PublicBigQueryParametersDto,
            PublicDatabricksParametersDto,
            PublicDbtCloudParametersDto,
            PublicDbtParametersDto,
            PublicDeclarativeParametersDto,
            PublicFivetranParametersDto,
            PublicLookerParametersDto,
            PublicMssqlParametersDto,
            PublicMysqlParametersDto,
            PublicOracleParametersDto,
            PublicPostgresqlParametersDto,
            PublicPowerBiParametersDto,
            PublicQuicksightParametersDto,
            PublicRedshiftParametersDto,
            PublicSnowflakeParametersDto,
            PublicSynapseParametersDto,
            PublicTableauParametersDto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
