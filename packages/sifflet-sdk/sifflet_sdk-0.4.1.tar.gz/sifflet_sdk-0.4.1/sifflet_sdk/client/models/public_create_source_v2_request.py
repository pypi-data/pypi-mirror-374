# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.public_create_airflow_source_v2_dto import (
    PublicCreateAirflowSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_athena_source_v2_dto import (
    PublicCreateAthenaSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_big_query_source_v2_dto import (
    PublicCreateBigQuerySourceV2Dto,
)
from sifflet_sdk.client.models.public_create_databricks_source_v2_dto import (
    PublicCreateDatabricksSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_dbt_cloud_source_v2_dto import (
    PublicCreateDbtCloudSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_dbt_source_v2_dto import (
    PublicCreateDbtSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_fivetran_source_v2_dto import (
    PublicCreateFivetranSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_looker_source_v2_dto import (
    PublicCreateLookerSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_microstrategy_source_v2_dto import (
    PublicCreateMicrostrategySourceV2Dto,
)
from sifflet_sdk.client.models.public_create_mssql_source_v2_dto import (
    PublicCreateMssqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_mysql_source_v2_dto import (
    PublicCreateMysqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_oracle_source_v2_dto import (
    PublicCreateOracleSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_postgresql_source_v2_dto import (
    PublicCreatePostgresqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_power_bi_source_v2_dto import (
    PublicCreatePowerBiSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_qlik_source_v2_dto import (
    PublicCreateQlikSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_quicksight_source_v2_dto import (
    PublicCreateQuicksightSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_redshift_source_v2_dto import (
    PublicCreateRedshiftSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_snowflake_source_v2_dto import (
    PublicCreateSnowflakeSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_synapse_source_v2_dto import (
    PublicCreateSynapseSourceV2Dto,
)
from sifflet_sdk.client.models.public_create_tableau_source_v2_dto import (
    PublicCreateTableauSourceV2Dto,
)
from typing_extensions import Literal, Self

PUBLICCREATESOURCEV2REQUEST_ONE_OF_SCHEMAS = [
    "PublicCreateAirflowSourceV2Dto",
    "PublicCreateAthenaSourceV2Dto",
    "PublicCreateBigQuerySourceV2Dto",
    "PublicCreateDatabricksSourceV2Dto",
    "PublicCreateDbtCloudSourceV2Dto",
    "PublicCreateDbtSourceV2Dto",
    "PublicCreateFivetranSourceV2Dto",
    "PublicCreateLookerSourceV2Dto",
    "PublicCreateMicrostrategySourceV2Dto",
    "PublicCreateMssqlSourceV2Dto",
    "PublicCreateMysqlSourceV2Dto",
    "PublicCreateOracleSourceV2Dto",
    "PublicCreatePostgresqlSourceV2Dto",
    "PublicCreatePowerBiSourceV2Dto",
    "PublicCreateQlikSourceV2Dto",
    "PublicCreateQuicksightSourceV2Dto",
    "PublicCreateRedshiftSourceV2Dto",
    "PublicCreateSnowflakeSourceV2Dto",
    "PublicCreateSynapseSourceV2Dto",
    "PublicCreateTableauSourceV2Dto",
]


class PublicCreateSourceV2Request(BaseModel):
    """
    PublicCreateSourceV2Request
    """

    # data type: PublicCreateAirflowSourceV2Dto
    oneof_schema_1_validator: Optional[PublicCreateAirflowSourceV2Dto] = None
    # data type: PublicCreateAthenaSourceV2Dto
    oneof_schema_2_validator: Optional[PublicCreateAthenaSourceV2Dto] = None
    # data type: PublicCreateBigQuerySourceV2Dto
    oneof_schema_3_validator: Optional[PublicCreateBigQuerySourceV2Dto] = None
    # data type: PublicCreateDatabricksSourceV2Dto
    oneof_schema_4_validator: Optional[PublicCreateDatabricksSourceV2Dto] = None
    # data type: PublicCreateDbtCloudSourceV2Dto
    oneof_schema_5_validator: Optional[PublicCreateDbtCloudSourceV2Dto] = None
    # data type: PublicCreateDbtSourceV2Dto
    oneof_schema_6_validator: Optional[PublicCreateDbtSourceV2Dto] = None
    # data type: PublicCreateFivetranSourceV2Dto
    oneof_schema_7_validator: Optional[PublicCreateFivetranSourceV2Dto] = None
    # data type: PublicCreateLookerSourceV2Dto
    oneof_schema_8_validator: Optional[PublicCreateLookerSourceV2Dto] = None
    # data type: PublicCreateMicrostrategySourceV2Dto
    oneof_schema_9_validator: Optional[PublicCreateMicrostrategySourceV2Dto] = None
    # data type: PublicCreateMssqlSourceV2Dto
    oneof_schema_10_validator: Optional[PublicCreateMssqlSourceV2Dto] = None
    # data type: PublicCreateMysqlSourceV2Dto
    oneof_schema_11_validator: Optional[PublicCreateMysqlSourceV2Dto] = None
    # data type: PublicCreateOracleSourceV2Dto
    oneof_schema_12_validator: Optional[PublicCreateOracleSourceV2Dto] = None
    # data type: PublicCreatePostgresqlSourceV2Dto
    oneof_schema_13_validator: Optional[PublicCreatePostgresqlSourceV2Dto] = None
    # data type: PublicCreatePowerBiSourceV2Dto
    oneof_schema_14_validator: Optional[PublicCreatePowerBiSourceV2Dto] = None
    # data type: PublicCreateQlikSourceV2Dto
    oneof_schema_15_validator: Optional[PublicCreateQlikSourceV2Dto] = None
    # data type: PublicCreateQuicksightSourceV2Dto
    oneof_schema_16_validator: Optional[PublicCreateQuicksightSourceV2Dto] = None
    # data type: PublicCreateRedshiftSourceV2Dto
    oneof_schema_17_validator: Optional[PublicCreateRedshiftSourceV2Dto] = None
    # data type: PublicCreateSnowflakeSourceV2Dto
    oneof_schema_18_validator: Optional[PublicCreateSnowflakeSourceV2Dto] = None
    # data type: PublicCreateSynapseSourceV2Dto
    oneof_schema_19_validator: Optional[PublicCreateSynapseSourceV2Dto] = None
    # data type: PublicCreateTableauSourceV2Dto
    oneof_schema_20_validator: Optional[PublicCreateTableauSourceV2Dto] = None
    actual_instance: Optional[
        Union[
            PublicCreateAirflowSourceV2Dto,
            PublicCreateAthenaSourceV2Dto,
            PublicCreateBigQuerySourceV2Dto,
            PublicCreateDatabricksSourceV2Dto,
            PublicCreateDbtCloudSourceV2Dto,
            PublicCreateDbtSourceV2Dto,
            PublicCreateFivetranSourceV2Dto,
            PublicCreateLookerSourceV2Dto,
            PublicCreateMicrostrategySourceV2Dto,
            PublicCreateMssqlSourceV2Dto,
            PublicCreateMysqlSourceV2Dto,
            PublicCreateOracleSourceV2Dto,
            PublicCreatePostgresqlSourceV2Dto,
            PublicCreatePowerBiSourceV2Dto,
            PublicCreateQlikSourceV2Dto,
            PublicCreateQuicksightSourceV2Dto,
            PublicCreateRedshiftSourceV2Dto,
            PublicCreateSnowflakeSourceV2Dto,
            PublicCreateSynapseSourceV2Dto,
            PublicCreateTableauSourceV2Dto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "PublicCreateAirflowSourceV2Dto",
        "PublicCreateAthenaSourceV2Dto",
        "PublicCreateBigQuerySourceV2Dto",
        "PublicCreateDatabricksSourceV2Dto",
        "PublicCreateDbtCloudSourceV2Dto",
        "PublicCreateDbtSourceV2Dto",
        "PublicCreateFivetranSourceV2Dto",
        "PublicCreateLookerSourceV2Dto",
        "PublicCreateMicrostrategySourceV2Dto",
        "PublicCreateMssqlSourceV2Dto",
        "PublicCreateMysqlSourceV2Dto",
        "PublicCreateOracleSourceV2Dto",
        "PublicCreatePostgresqlSourceV2Dto",
        "PublicCreatePowerBiSourceV2Dto",
        "PublicCreateQlikSourceV2Dto",
        "PublicCreateQuicksightSourceV2Dto",
        "PublicCreateRedshiftSourceV2Dto",
        "PublicCreateSnowflakeSourceV2Dto",
        "PublicCreateSynapseSourceV2Dto",
        "PublicCreateTableauSourceV2Dto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = PublicCreateSourceV2Request.model_construct()
        error_messages = []
        match = 0
        # validate data type: PublicCreateAirflowSourceV2Dto
        if not isinstance(v, PublicCreateAirflowSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateAirflowSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateAthenaSourceV2Dto
        if not isinstance(v, PublicCreateAthenaSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateAthenaSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateBigQuerySourceV2Dto
        if not isinstance(v, PublicCreateBigQuerySourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateBigQuerySourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateDatabricksSourceV2Dto
        if not isinstance(v, PublicCreateDatabricksSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateDatabricksSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateDbtCloudSourceV2Dto
        if not isinstance(v, PublicCreateDbtCloudSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateDbtCloudSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateDbtSourceV2Dto
        if not isinstance(v, PublicCreateDbtSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateDbtSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateFivetranSourceV2Dto
        if not isinstance(v, PublicCreateFivetranSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateFivetranSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateLookerSourceV2Dto
        if not isinstance(v, PublicCreateLookerSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateLookerSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateMicrostrategySourceV2Dto
        if not isinstance(v, PublicCreateMicrostrategySourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateMicrostrategySourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateMssqlSourceV2Dto
        if not isinstance(v, PublicCreateMssqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateMssqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateMysqlSourceV2Dto
        if not isinstance(v, PublicCreateMysqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateMysqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateOracleSourceV2Dto
        if not isinstance(v, PublicCreateOracleSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateOracleSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreatePostgresqlSourceV2Dto
        if not isinstance(v, PublicCreatePostgresqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreatePostgresqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreatePowerBiSourceV2Dto
        if not isinstance(v, PublicCreatePowerBiSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreatePowerBiSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateQlikSourceV2Dto
        if not isinstance(v, PublicCreateQlikSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateQlikSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateQuicksightSourceV2Dto
        if not isinstance(v, PublicCreateQuicksightSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateQuicksightSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateRedshiftSourceV2Dto
        if not isinstance(v, PublicCreateRedshiftSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateRedshiftSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateSnowflakeSourceV2Dto
        if not isinstance(v, PublicCreateSnowflakeSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateSnowflakeSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateSynapseSourceV2Dto
        if not isinstance(v, PublicCreateSynapseSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateSynapseSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicCreateTableauSourceV2Dto
        if not isinstance(v, PublicCreateTableauSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicCreateTableauSourceV2Dto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in PublicCreateSourceV2Request with oneOf schemas: PublicCreateAirflowSourceV2Dto, PublicCreateAthenaSourceV2Dto, PublicCreateBigQuerySourceV2Dto, PublicCreateDatabricksSourceV2Dto, PublicCreateDbtCloudSourceV2Dto, PublicCreateDbtSourceV2Dto, PublicCreateFivetranSourceV2Dto, PublicCreateLookerSourceV2Dto, PublicCreateMicrostrategySourceV2Dto, PublicCreateMssqlSourceV2Dto, PublicCreateMysqlSourceV2Dto, PublicCreateOracleSourceV2Dto, PublicCreatePostgresqlSourceV2Dto, PublicCreatePowerBiSourceV2Dto, PublicCreateQlikSourceV2Dto, PublicCreateQuicksightSourceV2Dto, PublicCreateRedshiftSourceV2Dto, PublicCreateSnowflakeSourceV2Dto, PublicCreateSynapseSourceV2Dto, PublicCreateTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in PublicCreateSourceV2Request with oneOf schemas: PublicCreateAirflowSourceV2Dto, PublicCreateAthenaSourceV2Dto, PublicCreateBigQuerySourceV2Dto, PublicCreateDatabricksSourceV2Dto, PublicCreateDbtCloudSourceV2Dto, PublicCreateDbtSourceV2Dto, PublicCreateFivetranSourceV2Dto, PublicCreateLookerSourceV2Dto, PublicCreateMicrostrategySourceV2Dto, PublicCreateMssqlSourceV2Dto, PublicCreateMysqlSourceV2Dto, PublicCreateOracleSourceV2Dto, PublicCreatePostgresqlSourceV2Dto, PublicCreatePowerBiSourceV2Dto, PublicCreateQlikSourceV2Dto, PublicCreateQuicksightSourceV2Dto, PublicCreateRedshiftSourceV2Dto, PublicCreateSnowflakeSourceV2Dto, PublicCreateSynapseSourceV2Dto, PublicCreateTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `PublicCreateAirflowSourceV2Dto`
        if _data_type == "PublicCreateAirflowSourceV2Dto":
            instance.actual_instance = PublicCreateAirflowSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateAthenaSourceV2Dto`
        if _data_type == "PublicCreateAthenaSourceV2Dto":
            instance.actual_instance = PublicCreateAthenaSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateBigQuerySourceV2Dto`
        if _data_type == "PublicCreateBigQuerySourceV2Dto":
            instance.actual_instance = PublicCreateBigQuerySourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateDatabricksSourceV2Dto`
        if _data_type == "PublicCreateDatabricksSourceV2Dto":
            instance.actual_instance = PublicCreateDatabricksSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateDbtCloudSourceV2Dto`
        if _data_type == "PublicCreateDbtCloudSourceV2Dto":
            instance.actual_instance = PublicCreateDbtCloudSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateDbtSourceV2Dto`
        if _data_type == "PublicCreateDbtSourceV2Dto":
            instance.actual_instance = PublicCreateDbtSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateFivetranSourceV2Dto`
        if _data_type == "PublicCreateFivetranSourceV2Dto":
            instance.actual_instance = PublicCreateFivetranSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateLookerSourceV2Dto`
        if _data_type == "PublicCreateLookerSourceV2Dto":
            instance.actual_instance = PublicCreateLookerSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateMicrostrategySourceV2Dto`
        if _data_type == "PublicCreateMicrostrategySourceV2Dto":
            instance.actual_instance = PublicCreateMicrostrategySourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateMssqlSourceV2Dto`
        if _data_type == "PublicCreateMssqlSourceV2Dto":
            instance.actual_instance = PublicCreateMssqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateMysqlSourceV2Dto`
        if _data_type == "PublicCreateMysqlSourceV2Dto":
            instance.actual_instance = PublicCreateMysqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateOracleSourceV2Dto`
        if _data_type == "PublicCreateOracleSourceV2Dto":
            instance.actual_instance = PublicCreateOracleSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreatePostgresqlSourceV2Dto`
        if _data_type == "PublicCreatePostgresqlSourceV2Dto":
            instance.actual_instance = PublicCreatePostgresqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreatePowerBiSourceV2Dto`
        if _data_type == "PublicCreatePowerBiSourceV2Dto":
            instance.actual_instance = PublicCreatePowerBiSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateQlikSourceV2Dto`
        if _data_type == "PublicCreateQlikSourceV2Dto":
            instance.actual_instance = PublicCreateQlikSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateQuicksightSourceV2Dto`
        if _data_type == "PublicCreateQuicksightSourceV2Dto":
            instance.actual_instance = PublicCreateQuicksightSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateRedshiftSourceV2Dto`
        if _data_type == "PublicCreateRedshiftSourceV2Dto":
            instance.actual_instance = PublicCreateRedshiftSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateSnowflakeSourceV2Dto`
        if _data_type == "PublicCreateSnowflakeSourceV2Dto":
            instance.actual_instance = PublicCreateSnowflakeSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateSynapseSourceV2Dto`
        if _data_type == "PublicCreateSynapseSourceV2Dto":
            instance.actual_instance = PublicCreateSynapseSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicCreateTableauSourceV2Dto`
        if _data_type == "PublicCreateTableauSourceV2Dto":
            instance.actual_instance = PublicCreateTableauSourceV2Dto.from_json(json_str)
            return instance

        # deserialize data into PublicCreateAirflowSourceV2Dto
        try:
            instance.actual_instance = PublicCreateAirflowSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateAthenaSourceV2Dto
        try:
            instance.actual_instance = PublicCreateAthenaSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateBigQuerySourceV2Dto
        try:
            instance.actual_instance = PublicCreateBigQuerySourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateDatabricksSourceV2Dto
        try:
            instance.actual_instance = PublicCreateDatabricksSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateDbtCloudSourceV2Dto
        try:
            instance.actual_instance = PublicCreateDbtCloudSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateDbtSourceV2Dto
        try:
            instance.actual_instance = PublicCreateDbtSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateFivetranSourceV2Dto
        try:
            instance.actual_instance = PublicCreateFivetranSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateLookerSourceV2Dto
        try:
            instance.actual_instance = PublicCreateLookerSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateMicrostrategySourceV2Dto
        try:
            instance.actual_instance = PublicCreateMicrostrategySourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateMssqlSourceV2Dto
        try:
            instance.actual_instance = PublicCreateMssqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateMysqlSourceV2Dto
        try:
            instance.actual_instance = PublicCreateMysqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateOracleSourceV2Dto
        try:
            instance.actual_instance = PublicCreateOracleSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreatePostgresqlSourceV2Dto
        try:
            instance.actual_instance = PublicCreatePostgresqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreatePowerBiSourceV2Dto
        try:
            instance.actual_instance = PublicCreatePowerBiSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateQlikSourceV2Dto
        try:
            instance.actual_instance = PublicCreateQlikSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateQuicksightSourceV2Dto
        try:
            instance.actual_instance = PublicCreateQuicksightSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateRedshiftSourceV2Dto
        try:
            instance.actual_instance = PublicCreateRedshiftSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateSnowflakeSourceV2Dto
        try:
            instance.actual_instance = PublicCreateSnowflakeSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateSynapseSourceV2Dto
        try:
            instance.actual_instance = PublicCreateSynapseSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicCreateTableauSourceV2Dto
        try:
            instance.actual_instance = PublicCreateTableauSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into PublicCreateSourceV2Request with oneOf schemas: PublicCreateAirflowSourceV2Dto, PublicCreateAthenaSourceV2Dto, PublicCreateBigQuerySourceV2Dto, PublicCreateDatabricksSourceV2Dto, PublicCreateDbtCloudSourceV2Dto, PublicCreateDbtSourceV2Dto, PublicCreateFivetranSourceV2Dto, PublicCreateLookerSourceV2Dto, PublicCreateMicrostrategySourceV2Dto, PublicCreateMssqlSourceV2Dto, PublicCreateMysqlSourceV2Dto, PublicCreateOracleSourceV2Dto, PublicCreatePostgresqlSourceV2Dto, PublicCreatePowerBiSourceV2Dto, PublicCreateQlikSourceV2Dto, PublicCreateQuicksightSourceV2Dto, PublicCreateRedshiftSourceV2Dto, PublicCreateSnowflakeSourceV2Dto, PublicCreateSynapseSourceV2Dto, PublicCreateTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into PublicCreateSourceV2Request with oneOf schemas: PublicCreateAirflowSourceV2Dto, PublicCreateAthenaSourceV2Dto, PublicCreateBigQuerySourceV2Dto, PublicCreateDatabricksSourceV2Dto, PublicCreateDbtCloudSourceV2Dto, PublicCreateDbtSourceV2Dto, PublicCreateFivetranSourceV2Dto, PublicCreateLookerSourceV2Dto, PublicCreateMicrostrategySourceV2Dto, PublicCreateMssqlSourceV2Dto, PublicCreateMysqlSourceV2Dto, PublicCreateOracleSourceV2Dto, PublicCreatePostgresqlSourceV2Dto, PublicCreatePowerBiSourceV2Dto, PublicCreateQlikSourceV2Dto, PublicCreateQuicksightSourceV2Dto, PublicCreateRedshiftSourceV2Dto, PublicCreateSnowflakeSourceV2Dto, PublicCreateSynapseSourceV2Dto, PublicCreateTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            PublicCreateAirflowSourceV2Dto,
            PublicCreateAthenaSourceV2Dto,
            PublicCreateBigQuerySourceV2Dto,
            PublicCreateDatabricksSourceV2Dto,
            PublicCreateDbtCloudSourceV2Dto,
            PublicCreateDbtSourceV2Dto,
            PublicCreateFivetranSourceV2Dto,
            PublicCreateLookerSourceV2Dto,
            PublicCreateMicrostrategySourceV2Dto,
            PublicCreateMssqlSourceV2Dto,
            PublicCreateMysqlSourceV2Dto,
            PublicCreateOracleSourceV2Dto,
            PublicCreatePostgresqlSourceV2Dto,
            PublicCreatePowerBiSourceV2Dto,
            PublicCreateQlikSourceV2Dto,
            PublicCreateQuicksightSourceV2Dto,
            PublicCreateRedshiftSourceV2Dto,
            PublicCreateSnowflakeSourceV2Dto,
            PublicCreateSynapseSourceV2Dto,
            PublicCreateTableauSourceV2Dto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
