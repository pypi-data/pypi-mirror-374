# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.system_collaboration_tool_jira_config_dto import (
    SystemCollaborationToolJiraConfigDto,
)
from sifflet_sdk.client.models.system_collaboration_tool_service_now_config_dto import (
    SystemCollaborationToolServiceNowConfigDto,
)
from sifflet_sdk.client.models.system_collaboration_tool_service_now_temp_config_dto import (
    SystemCollaborationToolServiceNowTempConfigDto,
)
from sifflet_sdk.client.models.system_source_failure_notification_preference_dto import (
    SystemSourceFailureNotificationPreferenceDto,
)
from sifflet_sdk.client.models.system_string_preference_dto import (
    SystemStringPreferenceDto,
)
from sifflet_sdk.client.models.system_user_permission_preference_dto import (
    SystemUserPermissionPreferenceDto,
)
from typing_extensions import Literal, Self

UPDATESYSTEMPREFERENCEBYNAMEREQUEST_ONE_OF_SCHEMAS = [
    "SystemCollaborationToolJiraConfigDto",
    "SystemCollaborationToolServiceNowConfigDto",
    "SystemCollaborationToolServiceNowTempConfigDto",
    "SystemSourceFailureNotificationPreferenceDto",
    "SystemStringPreferenceDto",
    "SystemUserPermissionPreferenceDto",
]


class UpdateSystemPreferenceByNameRequest(BaseModel):
    """
    UpdateSystemPreferenceByNameRequest
    """

    # data type: SystemCollaborationToolJiraConfigDto
    oneof_schema_1_validator: Optional[SystemCollaborationToolJiraConfigDto] = None
    # data type: SystemCollaborationToolServiceNowConfigDto
    oneof_schema_2_validator: Optional[SystemCollaborationToolServiceNowConfigDto] = None
    # data type: SystemCollaborationToolServiceNowTempConfigDto
    oneof_schema_3_validator: Optional[SystemCollaborationToolServiceNowTempConfigDto] = None
    # data type: SystemSourceFailureNotificationPreferenceDto
    oneof_schema_4_validator: Optional[SystemSourceFailureNotificationPreferenceDto] = None
    # data type: SystemStringPreferenceDto
    oneof_schema_5_validator: Optional[SystemStringPreferenceDto] = None
    # data type: SystemUserPermissionPreferenceDto
    oneof_schema_6_validator: Optional[SystemUserPermissionPreferenceDto] = None
    actual_instance: Optional[
        Union[
            SystemCollaborationToolJiraConfigDto,
            SystemCollaborationToolServiceNowConfigDto,
            SystemCollaborationToolServiceNowTempConfigDto,
            SystemSourceFailureNotificationPreferenceDto,
            SystemStringPreferenceDto,
            SystemUserPermissionPreferenceDto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "SystemCollaborationToolJiraConfigDto",
        "SystemCollaborationToolServiceNowConfigDto",
        "SystemCollaborationToolServiceNowTempConfigDto",
        "SystemSourceFailureNotificationPreferenceDto",
        "SystemStringPreferenceDto",
        "SystemUserPermissionPreferenceDto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = UpdateSystemPreferenceByNameRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: SystemCollaborationToolJiraConfigDto
        if not isinstance(v, SystemCollaborationToolJiraConfigDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SystemCollaborationToolJiraConfigDto`")
        else:
            match += 1
        # validate data type: SystemCollaborationToolServiceNowConfigDto
        if not isinstance(v, SystemCollaborationToolServiceNowConfigDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SystemCollaborationToolServiceNowConfigDto`")
        else:
            match += 1
        # validate data type: SystemCollaborationToolServiceNowTempConfigDto
        if not isinstance(v, SystemCollaborationToolServiceNowTempConfigDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `SystemCollaborationToolServiceNowTempConfigDto`"
            )
        else:
            match += 1
        # validate data type: SystemSourceFailureNotificationPreferenceDto
        if not isinstance(v, SystemSourceFailureNotificationPreferenceDto):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `SystemSourceFailureNotificationPreferenceDto`"
            )
        else:
            match += 1
        # validate data type: SystemStringPreferenceDto
        if not isinstance(v, SystemStringPreferenceDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SystemStringPreferenceDto`")
        else:
            match += 1
        # validate data type: SystemUserPermissionPreferenceDto
        if not isinstance(v, SystemUserPermissionPreferenceDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SystemUserPermissionPreferenceDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in UpdateSystemPreferenceByNameRequest with oneOf schemas: SystemCollaborationToolJiraConfigDto, SystemCollaborationToolServiceNowConfigDto, SystemCollaborationToolServiceNowTempConfigDto, SystemSourceFailureNotificationPreferenceDto, SystemStringPreferenceDto, SystemUserPermissionPreferenceDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in UpdateSystemPreferenceByNameRequest with oneOf schemas: SystemCollaborationToolJiraConfigDto, SystemCollaborationToolServiceNowConfigDto, SystemCollaborationToolServiceNowTempConfigDto, SystemSourceFailureNotificationPreferenceDto, SystemStringPreferenceDto, SystemUserPermissionPreferenceDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `SystemCollaborationToolJiraConfigDto`
        if _data_type == "COLLABORATION_TOOL_JIRA":
            instance.actual_instance = SystemCollaborationToolJiraConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemCollaborationToolServiceNowConfigDto`
        if _data_type == "COLLABORATION_TOOL_SERVICENOW":
            instance.actual_instance = SystemCollaborationToolServiceNowConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemCollaborationToolServiceNowTempConfigDto`
        if _data_type == "COLLABORATION_TOOL_SERVICENOW_TEMP":
            instance.actual_instance = SystemCollaborationToolServiceNowTempConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemSourceFailureNotificationPreferenceDto`
        if _data_type == "SOURCE_FAILURE_NOTIFICATIONS":
            instance.actual_instance = SystemSourceFailureNotificationPreferenceDto.from_json(json_str)
            return instance

        # check if data type is `SystemStringPreferenceDto`
        if _data_type == "STRING":
            instance.actual_instance = SystemStringPreferenceDto.from_json(json_str)
            return instance

        # check if data type is `SystemUserPermissionPreferenceDto`
        if _data_type == "USER_PERMISSION":
            instance.actual_instance = SystemUserPermissionPreferenceDto.from_json(json_str)
            return instance

        # check if data type is `SystemCollaborationToolJiraConfigDto`
        if _data_type == "SystemCollaborationToolJiraConfigDto":
            instance.actual_instance = SystemCollaborationToolJiraConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemCollaborationToolServiceNowConfigDto`
        if _data_type == "SystemCollaborationToolServiceNowConfigDto":
            instance.actual_instance = SystemCollaborationToolServiceNowConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemCollaborationToolServiceNowTempConfigDto`
        if _data_type == "SystemCollaborationToolServiceNowTempConfigDto":
            instance.actual_instance = SystemCollaborationToolServiceNowTempConfigDto.from_json(json_str)
            return instance

        # check if data type is `SystemSourceFailureNotificationPreferenceDto`
        if _data_type == "SystemSourceFailureNotificationPreferenceDto":
            instance.actual_instance = SystemSourceFailureNotificationPreferenceDto.from_json(json_str)
            return instance

        # check if data type is `SystemStringPreferenceDto`
        if _data_type == "SystemStringPreferenceDto":
            instance.actual_instance = SystemStringPreferenceDto.from_json(json_str)
            return instance

        # check if data type is `SystemUserPermissionPreferenceDto`
        if _data_type == "SystemUserPermissionPreferenceDto":
            instance.actual_instance = SystemUserPermissionPreferenceDto.from_json(json_str)
            return instance

        # deserialize data into SystemCollaborationToolJiraConfigDto
        try:
            instance.actual_instance = SystemCollaborationToolJiraConfigDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SystemCollaborationToolServiceNowConfigDto
        try:
            instance.actual_instance = SystemCollaborationToolServiceNowConfigDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SystemCollaborationToolServiceNowTempConfigDto
        try:
            instance.actual_instance = SystemCollaborationToolServiceNowTempConfigDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SystemSourceFailureNotificationPreferenceDto
        try:
            instance.actual_instance = SystemSourceFailureNotificationPreferenceDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SystemStringPreferenceDto
        try:
            instance.actual_instance = SystemStringPreferenceDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SystemUserPermissionPreferenceDto
        try:
            instance.actual_instance = SystemUserPermissionPreferenceDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into UpdateSystemPreferenceByNameRequest with oneOf schemas: SystemCollaborationToolJiraConfigDto, SystemCollaborationToolServiceNowConfigDto, SystemCollaborationToolServiceNowTempConfigDto, SystemSourceFailureNotificationPreferenceDto, SystemStringPreferenceDto, SystemUserPermissionPreferenceDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into UpdateSystemPreferenceByNameRequest with oneOf schemas: SystemCollaborationToolJiraConfigDto, SystemCollaborationToolServiceNowConfigDto, SystemCollaborationToolServiceNowTempConfigDto, SystemSourceFailureNotificationPreferenceDto, SystemStringPreferenceDto, SystemUserPermissionPreferenceDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            SystemCollaborationToolJiraConfigDto,
            SystemCollaborationToolServiceNowConfigDto,
            SystemCollaborationToolServiceNowTempConfigDto,
            SystemSourceFailureNotificationPreferenceDto,
            SystemStringPreferenceDto,
            SystemUserPermissionPreferenceDto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
