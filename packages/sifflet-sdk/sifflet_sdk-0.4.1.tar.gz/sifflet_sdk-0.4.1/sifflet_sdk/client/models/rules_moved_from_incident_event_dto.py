# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field, StrictInt
from sifflet_sdk.client.models.incident_event_dto import IncidentEventDto
from sifflet_sdk.client.models.incident_light_dto import IncidentLightDto
from sifflet_sdk.client.models.rule_brief_dto import RuleBriefDto
from sifflet_sdk.client.models.user_dto import UserDto
from typing_extensions import Self


class RulesMovedFromIncidentEventDto(IncidentEventDto):
    """
    RulesMovedFromIncidentEventDto
    """  # noqa: E501

    changed_by_user: Optional[UserDto] = Field(default=None, alias="changedByUser")
    first_date: StrictInt = Field(alias="firstDate")
    from_incident: Optional[IncidentLightDto] = Field(default=None, alias="fromIncident")
    last_date: StrictInt = Field(alias="lastDate")
    rules: List[RuleBriefDto]
    __properties: ClassVar[List[str]] = [
        "date",
        "type",
        "changedByUser",
        "firstDate",
        "fromIncident",
        "lastDate",
        "rules",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RulesMovedFromIncidentEventDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of changed_by_user
        if self.changed_by_user:
            _dict["changedByUser"] = self.changed_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of from_incident
        if self.from_incident:
            _dict["fromIncident"] = self.from_incident.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict["rules"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RulesMovedFromIncidentEventDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "date": obj.get("date"),
                "type": obj.get("type"),
                "changedByUser": (
                    UserDto.from_dict(obj["changedByUser"]) if obj.get("changedByUser") is not None else None
                ),
                "firstDate": obj.get("firstDate"),
                "fromIncident": (
                    IncidentLightDto.from_dict(obj["fromIncident"]) if obj.get("fromIncident") is not None else None
                ),
                "lastDate": obj.get("lastDate"),
                "rules": (
                    [RuleBriefDto.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None
                ),
            }
        )
        return _obj
