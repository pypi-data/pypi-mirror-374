# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.assignees_change_incident_event_dto import (
        AssigneesChangeIncidentEventDto,
    )
    from sifflet_sdk.client.models.collaboration_tool_disconnected_incident_event_dto import (
        CollaborationToolDisconnectedIncidentEventDto,
    )
    from sifflet_sdk.client.models.collaboration_tool_item_linked_by_monitor_incident_event_dto import (
        CollaborationToolItemLinkedByMonitorIncidentEventDto,
    )
    from sifflet_sdk.client.models.collaboration_tool_item_linked_by_user_incident_event_dto import (
        CollaborationToolItemLinkedByUserIncidentEventDto,
    )
    from sifflet_sdk.client.models.collaboration_tool_item_unlinked_incident_event_dto import (
        CollaborationToolItemUnlinkedIncidentEventDto,
    )
    from sifflet_sdk.client.models.collaboration_tool_status_change_event_dto import (
        CollaborationToolStatusChangeEventDto,
    )
    from sifflet_sdk.client.models.comment_incident_event_dto import (
        CommentIncidentEventDto,
    )
    from sifflet_sdk.client.models.creation_by_rule_run_incident_event_dto import (
        CreationByRuleRunIncidentEventDto,
    )
    from sifflet_sdk.client.models.creation_by_user_incident_event_dto import (
        CreationByUserIncidentEventDto,
    )
    from sifflet_sdk.client.models.name_change_incident_event_dto import (
        NameChangeIncidentEventDto,
    )
    from sifflet_sdk.client.models.new_failures_incident_event_dto import (
        NewFailuresIncidentEventDto,
    )
    from sifflet_sdk.client.models.rules_added_incident_event_dto import (
        RulesAddedIncidentEventDto,
    )
    from sifflet_sdk.client.models.rules_moved_from_incident_event_dto import (
        RulesMovedFromIncidentEventDto,
    )
    from sifflet_sdk.client.models.rules_moved_to_incident_event_dto import (
        RulesMovedToIncidentEventDto,
    )
    from sifflet_sdk.client.models.severity_change_incident_event_dto import (
        SeverityChangeIncidentEventDto,
    )
    from sifflet_sdk.client.models.status_change_incident_event_dto import (
        StatusChangeIncidentEventDto,
    )


class IncidentEventDto(BaseModel):
    """
    IncidentEventDto
    """  # noqa: E501

    var_date: StrictInt = Field(alias="date")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["date", "type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "CREATION_BY_USER",
                "CREATION_BY_RULE_RUN",
                "COMMENT",
                "STATUS_CHANGE",
                "SEVERITY_CHANGE",
                "NAME_CHANGE",
                "ASSIGNEES_CHANGE",
                "NEW_FAILURES",
                "RULES_ADDED",
                "RULES_MOVED_TO",
                "RULES_MOVED_FROM",
                "COLLABORATION_TOOL_ITEM_LINKED",
                "COLLABORATION_TOOL_ITEM_UNLINKED",
                "COLLABORATION_TOOL_DISCONNECTED",
                "COLLABORATION_TOOL_STATUS_CHANGE",
                "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('CREATION_BY_USER', 'CREATION_BY_RULE_RUN', 'COMMENT', 'STATUS_CHANGE', 'SEVERITY_CHANGE', 'NAME_CHANGE', 'ASSIGNEES_CHANGE', 'NEW_FAILURES', 'RULES_ADDED', 'RULES_MOVED_TO', 'RULES_MOVED_FROM', 'COLLABORATION_TOOL_ITEM_LINKED', 'COLLABORATION_TOOL_ITEM_UNLINKED', 'COLLABORATION_TOOL_DISCONNECTED', 'COLLABORATION_TOOL_STATUS_CHANGE', 'COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "ASSIGNEES_CHANGE": "AssigneesChangeIncidentEventDto",
        "COLLABORATION_TOOL_DISCONNECTED": "CollaborationToolDisconnectedIncidentEventDto",
        "COLLABORATION_TOOL_ITEM_LINKED": "CollaborationToolItemLinkedByUserIncidentEventDto",
        "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR": "CollaborationToolItemLinkedByMonitorIncidentEventDto",
        "COLLABORATION_TOOL_ITEM_UNLINKED": "CollaborationToolItemUnlinkedIncidentEventDto",
        "COLLABORATION_TOOL_STATUS_CHANGE": "CollaborationToolStatusChangeEventDto",
        "COMMENT": "CommentIncidentEventDto",
        "CREATION_BY_RULE_RUN": "CreationByRuleRunIncidentEventDto",
        "CREATION_BY_USER": "CreationByUserIncidentEventDto",
        "NAME_CHANGE": "NameChangeIncidentEventDto",
        "NEW_FAILURES": "NewFailuresIncidentEventDto",
        "RULES_ADDED": "RulesAddedIncidentEventDto",
        "RULES_MOVED_FROM": "RulesMovedFromIncidentEventDto",
        "RULES_MOVED_TO": "RulesMovedToIncidentEventDto",
        "SEVERITY_CHANGE": "SeverityChangeIncidentEventDto",
        "STATUS_CHANGE": "StatusChangeIncidentEventDto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            AssigneesChangeIncidentEventDto,
            CollaborationToolDisconnectedIncidentEventDto,
            CollaborationToolItemLinkedByUserIncidentEventDto,
            CollaborationToolItemLinkedByMonitorIncidentEventDto,
            CollaborationToolItemUnlinkedIncidentEventDto,
            CollaborationToolStatusChangeEventDto,
            CommentIncidentEventDto,
            CreationByRuleRunIncidentEventDto,
            CreationByUserIncidentEventDto,
            NameChangeIncidentEventDto,
            NewFailuresIncidentEventDto,
            RulesAddedIncidentEventDto,
            RulesMovedFromIncidentEventDto,
            RulesMovedToIncidentEventDto,
            SeverityChangeIncidentEventDto,
            StatusChangeIncidentEventDto,
        ]
    ]:
        """Create an instance of IncidentEventDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            AssigneesChangeIncidentEventDto,
            CollaborationToolDisconnectedIncidentEventDto,
            CollaborationToolItemLinkedByUserIncidentEventDto,
            CollaborationToolItemLinkedByMonitorIncidentEventDto,
            CollaborationToolItemUnlinkedIncidentEventDto,
            CollaborationToolStatusChangeEventDto,
            CommentIncidentEventDto,
            CreationByRuleRunIncidentEventDto,
            CreationByUserIncidentEventDto,
            NameChangeIncidentEventDto,
            NewFailuresIncidentEventDto,
            RulesAddedIncidentEventDto,
            RulesMovedFromIncidentEventDto,
            RulesMovedToIncidentEventDto,
            SeverityChangeIncidentEventDto,
            StatusChangeIncidentEventDto,
        ]
    ]:
        """Create an instance of IncidentEventDto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AssigneesChangeIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.assignees_change_incident_event_dto"
            ).AssigneesChangeIncidentEventDto.from_dict(obj)
        if object_type == "CollaborationToolDisconnectedIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.collaboration_tool_disconnected_incident_event_dto"
            ).CollaborationToolDisconnectedIncidentEventDto.from_dict(obj)
        if object_type == "CollaborationToolItemLinkedByUserIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.collaboration_tool_item_linked_by_user_incident_event_dto"
            ).CollaborationToolItemLinkedByUserIncidentEventDto.from_dict(obj)
        if object_type == "CollaborationToolItemLinkedByMonitorIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.collaboration_tool_item_linked_by_monitor_incident_event_dto"
            ).CollaborationToolItemLinkedByMonitorIncidentEventDto.from_dict(obj)
        if object_type == "CollaborationToolItemUnlinkedIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.collaboration_tool_item_unlinked_incident_event_dto"
            ).CollaborationToolItemUnlinkedIncidentEventDto.from_dict(obj)
        if object_type == "CollaborationToolStatusChangeEventDto":
            return import_module(
                "sifflet_sdk.client.models.collaboration_tool_status_change_event_dto"
            ).CollaborationToolStatusChangeEventDto.from_dict(obj)
        if object_type == "CommentIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.comment_incident_event_dto"
            ).CommentIncidentEventDto.from_dict(obj)
        if object_type == "CreationByRuleRunIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.creation_by_rule_run_incident_event_dto"
            ).CreationByRuleRunIncidentEventDto.from_dict(obj)
        if object_type == "CreationByUserIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.creation_by_user_incident_event_dto"
            ).CreationByUserIncidentEventDto.from_dict(obj)
        if object_type == "NameChangeIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.name_change_incident_event_dto"
            ).NameChangeIncidentEventDto.from_dict(obj)
        if object_type == "NewFailuresIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.new_failures_incident_event_dto"
            ).NewFailuresIncidentEventDto.from_dict(obj)
        if object_type == "RulesAddedIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.rules_added_incident_event_dto"
            ).RulesAddedIncidentEventDto.from_dict(obj)
        if object_type == "RulesMovedFromIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.rules_moved_from_incident_event_dto"
            ).RulesMovedFromIncidentEventDto.from_dict(obj)
        if object_type == "RulesMovedToIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.rules_moved_to_incident_event_dto"
            ).RulesMovedToIncidentEventDto.from_dict(obj)
        if object_type == "SeverityChangeIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.severity_change_incident_event_dto"
            ).SeverityChangeIncidentEventDto.from_dict(obj)
        if object_type == "StatusChangeIncidentEventDto":
            return import_module(
                "sifflet_sdk.client.models.status_change_incident_event_dto"
            ).StatusChangeIncidentEventDto.from_dict(obj)

        raise ValueError(
            "IncidentEventDto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
