# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.parameterized_query_dto import ParameterizedQueryDto
from sifflet_sdk.client.models.rule_run_values_dto import RuleRunValuesDto
from typing_extensions import Self


class RuleRunDto(BaseModel):
    """
    RuleRunDto
    """  # noqa: E501

    can_show_failing_rows: StrictBool = Field(alias="canShowFailingRows")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    debug_sql: Optional[ParameterizedQueryDto] = Field(default=None, alias="debugSql")
    debuggable: StrictBool
    end_date: Optional[StrictInt] = Field(default=None, alias="endDate")
    has_graph: StrictBool = Field(alias="hasGraph")
    has_group_by: StrictBool = Field(alias="hasGroupBy")
    id: StrictStr
    incident_issue: Optional[StrictInt] = Field(default=None, alias="incidentIssue")
    incident_name: Optional[StrictStr] = Field(default=None, alias="incidentName")
    incident_status: Optional[StrictStr] = Field(default=None, alias="incidentStatus")
    result: Optional[StrictStr] = None
    rule_id: Optional[StrictStr] = Field(default=None, alias="ruleId")
    start_date: Optional[StrictInt] = Field(default=None, alias="startDate")
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    values: Optional[RuleRunValuesDto] = None
    __properties: ClassVar[List[str]] = [
        "canShowFailingRows",
        "createdBy",
        "createdDate",
        "debugSql",
        "debuggable",
        "endDate",
        "hasGraph",
        "hasGroupBy",
        "id",
        "incidentIssue",
        "incidentName",
        "incidentStatus",
        "result",
        "ruleId",
        "startDate",
        "status",
        "type",
        "values",
    ]

    @field_validator("incident_status")
    def incident_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["OPEN", "IN_PROGRESS", "CLOSED"]):
            raise ValueError("must be one of enum values ('OPEN', 'IN_PROGRESS', 'CLOSED')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "RUNNING", "SUCCESS", "REQUIRES_YOUR_ATTENTION", "TECHNICAL_ERROR", "FAILED"]):
            raise ValueError(
                "must be one of enum values ('PENDING', 'RUNNING', 'SUCCESS', 'REQUIRES_YOUR_ATTENTION', 'TECHNICAL_ERROR', 'FAILED')"
            )
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["MANUAL", "SCHEDULED", "DBT"]):
            raise ValueError("must be one of enum values ('MANUAL', 'SCHEDULED', 'DBT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleRunDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_sql
        if self.debug_sql:
            _dict["debugSql"] = self.debug_sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of values
        if self.values:
            _dict["values"] = self.values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleRunDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "canShowFailingRows": obj.get("canShowFailingRows"),
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "debugSql": (
                    ParameterizedQueryDto.from_dict(obj["debugSql"]) if obj.get("debugSql") is not None else None
                ),
                "debuggable": obj.get("debuggable"),
                "endDate": obj.get("endDate"),
                "hasGraph": obj.get("hasGraph"),
                "hasGroupBy": obj.get("hasGroupBy"),
                "id": obj.get("id"),
                "incidentIssue": obj.get("incidentIssue"),
                "incidentName": obj.get("incidentName"),
                "incidentStatus": obj.get("incidentStatus"),
                "result": obj.get("result"),
                "ruleId": obj.get("ruleId"),
                "startDate": obj.get("startDate"),
                "status": obj.get("status"),
                "type": obj.get("type"),
                "values": RuleRunValuesDto.from_dict(obj["values"]) if obj.get("values") is not None else None,
            }
        )
        return _obj
