# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.asset_ingestion_search_filter_element_dto import (
    AssetIngestionSearchFilterElementDto,
)
from sifflet_sdk.client.models.asset_search_filter_element_dto import (
    AssetSearchFilterElementDto,
)
from sifflet_sdk.client.models.base_search_filter_element_dto import (
    BaseSearchFilterElementDto,
)
from sifflet_sdk.client.models.creation_method_search_filter_element_dto import (
    CreationMethodSearchFilterElementDto,
)
from sifflet_sdk.client.models.criticality_search_filter_element_dto import (
    CriticalitySearchFilterElementDto,
)
from sifflet_sdk.client.models.custom_metadata_label_search_filter_element_dto import (
    CustomMetadataLabelSearchFilterElementDto,
)
from sifflet_sdk.client.models.custom_metadata_search_filter_element_dto import (
    CustomMetadataSearchFilterElementDto,
)
from sifflet_sdk.client.models.custom_metadata_string_search_filter_element_dto import (
    CustomMetadataStringSearchFilterElementDto,
)
from sifflet_sdk.client.models.custom_metadata_user_search_filter_element_dto import (
    CustomMetadataUserSearchFilterElementDto,
)
from sifflet_sdk.client.models.dataset_search_filter_element_dto import (
    DatasetSearchFilterElementDto,
)
from sifflet_sdk.client.models.health_status_search_filter_element_dto import (
    HealthStatusSearchFilterElementDto,
)
from sifflet_sdk.client.models.owner_search_filter_element_dto import (
    OwnerSearchFilterElementDto,
)
from sifflet_sdk.client.models.platform_search_filter_element_dto import (
    PlatformSearchFilterElementDto,
)
from sifflet_sdk.client.models.platform_type_search_filter_element_dto import (
    PlatformTypeSearchFilterElementDto,
)
from sifflet_sdk.client.models.rule_template_name_search_filter_element_dto import (
    RuleTemplateNameSearchFilterElementDto,
)
from sifflet_sdk.client.models.tag_search_filter_element_dto import (
    TagSearchFilterElementDto,
)
from sifflet_sdk.client.models.usage_search_filter_element_dto import (
    UsageSearchFilterElementDto,
)
from sifflet_sdk.client.models.uuid_search_filter_element_dto import (
    UuidSearchFilterElementDto,
)
from typing_extensions import Literal, Self

BASESEARCHFILTERDTOCHILDRENINNER_ONE_OF_SCHEMAS = [
    "AssetIngestionSearchFilterElementDto",
    "AssetSearchFilterElementDto",
    "BaseSearchFilterElementDto",
    "CreationMethodSearchFilterElementDto",
    "CriticalitySearchFilterElementDto",
    "CustomMetadataLabelSearchFilterElementDto",
    "CustomMetadataSearchFilterElementDto",
    "CustomMetadataStringSearchFilterElementDto",
    "CustomMetadataUserSearchFilterElementDto",
    "DatasetSearchFilterElementDto",
    "HealthStatusSearchFilterElementDto",
    "OwnerSearchFilterElementDto",
    "PlatformSearchFilterElementDto",
    "PlatformTypeSearchFilterElementDto",
    "RuleTemplateNameSearchFilterElementDto",
    "TagSearchFilterElementDto",
    "UsageSearchFilterElementDto",
    "UuidSearchFilterElementDto",
]


class BaseSearchFilterDtoChildrenInner(BaseModel):
    """
    BaseSearchFilterDtoChildrenInner
    """

    # data type: BaseSearchFilterElementDto
    oneof_schema_1_validator: Optional[BaseSearchFilterElementDto] = None
    # data type: AssetIngestionSearchFilterElementDto
    oneof_schema_2_validator: Optional[AssetIngestionSearchFilterElementDto] = None
    # data type: AssetSearchFilterElementDto
    oneof_schema_3_validator: Optional[AssetSearchFilterElementDto] = None
    # data type: CreationMethodSearchFilterElementDto
    oneof_schema_4_validator: Optional[CreationMethodSearchFilterElementDto] = None
    # data type: CriticalitySearchFilterElementDto
    oneof_schema_5_validator: Optional[CriticalitySearchFilterElementDto] = None
    # data type: CustomMetadataSearchFilterElementDto
    oneof_schema_6_validator: Optional[CustomMetadataSearchFilterElementDto] = None
    # data type: DatasetSearchFilterElementDto
    oneof_schema_7_validator: Optional[DatasetSearchFilterElementDto] = None
    # data type: HealthStatusSearchFilterElementDto
    oneof_schema_8_validator: Optional[HealthStatusSearchFilterElementDto] = None
    # data type: OwnerSearchFilterElementDto
    oneof_schema_9_validator: Optional[OwnerSearchFilterElementDto] = None
    # data type: PlatformSearchFilterElementDto
    oneof_schema_10_validator: Optional[PlatformSearchFilterElementDto] = None
    # data type: PlatformTypeSearchFilterElementDto
    oneof_schema_11_validator: Optional[PlatformTypeSearchFilterElementDto] = None
    # data type: RuleTemplateNameSearchFilterElementDto
    oneof_schema_12_validator: Optional[RuleTemplateNameSearchFilterElementDto] = None
    # data type: TagSearchFilterElementDto
    oneof_schema_13_validator: Optional[TagSearchFilterElementDto] = None
    # data type: UsageSearchFilterElementDto
    oneof_schema_14_validator: Optional[UsageSearchFilterElementDto] = None
    # data type: UuidSearchFilterElementDto
    oneof_schema_15_validator: Optional[UuidSearchFilterElementDto] = None
    # data type: CustomMetadataLabelSearchFilterElementDto
    oneof_schema_16_validator: Optional[CustomMetadataLabelSearchFilterElementDto] = None
    # data type: CustomMetadataStringSearchFilterElementDto
    oneof_schema_17_validator: Optional[CustomMetadataStringSearchFilterElementDto] = None
    # data type: CustomMetadataUserSearchFilterElementDto
    oneof_schema_18_validator: Optional[CustomMetadataUserSearchFilterElementDto] = None
    actual_instance: Optional[
        Union[
            AssetIngestionSearchFilterElementDto,
            AssetSearchFilterElementDto,
            BaseSearchFilterElementDto,
            CreationMethodSearchFilterElementDto,
            CriticalitySearchFilterElementDto,
            CustomMetadataLabelSearchFilterElementDto,
            CustomMetadataSearchFilterElementDto,
            CustomMetadataStringSearchFilterElementDto,
            CustomMetadataUserSearchFilterElementDto,
            DatasetSearchFilterElementDto,
            HealthStatusSearchFilterElementDto,
            OwnerSearchFilterElementDto,
            PlatformSearchFilterElementDto,
            PlatformTypeSearchFilterElementDto,
            RuleTemplateNameSearchFilterElementDto,
            TagSearchFilterElementDto,
            UsageSearchFilterElementDto,
            UuidSearchFilterElementDto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "AssetIngestionSearchFilterElementDto",
        "AssetSearchFilterElementDto",
        "BaseSearchFilterElementDto",
        "CreationMethodSearchFilterElementDto",
        "CriticalitySearchFilterElementDto",
        "CustomMetadataLabelSearchFilterElementDto",
        "CustomMetadataSearchFilterElementDto",
        "CustomMetadataStringSearchFilterElementDto",
        "CustomMetadataUserSearchFilterElementDto",
        "DatasetSearchFilterElementDto",
        "HealthStatusSearchFilterElementDto",
        "OwnerSearchFilterElementDto",
        "PlatformSearchFilterElementDto",
        "PlatformTypeSearchFilterElementDto",
        "RuleTemplateNameSearchFilterElementDto",
        "TagSearchFilterElementDto",
        "UsageSearchFilterElementDto",
        "UuidSearchFilterElementDto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = BaseSearchFilterDtoChildrenInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: BaseSearchFilterElementDto
        if not isinstance(v, BaseSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BaseSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: AssetIngestionSearchFilterElementDto
        if not isinstance(v, AssetIngestionSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssetIngestionSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: AssetSearchFilterElementDto
        if not isinstance(v, AssetSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssetSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CreationMethodSearchFilterElementDto
        if not isinstance(v, CreationMethodSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreationMethodSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CriticalitySearchFilterElementDto
        if not isinstance(v, CriticalitySearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CriticalitySearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CustomMetadataSearchFilterElementDto
        if not isinstance(v, CustomMetadataSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomMetadataSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: DatasetSearchFilterElementDto
        if not isinstance(v, DatasetSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatasetSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: HealthStatusSearchFilterElementDto
        if not isinstance(v, HealthStatusSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HealthStatusSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: OwnerSearchFilterElementDto
        if not isinstance(v, OwnerSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OwnerSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: PlatformSearchFilterElementDto
        if not isinstance(v, PlatformSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: PlatformTypeSearchFilterElementDto
        if not isinstance(v, PlatformTypeSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformTypeSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: RuleTemplateNameSearchFilterElementDto
        if not isinstance(v, RuleTemplateNameSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RuleTemplateNameSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: TagSearchFilterElementDto
        if not isinstance(v, TagSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TagSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: UsageSearchFilterElementDto
        if not isinstance(v, UsageSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsageSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: UuidSearchFilterElementDto
        if not isinstance(v, UuidSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UuidSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CustomMetadataLabelSearchFilterElementDto
        if not isinstance(v, CustomMetadataLabelSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomMetadataLabelSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CustomMetadataStringSearchFilterElementDto
        if not isinstance(v, CustomMetadataStringSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomMetadataStringSearchFilterElementDto`")
        else:
            match += 1
        # validate data type: CustomMetadataUserSearchFilterElementDto
        if not isinstance(v, CustomMetadataUserSearchFilterElementDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomMetadataUserSearchFilterElementDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in BaseSearchFilterDtoChildrenInner with oneOf schemas: AssetIngestionSearchFilterElementDto, AssetSearchFilterElementDto, BaseSearchFilterElementDto, CreationMethodSearchFilterElementDto, CriticalitySearchFilterElementDto, CustomMetadataLabelSearchFilterElementDto, CustomMetadataSearchFilterElementDto, CustomMetadataStringSearchFilterElementDto, CustomMetadataUserSearchFilterElementDto, DatasetSearchFilterElementDto, HealthStatusSearchFilterElementDto, OwnerSearchFilterElementDto, PlatformSearchFilterElementDto, PlatformTypeSearchFilterElementDto, RuleTemplateNameSearchFilterElementDto, TagSearchFilterElementDto, UsageSearchFilterElementDto, UuidSearchFilterElementDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in BaseSearchFilterDtoChildrenInner with oneOf schemas: AssetIngestionSearchFilterElementDto, AssetSearchFilterElementDto, BaseSearchFilterElementDto, CreationMethodSearchFilterElementDto, CriticalitySearchFilterElementDto, CustomMetadataLabelSearchFilterElementDto, CustomMetadataSearchFilterElementDto, CustomMetadataStringSearchFilterElementDto, CustomMetadataUserSearchFilterElementDto, DatasetSearchFilterElementDto, HealthStatusSearchFilterElementDto, OwnerSearchFilterElementDto, PlatformSearchFilterElementDto, PlatformTypeSearchFilterElementDto, RuleTemplateNameSearchFilterElementDto, TagSearchFilterElementDto, UsageSearchFilterElementDto, UuidSearchFilterElementDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BaseSearchFilterElementDto
        try:
            instance.actual_instance = BaseSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssetIngestionSearchFilterElementDto
        try:
            instance.actual_instance = AssetIngestionSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssetSearchFilterElementDto
        try:
            instance.actual_instance = AssetSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreationMethodSearchFilterElementDto
        try:
            instance.actual_instance = CreationMethodSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CriticalitySearchFilterElementDto
        try:
            instance.actual_instance = CriticalitySearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomMetadataSearchFilterElementDto
        try:
            instance.actual_instance = CustomMetadataSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatasetSearchFilterElementDto
        try:
            instance.actual_instance = DatasetSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HealthStatusSearchFilterElementDto
        try:
            instance.actual_instance = HealthStatusSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OwnerSearchFilterElementDto
        try:
            instance.actual_instance = OwnerSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlatformSearchFilterElementDto
        try:
            instance.actual_instance = PlatformSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlatformTypeSearchFilterElementDto
        try:
            instance.actual_instance = PlatformTypeSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RuleTemplateNameSearchFilterElementDto
        try:
            instance.actual_instance = RuleTemplateNameSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TagSearchFilterElementDto
        try:
            instance.actual_instance = TagSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsageSearchFilterElementDto
        try:
            instance.actual_instance = UsageSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UuidSearchFilterElementDto
        try:
            instance.actual_instance = UuidSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomMetadataLabelSearchFilterElementDto
        try:
            instance.actual_instance = CustomMetadataLabelSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomMetadataStringSearchFilterElementDto
        try:
            instance.actual_instance = CustomMetadataStringSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CustomMetadataUserSearchFilterElementDto
        try:
            instance.actual_instance = CustomMetadataUserSearchFilterElementDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into BaseSearchFilterDtoChildrenInner with oneOf schemas: AssetIngestionSearchFilterElementDto, AssetSearchFilterElementDto, BaseSearchFilterElementDto, CreationMethodSearchFilterElementDto, CriticalitySearchFilterElementDto, CustomMetadataLabelSearchFilterElementDto, CustomMetadataSearchFilterElementDto, CustomMetadataStringSearchFilterElementDto, CustomMetadataUserSearchFilterElementDto, DatasetSearchFilterElementDto, HealthStatusSearchFilterElementDto, OwnerSearchFilterElementDto, PlatformSearchFilterElementDto, PlatformTypeSearchFilterElementDto, RuleTemplateNameSearchFilterElementDto, TagSearchFilterElementDto, UsageSearchFilterElementDto, UuidSearchFilterElementDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into BaseSearchFilterDtoChildrenInner with oneOf schemas: AssetIngestionSearchFilterElementDto, AssetSearchFilterElementDto, BaseSearchFilterElementDto, CreationMethodSearchFilterElementDto, CriticalitySearchFilterElementDto, CustomMetadataLabelSearchFilterElementDto, CustomMetadataSearchFilterElementDto, CustomMetadataStringSearchFilterElementDto, CustomMetadataUserSearchFilterElementDto, DatasetSearchFilterElementDto, HealthStatusSearchFilterElementDto, OwnerSearchFilterElementDto, PlatformSearchFilterElementDto, PlatformTypeSearchFilterElementDto, RuleTemplateNameSearchFilterElementDto, TagSearchFilterElementDto, UsageSearchFilterElementDto, UuidSearchFilterElementDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            AssetIngestionSearchFilterElementDto,
            AssetSearchFilterElementDto,
            BaseSearchFilterElementDto,
            CreationMethodSearchFilterElementDto,
            CriticalitySearchFilterElementDto,
            CustomMetadataLabelSearchFilterElementDto,
            CustomMetadataSearchFilterElementDto,
            CustomMetadataStringSearchFilterElementDto,
            CustomMetadataUserSearchFilterElementDto,
            DatasetSearchFilterElementDto,
            HealthStatusSearchFilterElementDto,
            OwnerSearchFilterElementDto,
            PlatformSearchFilterElementDto,
            PlatformTypeSearchFilterElementDto,
            RuleTemplateNameSearchFilterElementDto,
            TagSearchFilterElementDto,
            UsageSearchFilterElementDto,
            UuidSearchFilterElementDto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
