# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.system_collaboration_tool_jira_config_dto import (
        SystemCollaborationToolJiraConfigDto,
    )
    from sifflet_sdk.client.models.system_collaboration_tool_service_now_config_dto import (
        SystemCollaborationToolServiceNowConfigDto,
    )
    from sifflet_sdk.client.models.system_collaboration_tool_service_now_temp_config_dto import (
        SystemCollaborationToolServiceNowTempConfigDto,
    )
    from sifflet_sdk.client.models.system_source_failure_notification_preference_dto import (
        SystemSourceFailureNotificationPreferenceDto,
    )
    from sifflet_sdk.client.models.system_string_preference_dto import (
        SystemStringPreferenceDto,
    )
    from sifflet_sdk.client.models.system_user_permission_preference_dto import (
        SystemUserPermissionPreferenceDto,
    )


class SystemPreferenceDto(BaseModel):
    """
    SystemPreferenceDto
    """  # noqa: E501

    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "USER_PERMISSION",
                "STRING",
                "SOURCE_FAILURE_NOTIFICATIONS",
                "COLLABORATION_TOOL_SERVICENOW",
                "COLLABORATION_TOOL_SERVICENOW_TEMP",
                "COLLABORATION_TOOL_JIRA",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('USER_PERMISSION', 'STRING', 'SOURCE_FAILURE_NOTIFICATIONS', 'COLLABORATION_TOOL_SERVICENOW', 'COLLABORATION_TOOL_SERVICENOW_TEMP', 'COLLABORATION_TOOL_JIRA')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "COLLABORATION_TOOL_JIRA": "SystemCollaborationToolJiraConfigDto",
        "COLLABORATION_TOOL_SERVICENOW": "SystemCollaborationToolServiceNowConfigDto",
        "COLLABORATION_TOOL_SERVICENOW_TEMP": "SystemCollaborationToolServiceNowTempConfigDto",
        "SOURCE_FAILURE_NOTIFICATIONS": "SystemSourceFailureNotificationPreferenceDto",
        "STRING": "SystemStringPreferenceDto",
        "USER_PERMISSION": "SystemUserPermissionPreferenceDto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            SystemCollaborationToolJiraConfigDto,
            SystemCollaborationToolServiceNowConfigDto,
            SystemCollaborationToolServiceNowTempConfigDto,
            SystemSourceFailureNotificationPreferenceDto,
            SystemStringPreferenceDto,
            SystemUserPermissionPreferenceDto,
        ]
    ]:
        """Create an instance of SystemPreferenceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            SystemCollaborationToolJiraConfigDto,
            SystemCollaborationToolServiceNowConfigDto,
            SystemCollaborationToolServiceNowTempConfigDto,
            SystemSourceFailureNotificationPreferenceDto,
            SystemStringPreferenceDto,
            SystemUserPermissionPreferenceDto,
        ]
    ]:
        """Create an instance of SystemPreferenceDto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "SystemCollaborationToolJiraConfigDto":
            return import_module(
                "sifflet_sdk.client.models.system_collaboration_tool_jira_config_dto"
            ).SystemCollaborationToolJiraConfigDto.from_dict(obj)
        if object_type == "SystemCollaborationToolServiceNowConfigDto":
            return import_module(
                "sifflet_sdk.client.models.system_collaboration_tool_service_now_config_dto"
            ).SystemCollaborationToolServiceNowConfigDto.from_dict(obj)
        if object_type == "SystemCollaborationToolServiceNowTempConfigDto":
            return import_module(
                "sifflet_sdk.client.models.system_collaboration_tool_service_now_temp_config_dto"
            ).SystemCollaborationToolServiceNowTempConfigDto.from_dict(obj)
        if object_type == "SystemSourceFailureNotificationPreferenceDto":
            return import_module(
                "sifflet_sdk.client.models.system_source_failure_notification_preference_dto"
            ).SystemSourceFailureNotificationPreferenceDto.from_dict(obj)
        if object_type == "SystemStringPreferenceDto":
            return import_module(
                "sifflet_sdk.client.models.system_string_preference_dto"
            ).SystemStringPreferenceDto.from_dict(obj)
        if object_type == "SystemUserPermissionPreferenceDto":
            return import_module(
                "sifflet_sdk.client.models.system_user_permission_preference_dto"
            ).SystemUserPermissionPreferenceDto.from_dict(obj)

        raise ValueError(
            "SystemPreferenceDto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
