# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.public_asset_filter_dto_custom_metadata_values_inner import (
    PublicAssetFilterDtoCustomMetadataValuesInner,
)
from sifflet_sdk.client.models.public_reference_by_id_or_email_dto import (
    PublicReferenceByIdOrEmailDto,
)
from sifflet_sdk.client.models.public_reference_by_id_or_name_dto import (
    PublicReferenceByIdOrNameDto,
)
from sifflet_sdk.client.models.public_tag_reference_dto import PublicTagReferenceDto
from typing_extensions import Self


class PublicAssetFilterDto(BaseModel):
    """
    Filter to apply on the assets search
    """  # noqa: E501

    asset_type: Optional[List[StrictStr]] = Field(
        default=None,
        description="List of asset types to filter on. Valid values are TABLE_AND_VIEW, PIPELINE, DASHBOARD, ML_MODEL. For filtering declared assets with custom types, you can use the format declared-asset_{custom sub type}. For example: declared-asset_Storage",
        alias="assetType",
    )
    custom_metadata_values: Optional[List[PublicAssetFilterDtoCustomMetadataValuesInner]] = Field(
        default=None, description="List of custom metadata values to filter on", alias="customMetadataValues"
    )
    domain_id: Optional[StrictStr] = Field(default=None, description="Domain to search on", alias="domainId")
    health_status: Optional[List[StrictStr]] = Field(
        default=None, description="List of health status to filter on", alias="healthStatus"
    )
    ingestion_method: Optional[List[StrictStr]] = Field(
        default=None, description="List of ingestion methods to filter on", alias="ingestionMethod"
    )
    level_of_usage: Optional[List[StrictStr]] = Field(
        default=None, description="List of usage qualifications to filter on", alias="levelOfUsage"
    )
    owners: Optional[List[PublicReferenceByIdOrEmailDto]] = Field(
        default=None, description="List of owners to filter on"
    )
    source_id: Optional[List[StrictStr]] = Field(
        default=None, description="List of sources to filter on", alias="sourceId"
    )
    tags: Optional[List[PublicTagReferenceDto]] = Field(default=None, description="List of tags to filter on")
    terms: Optional[List[PublicReferenceByIdOrNameDto]] = Field(default=None, description="List of terms to filter on")
    text_search: Optional[StrictStr] = Field(
        default=None, description="Text to match in the asset names", alias="textSearch"
    )
    __properties: ClassVar[List[str]] = [
        "assetType",
        "customMetadataValues",
        "domainId",
        "healthStatus",
        "ingestionMethod",
        "levelOfUsage",
        "owners",
        "sourceId",
        "tags",
        "terms",
        "textSearch",
    ]

    @field_validator("health_status")
    def health_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(
                ["URGENT_INCIDENTS", "HIGH_RISK_INCIDENTS", "NO_INCIDENTS", "NOT_MONITORED", "UNSUPPORTED"]
            ):
                raise ValueError(
                    "each list item must be one of ('URGENT_INCIDENTS', 'HIGH_RISK_INCIDENTS', 'NO_INCIDENTS', 'NOT_MONITORED', 'UNSUPPORTED')"
                )
        return value

    @field_validator("ingestion_method")
    def ingestion_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["DECLARATIVE", "SIFFLET_SOURCED"]):
                raise ValueError("each list item must be one of ('DECLARATIVE', 'SIFFLET_SOURCED')")
        return value

    @field_validator("level_of_usage")
    def level_of_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["UNSUPPORTED", "LOW", "MEDIUM", "HIGH"]):
                raise ValueError("each list item must be one of ('UNSUPPORTED', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicAssetFilterDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metadata_values (list)
        _items = []
        if self.custom_metadata_values:
            for _item_custom_metadata_values in self.custom_metadata_values:
                if _item_custom_metadata_values:
                    _items.append(_item_custom_metadata_values.to_dict())
            _dict["customMetadataValues"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict["owners"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicAssetFilterDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assetType": obj.get("assetType"),
                "customMetadataValues": (
                    [
                        PublicAssetFilterDtoCustomMetadataValuesInner.from_dict(_item)
                        for _item in obj["customMetadataValues"]
                    ]
                    if obj.get("customMetadataValues") is not None
                    else None
                ),
                "domainId": obj.get("domainId"),
                "healthStatus": obj.get("healthStatus"),
                "ingestionMethod": obj.get("ingestionMethod"),
                "levelOfUsage": obj.get("levelOfUsage"),
                "owners": (
                    [PublicReferenceByIdOrEmailDto.from_dict(_item) for _item in obj["owners"]]
                    if obj.get("owners") is not None
                    else None
                ),
                "sourceId": obj.get("sourceId"),
                "tags": (
                    [PublicTagReferenceDto.from_dict(_item) for _item in obj["tags"]]
                    if obj.get("tags") is not None
                    else None
                ),
                "terms": (
                    [PublicReferenceByIdOrNameDto.from_dict(_item) for _item in obj["terms"]]
                    if obj.get("terms") is not None
                    else None
                ),
                "textSearch": obj.get("textSearch"),
            }
        )
        return _obj
