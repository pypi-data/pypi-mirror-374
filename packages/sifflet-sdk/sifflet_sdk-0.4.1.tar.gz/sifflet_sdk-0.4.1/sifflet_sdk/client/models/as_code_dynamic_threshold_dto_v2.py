# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.as_code_calendar_reference_dto import (
    AsCodeCalendarReferenceDto,
)
from sifflet_sdk.client.models.as_code_threshold_base_dto import AsCodeThresholdBaseDto
from typing_extensions import Self


class AsCodeDynamicThresholdDtoV2(AsCodeThresholdBaseDto):
    """
    AsCodeDynamicThresholdDtoV2
    """  # noqa: E501

    bounds: Optional[StrictStr] = None
    sensitivity: StrictInt
    __properties: ClassVar[List[str]] = ["excludedDates", "kind", "valueMode", "bounds", "sensitivity"]

    @field_validator("bounds")
    def bounds_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["MinAndMax", "Min", "Max"]):
            raise ValueError("must be one of enum values ('MinAndMax', 'Min', 'Max')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsCodeDynamicThresholdDtoV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_dates (list)
        _items = []
        if self.excluded_dates:
            for _item_excluded_dates in self.excluded_dates:
                if _item_excluded_dates:
                    _items.append(_item_excluded_dates.to_dict())
            _dict["excludedDates"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsCodeDynamicThresholdDtoV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "excludedDates": (
                    [AsCodeCalendarReferenceDto.from_dict(_item) for _item in obj["excludedDates"]]
                    if obj.get("excludedDates") is not None
                    else None
                ),
                "kind": obj.get("kind"),
                "valueMode": obj.get("valueMode"),
                "bounds": obj.get("bounds"),
                "sensitivity": obj.get("sensitivity"),
            }
        )
        return _obj
