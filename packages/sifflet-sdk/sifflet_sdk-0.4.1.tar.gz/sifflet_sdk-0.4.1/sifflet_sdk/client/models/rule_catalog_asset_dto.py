# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.alerting_hook_dto import AlertingHookDto
from sifflet_sdk.client.models.dataset_brief_with_uri_dto import DatasetBriefWithUriDto
from sifflet_sdk.client.models.declared_asset_details_dto_all_of_last_modified_by import (
    DeclaredAssetDetailsDtoAllOfLastModifiedBy,
)
from sifflet_sdk.client.models.last_run_status_dto import LastRunStatusDto
from sifflet_sdk.client.models.rule_status_dto import RuleStatusDto
from sifflet_sdk.client.models.tag_dto import TagDto
from sifflet_sdk.client.models.user_dto import UserDto
from typing_extensions import Self


class RuleCatalogAssetDto(BaseModel):
    """
    RuleCatalogAssetDto
    """  # noqa: E501

    can_manually_run: StrictBool = Field(alias="canManuallyRun")
    created_by: Optional[UserDto] = Field(default=None, alias="createdBy")
    criticality: StrictInt
    dataset_field_names: List[StrictStr] = Field(alias="datasetFieldNames")
    datasets: List[DatasetBriefWithUriDto]
    description: Optional[StrictStr] = None
    has_ai_recommendations: StrictBool = Field(alias="hasAiRecommendations")
    id: StrictStr
    last_run_id: Optional[StrictStr] = Field(default=None, alias="lastRunId")
    last_run_status: Optional[LastRunStatusDto] = Field(default=None, alias="lastRunStatus")
    last_week_statuses: List[LastRunStatusDto] = Field(alias="lastWeekStatuses")
    mails: List[AlertingHookDto]
    ms_teams: List[AlertingHookDto] = Field(alias="msTeams")
    multi_dimensional: StrictBool = Field(alias="multiDimensional")
    name: StrictStr
    provider: Optional[DeclaredAssetDetailsDtoAllOfLastModifiedBy] = None
    read_only: StrictBool = Field(alias="readOnly")
    rule_label: Optional[StrictStr] = Field(default=None, alias="ruleLabel")
    rule_status: RuleStatusDto = Field(alias="ruleStatus")
    rule_type: StrictStr = Field(alias="ruleType")
    schedule: Optional[StrictStr] = None
    selectable: StrictBool
    slack_channels: List[AlertingHookDto] = Field(alias="slackChannels")
    source_platform: StrictStr = Field(alias="sourcePlatform")
    support_as_code_yaml_conversion: StrictBool = Field(alias="supportAsCodeYAMLConversion")
    tags: List[TagDto]
    terms: List[TagDto]
    __properties: ClassVar[List[str]] = [
        "canManuallyRun",
        "createdBy",
        "criticality",
        "datasetFieldNames",
        "datasets",
        "description",
        "hasAiRecommendations",
        "id",
        "lastRunId",
        "lastRunStatus",
        "lastWeekStatuses",
        "mails",
        "msTeams",
        "multiDimensional",
        "name",
        "provider",
        "readOnly",
        "ruleLabel",
        "ruleStatus",
        "ruleType",
        "schedule",
        "selectable",
        "slackChannels",
        "sourcePlatform",
        "supportAsCodeYAMLConversion",
        "tags",
        "terms",
    ]

    @field_validator("rule_type")
    def rule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["AUTOMATIC_RULE", "CUSTOM_RULE", "SIFFLET_RULE"]):
            raise ValueError("must be one of enum values ('AUTOMATIC_RULE', 'CUSTOM_RULE', 'SIFFLET_RULE')")
        return value

    @field_validator("source_platform")
    def source_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["SIFFLET", "DBT"]):
            raise ValueError("must be one of enum values ('SIFFLET', 'DBT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleCatalogAssetDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict["createdBy"] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict["datasets"] = _items
        # override the default output from pydantic by calling `to_dict()` of last_run_status
        if self.last_run_status:
            _dict["lastRunStatus"] = self.last_run_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in last_week_statuses (list)
        _items = []
        if self.last_week_statuses:
            for _item_last_week_statuses in self.last_week_statuses:
                if _item_last_week_statuses:
                    _items.append(_item_last_week_statuses.to_dict())
            _dict["lastWeekStatuses"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mails (list)
        _items = []
        if self.mails:
            for _item_mails in self.mails:
                if _item_mails:
                    _items.append(_item_mails.to_dict())
            _dict["mails"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ms_teams (list)
        _items = []
        if self.ms_teams:
            for _item_ms_teams in self.ms_teams:
                if _item_ms_teams:
                    _items.append(_item_ms_teams.to_dict())
            _dict["msTeams"] = _items
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict["provider"] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_status
        if self.rule_status:
            _dict["ruleStatus"] = self.rule_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slack_channels (list)
        _items = []
        if self.slack_channels:
            for _item_slack_channels in self.slack_channels:
                if _item_slack_channels:
                    _items.append(_item_slack_channels.to_dict())
            _dict["slackChannels"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        # set to None if last_run_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_run_id is None and "last_run_id" in self.model_fields_set:
            _dict["lastRunId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleCatalogAssetDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "canManuallyRun": obj.get("canManuallyRun"),
                "createdBy": UserDto.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
                "criticality": obj.get("criticality"),
                "datasetFieldNames": obj.get("datasetFieldNames"),
                "datasets": (
                    [DatasetBriefWithUriDto.from_dict(_item) for _item in obj["datasets"]]
                    if obj.get("datasets") is not None
                    else None
                ),
                "description": obj.get("description"),
                "hasAiRecommendations": obj.get("hasAiRecommendations"),
                "id": obj.get("id"),
                "lastRunId": obj.get("lastRunId"),
                "lastRunStatus": (
                    LastRunStatusDto.from_dict(obj["lastRunStatus"]) if obj.get("lastRunStatus") is not None else None
                ),
                "lastWeekStatuses": (
                    [LastRunStatusDto.from_dict(_item) for _item in obj["lastWeekStatuses"]]
                    if obj.get("lastWeekStatuses") is not None
                    else None
                ),
                "mails": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["mails"]]
                    if obj.get("mails") is not None
                    else None
                ),
                "msTeams": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["msTeams"]]
                    if obj.get("msTeams") is not None
                    else None
                ),
                "multiDimensional": obj.get("multiDimensional"),
                "name": obj.get("name"),
                "provider": (
                    DeclaredAssetDetailsDtoAllOfLastModifiedBy.from_dict(obj["provider"])
                    if obj.get("provider") is not None
                    else None
                ),
                "readOnly": obj.get("readOnly"),
                "ruleLabel": obj.get("ruleLabel"),
                "ruleStatus": RuleStatusDto.from_dict(obj["ruleStatus"]) if obj.get("ruleStatus") is not None else None,
                "ruleType": obj.get("ruleType"),
                "schedule": obj.get("schedule"),
                "selectable": obj.get("selectable"),
                "slackChannels": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["slackChannels"]]
                    if obj.get("slackChannels") is not None
                    else None
                ),
                "sourcePlatform": obj.get("sourcePlatform"),
                "supportAsCodeYAMLConversion": obj.get("supportAsCodeYAMLConversion"),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "terms": [TagDto.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
            }
        )
        return _obj
