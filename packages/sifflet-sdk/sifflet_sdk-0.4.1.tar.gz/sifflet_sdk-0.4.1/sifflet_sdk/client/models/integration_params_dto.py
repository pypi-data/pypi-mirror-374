# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.airflow_integration_params_dto import (
        AirflowIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.athena_integration_params_dto import (
        AthenaIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.bigquery_integration_params_dto import (
        BigqueryIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.composer_integration_params_dto import (
        ComposerIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.databricks_integration_params_dto import (
        DatabricksIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.dbt_integration_params_dto import (
        DbtIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.dbtcloud_integration_params_dto import (
        DbtcloudIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.declarative_integration_params_dto import (
        DeclarativeIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.fivetran_integration_params_dto import (
        FivetranIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.looker_integration_params_dto import (
        LookerIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.microstrategy_integration_params_dto import (
        MicrostrategyIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.mssql_integration_params_dto import (
        MssqlIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.mwaa_integration_params_dto import (
        MwaaIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.mysql_integration_params_dto import (
        MysqlIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.oracle_integration_params_dto import (
        OracleIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.postgresql_integration_params_dto import (
        PostgresqlIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.powerbi_integration_params_dto import (
        PowerbiIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.qlik_integration_params_dto import (
        QlikIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.quicksight_integration_params_dto import (
        QuicksightIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.redshift_integration_params_dto import (
        RedshiftIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.snowflake_integration_params_dto import (
        SnowflakeIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.synapse_integration_params_dto import (
        SynapseIntegrationParamsDto,
    )
    from sifflet_sdk.client.models.tableau_integration_params_dto import (
        TableauIntegrationParamsDto,
    )


class IntegrationParamsDto(BaseModel):
    """
    IntegrationParamsDto
    """  # noqa: E501

    default_refresh_rate: StrictStr = Field(alias="defaultRefreshRate")
    timezone_data: TimeZoneDto = Field(alias="timezoneData")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["defaultRefreshRate", "timezoneData", "type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRES",
                "ORACLE",
                "SYNAPSE",
                "POWER_BI",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "MICROSTRATEGY",
                "QLIK",
                "AIRFLOW",
                "MWAA",
                "COMPOSER",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "DECLARATIVE",
                "_UNKNOWN_",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRES', 'ORACLE', 'SYNAPSE', 'POWER_BI', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'MICROSTRATEGY', 'QLIK', 'AIRFLOW', 'MWAA', 'COMPOSER', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'DECLARATIVE', '_UNKNOWN_')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "AirflowIntegrationParamsDto": "AirflowIntegrationParamsDto",
        "AthenaIntegrationParamsDto": "AthenaIntegrationParamsDto",
        "BigqueryIntegrationParamsDto": "BigqueryIntegrationParamsDto",
        "ComposerIntegrationParamsDto": "ComposerIntegrationParamsDto",
        "DatabricksIntegrationParamsDto": "DatabricksIntegrationParamsDto",
        "DbtIntegrationParamsDto": "DbtIntegrationParamsDto",
        "DbtcloudIntegrationParamsDto": "DbtcloudIntegrationParamsDto",
        "DeclarativeIntegrationParamsDto": "DeclarativeIntegrationParamsDto",
        "FivetranIntegrationParamsDto": "FivetranIntegrationParamsDto",
        "LookerIntegrationParamsDto": "LookerIntegrationParamsDto",
        "MicrostrategyIntegrationParamsDto": "MicrostrategyIntegrationParamsDto",
        "MssqlIntegrationParamsDto": "MssqlIntegrationParamsDto",
        "MwaaIntegrationParamsDto": "MwaaIntegrationParamsDto",
        "MysqlIntegrationParamsDto": "MysqlIntegrationParamsDto",
        "OracleIntegrationParamsDto": "OracleIntegrationParamsDto",
        "PostgresqlIntegrationParamsDto": "PostgresqlIntegrationParamsDto",
        "PowerbiIntegrationParamsDto": "PowerbiIntegrationParamsDto",
        "QlikIntegrationParamsDto": "QlikIntegrationParamsDto",
        "QuicksightIntegrationParamsDto": "QuicksightIntegrationParamsDto",
        "RedshiftIntegrationParamsDto": "RedshiftIntegrationParamsDto",
        "SnowflakeIntegrationParamsDto": "SnowflakeIntegrationParamsDto",
        "SynapseIntegrationParamsDto": "SynapseIntegrationParamsDto",
        "TableauIntegrationParamsDto": "TableauIntegrationParamsDto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            AirflowIntegrationParamsDto,
            AthenaIntegrationParamsDto,
            BigqueryIntegrationParamsDto,
            ComposerIntegrationParamsDto,
            DatabricksIntegrationParamsDto,
            DbtIntegrationParamsDto,
            DbtcloudIntegrationParamsDto,
            DeclarativeIntegrationParamsDto,
            FivetranIntegrationParamsDto,
            LookerIntegrationParamsDto,
            MicrostrategyIntegrationParamsDto,
            MssqlIntegrationParamsDto,
            MwaaIntegrationParamsDto,
            MysqlIntegrationParamsDto,
            OracleIntegrationParamsDto,
            PostgresqlIntegrationParamsDto,
            PowerbiIntegrationParamsDto,
            QlikIntegrationParamsDto,
            QuicksightIntegrationParamsDto,
            RedshiftIntegrationParamsDto,
            SnowflakeIntegrationParamsDto,
            SynapseIntegrationParamsDto,
            TableauIntegrationParamsDto,
        ]
    ]:
        """Create an instance of IntegrationParamsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "default_refresh_rate",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timezone_data
        if self.timezone_data:
            _dict["timezoneData"] = self.timezone_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            AirflowIntegrationParamsDto,
            AthenaIntegrationParamsDto,
            BigqueryIntegrationParamsDto,
            ComposerIntegrationParamsDto,
            DatabricksIntegrationParamsDto,
            DbtIntegrationParamsDto,
            DbtcloudIntegrationParamsDto,
            DeclarativeIntegrationParamsDto,
            FivetranIntegrationParamsDto,
            LookerIntegrationParamsDto,
            MicrostrategyIntegrationParamsDto,
            MssqlIntegrationParamsDto,
            MwaaIntegrationParamsDto,
            MysqlIntegrationParamsDto,
            OracleIntegrationParamsDto,
            PostgresqlIntegrationParamsDto,
            PowerbiIntegrationParamsDto,
            QlikIntegrationParamsDto,
            QuicksightIntegrationParamsDto,
            RedshiftIntegrationParamsDto,
            SnowflakeIntegrationParamsDto,
            SynapseIntegrationParamsDto,
            TableauIntegrationParamsDto,
        ]
    ]:
        """Create an instance of IntegrationParamsDto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AirflowIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.airflow_integration_params_dto"
            ).AirflowIntegrationParamsDto.from_dict(obj)
        if object_type == "AthenaIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.athena_integration_params_dto"
            ).AthenaIntegrationParamsDto.from_dict(obj)
        if object_type == "BigqueryIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.bigquery_integration_params_dto"
            ).BigqueryIntegrationParamsDto.from_dict(obj)
        if object_type == "ComposerIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.composer_integration_params_dto"
            ).ComposerIntegrationParamsDto.from_dict(obj)
        if object_type == "DatabricksIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.databricks_integration_params_dto"
            ).DatabricksIntegrationParamsDto.from_dict(obj)
        if object_type == "DbtIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.dbt_integration_params_dto"
            ).DbtIntegrationParamsDto.from_dict(obj)
        if object_type == "DbtcloudIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.dbtcloud_integration_params_dto"
            ).DbtcloudIntegrationParamsDto.from_dict(obj)
        if object_type == "DeclarativeIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.declarative_integration_params_dto"
            ).DeclarativeIntegrationParamsDto.from_dict(obj)
        if object_type == "FivetranIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.fivetran_integration_params_dto"
            ).FivetranIntegrationParamsDto.from_dict(obj)
        if object_type == "LookerIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.looker_integration_params_dto"
            ).LookerIntegrationParamsDto.from_dict(obj)
        if object_type == "MicrostrategyIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.microstrategy_integration_params_dto"
            ).MicrostrategyIntegrationParamsDto.from_dict(obj)
        if object_type == "MssqlIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.mssql_integration_params_dto"
            ).MssqlIntegrationParamsDto.from_dict(obj)
        if object_type == "MwaaIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.mwaa_integration_params_dto"
            ).MwaaIntegrationParamsDto.from_dict(obj)
        if object_type == "MysqlIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.mysql_integration_params_dto"
            ).MysqlIntegrationParamsDto.from_dict(obj)
        if object_type == "OracleIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.oracle_integration_params_dto"
            ).OracleIntegrationParamsDto.from_dict(obj)
        if object_type == "PostgresqlIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.postgresql_integration_params_dto"
            ).PostgresqlIntegrationParamsDto.from_dict(obj)
        if object_type == "PowerbiIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.powerbi_integration_params_dto"
            ).PowerbiIntegrationParamsDto.from_dict(obj)
        if object_type == "QlikIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.qlik_integration_params_dto"
            ).QlikIntegrationParamsDto.from_dict(obj)
        if object_type == "QuicksightIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.quicksight_integration_params_dto"
            ).QuicksightIntegrationParamsDto.from_dict(obj)
        if object_type == "RedshiftIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.redshift_integration_params_dto"
            ).RedshiftIntegrationParamsDto.from_dict(obj)
        if object_type == "SnowflakeIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.snowflake_integration_params_dto"
            ).SnowflakeIntegrationParamsDto.from_dict(obj)
        if object_type == "SynapseIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.synapse_integration_params_dto"
            ).SynapseIntegrationParamsDto.from_dict(obj)
        if object_type == "TableauIntegrationParamsDto":
            return import_module(
                "sifflet_sdk.client.models.tableau_integration_params_dto"
            ).TableauIntegrationParamsDto.from_dict(obj)

        raise ValueError(
            "IntegrationParamsDto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
