# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.public_create_airflow_source_v2_dto import (
        PublicCreateAirflowSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_athena_source_v2_dto import (
        PublicCreateAthenaSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_big_query_source_v2_dto import (
        PublicCreateBigQuerySourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_databricks_source_v2_dto import (
        PublicCreateDatabricksSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_dbt_cloud_source_v2_dto import (
        PublicCreateDbtCloudSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_dbt_source_v2_dto import (
        PublicCreateDbtSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_fivetran_source_v2_dto import (
        PublicCreateFivetranSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_looker_source_v2_dto import (
        PublicCreateLookerSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_microstrategy_source_v2_dto import (
        PublicCreateMicrostrategySourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_mssql_source_v2_dto import (
        PublicCreateMssqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_mysql_source_v2_dto import (
        PublicCreateMysqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_oracle_source_v2_dto import (
        PublicCreateOracleSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_postgresql_source_v2_dto import (
        PublicCreatePostgresqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_power_bi_source_v2_dto import (
        PublicCreatePowerBiSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_qlik_source_v2_dto import (
        PublicCreateQlikSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_quicksight_source_v2_dto import (
        PublicCreateQuicksightSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_redshift_source_v2_dto import (
        PublicCreateRedshiftSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_snowflake_source_v2_dto import (
        PublicCreateSnowflakeSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_synapse_source_v2_dto import (
        PublicCreateSynapseSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_create_tableau_source_v2_dto import (
        PublicCreateTableauSourceV2Dto,
    )


class PublicCreateSourceV2Dto(BaseModel):
    """
    PublicCreateSourceV2Dto
    """  # noqa: E501

    name: StrictStr = Field(description="Name of the source")
    timezone: Optional[StrictStr] = Field(
        default="UTC", description="A string representing a timezone identifier (e.g. 'UTC' or 'Europe/Paris')"
    )
    type: StrictStr = Field(description="Source type")
    __properties: ClassVar[List[str]] = ["name", "timezone", "type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRESQL",
                "ORACLE",
                "SYNAPSE",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "MICROSTRATEGY",
                "QLIK",
                "AIRFLOW",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "POWER_BI",
                "DECLARATIVE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRESQL', 'ORACLE', 'SYNAPSE', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'MICROSTRATEGY', 'QLIK', 'AIRFLOW', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'POWER_BI', 'DECLARATIVE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "PublicCreateAirflowSourceV2Dto": "PublicCreateAirflowSourceV2Dto",
        "PublicCreateAthenaSourceV2Dto": "PublicCreateAthenaSourceV2Dto",
        "PublicCreateBigQuerySourceV2Dto": "PublicCreateBigQuerySourceV2Dto",
        "PublicCreateDatabricksSourceV2Dto": "PublicCreateDatabricksSourceV2Dto",
        "PublicCreateDbtCloudSourceV2Dto": "PublicCreateDbtCloudSourceV2Dto",
        "PublicCreateDbtSourceV2Dto": "PublicCreateDbtSourceV2Dto",
        "PublicCreateFivetranSourceV2Dto": "PublicCreateFivetranSourceV2Dto",
        "PublicCreateLookerSourceV2Dto": "PublicCreateLookerSourceV2Dto",
        "PublicCreateMicrostrategySourceV2Dto": "PublicCreateMicrostrategySourceV2Dto",
        "PublicCreateMssqlSourceV2Dto": "PublicCreateMssqlSourceV2Dto",
        "PublicCreateMysqlSourceV2Dto": "PublicCreateMysqlSourceV2Dto",
        "PublicCreateOracleSourceV2Dto": "PublicCreateOracleSourceV2Dto",
        "PublicCreatePostgresqlSourceV2Dto": "PublicCreatePostgresqlSourceV2Dto",
        "PublicCreatePowerBiSourceV2Dto": "PublicCreatePowerBiSourceV2Dto",
        "PublicCreateQlikSourceV2Dto": "PublicCreateQlikSourceV2Dto",
        "PublicCreateQuicksightSourceV2Dto": "PublicCreateQuicksightSourceV2Dto",
        "PublicCreateRedshiftSourceV2Dto": "PublicCreateRedshiftSourceV2Dto",
        "PublicCreateSnowflakeSourceV2Dto": "PublicCreateSnowflakeSourceV2Dto",
        "PublicCreateSynapseSourceV2Dto": "PublicCreateSynapseSourceV2Dto",
        "PublicCreateTableauSourceV2Dto": "PublicCreateTableauSourceV2Dto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            PublicCreateAirflowSourceV2Dto,
            PublicCreateAthenaSourceV2Dto,
            PublicCreateBigQuerySourceV2Dto,
            PublicCreateDatabricksSourceV2Dto,
            PublicCreateDbtCloudSourceV2Dto,
            PublicCreateDbtSourceV2Dto,
            PublicCreateFivetranSourceV2Dto,
            PublicCreateLookerSourceV2Dto,
            PublicCreateMicrostrategySourceV2Dto,
            PublicCreateMssqlSourceV2Dto,
            PublicCreateMysqlSourceV2Dto,
            PublicCreateOracleSourceV2Dto,
            PublicCreatePostgresqlSourceV2Dto,
            PublicCreatePowerBiSourceV2Dto,
            PublicCreateQlikSourceV2Dto,
            PublicCreateQuicksightSourceV2Dto,
            PublicCreateRedshiftSourceV2Dto,
            PublicCreateSnowflakeSourceV2Dto,
            PublicCreateSynapseSourceV2Dto,
            PublicCreateTableauSourceV2Dto,
        ]
    ]:
        """Create an instance of PublicCreateSourceV2Dto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            PublicCreateAirflowSourceV2Dto,
            PublicCreateAthenaSourceV2Dto,
            PublicCreateBigQuerySourceV2Dto,
            PublicCreateDatabricksSourceV2Dto,
            PublicCreateDbtCloudSourceV2Dto,
            PublicCreateDbtSourceV2Dto,
            PublicCreateFivetranSourceV2Dto,
            PublicCreateLookerSourceV2Dto,
            PublicCreateMicrostrategySourceV2Dto,
            PublicCreateMssqlSourceV2Dto,
            PublicCreateMysqlSourceV2Dto,
            PublicCreateOracleSourceV2Dto,
            PublicCreatePostgresqlSourceV2Dto,
            PublicCreatePowerBiSourceV2Dto,
            PublicCreateQlikSourceV2Dto,
            PublicCreateQuicksightSourceV2Dto,
            PublicCreateRedshiftSourceV2Dto,
            PublicCreateSnowflakeSourceV2Dto,
            PublicCreateSynapseSourceV2Dto,
            PublicCreateTableauSourceV2Dto,
        ]
    ]:
        """Create an instance of PublicCreateSourceV2Dto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "PublicCreateAirflowSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_airflow_source_v2_dto"
            ).PublicCreateAirflowSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateAthenaSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_athena_source_v2_dto"
            ).PublicCreateAthenaSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateBigQuerySourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_big_query_source_v2_dto"
            ).PublicCreateBigQuerySourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateDatabricksSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_databricks_source_v2_dto"
            ).PublicCreateDatabricksSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateDbtCloudSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_dbt_cloud_source_v2_dto"
            ).PublicCreateDbtCloudSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateDbtSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_dbt_source_v2_dto"
            ).PublicCreateDbtSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateFivetranSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_fivetran_source_v2_dto"
            ).PublicCreateFivetranSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateLookerSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_looker_source_v2_dto"
            ).PublicCreateLookerSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateMicrostrategySourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_microstrategy_source_v2_dto"
            ).PublicCreateMicrostrategySourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateMssqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_mssql_source_v2_dto"
            ).PublicCreateMssqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateMysqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_mysql_source_v2_dto"
            ).PublicCreateMysqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateOracleSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_oracle_source_v2_dto"
            ).PublicCreateOracleSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreatePostgresqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_postgresql_source_v2_dto"
            ).PublicCreatePostgresqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreatePowerBiSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_power_bi_source_v2_dto"
            ).PublicCreatePowerBiSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateQlikSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_qlik_source_v2_dto"
            ).PublicCreateQlikSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateQuicksightSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_quicksight_source_v2_dto"
            ).PublicCreateQuicksightSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateRedshiftSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_redshift_source_v2_dto"
            ).PublicCreateRedshiftSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateSnowflakeSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_snowflake_source_v2_dto"
            ).PublicCreateSnowflakeSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateSynapseSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_synapse_source_v2_dto"
            ).PublicCreateSynapseSourceV2Dto.from_dict(obj)
        if object_type == "PublicCreateTableauSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_create_tableau_source_v2_dto"
            ).PublicCreateTableauSourceV2Dto.from_dict(obj)

        raise ValueError(
            "PublicCreateSourceV2Dto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
