# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.datapoint_qualification_light_dto import (
    DatapointQualificationLightDto,
)
from sifflet_sdk.client.models.graph_point_special_date import GraphPointSpecialDate
from typing_extensions import Self


class TimeSeriesPoint(BaseModel):
    """
    TimeSeriesPoint
    """  # noqa: E501

    anomaly: Optional[StrictBool] = None
    var_date: StrictInt = Field(alias="date")
    importance: Optional[Union[StrictFloat, StrictInt]] = None
    is_check_date: StrictBool = Field(alias="isCheckDate")
    obsolete_status: StrictStr = Field(alias="obsoleteStatus")
    qualification: Optional[DatapointQualificationLightDto] = None
    special_dates: List[GraphPointSpecialDate] = Field(alias="specialDates")
    y: Optional[Union[StrictFloat, StrictInt]] = None
    ymax: Optional[Union[StrictFloat, StrictInt]] = None
    ymin: Optional[Union[StrictFloat, StrictInt]] = None
    yp: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "anomaly",
        "date",
        "importance",
        "isCheckDate",
        "obsoleteStatus",
        "qualification",
        "specialDates",
        "y",
        "ymax",
        "ymin",
        "yp",
    ]

    @field_validator("obsolete_status")
    def obsolete_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "NOT_OBSOLETE",
                "OBSOLETE_SNAPSHOT_PAST_ANOMALY",
                "OBSOLETE_DATAPOINT_TOO_OLD",
                "OBSOLETE_DATAPOINT_BEFORE_FIRST_RUN_DETECTION_START_DATE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NOT_OBSOLETE', 'OBSOLETE_SNAPSHOT_PAST_ANOMALY', 'OBSOLETE_DATAPOINT_TOO_OLD', 'OBSOLETE_DATAPOINT_BEFORE_FIRST_RUN_DETECTION_START_DATE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qualification
        if self.qualification:
            _dict["qualification"] = self.qualification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in special_dates (list)
        _items = []
        if self.special_dates:
            for _item_special_dates in self.special_dates:
                if _item_special_dates:
                    _items.append(_item_special_dates.to_dict())
            _dict["specialDates"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "anomaly": obj.get("anomaly"),
                "date": obj.get("date"),
                "importance": obj.get("importance"),
                "isCheckDate": obj.get("isCheckDate"),
                "obsoleteStatus": obj.get("obsoleteStatus"),
                "qualification": (
                    DatapointQualificationLightDto.from_dict(obj["qualification"])
                    if obj.get("qualification") is not None
                    else None
                ),
                "specialDates": (
                    [GraphPointSpecialDate.from_dict(_item) for _item in obj["specialDates"]]
                    if obj.get("specialDates") is not None
                    else None
                ),
                "y": obj.get("y"),
                "ymax": obj.get("ymax"),
                "ymin": obj.get("ymin"),
                "yp": obj.get("yp"),
            }
        )
        return _obj
