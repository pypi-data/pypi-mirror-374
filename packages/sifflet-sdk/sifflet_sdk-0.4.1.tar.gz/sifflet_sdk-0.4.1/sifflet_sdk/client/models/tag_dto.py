# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class TagDto(BaseModel):
    """
    TagDto
    """  # noqa: E501

    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    description: Optional[StrictStr] = None
    editable: Optional[StrictBool] = None
    id: StrictStr
    last_modified_date: Optional[StrictInt] = Field(default=None, alias="lastModifiedDate")
    modified_by: Optional[StrictStr] = Field(default=None, alias="modifiedBy")
    name: StrictStr
    type: StrictStr
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "createdDate",
        "description",
        "editable",
        "id",
        "lastModifiedDate",
        "modifiedBy",
        "name",
        "type",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "GENERIC",
                "HIDDEN_DATA_CLASSIFICATION",
                "VISIBLE_DATA_CLASSIFICATION",
                "TERM",
                "BIGQUERY_EXTERNAL",
                "SNOWFLAKE_EXTERNAL",
                "DATABRICKS_EXTERNAL",
                "DBT_EXTERNAL",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('GENERIC', 'HIDDEN_DATA_CLASSIFICATION', 'VISIBLE_DATA_CLASSIFICATION', 'TERM', 'BIGQUERY_EXTERNAL', 'SNOWFLAKE_EXTERNAL', 'DATABRICKS_EXTERNAL', 'DBT_EXTERNAL')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TagDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TagDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "description": obj.get("description"),
                "editable": obj.get("editable"),
                "id": obj.get("id"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "modifiedBy": obj.get("modifiedBy"),
                "name": obj.get("name"),
                "type": obj.get("type"),
            }
        )
        return _obj
