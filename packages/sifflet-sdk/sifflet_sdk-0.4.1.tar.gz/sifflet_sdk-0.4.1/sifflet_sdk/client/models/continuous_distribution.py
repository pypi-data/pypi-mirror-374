# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from sifflet_sdk.client.models.continuous_params import ContinuousParams
from typing_extensions import Self


class ContinuousDistribution(BaseModel):
    """
    ContinuousDistribution
    """  # noqa: E501

    distribution_date: Optional[StrictInt] = Field(default=None, alias="distributionDate")
    distribution_json_file_key: Optional[StrictStr] = Field(default=None, alias="distributionJsonFileKey")
    json_file_bucket: Optional[StrictStr] = Field(default=None, alias="jsonFileBucket")
    json_file_path: Optional[StrictStr] = Field(default=None, alias="jsonFilePath")
    mean: Optional[Union[StrictFloat, StrictInt]] = None
    n: Optional[Union[StrictFloat, StrictInt]] = None
    params: Optional[Dict[str, ContinuousParams]] = None
    s3_region_name: Optional[StrictStr] = Field(default=None, alias="s3RegionName")
    std: Optional[Union[StrictFloat, StrictInt]] = None
    std_step: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="stdStep")
    __properties: ClassVar[List[str]] = [
        "distributionDate",
        "distributionJsonFileKey",
        "jsonFileBucket",
        "jsonFilePath",
        "mean",
        "n",
        "params",
        "s3RegionName",
        "std",
        "stdStep",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContinuousDistribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in params (dict)
        _field_dict = {}
        if self.params:
            for _key_params in self.params:
                if self.params[_key_params]:
                    _field_dict[_key_params] = self.params[_key_params].to_dict()
            _dict["params"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContinuousDistribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "distributionDate": obj.get("distributionDate"),
                "distributionJsonFileKey": obj.get("distributionJsonFileKey"),
                "jsonFileBucket": obj.get("jsonFileBucket"),
                "jsonFilePath": obj.get("jsonFilePath"),
                "mean": obj.get("mean"),
                "n": obj.get("n"),
                "params": (
                    dict((_k, ContinuousParams.from_dict(_v)) for _k, _v in obj["params"].items())
                    if obj.get("params") is not None
                    else None
                ),
                "s3RegionName": obj.get("s3RegionName"),
                "std": obj.get("std"),
                "stdStep": obj.get("stdStep"),
            }
        )
        return _obj
