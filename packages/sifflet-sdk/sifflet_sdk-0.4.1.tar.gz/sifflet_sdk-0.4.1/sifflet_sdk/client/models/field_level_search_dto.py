# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.connector_dto import ConnectorDto
from sifflet_sdk.client.models.dag_run_dto import DagRunDto
from sifflet_sdk.client.models.dbt_model_dto import DbtModelDto
from sifflet_sdk.client.models.description_dto import DescriptionDto
from sifflet_sdk.client.models.search_collection_field_level_search_field_dto import (
    SearchCollectionFieldLevelSearchFieldDto,
)
from sifflet_sdk.client.models.tag_dto import TagDto
from sifflet_sdk.client.models.user_dto import UserDto
from typing_extensions import Self


class FieldLevelSearchDto(BaseModel):
    """
    FieldLevelSearchDto
    """  # noqa: E501

    can_do_auto_coverage: Optional[StrictBool] = Field(default=None, alias="canDoAutoCoverage")
    connector_dto: Optional[ConnectorDto] = Field(default=None, alias="connectorDto")
    dag_run_dto: Optional[DagRunDto] = Field(default=None, alias="dagRunDto")
    datasource_id: Optional[StrictStr] = Field(default=None, alias="datasourceId")
    datasource_name: StrictStr = Field(alias="datasourceName")
    dbt_model_dto: Optional[DbtModelDto] = Field(default=None, alias="dbtModelDto")
    declared_source: Optional[StrictBool] = Field(default=None, alias="declaredSource")
    description: Optional[StrictStr] = None
    displayed_type: StrictStr = Field(alias="displayedType")
    entity_type: StrictStr = Field(alias="entityType")
    external_descriptions: Optional[List[DescriptionDto]] = Field(default=None, alias="externalDescriptions")
    fields: Optional[SearchCollectionFieldLevelSearchFieldDto] = None
    health: Optional[StrictStr] = None
    id: StrictStr
    label: StrictStr
    last_modified_date: Optional[StrictStr] = Field(default=None, alias="lastModifiedDate")
    lineage_platform: StrictStr = Field(alias="lineagePlatform")
    metadata_refresh: Optional[StrictInt] = Field(default=None, alias="metadataRefresh")
    name: StrictStr
    owners: Optional[List[UserDto]] = None
    search_weight: Optional[StrictInt] = Field(default=None, alias="searchWeight")
    tags: Optional[List[TagDto]] = None
    terms: Optional[List[TagDto]] = None
    uri: Optional[StrictStr] = None
    urn: Optional[StrictStr] = None
    usage: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "canDoAutoCoverage",
        "connectorDto",
        "dagRunDto",
        "datasourceId",
        "datasourceName",
        "dbtModelDto",
        "declaredSource",
        "description",
        "displayedType",
        "entityType",
        "externalDescriptions",
        "fields",
        "health",
        "id",
        "label",
        "lastModifiedDate",
        "lineagePlatform",
        "metadataRefresh",
        "name",
        "owners",
        "searchWeight",
        "tags",
        "terms",
        "uri",
        "urn",
        "usage",
    ]

    @field_validator("displayed_type")
    def displayed_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "SCHEMA",
                "DATABASE",
                "TABLE",
                "DYNAMIC_TABLE",
                "EXTERNAL_TABLE",
                "VIEW",
                "MATERIALIZED_VIEW",
                "SNOWFLAKE_STREAM",
                "DASHBOARD",
                "REPORT",
                "MODEL",
                "DAG",
                "ORCHESTRATOR",
                "FIELD",
                "MONITOR",
                "NONE",
                "TRANSFORMATION",
                "CONNECTOR",
                "ML_MODEL",
                "DECLARED_ASSET",
                "PIPELINE",
                "APP",
                "ANALYSIS",
                "CHART",
                "SHEET",
                "METRIC",
                "TILE",
                "CUBE",
                "DATASET",
                "DATASOURCE",
                "EXPLORE",
                "DATASET_REF",
                "TABLE_REF",
                "STREAMING_TABLE",
                "QUERY",
                "DROPPED_TABLE",
                "TEMP_TABLE",
                "EPHEMERAL_REF",
                "VIEW_REF",
                "STORAGE",
                "NODE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('SCHEMA', 'DATABASE', 'TABLE', 'DYNAMIC_TABLE', 'EXTERNAL_TABLE', 'VIEW', 'MATERIALIZED_VIEW', 'SNOWFLAKE_STREAM', 'DASHBOARD', 'REPORT', 'MODEL', 'DAG', 'ORCHESTRATOR', 'FIELD', 'MONITOR', 'NONE', 'TRANSFORMATION', 'CONNECTOR', 'ML_MODEL', 'DECLARED_ASSET', 'PIPELINE', 'APP', 'ANALYSIS', 'CHART', 'SHEET', 'METRIC', 'TILE', 'CUBE', 'DATASET', 'DATASOURCE', 'EXPLORE', 'DATASET_REF', 'TABLE_REF', 'STREAMING_TABLE', 'QUERY', 'DROPPED_TABLE', 'TEMP_TABLE', 'EPHEMERAL_REF', 'VIEW_REF', 'STORAGE', 'NODE')"
            )
        return value

    @field_validator("entity_type")
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "INTEGRATION",
                "DATASOURCE",
                "DATASOURCE_USAGE",
                "DATASOURCE_INGESTION_RUN",
                "DATASET",
                "DASHBOARD",
                "CHART",
                "COLLECTION",
                "DATASET_FIELD",
                "DAG",
                "DAG_RUN",
                "TRANSFORMATION",
                "TRANSFORMATION_RUN",
                "RULE_RUN",
                "RULE_EXECUTION_SUMMARY",
                "INCIDENT",
                "USER",
                "ACCESS_TOKEN",
                "SIFFLET_RULE",
                "CONFIG",
                "TAG",
                "DOMAIN",
                "ALERTING_HOOK",
                "RULE_MONITORING_RECOMMENDATION",
                "DATAPOINT_QUALIFICATION",
                "DECLARED_ASSET",
                "DECLARED_ASSET_PROPERTIES",
                "WEBHOOK",
                "SIFFLET_AGENT",
                "SIFFLET_AGENT_JOB",
                "SIFFLET_AGENT_DATASOURCE_JOB",
                "SIFFLET_AGENT_DEBUG_JOB",
                "AI_METADATA_PREDICTION",
                "CUSTOM_METADATA",
                "CUSTOM_METADATA_ENTRY",
                "DATA_PRODUCT",
                "METRIC",
                "ASSET_UPDATE_HISTORY_ENTITY",
                "ASSET_USAGE",
                "ASSET_USAGE_HISTORY_RECORD",
                "SAML_REQUEST",
                "SINGLE_USE_TOKEN",
                "FORMATTED_DESCRIPTION",
                "RULE_ROOT_CAUSE_ANALYSIS_RUN",
                "AS_CODE_WORKSPACE",
                "ALERT",
                "SIFFLET_RULE_MODEL_PARAMETERS",
                "CALENDAR",
                "CONNECTION",
                "METADATA_JOB",
                "DATASET_MODEL_PARAMETERS",
                "COLLABORATION_TOOL_ITEM",
                "DBT_IMPACT_ANALYSIS_RUN",
                "INGESTION_STATEMENT_CACHE",
                "LINEAGE",
                "MUTATION_LINK",
                "UPSTREAM_STATE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('INTEGRATION', 'DATASOURCE', 'DATASOURCE_USAGE', 'DATASOURCE_INGESTION_RUN', 'DATASET', 'DASHBOARD', 'CHART', 'COLLECTION', 'DATASET_FIELD', 'DAG', 'DAG_RUN', 'TRANSFORMATION', 'TRANSFORMATION_RUN', 'RULE_RUN', 'RULE_EXECUTION_SUMMARY', 'INCIDENT', 'USER', 'ACCESS_TOKEN', 'SIFFLET_RULE', 'CONFIG', 'TAG', 'DOMAIN', 'ALERTING_HOOK', 'RULE_MONITORING_RECOMMENDATION', 'DATAPOINT_QUALIFICATION', 'DECLARED_ASSET', 'DECLARED_ASSET_PROPERTIES', 'WEBHOOK', 'SIFFLET_AGENT', 'SIFFLET_AGENT_JOB', 'SIFFLET_AGENT_DATASOURCE_JOB', 'SIFFLET_AGENT_DEBUG_JOB', 'AI_METADATA_PREDICTION', 'CUSTOM_METADATA', 'CUSTOM_METADATA_ENTRY', 'DATA_PRODUCT', 'METRIC', 'ASSET_UPDATE_HISTORY_ENTITY', 'ASSET_USAGE', 'ASSET_USAGE_HISTORY_RECORD', 'SAML_REQUEST', 'SINGLE_USE_TOKEN', 'FORMATTED_DESCRIPTION', 'RULE_ROOT_CAUSE_ANALYSIS_RUN', 'AS_CODE_WORKSPACE', 'ALERT', 'SIFFLET_RULE_MODEL_PARAMETERS', 'CALENDAR', 'CONNECTION', 'METADATA_JOB', 'DATASET_MODEL_PARAMETERS', 'COLLABORATION_TOOL_ITEM', 'DBT_IMPACT_ANALYSIS_RUN', 'INGESTION_STATEMENT_CACHE', 'LINEAGE', 'MUTATION_LINK', 'UPSTREAM_STATE')"
            )
        return value

    @field_validator("health")
    def health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["CRITICAL", "AT_RISK", "HEALTHY", "UNMONITORED", "NOT_SUPPORTED"]):
            raise ValueError(
                "must be one of enum values ('CRITICAL', 'AT_RISK', 'HEALTHY', 'UNMONITORED', 'NOT_SUPPORTED')"
            )
        return value

    @field_validator("lineage_platform")
    def lineage_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "FIREBOLT",
                "PRESTO",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "SYNAPSE",
                "POSTGRES",
                "H2",
                "ORACLE",
                "LIGHTDASH",
                "LOOKER",
                "METABASE",
                "MICROSTRATEGY",
                "TABLEAU",
                "POWER_BI",
                "QLIK",
                "QUICKSIGHT",
                "STITCH",
                "AIRBYTE",
                "AIRFLOW",
                "COMPOSER",
                "DAGSTER",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "MWAA",
                "PREFECT",
                "TALEND",
                "HUBSPOT",
                "INFORMATICA",
                "MULESOFT",
                "SALESFORCE",
                "SEGMENT",
                "SLACK",
                "CENSUS",
                "HIGH_TOUCH",
                "AMAZON_SAGEMAKER",
                "DATAIKU",
                "MICROSOFT_AZURE_ML",
                "GOOGLE_ANALYTICS",
                "SIGMA",
                "UNKNOWN",
                "AZURE",
                "GOOGLE_DRIVE",
                "GOOGLE_SHEETS",
                "GOOGLE_CLOUD_STORAGE",
                "S3",
                "EXCEL",
                "GITHUB",
                "SIXSENSE",
                "FIFTEENFIVE",
                "THREESIXTYLEARNING",
                "ACCELDATA",
                "ACRYL_DATA",
                "ACTIAN_VECTOR",
                "ACTIVE_CAMPAIGN",
                "ADA",
                "ADJUST",
                "ADOBE",
                "ADP_WFN",
                "ADROLL",
                "AFFINITY",
                "AIRCALL",
                "AIRTABLE",
                "ALATION",
                "ALCHEMER",
                "ALVIN_AI",
                "AMAZON",
                "AMAZON_CLOUDFRONT",
                "AMAZON_DOCUMENTDB",
                "AMAZON_DYNAMODB",
                "AMAZON_FIREHOSE",
                "AMAZON_SELLING_PARTNER",
                "AMPLITUDE",
                "ANAPLAN",
                "ANOMALO",
                "APACHE_KAFKA",
                "APACHE_SPARK",
                "APPCUES",
                "APPFIGURES",
                "APPLE",
                "APPLE_APP_STORE",
                "APPSFLYER",
                "ASANA",
                "ASSEMBLED",
                "ATLAN",
                "ATLASSIAN_CONFLUENCE",
                "ATLASSIAN_JIRA",
                "ATLASSIAN_OPSGENIE",
                "AUTH0",
                "AUTODESK_BIM_360",
                "AWIN",
                "AWS_CLOUDTRAIL",
                "AWS_COST_EXPLORER",
                "AWS_INVENTORY",
                "AWS_LAMBDA",
                "BALLOT_READY",
                "BAMBOOHR",
                "BIGCOMMERCE",
                "BIGEYE",
                "BILLINGPLATFORM",
                "BIRDEYE",
                "BLACKBOARD",
                "BOX",
                "BRAINTREE",
                "BRAZE",
                "BREX",
                "BUILDKITE",
                "BUZZSPROUT",
                "CALENDLY",
                "CAMPAIGN_MONITOR",
                "CANNY",
                "CANVAS",
                "CAPTERRA",
                "CASTOR_DOC",
                "CERTINIA",
                "CHAMELEON",
                "CHANNEL_ADVISOR",
                "CHARGEBEE",
                "CHARGEDESK",
                "CHARTMOGUL",
                "CHORUS_AI",
                "CHURNKEY",
                "CHURNZERO",
                "CIMIS",
                "CIN7",
                "CIRCLE_CI",
                "CLARI",
                "CLICKUP",
                "CLIFF_AI",
                "CLOSE",
                "COLLIBRA",
                "COMMERCETOOLS",
                "CONFLUENT_CLOUD",
                "CONTRAST_SECURITY",
                "COUPA",
                "CRITEO",
                "CROSSBEAM",
                "CRUNCHBASE",
                "CUSTOMER_IO",
                "D2L_BRIGHTSPACE",
                "DATA_WORLD",
                "DATABAND",
                "DATADOG",
                "DATAEDO",
                "DATAFOLD",
                "DATAGALAXY",
                "DATAHUB",
                "DB2",
                "DCL_LOGISTICS",
                "DEAR",
                "DECUBE",
                "DELIGHTED",
                "DEPUTY",
                "DESTINI",
                "DIXA",
                "DOCEBO",
                "DRATA",
                "DRIFT",
                "DRIP",
                "DROPBOX",
                "DUOPLANE",
                "E_CONOMIC",
                "EASY_POST",
                "ELASTICSEARCH",
                "ELEMENTARY",
                "ELLUCIAN",
                "ELOQUA",
                "EMAIL",
                "EMPLOYMENT_HERO",
                "EPICOR_PROPHET_21",
                "EVENTBRITE",
                "EVERHOUR",
                "EXPENSIFY",
                "FACEBOOK",
                "FIGMA",
                "FIREBASE",
                "FLEXPORT",
                "FORJ",
                "FOUNTAIN",
                "FREIGHTVIEW",
                "FRESHBOOKS",
                "FRESHCHAT",
                "FRESHDESK",
                "FRESHDESK_CONTACT_CENTER",
                "FRESHSERVICE",
                "FRESHSUCCESS",
                "FRESHTEAM",
                "FRIENDBUY",
                "FRONT",
                "FTP",
                "FULLSTORY",
                "G2",
                "GAINSIGHT",
                "GEM",
                "GIT",
                "GITLAB",
                "GLADLY",
                "GOCARDLESS",
                "GONG",
                "GOOGLE",
                "GOOGLE_AD_MANAGER",
                "GOOGLE_ADS",
                "GOOGLE_CALENDAR",
                "GOOGLE_CAMPAIGN_MANAGER",
                "GOOGLE_CHROME",
                "GOOGLE_CLOUD",
                "GOOGLE_DISPLAY",
                "GOOGLE_PLAY",
                "GOOGLE_SEARCH_ADS_360",
                "GOOGLE_SEARCH_CONSOLE",
                "GOOGLE_TASKS",
                "GORGIAS",
                "GREENHOUSE",
                "GREENPLUM",
                "GREEN_POWER_MONITOR",
                "GREPSR",
                "GRIN",
                "GURU",
                "HARVEST",
                "HDFS",
                "HEAP",
                "HEIGHT",
                "HELP_SCOUT",
                "HELPSHIFT",
                "HEROKU_KAFKA",
                "HEX",
                "HIBOB",
                "HOPIN",
                "IMPACT",
                "INCIDENT_IO",
                "INFOBIP",
                "INSIGHTLY",
                "INSTAGRAM",
                "INTERCOM",
                "INVESTOPEDIA",
                "IRONCLAD",
                "IRONSOURCE",
                "ITERABLE",
                "JAVA",
                "JENKINS",
                "JUSTCALL",
                "KANDJI",
                "KENSU",
                "KHOROS_CARE",
                "KISSMETRICS",
                "KLAVIYO",
                "KNOWBE4",
                "KONNECT_INSIGHTS",
                "KUSTOMER",
                "LARIAT_DATA",
                "LATTICE",
                "LAUNCH_DARKLY",
                "LEARN_UPON",
                "LESSONLY",
                "LEVER",
                "LIFTOFF",
                "LIGHTSPEED",
                "LIGHTSUP",
                "LINEAR",
                "LINKEDIN",
                "LIVECHAT",
                "LOADED_COMMERCE",
                "LOB",
                "LOOP",
                "LOOPIO",
                "LUMA",
                "MAGENTO",
                "MAILCHIMP",
                "MAILGUN",
                "MANDRILL",
                "MANTA",
                "MARIADB",
                "MARIN_SOFTWARE",
                "MARKETO",
                "MATTERMOST",
                "MAVENLINK",
                "MAXIO",
                "MEDALLIA",
                "META",
                "METAPHOR",
                "METAPLANE",
                "MICROSOFT",
                "MICROSOFT_AZURE_BLOB_STORAGE",
                "MICROSOFT_DYNAMICS",
                "MICROSOFT_ONEDRIVE",
                "MICROSOFT_PURVIEW",
                "MICROSOFT_TEAMS",
                "MIXMAX",
                "MIXPANEL",
                "MONDAY_COM",
                "MONGODB",
                "MONTE_CARLO",
                "MOUNTAIN",
                "MUX",
                "NAMELY",
                "NCINO",
                "NETSUITE_ANALYTICS",
                "NEW_RELIC",
                "NOTION",
                "NYLAS",
                "OBSERVE",
                "OCTOPAI",
                "OKTA",
                "OPEN_DATA_DC",
                "OPEN_EXCHANGES_RATES",
                "OPEN_AI",
                "OPEN_SEARCH",
                "OPTIMIZELY",
                "ORBIT_COMMUNITY_PLATFORM",
                "ORDWAY",
                "ORTTO",
                "OS_COMMERCE",
                "OUTBRAIN",
                "OUTREACH",
                "OVALEDGE",
                "PAGERDUTY",
                "PAGERSHIFT",
                "PAYPAL",
                "PENDO",
                "PINGDOM",
                "PINTEREST",
                "PIPE17",
                "PIPEDRIVE",
                "PIVOTAL_TRACKER",
                "PLAYVOX",
                "POSTHOG",
                "POWERSCHOOL",
                "PRESTASHOP",
                "PRODUCTBOARD",
                "PYTHON",
                "QUALAROO",
                "QUALTRICS",
                "QUICKBOOKS",
                "RAMP",
                "RARIBLE",
                "RECHARGE",
                "RECURLY",
                "REDDIT",
                "RELTIO",
                "REPLY_IO",
                "RETAILNEXT",
                "RETENTLY",
                "REVEL_SYSTEMS",
                "RINGCENTRAL",
                "RIPPLING",
                "ROLLBAR",
                "ROOTLY",
                "SAGE_HR",
                "SAGE_INTACCT",
                "SAILTHRU",
                "SALESLOFT",
                "SALSIFY",
                "SAMSARA",
                "SAP",
                "SAP_CONCUR",
                "SCORM",
                "SECODA",
                "SECURITY_JOURNEY",
                "SELECT_STAR",
                "SENDGRID",
                "BREVO",
                "SERVICE_NOW",
                "SFTP",
                "SHAREPOINT",
                "SHARETRIBE",
                "SHIPHERO",
                "SHIPSTATION",
                "SHOPIFY",
                "SHOPWARE",
                "SHORT_IO",
                "SIFFLET",
                "SIMPLECAST",
                "SIMPLESAT",
                "SINGLESTORE",
                "SISENSE",
                "SKILLJAR",
                "SKUVAULT",
                "SLAB",
                "SMADEX",
                "SNAPCHAT",
                "SNOWPLOW",
                "SODA",
                "SONARQUBE",
                "SPLIT_IO",
                "SPLUNK",
                "SPOTIFY",
                "SPREE_COMMERCE",
                "SPROUT_SOCIAL",
                "SQUARE",
                "SQUARESPACE",
                "STACK_ADAPT",
                "STATSIG",
                "STRIPE",
                "STYLIGHT",
                "SUBSCRIPT",
                "TABOOLA",
                "TALKDESK",
                "TALKWALKER",
                "TEAMWORK_COM",
                "TEMPO_IO",
                "TERADATA",
                "TERRAFORM",
                "THE_TRADE_DESK",
                "THOUGHT_SPOT",
                "TIKTOK",
                "TOGGL",
                "TRANSCEND",
                "TRELLO",
                "TRISOLUTE",
                "TWILIO",
                "TYPEFORM",
                "UPLAND",
                "USERVOICE",
                "VALIDIO",
                "VEEVA",
                "VERIZON_MEDIA",
                "VITALLY",
                "VONAGE",
                "VUETIFY",
                "WEB_SCRAPER",
                "WEBHOOKS",
                "WHEN_I_WORK",
                "WHEREFOUR",
                "WIKIPEDIA",
                "WOOCOMMERCE",
                "WORDPRESS",
                "WORKABLE",
                "WORKDAY",
                "WORKFLOW_MAX",
                "WRIKE",
                "X",
                "XERO",
                "XRAY",
                "YAHOO",
                "YOTPO",
                "YOUTUBE",
                "ZEENEA",
                "ZEN_CART",
                "ZENDESK_CHAT",
                "ZENDESK_SELL",
                "ZENDESK_SUNSHINE",
                "ZENDESK_SUPPORT",
                "TRINET",
                "ZINGTREE",
                "ZOHO_BOOKS",
                "ZOHO_CAMPAIGNS",
                "ZOHO_CRM",
                "ZOOM",
                "ZUORA",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'FIREBOLT', 'PRESTO', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'SYNAPSE', 'POSTGRES', 'H2', 'ORACLE', 'LIGHTDASH', 'LOOKER', 'METABASE', 'MICROSTRATEGY', 'TABLEAU', 'POWER_BI', 'QLIK', 'QUICKSIGHT', 'STITCH', 'AIRBYTE', 'AIRFLOW', 'COMPOSER', 'DAGSTER', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'MWAA', 'PREFECT', 'TALEND', 'HUBSPOT', 'INFORMATICA', 'MULESOFT', 'SALESFORCE', 'SEGMENT', 'SLACK', 'CENSUS', 'HIGH_TOUCH', 'AMAZON_SAGEMAKER', 'DATAIKU', 'MICROSOFT_AZURE_ML', 'GOOGLE_ANALYTICS', 'SIGMA', 'UNKNOWN', 'AZURE', 'GOOGLE_DRIVE', 'GOOGLE_SHEETS', 'GOOGLE_CLOUD_STORAGE', 'S3', 'EXCEL', 'GITHUB', 'SIXSENSE', 'FIFTEENFIVE', 'THREESIXTYLEARNING', 'ACCELDATA', 'ACRYL_DATA', 'ACTIAN_VECTOR', 'ACTIVE_CAMPAIGN', 'ADA', 'ADJUST', 'ADOBE', 'ADP_WFN', 'ADROLL', 'AFFINITY', 'AIRCALL', 'AIRTABLE', 'ALATION', 'ALCHEMER', 'ALVIN_AI', 'AMAZON', 'AMAZON_CLOUDFRONT', 'AMAZON_DOCUMENTDB', 'AMAZON_DYNAMODB', 'AMAZON_FIREHOSE', 'AMAZON_SELLING_PARTNER', 'AMPLITUDE', 'ANAPLAN', 'ANOMALO', 'APACHE_KAFKA', 'APACHE_SPARK', 'APPCUES', 'APPFIGURES', 'APPLE', 'APPLE_APP_STORE', 'APPSFLYER', 'ASANA', 'ASSEMBLED', 'ATLAN', 'ATLASSIAN_CONFLUENCE', 'ATLASSIAN_JIRA', 'ATLASSIAN_OPSGENIE', 'AUTH0', 'AUTODESK_BIM_360', 'AWIN', 'AWS_CLOUDTRAIL', 'AWS_COST_EXPLORER', 'AWS_INVENTORY', 'AWS_LAMBDA', 'BALLOT_READY', 'BAMBOOHR', 'BIGCOMMERCE', 'BIGEYE', 'BILLINGPLATFORM', 'BIRDEYE', 'BLACKBOARD', 'BOX', 'BRAINTREE', 'BRAZE', 'BREX', 'BUILDKITE', 'BUZZSPROUT', 'CALENDLY', 'CAMPAIGN_MONITOR', 'CANNY', 'CANVAS', 'CAPTERRA', 'CASTOR_DOC', 'CERTINIA', 'CHAMELEON', 'CHANNEL_ADVISOR', 'CHARGEBEE', 'CHARGEDESK', 'CHARTMOGUL', 'CHORUS_AI', 'CHURNKEY', 'CHURNZERO', 'CIMIS', 'CIN7', 'CIRCLE_CI', 'CLARI', 'CLICKUP', 'CLIFF_AI', 'CLOSE', 'COLLIBRA', 'COMMERCETOOLS', 'CONFLUENT_CLOUD', 'CONTRAST_SECURITY', 'COUPA', 'CRITEO', 'CROSSBEAM', 'CRUNCHBASE', 'CUSTOMER_IO', 'D2L_BRIGHTSPACE', 'DATA_WORLD', 'DATABAND', 'DATADOG', 'DATAEDO', 'DATAFOLD', 'DATAGALAXY', 'DATAHUB', 'DB2', 'DCL_LOGISTICS', 'DEAR', 'DECUBE', 'DELIGHTED', 'DEPUTY', 'DESTINI', 'DIXA', 'DOCEBO', 'DRATA', 'DRIFT', 'DRIP', 'DROPBOX', 'DUOPLANE', 'E_CONOMIC', 'EASY_POST', 'ELASTICSEARCH', 'ELEMENTARY', 'ELLUCIAN', 'ELOQUA', 'EMAIL', 'EMPLOYMENT_HERO', 'EPICOR_PROPHET_21', 'EVENTBRITE', 'EVERHOUR', 'EXPENSIFY', 'FACEBOOK', 'FIGMA', 'FIREBASE', 'FLEXPORT', 'FORJ', 'FOUNTAIN', 'FREIGHTVIEW', 'FRESHBOOKS', 'FRESHCHAT', 'FRESHDESK', 'FRESHDESK_CONTACT_CENTER', 'FRESHSERVICE', 'FRESHSUCCESS', 'FRESHTEAM', 'FRIENDBUY', 'FRONT', 'FTP', 'FULLSTORY', 'G2', 'GAINSIGHT', 'GEM', 'GIT', 'GITLAB', 'GLADLY', 'GOCARDLESS', 'GONG', 'GOOGLE', 'GOOGLE_AD_MANAGER', 'GOOGLE_ADS', 'GOOGLE_CALENDAR', 'GOOGLE_CAMPAIGN_MANAGER', 'GOOGLE_CHROME', 'GOOGLE_CLOUD', 'GOOGLE_DISPLAY', 'GOOGLE_PLAY', 'GOOGLE_SEARCH_ADS_360', 'GOOGLE_SEARCH_CONSOLE', 'GOOGLE_TASKS', 'GORGIAS', 'GREENHOUSE', 'GREENPLUM', 'GREEN_POWER_MONITOR', 'GREPSR', 'GRIN', 'GURU', 'HARVEST', 'HDFS', 'HEAP', 'HEIGHT', 'HELP_SCOUT', 'HELPSHIFT', 'HEROKU_KAFKA', 'HEX', 'HIBOB', 'HOPIN', 'IMPACT', 'INCIDENT_IO', 'INFOBIP', 'INSIGHTLY', 'INSTAGRAM', 'INTERCOM', 'INVESTOPEDIA', 'IRONCLAD', 'IRONSOURCE', 'ITERABLE', 'JAVA', 'JENKINS', 'JUSTCALL', 'KANDJI', 'KENSU', 'KHOROS_CARE', 'KISSMETRICS', 'KLAVIYO', 'KNOWBE4', 'KONNECT_INSIGHTS', 'KUSTOMER', 'LARIAT_DATA', 'LATTICE', 'LAUNCH_DARKLY', 'LEARN_UPON', 'LESSONLY', 'LEVER', 'LIFTOFF', 'LIGHTSPEED', 'LIGHTSUP', 'LINEAR', 'LINKEDIN', 'LIVECHAT', 'LOADED_COMMERCE', 'LOB', 'LOOP', 'LOOPIO', 'LUMA', 'MAGENTO', 'MAILCHIMP', 'MAILGUN', 'MANDRILL', 'MANTA', 'MARIADB', 'MARIN_SOFTWARE', 'MARKETO', 'MATTERMOST', 'MAVENLINK', 'MAXIO', 'MEDALLIA', 'META', 'METAPHOR', 'METAPLANE', 'MICROSOFT', 'MICROSOFT_AZURE_BLOB_STORAGE', 'MICROSOFT_DYNAMICS', 'MICROSOFT_ONEDRIVE', 'MICROSOFT_PURVIEW', 'MICROSOFT_TEAMS', 'MIXMAX', 'MIXPANEL', 'MONDAY_COM', 'MONGODB', 'MONTE_CARLO', 'MOUNTAIN', 'MUX', 'NAMELY', 'NCINO', 'NETSUITE_ANALYTICS', 'NEW_RELIC', 'NOTION', 'NYLAS', 'OBSERVE', 'OCTOPAI', 'OKTA', 'OPEN_DATA_DC', 'OPEN_EXCHANGES_RATES', 'OPEN_AI', 'OPEN_SEARCH', 'OPTIMIZELY', 'ORBIT_COMMUNITY_PLATFORM', 'ORDWAY', 'ORTTO', 'OS_COMMERCE', 'OUTBRAIN', 'OUTREACH', 'OVALEDGE', 'PAGERDUTY', 'PAGERSHIFT', 'PAYPAL', 'PENDO', 'PINGDOM', 'PINTEREST', 'PIPE17', 'PIPEDRIVE', 'PIVOTAL_TRACKER', 'PLAYVOX', 'POSTHOG', 'POWERSCHOOL', 'PRESTASHOP', 'PRODUCTBOARD', 'PYTHON', 'QUALAROO', 'QUALTRICS', 'QUICKBOOKS', 'RAMP', 'RARIBLE', 'RECHARGE', 'RECURLY', 'REDDIT', 'RELTIO', 'REPLY_IO', 'RETAILNEXT', 'RETENTLY', 'REVEL_SYSTEMS', 'RINGCENTRAL', 'RIPPLING', 'ROLLBAR', 'ROOTLY', 'SAGE_HR', 'SAGE_INTACCT', 'SAILTHRU', 'SALESLOFT', 'SALSIFY', 'SAMSARA', 'SAP', 'SAP_CONCUR', 'SCORM', 'SECODA', 'SECURITY_JOURNEY', 'SELECT_STAR', 'SENDGRID', 'BREVO', 'SERVICE_NOW', 'SFTP', 'SHAREPOINT', 'SHARETRIBE', 'SHIPHERO', 'SHIPSTATION', 'SHOPIFY', 'SHOPWARE', 'SHORT_IO', 'SIFFLET', 'SIMPLECAST', 'SIMPLESAT', 'SINGLESTORE', 'SISENSE', 'SKILLJAR', 'SKUVAULT', 'SLAB', 'SMADEX', 'SNAPCHAT', 'SNOWPLOW', 'SODA', 'SONARQUBE', 'SPLIT_IO', 'SPLUNK', 'SPOTIFY', 'SPREE_COMMERCE', 'SPROUT_SOCIAL', 'SQUARE', 'SQUARESPACE', 'STACK_ADAPT', 'STATSIG', 'STRIPE', 'STYLIGHT', 'SUBSCRIPT', 'TABOOLA', 'TALKDESK', 'TALKWALKER', 'TEAMWORK_COM', 'TEMPO_IO', 'TERADATA', 'TERRAFORM', 'THE_TRADE_DESK', 'THOUGHT_SPOT', 'TIKTOK', 'TOGGL', 'TRANSCEND', 'TRELLO', 'TRISOLUTE', 'TWILIO', 'TYPEFORM', 'UPLAND', 'USERVOICE', 'VALIDIO', 'VEEVA', 'VERIZON_MEDIA', 'VITALLY', 'VONAGE', 'VUETIFY', 'WEB_SCRAPER', 'WEBHOOKS', 'WHEN_I_WORK', 'WHEREFOUR', 'WIKIPEDIA', 'WOOCOMMERCE', 'WORDPRESS', 'WORKABLE', 'WORKDAY', 'WORKFLOW_MAX', 'WRIKE', 'X', 'XERO', 'XRAY', 'YAHOO', 'YOTPO', 'YOUTUBE', 'ZEENEA', 'ZEN_CART', 'ZENDESK_CHAT', 'ZENDESK_SELL', 'ZENDESK_SUNSHINE', 'ZENDESK_SUPPORT', 'TRINET', 'ZINGTREE', 'ZOHO_BOOKS', 'ZOHO_CAMPAIGNS', 'ZOHO_CRM', 'ZOOM', 'ZUORA')"
            )
        return value

    @field_validator("usage")
    def usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["UNSUPPORTED", "LOW", "MEDIUM", "HIGH"]):
            raise ValueError("must be one of enum values ('UNSUPPORTED', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldLevelSearchDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connector_dto
        if self.connector_dto:
            _dict["connectorDto"] = self.connector_dto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dag_run_dto
        if self.dag_run_dto:
            _dict["dagRunDto"] = self.dag_run_dto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dbt_model_dto
        if self.dbt_model_dto:
            _dict["dbtModelDto"] = self.dbt_model_dto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in external_descriptions (list)
        _items = []
        if self.external_descriptions:
            for _item_external_descriptions in self.external_descriptions:
                if _item_external_descriptions:
                    _items.append(_item_external_descriptions.to_dict())
            _dict["externalDescriptions"] = _items
        # override the default output from pydantic by calling `to_dict()` of fields
        if self.fields:
            _dict["fields"] = self.fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict["owners"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldLevelSearchDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "canDoAutoCoverage": obj.get("canDoAutoCoverage"),
                "connectorDto": (
                    ConnectorDto.from_dict(obj["connectorDto"]) if obj.get("connectorDto") is not None else None
                ),
                "dagRunDto": DagRunDto.from_dict(obj["dagRunDto"]) if obj.get("dagRunDto") is not None else None,
                "datasourceId": obj.get("datasourceId"),
                "datasourceName": obj.get("datasourceName"),
                "dbtModelDto": (
                    DbtModelDto.from_dict(obj["dbtModelDto"]) if obj.get("dbtModelDto") is not None else None
                ),
                "declaredSource": obj.get("declaredSource"),
                "description": obj.get("description"),
                "displayedType": obj.get("displayedType"),
                "entityType": obj.get("entityType"),
                "externalDescriptions": (
                    [DescriptionDto.from_dict(_item) for _item in obj["externalDescriptions"]]
                    if obj.get("externalDescriptions") is not None
                    else None
                ),
                "fields": (
                    SearchCollectionFieldLevelSearchFieldDto.from_dict(obj["fields"])
                    if obj.get("fields") is not None
                    else None
                ),
                "health": obj.get("health"),
                "id": obj.get("id"),
                "label": obj.get("label"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "lineagePlatform": obj.get("lineagePlatform"),
                "metadataRefresh": obj.get("metadataRefresh"),
                "name": obj.get("name"),
                "owners": (
                    [UserDto.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None
                ),
                "searchWeight": obj.get("searchWeight"),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "terms": [TagDto.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
                "uri": obj.get("uri"),
                "urn": obj.get("urn"),
                "usage": obj.get("usage"),
            }
        )
        return _obj
