# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from sifflet_sdk.client.models.butterfly_debug import ButterflyDebug
from sifflet_sdk.client.models.parameterized_query_dto import ParameterizedQueryDto
from sifflet_sdk.client.models.rule_run_input import RuleRunInput
from typing_extensions import Self


class RuleRunDebug(BaseModel):
    """
    RuleRunDebug
    """  # noqa: E501

    butterfly_debug: Optional[ButterflyDebug] = Field(default=None, alias="butterflyDebug")
    can_show_failing_rows: Optional[StrictBool] = Field(default=None, alias="canShowFailingRows")
    compiled_debug_sql: Optional[ParameterizedQueryDto] = Field(default=None, alias="compiledDebugSql")
    compiled_sql: Optional[ParameterizedQueryDto] = Field(default=None, alias="compiledSql")
    execution_data: Optional[Dict[str, Optional[Dict[str, Any]]]] = Field(default=None, alias="executionData")
    input: Optional[RuleRunInput] = None
    kubernetes_job_name: Optional[StrictStr] = Field(default=None, alias="kubernetesJobName")
    __properties: ClassVar[List[str]] = [
        "butterflyDebug",
        "canShowFailingRows",
        "compiledDebugSql",
        "compiledSql",
        "executionData",
        "input",
        "kubernetesJobName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleRunDebug from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of butterfly_debug
        if self.butterfly_debug:
            _dict["butterflyDebug"] = self.butterfly_debug.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compiled_debug_sql
        if self.compiled_debug_sql:
            _dict["compiledDebugSql"] = self.compiled_debug_sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compiled_sql
        if self.compiled_sql:
            _dict["compiledSql"] = self.compiled_sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict["input"] = self.input.to_dict()
        # set to None if butterfly_debug (nullable) is None
        # and model_fields_set contains the field
        if self.butterfly_debug is None and "butterfly_debug" in self.model_fields_set:
            _dict["butterflyDebug"] = None

        # set to None if can_show_failing_rows (nullable) is None
        # and model_fields_set contains the field
        if self.can_show_failing_rows is None and "can_show_failing_rows" in self.model_fields_set:
            _dict["canShowFailingRows"] = None

        # set to None if execution_data (nullable) is None
        # and model_fields_set contains the field
        if self.execution_data is None and "execution_data" in self.model_fields_set:
            _dict["executionData"] = None

        # set to None if input (nullable) is None
        # and model_fields_set contains the field
        if self.input is None and "input" in self.model_fields_set:
            _dict["input"] = None

        # set to None if kubernetes_job_name (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_job_name is None and "kubernetes_job_name" in self.model_fields_set:
            _dict["kubernetesJobName"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleRunDebug from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "butterflyDebug": (
                    ButterflyDebug.from_dict(obj["butterflyDebug"]) if obj.get("butterflyDebug") is not None else None
                ),
                "canShowFailingRows": obj.get("canShowFailingRows"),
                "compiledDebugSql": (
                    ParameterizedQueryDto.from_dict(obj["compiledDebugSql"])
                    if obj.get("compiledDebugSql") is not None
                    else None
                ),
                "compiledSql": (
                    ParameterizedQueryDto.from_dict(obj["compiledSql"]) if obj.get("compiledSql") is not None else None
                ),
                "executionData": obj.get("executionData"),
                "input": RuleRunInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
                "kubernetesJobName": obj.get("kubernetesJobName"),
            }
        )
        return _obj
