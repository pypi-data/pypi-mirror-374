# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.public_asset_filter_dto_custom_metadata_values_inner import (
    PublicAssetFilterDtoCustomMetadataValuesInner,
)
from sifflet_sdk.client.models.public_declarative_lineage_list_dto import (
    PublicDeclarativeLineageListDto,
)
from sifflet_sdk.client.models.public_reference_by_id_or_email_dto import (
    PublicReferenceByIdOrEmailDto,
)
from sifflet_sdk.client.models.public_reference_by_id_or_name_dto import (
    PublicReferenceByIdOrNameDto,
)
from sifflet_sdk.client.models.public_tag_reference_dto import PublicTagReferenceDto
from typing_extensions import Self


class PublicDeclarativeAssetDto(BaseModel):
    """
    Use this parameter to declare assets and their associated links. It is recommended to use the `lineages` object of the `assets` array of objects rather than the `lineages` array of objects for cases where you want to declare assets and their corresponding lineage links.
    """  # noqa: E501

    custom_metadata_values: Optional[List[PublicAssetFilterDtoCustomMetadataValuesInner]] = Field(
        default=None,
        description="Custom metadata entries to be associated with the declared asset",
        alias="customMetadataValues",
    )
    description: Optional[StrictStr] = Field(default=None, description="Description of the declared asset")
    href: Optional[StrictStr] = Field(
        default=None,
        description="External link to be associated with the declared asset (e.g. link to your actual BI dashboard, ML model, etc.). This link will show up as a button on your asset page.",
    )
    lineages: Optional[PublicDeclarativeLineageListDto] = None
    name: Optional[StrictStr] = Field(default=None, description="Display name of the declared asset")
    owners: Optional[List[PublicReferenceByIdOrEmailDto]] = Field(
        default=None, description="Owners to be associated with the declared asset"
    )
    sub_type: Optional[StrictStr] = Field(
        default=None,
        description='Secondary type of the declared asset. Shows up in the Data Catalog as an additional metadata giving more details about the asset type (e.g. "type": "Dataset", "subType": "View"). "type": "Generic" declared assets will have their subType value added to the Asset type filter category of the Data Catalog.',
        alias="subType",
    )
    tags: Optional[List[PublicTagReferenceDto]] = Field(
        default=None, description="Tags to be associated with the declared asset"
    )
    terms: Optional[List[PublicReferenceByIdOrNameDto]] = Field(
        default=None,
        description="Business terms to be associated with the declared asset. Business terms can be referenced either through their `id`, their `name`, or both.",
    )
    type: StrictStr = Field(
        description="Primary type of the declared asset, indicating the overall category the asset falls in. Utilized to know which value the declared asset should be nested in in the Asset type filter category of the Data Catalog. Selecting Generic will result in the subType value being added as a value of this Asset type filter category."
    )
    uri: StrictStr = Field(
        description='URI string identifying the declared asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>'
    )
    __properties: ClassVar[List[str]] = [
        "customMetadataValues",
        "description",
        "href",
        "lineages",
        "name",
        "owners",
        "subType",
        "tags",
        "terms",
        "type",
        "uri",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["Dataset", "Dashboard", "Pipeline", "MlModel", "Generic"]):
            raise ValueError("must be one of enum values ('Dataset', 'Dashboard', 'Pipeline', 'MlModel', 'Generic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicDeclarativeAssetDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metadata_values (list)
        _items = []
        if self.custom_metadata_values:
            for _item_custom_metadata_values in self.custom_metadata_values:
                if _item_custom_metadata_values:
                    _items.append(_item_custom_metadata_values.to_dict())
            _dict["customMetadataValues"] = _items
        # override the default output from pydantic by calling `to_dict()` of lineages
        if self.lineages:
            _dict["lineages"] = self.lineages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict["owners"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicDeclarativeAssetDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "customMetadataValues": (
                    [
                        PublicAssetFilterDtoCustomMetadataValuesInner.from_dict(_item)
                        for _item in obj["customMetadataValues"]
                    ]
                    if obj.get("customMetadataValues") is not None
                    else None
                ),
                "description": obj.get("description"),
                "href": obj.get("href"),
                "lineages": (
                    PublicDeclarativeLineageListDto.from_dict(obj["lineages"])
                    if obj.get("lineages") is not None
                    else None
                ),
                "name": obj.get("name"),
                "owners": (
                    [PublicReferenceByIdOrEmailDto.from_dict(_item) for _item in obj["owners"]]
                    if obj.get("owners") is not None
                    else None
                ),
                "subType": obj.get("subType"),
                "tags": (
                    [PublicTagReferenceDto.from_dict(_item) for _item in obj["tags"]]
                    if obj.get("tags") is not None
                    else None
                ),
                "terms": (
                    [PublicReferenceByIdOrNameDto.from_dict(_item) for _item in obj["terms"]]
                    if obj.get("terms") is not None
                    else None
                ),
                "type": obj.get("type"),
                "uri": obj.get("uri"),
            }
        )
        return _obj
