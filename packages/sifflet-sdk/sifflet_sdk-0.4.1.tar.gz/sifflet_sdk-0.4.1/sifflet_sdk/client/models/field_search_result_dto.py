# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class FieldSearchResultDto(BaseModel):
    """
    FieldSearchResultDto
    """  # noqa: E501

    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    display_type: Optional[StrictStr] = Field(default=None, alias="displayType")
    id: Optional[StrictStr] = None
    last_modified_date: Optional[StrictInt] = Field(default=None, alias="lastModifiedDate")
    modified_by: Optional[StrictStr] = Field(default=None, alias="modifiedBy")
    monitoring_name: Optional[StrictStr] = Field(default=None, alias="monitoringName")
    nullable: Optional[StrictBool] = None
    repeated: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    type_category: Optional[StrictStr] = Field(default=None, alias="typeCategory")
    unique_name: Optional[StrictStr] = Field(default=None, alias="uniqueName")
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "createdDate",
        "datasetId",
        "displayType",
        "id",
        "lastModifiedDate",
        "modifiedBy",
        "monitoringName",
        "nullable",
        "repeated",
        "type",
        "typeCategory",
        "uniqueName",
    ]

    @field_validator("type_category")
    def type_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "DATE",
                "TIME",
                "DATETIME",
                "BOOLEAN",
                "STRING",
                "INTEGER",
                "FLOAT",
                "ARRAY",
                "JSON",
                "STRUCT",
                "MAP",
                "BINARY",
                "OTHER",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('DATE', 'TIME', 'DATETIME', 'BOOLEAN', 'STRING', 'INTEGER', 'FLOAT', 'ARRAY', 'JSON', 'STRUCT', 'MAP', 'BINARY', 'OTHER')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldSearchResultDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldSearchResultDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "datasetId": obj.get("datasetId"),
                "displayType": obj.get("displayType"),
                "id": obj.get("id"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "modifiedBy": obj.get("modifiedBy"),
                "monitoringName": obj.get("monitoringName"),
                "nullable": obj.get("nullable"),
                "repeated": obj.get("repeated"),
                "type": obj.get("type"),
                "typeCategory": obj.get("typeCategory"),
                "uniqueName": obj.get("uniqueName"),
            }
        )
        return _obj
