# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.usage_per_datasource_user_dto import (
    UsagePerDatasourceUserDto,
)
from typing_extensions import Self


class AssetUsageDto(BaseModel):
    """
    AssetUsageDto
    """  # noqa: E501

    asset_id: StrictStr = Field(alias="assetId")
    calculation_date: StrictInt = Field(alias="calculationDate")
    count_read: StrictInt = Field(alias="countRead")
    end_day: StrictInt = Field(alias="endDay")
    last_access_date: Optional[StrictInt] = Field(default=None, alias="lastAccessDate")
    percentile: Union[StrictFloat, StrictInt]
    qualification: StrictStr
    read_type: StrictStr = Field(alias="readType")
    start_day: StrictInt = Field(alias="startDay")
    usage_per_datasource_users: List[UsagePerDatasourceUserDto] = Field(alias="usagePerDatasourceUsers")
    __properties: ClassVar[List[str]] = [
        "assetId",
        "calculationDate",
        "countRead",
        "endDay",
        "lastAccessDate",
        "percentile",
        "qualification",
        "readType",
        "startDay",
        "usagePerDatasourceUsers",
    ]

    @field_validator("qualification")
    def qualification_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["UNSUPPORTED", "LOW", "MEDIUM", "HIGH"]):
            raise ValueError("must be one of enum values ('UNSUPPORTED', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator("read_type")
    def read_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["QUERIES", "VIEWS"]):
            raise ValueError("must be one of enum values ('QUERIES', 'VIEWS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetUsageDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage_per_datasource_users (list)
        _items = []
        if self.usage_per_datasource_users:
            for _item_usage_per_datasource_users in self.usage_per_datasource_users:
                if _item_usage_per_datasource_users:
                    _items.append(_item_usage_per_datasource_users.to_dict())
            _dict["usagePerDatasourceUsers"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetUsageDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assetId": obj.get("assetId"),
                "calculationDate": obj.get("calculationDate"),
                "countRead": obj.get("countRead"),
                "endDay": obj.get("endDay"),
                "lastAccessDate": obj.get("lastAccessDate"),
                "percentile": obj.get("percentile"),
                "qualification": obj.get("qualification"),
                "readType": obj.get("readType"),
                "startDay": obj.get("startDay"),
                "usagePerDatasourceUsers": (
                    [UsagePerDatasourceUserDto.from_dict(_item) for _item in obj["usagePerDatasourceUsers"]]
                    if obj.get("usagePerDatasourceUsers") is not None
                    else None
                ),
            }
        )
        return _obj
