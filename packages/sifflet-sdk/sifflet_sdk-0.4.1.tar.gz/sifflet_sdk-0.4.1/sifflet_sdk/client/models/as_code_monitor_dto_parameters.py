# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.as_code_completeness_monitor_params_dto import (
    AsCodeCompletenessMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_conditional_monitor_params_dto import (
    AsCodeConditionalMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_correlated_metrics_monitor_params_dto import (
    AsCodeCorrelatedMetricsMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v1 import (
    AsCodeCustomMetricsMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v2 import (
    AsCodeCustomMetricsMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_distribution_monitor_params_dto import (
    AsCodeDistributionMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_duplicates_monitor_params_dto import (
    AsCodeDuplicatesMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_dynamic_field_profiling_monitor_params_dto import (
    AsCodeDynamicFieldProfilingMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_dynamic_metric_monitor_params_dto import (
    AsCodeDynamicMetricMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_field_duplicates_monitor_params_dto import (
    AsCodeFieldDuplicatesMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v1 import (
    AsCodeFieldFormatMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v2 import (
    AsCodeFieldFormatMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v1 import (
    AsCodeFieldInListConstraintMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v2 import (
    AsCodeFieldInListConstraintMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_field_nulls_monitor_params_dto import (
    AsCodeFieldNullsMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_field_uniqueness_monitor_params_dto import (
    AsCodeFieldUniquenessMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v1 import (
    AsCodeFreshnessMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v2 import (
    AsCodeFreshnessMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v1 import (
    AsCodeMetadataFreshnessMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v2 import (
    AsCodeMetadataFreshnessMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_metrics_monitor_params_dto import (
    AsCodeMetricsMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v1 import (
    AsCodeReferentialIntegrityMonitorParamsDtoV1,
)
from sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v2 import (
    AsCodeReferentialIntegrityMonitorParamsDtoV2,
)
from sifflet_sdk.client.models.as_code_row_duplicates_monitor_params_dto import (
    AsCodeRowDuplicatesMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_schema_change_monitor_params_dto import (
    AsCodeSchemaChangeMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_sql_monitor_params_dto import (
    AsCodeSqlMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_static_completeness_monitor_params_dto import (
    AsCodeStaticCompletenessMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_static_field_profiling_monitor_params_dto import (
    AsCodeStaticFieldProfilingMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_static_metric_monitor_params_dto import (
    AsCodeStaticMetricMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_value_range_monitor_params_dto import (
    AsCodeValueRangeMonitorParamsDto,
)
from sifflet_sdk.client.models.as_code_volume_monitor_params_dto import (
    AsCodeVolumeMonitorParamsDto,
)
from typing_extensions import Literal, Self

ASCODEMONITORDTOPARAMETERS_ONE_OF_SCHEMAS = [
    "AsCodeCompletenessMonitorParamsDto",
    "AsCodeConditionalMonitorParamsDto",
    "AsCodeCorrelatedMetricsMonitorParamsDto",
    "AsCodeCustomMetricsMonitorParamsDtoV1",
    "AsCodeCustomMetricsMonitorParamsDtoV2",
    "AsCodeDistributionMonitorParamsDto",
    "AsCodeDuplicatesMonitorParamsDto",
    "AsCodeDynamicFieldProfilingMonitorParamsDto",
    "AsCodeDynamicMetricMonitorParamsDto",
    "AsCodeFieldDuplicatesMonitorParamsDto",
    "AsCodeFieldFormatMonitorParamsDtoV1",
    "AsCodeFieldFormatMonitorParamsDtoV2",
    "AsCodeFieldInListConstraintMonitorParamsDtoV1",
    "AsCodeFieldInListConstraintMonitorParamsDtoV2",
    "AsCodeFieldNullsMonitorParamsDto",
    "AsCodeFieldUniquenessMonitorParamsDto",
    "AsCodeFreshnessMonitorParamsDtoV1",
    "AsCodeFreshnessMonitorParamsDtoV2",
    "AsCodeMetadataFreshnessMonitorParamsDtoV1",
    "AsCodeMetadataFreshnessMonitorParamsDtoV2",
    "AsCodeMetricsMonitorParamsDto",
    "AsCodeReferentialIntegrityMonitorParamsDtoV1",
    "AsCodeReferentialIntegrityMonitorParamsDtoV2",
    "AsCodeRowDuplicatesMonitorParamsDto",
    "AsCodeSchemaChangeMonitorParamsDto",
    "AsCodeSqlMonitorParamsDto",
    "AsCodeStaticCompletenessMonitorParamsDto",
    "AsCodeStaticFieldProfilingMonitorParamsDto",
    "AsCodeStaticMetricMonitorParamsDto",
    "AsCodeValueRangeMonitorParamsDto",
    "AsCodeVolumeMonitorParamsDto",
]


class AsCodeMonitorDtoParameters(BaseModel):
    """
    AsCodeMonitorDtoParameters
    """

    # data type: AsCodeCompletenessMonitorParamsDto
    oneof_schema_1_validator: Optional[AsCodeCompletenessMonitorParamsDto] = None
    # data type: AsCodeConditionalMonitorParamsDto
    oneof_schema_2_validator: Optional[AsCodeConditionalMonitorParamsDto] = None
    # data type: AsCodeCorrelatedMetricsMonitorParamsDto
    oneof_schema_3_validator: Optional[AsCodeCorrelatedMetricsMonitorParamsDto] = None
    # data type: AsCodeCustomMetricsMonitorParamsDtoV1
    oneof_schema_4_validator: Optional[AsCodeCustomMetricsMonitorParamsDtoV1] = None
    # data type: AsCodeCustomMetricsMonitorParamsDtoV2
    oneof_schema_5_validator: Optional[AsCodeCustomMetricsMonitorParamsDtoV2] = None
    # data type: AsCodeDistributionMonitorParamsDto
    oneof_schema_6_validator: Optional[AsCodeDistributionMonitorParamsDto] = None
    # data type: AsCodeDuplicatesMonitorParamsDto
    oneof_schema_7_validator: Optional[AsCodeDuplicatesMonitorParamsDto] = None
    # data type: AsCodeDynamicFieldProfilingMonitorParamsDto
    oneof_schema_8_validator: Optional[AsCodeDynamicFieldProfilingMonitorParamsDto] = None
    # data type: AsCodeDynamicMetricMonitorParamsDto
    oneof_schema_9_validator: Optional[AsCodeDynamicMetricMonitorParamsDto] = None
    # data type: AsCodeFieldDuplicatesMonitorParamsDto
    oneof_schema_10_validator: Optional[AsCodeFieldDuplicatesMonitorParamsDto] = None
    # data type: AsCodeFieldFormatMonitorParamsDtoV1
    oneof_schema_11_validator: Optional[AsCodeFieldFormatMonitorParamsDtoV1] = None
    # data type: AsCodeFieldFormatMonitorParamsDtoV2
    oneof_schema_12_validator: Optional[AsCodeFieldFormatMonitorParamsDtoV2] = None
    # data type: AsCodeFieldInListConstraintMonitorParamsDtoV1
    oneof_schema_13_validator: Optional[AsCodeFieldInListConstraintMonitorParamsDtoV1] = None
    # data type: AsCodeFieldInListConstraintMonitorParamsDtoV2
    oneof_schema_14_validator: Optional[AsCodeFieldInListConstraintMonitorParamsDtoV2] = None
    # data type: AsCodeFieldNullsMonitorParamsDto
    oneof_schema_15_validator: Optional[AsCodeFieldNullsMonitorParamsDto] = None
    # data type: AsCodeFieldUniquenessMonitorParamsDto
    oneof_schema_16_validator: Optional[AsCodeFieldUniquenessMonitorParamsDto] = None
    # data type: AsCodeFreshnessMonitorParamsDtoV1
    oneof_schema_17_validator: Optional[AsCodeFreshnessMonitorParamsDtoV1] = None
    # data type: AsCodeFreshnessMonitorParamsDtoV2
    oneof_schema_18_validator: Optional[AsCodeFreshnessMonitorParamsDtoV2] = None
    # data type: AsCodeMetadataFreshnessMonitorParamsDtoV1
    oneof_schema_19_validator: Optional[AsCodeMetadataFreshnessMonitorParamsDtoV1] = None
    # data type: AsCodeMetadataFreshnessMonitorParamsDtoV2
    oneof_schema_20_validator: Optional[AsCodeMetadataFreshnessMonitorParamsDtoV2] = None
    # data type: AsCodeMetricsMonitorParamsDto
    oneof_schema_21_validator: Optional[AsCodeMetricsMonitorParamsDto] = None
    # data type: AsCodeReferentialIntegrityMonitorParamsDtoV1
    oneof_schema_22_validator: Optional[AsCodeReferentialIntegrityMonitorParamsDtoV1] = None
    # data type: AsCodeReferentialIntegrityMonitorParamsDtoV2
    oneof_schema_23_validator: Optional[AsCodeReferentialIntegrityMonitorParamsDtoV2] = None
    # data type: AsCodeRowDuplicatesMonitorParamsDto
    oneof_schema_24_validator: Optional[AsCodeRowDuplicatesMonitorParamsDto] = None
    # data type: AsCodeSchemaChangeMonitorParamsDto
    oneof_schema_25_validator: Optional[AsCodeSchemaChangeMonitorParamsDto] = None
    # data type: AsCodeSqlMonitorParamsDto
    oneof_schema_26_validator: Optional[AsCodeSqlMonitorParamsDto] = None
    # data type: AsCodeStaticCompletenessMonitorParamsDto
    oneof_schema_27_validator: Optional[AsCodeStaticCompletenessMonitorParamsDto] = None
    # data type: AsCodeStaticFieldProfilingMonitorParamsDto
    oneof_schema_28_validator: Optional[AsCodeStaticFieldProfilingMonitorParamsDto] = None
    # data type: AsCodeStaticMetricMonitorParamsDto
    oneof_schema_29_validator: Optional[AsCodeStaticMetricMonitorParamsDto] = None
    # data type: AsCodeValueRangeMonitorParamsDto
    oneof_schema_30_validator: Optional[AsCodeValueRangeMonitorParamsDto] = None
    # data type: AsCodeVolumeMonitorParamsDto
    oneof_schema_31_validator: Optional[AsCodeVolumeMonitorParamsDto] = None
    actual_instance: Optional[
        Union[
            AsCodeCompletenessMonitorParamsDto,
            AsCodeConditionalMonitorParamsDto,
            AsCodeCorrelatedMetricsMonitorParamsDto,
            AsCodeCustomMetricsMonitorParamsDtoV1,
            AsCodeCustomMetricsMonitorParamsDtoV2,
            AsCodeDistributionMonitorParamsDto,
            AsCodeDuplicatesMonitorParamsDto,
            AsCodeDynamicFieldProfilingMonitorParamsDto,
            AsCodeDynamicMetricMonitorParamsDto,
            AsCodeFieldDuplicatesMonitorParamsDto,
            AsCodeFieldFormatMonitorParamsDtoV1,
            AsCodeFieldFormatMonitorParamsDtoV2,
            AsCodeFieldInListConstraintMonitorParamsDtoV1,
            AsCodeFieldInListConstraintMonitorParamsDtoV2,
            AsCodeFieldNullsMonitorParamsDto,
            AsCodeFieldUniquenessMonitorParamsDto,
            AsCodeFreshnessMonitorParamsDtoV1,
            AsCodeFreshnessMonitorParamsDtoV2,
            AsCodeMetadataFreshnessMonitorParamsDtoV1,
            AsCodeMetadataFreshnessMonitorParamsDtoV2,
            AsCodeMetricsMonitorParamsDto,
            AsCodeReferentialIntegrityMonitorParamsDtoV1,
            AsCodeReferentialIntegrityMonitorParamsDtoV2,
            AsCodeRowDuplicatesMonitorParamsDto,
            AsCodeSchemaChangeMonitorParamsDto,
            AsCodeSqlMonitorParamsDto,
            AsCodeStaticCompletenessMonitorParamsDto,
            AsCodeStaticFieldProfilingMonitorParamsDto,
            AsCodeStaticMetricMonitorParamsDto,
            AsCodeValueRangeMonitorParamsDto,
            AsCodeVolumeMonitorParamsDto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "AsCodeCompletenessMonitorParamsDto",
        "AsCodeConditionalMonitorParamsDto",
        "AsCodeCorrelatedMetricsMonitorParamsDto",
        "AsCodeCustomMetricsMonitorParamsDtoV1",
        "AsCodeCustomMetricsMonitorParamsDtoV2",
        "AsCodeDistributionMonitorParamsDto",
        "AsCodeDuplicatesMonitorParamsDto",
        "AsCodeDynamicFieldProfilingMonitorParamsDto",
        "AsCodeDynamicMetricMonitorParamsDto",
        "AsCodeFieldDuplicatesMonitorParamsDto",
        "AsCodeFieldFormatMonitorParamsDtoV1",
        "AsCodeFieldFormatMonitorParamsDtoV2",
        "AsCodeFieldInListConstraintMonitorParamsDtoV1",
        "AsCodeFieldInListConstraintMonitorParamsDtoV2",
        "AsCodeFieldNullsMonitorParamsDto",
        "AsCodeFieldUniquenessMonitorParamsDto",
        "AsCodeFreshnessMonitorParamsDtoV1",
        "AsCodeFreshnessMonitorParamsDtoV2",
        "AsCodeMetadataFreshnessMonitorParamsDtoV1",
        "AsCodeMetadataFreshnessMonitorParamsDtoV2",
        "AsCodeMetricsMonitorParamsDto",
        "AsCodeReferentialIntegrityMonitorParamsDtoV1",
        "AsCodeReferentialIntegrityMonitorParamsDtoV2",
        "AsCodeRowDuplicatesMonitorParamsDto",
        "AsCodeSchemaChangeMonitorParamsDto",
        "AsCodeSqlMonitorParamsDto",
        "AsCodeStaticCompletenessMonitorParamsDto",
        "AsCodeStaticFieldProfilingMonitorParamsDto",
        "AsCodeStaticMetricMonitorParamsDto",
        "AsCodeValueRangeMonitorParamsDto",
        "AsCodeVolumeMonitorParamsDto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = AsCodeMonitorDtoParameters.model_construct()
        error_messages = []
        match = 0
        # validate data type: AsCodeCompletenessMonitorParamsDto
        if not isinstance(v, AsCodeCompletenessMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeCompletenessMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeConditionalMonitorParamsDto
        if not isinstance(v, AsCodeConditionalMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeConditionalMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeCorrelatedMetricsMonitorParamsDto
        if not isinstance(v, AsCodeCorrelatedMetricsMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeCorrelatedMetricsMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeCustomMetricsMonitorParamsDtoV1
        if not isinstance(v, AsCodeCustomMetricsMonitorParamsDtoV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeCustomMetricsMonitorParamsDtoV1`")
        else:
            match += 1
        # validate data type: AsCodeCustomMetricsMonitorParamsDtoV2
        if not isinstance(v, AsCodeCustomMetricsMonitorParamsDtoV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeCustomMetricsMonitorParamsDtoV2`")
        else:
            match += 1
        # validate data type: AsCodeDistributionMonitorParamsDto
        if not isinstance(v, AsCodeDistributionMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeDistributionMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeDuplicatesMonitorParamsDto
        if not isinstance(v, AsCodeDuplicatesMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeDuplicatesMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeDynamicFieldProfilingMonitorParamsDto
        if not isinstance(v, AsCodeDynamicFieldProfilingMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeDynamicFieldProfilingMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeDynamicMetricMonitorParamsDto
        if not isinstance(v, AsCodeDynamicMetricMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeDynamicMetricMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeFieldDuplicatesMonitorParamsDto
        if not isinstance(v, AsCodeFieldDuplicatesMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFieldDuplicatesMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeFieldFormatMonitorParamsDtoV1
        if not isinstance(v, AsCodeFieldFormatMonitorParamsDtoV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFieldFormatMonitorParamsDtoV1`")
        else:
            match += 1
        # validate data type: AsCodeFieldFormatMonitorParamsDtoV2
        if not isinstance(v, AsCodeFieldFormatMonitorParamsDtoV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFieldFormatMonitorParamsDtoV2`")
        else:
            match += 1
        # validate data type: AsCodeFieldInListConstraintMonitorParamsDtoV1
        if not isinstance(v, AsCodeFieldInListConstraintMonitorParamsDtoV1):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AsCodeFieldInListConstraintMonitorParamsDtoV1`"
            )
        else:
            match += 1
        # validate data type: AsCodeFieldInListConstraintMonitorParamsDtoV2
        if not isinstance(v, AsCodeFieldInListConstraintMonitorParamsDtoV2):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AsCodeFieldInListConstraintMonitorParamsDtoV2`"
            )
        else:
            match += 1
        # validate data type: AsCodeFieldNullsMonitorParamsDto
        if not isinstance(v, AsCodeFieldNullsMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFieldNullsMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeFieldUniquenessMonitorParamsDto
        if not isinstance(v, AsCodeFieldUniquenessMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFieldUniquenessMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeFreshnessMonitorParamsDtoV1
        if not isinstance(v, AsCodeFreshnessMonitorParamsDtoV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFreshnessMonitorParamsDtoV1`")
        else:
            match += 1
        # validate data type: AsCodeFreshnessMonitorParamsDtoV2
        if not isinstance(v, AsCodeFreshnessMonitorParamsDtoV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeFreshnessMonitorParamsDtoV2`")
        else:
            match += 1
        # validate data type: AsCodeMetadataFreshnessMonitorParamsDtoV1
        if not isinstance(v, AsCodeMetadataFreshnessMonitorParamsDtoV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeMetadataFreshnessMonitorParamsDtoV1`")
        else:
            match += 1
        # validate data type: AsCodeMetadataFreshnessMonitorParamsDtoV2
        if not isinstance(v, AsCodeMetadataFreshnessMonitorParamsDtoV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeMetadataFreshnessMonitorParamsDtoV2`")
        else:
            match += 1
        # validate data type: AsCodeMetricsMonitorParamsDto
        if not isinstance(v, AsCodeMetricsMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeMetricsMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeReferentialIntegrityMonitorParamsDtoV1
        if not isinstance(v, AsCodeReferentialIntegrityMonitorParamsDtoV1):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AsCodeReferentialIntegrityMonitorParamsDtoV1`"
            )
        else:
            match += 1
        # validate data type: AsCodeReferentialIntegrityMonitorParamsDtoV2
        if not isinstance(v, AsCodeReferentialIntegrityMonitorParamsDtoV2):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AsCodeReferentialIntegrityMonitorParamsDtoV2`"
            )
        else:
            match += 1
        # validate data type: AsCodeRowDuplicatesMonitorParamsDto
        if not isinstance(v, AsCodeRowDuplicatesMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeRowDuplicatesMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeSchemaChangeMonitorParamsDto
        if not isinstance(v, AsCodeSchemaChangeMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeSchemaChangeMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeSqlMonitorParamsDto
        if not isinstance(v, AsCodeSqlMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeSqlMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeStaticCompletenessMonitorParamsDto
        if not isinstance(v, AsCodeStaticCompletenessMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeStaticCompletenessMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeStaticFieldProfilingMonitorParamsDto
        if not isinstance(v, AsCodeStaticFieldProfilingMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeStaticFieldProfilingMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeStaticMetricMonitorParamsDto
        if not isinstance(v, AsCodeStaticMetricMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeStaticMetricMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeValueRangeMonitorParamsDto
        if not isinstance(v, AsCodeValueRangeMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeValueRangeMonitorParamsDto`")
        else:
            match += 1
        # validate data type: AsCodeVolumeMonitorParamsDto
        if not isinstance(v, AsCodeVolumeMonitorParamsDto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsCodeVolumeMonitorParamsDto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in AsCodeMonitorDtoParameters with oneOf schemas: AsCodeCompletenessMonitorParamsDto, AsCodeConditionalMonitorParamsDto, AsCodeCorrelatedMetricsMonitorParamsDto, AsCodeCustomMetricsMonitorParamsDtoV1, AsCodeCustomMetricsMonitorParamsDtoV2, AsCodeDistributionMonitorParamsDto, AsCodeDuplicatesMonitorParamsDto, AsCodeDynamicFieldProfilingMonitorParamsDto, AsCodeDynamicMetricMonitorParamsDto, AsCodeFieldDuplicatesMonitorParamsDto, AsCodeFieldFormatMonitorParamsDtoV1, AsCodeFieldFormatMonitorParamsDtoV2, AsCodeFieldInListConstraintMonitorParamsDtoV1, AsCodeFieldInListConstraintMonitorParamsDtoV2, AsCodeFieldNullsMonitorParamsDto, AsCodeFieldUniquenessMonitorParamsDto, AsCodeFreshnessMonitorParamsDtoV1, AsCodeFreshnessMonitorParamsDtoV2, AsCodeMetadataFreshnessMonitorParamsDtoV1, AsCodeMetadataFreshnessMonitorParamsDtoV2, AsCodeMetricsMonitorParamsDto, AsCodeReferentialIntegrityMonitorParamsDtoV1, AsCodeReferentialIntegrityMonitorParamsDtoV2, AsCodeRowDuplicatesMonitorParamsDto, AsCodeSchemaChangeMonitorParamsDto, AsCodeSqlMonitorParamsDto, AsCodeStaticCompletenessMonitorParamsDto, AsCodeStaticFieldProfilingMonitorParamsDto, AsCodeStaticMetricMonitorParamsDto, AsCodeValueRangeMonitorParamsDto, AsCodeVolumeMonitorParamsDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in AsCodeMonitorDtoParameters with oneOf schemas: AsCodeCompletenessMonitorParamsDto, AsCodeConditionalMonitorParamsDto, AsCodeCorrelatedMetricsMonitorParamsDto, AsCodeCustomMetricsMonitorParamsDtoV1, AsCodeCustomMetricsMonitorParamsDtoV2, AsCodeDistributionMonitorParamsDto, AsCodeDuplicatesMonitorParamsDto, AsCodeDynamicFieldProfilingMonitorParamsDto, AsCodeDynamicMetricMonitorParamsDto, AsCodeFieldDuplicatesMonitorParamsDto, AsCodeFieldFormatMonitorParamsDtoV1, AsCodeFieldFormatMonitorParamsDtoV2, AsCodeFieldInListConstraintMonitorParamsDtoV1, AsCodeFieldInListConstraintMonitorParamsDtoV2, AsCodeFieldNullsMonitorParamsDto, AsCodeFieldUniquenessMonitorParamsDto, AsCodeFreshnessMonitorParamsDtoV1, AsCodeFreshnessMonitorParamsDtoV2, AsCodeMetadataFreshnessMonitorParamsDtoV1, AsCodeMetadataFreshnessMonitorParamsDtoV2, AsCodeMetricsMonitorParamsDto, AsCodeReferentialIntegrityMonitorParamsDtoV1, AsCodeReferentialIntegrityMonitorParamsDtoV2, AsCodeRowDuplicatesMonitorParamsDto, AsCodeSchemaChangeMonitorParamsDto, AsCodeSqlMonitorParamsDto, AsCodeStaticCompletenessMonitorParamsDto, AsCodeStaticFieldProfilingMonitorParamsDto, AsCodeStaticMetricMonitorParamsDto, AsCodeValueRangeMonitorParamsDto, AsCodeVolumeMonitorParamsDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("kind")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `kind` in the input.")

        # check if data type is `AsCodeCompletenessMonitorParamsDto`
        if _data_type == "AsCodeCompletenessMonitorParamsDto":
            instance.actual_instance = AsCodeCompletenessMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeConditionalMonitorParamsDto`
        if _data_type == "AsCodeConditionalMonitorParamsDto":
            instance.actual_instance = AsCodeConditionalMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeCorrelatedMetricsMonitorParamsDto`
        if _data_type == "AsCodeCorrelatedMetricsMonitorParamsDto":
            instance.actual_instance = AsCodeCorrelatedMetricsMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeCustomMetricsMonitorParamsDtoV1`
        if _data_type == "AsCodeCustomMetricsMonitorParamsDtoV1":
            instance.actual_instance = AsCodeCustomMetricsMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeCustomMetricsMonitorParamsDtoV2`
        if _data_type == "AsCodeCustomMetricsMonitorParamsDtoV2":
            instance.actual_instance = AsCodeCustomMetricsMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeDistributionMonitorParamsDto`
        if _data_type == "AsCodeDistributionMonitorParamsDto":
            instance.actual_instance = AsCodeDistributionMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeDuplicatesMonitorParamsDto`
        if _data_type == "AsCodeDuplicatesMonitorParamsDto":
            instance.actual_instance = AsCodeDuplicatesMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeDynamicFieldProfilingMonitorParamsDto`
        if _data_type == "AsCodeDynamicFieldProfilingMonitorParamsDto":
            instance.actual_instance = AsCodeDynamicFieldProfilingMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeDynamicMetricMonitorParamsDto`
        if _data_type == "AsCodeDynamicMetricMonitorParamsDto":
            instance.actual_instance = AsCodeDynamicMetricMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldDuplicatesMonitorParamsDto`
        if _data_type == "AsCodeFieldDuplicatesMonitorParamsDto":
            instance.actual_instance = AsCodeFieldDuplicatesMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldFormatMonitorParamsDtoV1`
        if _data_type == "AsCodeFieldFormatMonitorParamsDtoV1":
            instance.actual_instance = AsCodeFieldFormatMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldFormatMonitorParamsDtoV2`
        if _data_type == "AsCodeFieldFormatMonitorParamsDtoV2":
            instance.actual_instance = AsCodeFieldFormatMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldInListConstraintMonitorParamsDtoV1`
        if _data_type == "AsCodeFieldInListConstraintMonitorParamsDtoV1":
            instance.actual_instance = AsCodeFieldInListConstraintMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldInListConstraintMonitorParamsDtoV2`
        if _data_type == "AsCodeFieldInListConstraintMonitorParamsDtoV2":
            instance.actual_instance = AsCodeFieldInListConstraintMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldNullsMonitorParamsDto`
        if _data_type == "AsCodeFieldNullsMonitorParamsDto":
            instance.actual_instance = AsCodeFieldNullsMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeFieldUniquenessMonitorParamsDto`
        if _data_type == "AsCodeFieldUniquenessMonitorParamsDto":
            instance.actual_instance = AsCodeFieldUniquenessMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeFreshnessMonitorParamsDtoV1`
        if _data_type == "AsCodeFreshnessMonitorParamsDtoV1":
            instance.actual_instance = AsCodeFreshnessMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeFreshnessMonitorParamsDtoV2`
        if _data_type == "AsCodeFreshnessMonitorParamsDtoV2":
            instance.actual_instance = AsCodeFreshnessMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeMetadataFreshnessMonitorParamsDtoV1`
        if _data_type == "AsCodeMetadataFreshnessMonitorParamsDtoV1":
            instance.actual_instance = AsCodeMetadataFreshnessMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeMetadataFreshnessMonitorParamsDtoV2`
        if _data_type == "AsCodeMetadataFreshnessMonitorParamsDtoV2":
            instance.actual_instance = AsCodeMetadataFreshnessMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeMetricsMonitorParamsDto`
        if _data_type == "AsCodeMetricsMonitorParamsDto":
            instance.actual_instance = AsCodeMetricsMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeReferentialIntegrityMonitorParamsDtoV1`
        if _data_type == "AsCodeReferentialIntegrityMonitorParamsDtoV1":
            instance.actual_instance = AsCodeReferentialIntegrityMonitorParamsDtoV1.from_json(json_str)
            return instance

        # check if data type is `AsCodeReferentialIntegrityMonitorParamsDtoV2`
        if _data_type == "AsCodeReferentialIntegrityMonitorParamsDtoV2":
            instance.actual_instance = AsCodeReferentialIntegrityMonitorParamsDtoV2.from_json(json_str)
            return instance

        # check if data type is `AsCodeRowDuplicatesMonitorParamsDto`
        if _data_type == "AsCodeRowDuplicatesMonitorParamsDto":
            instance.actual_instance = AsCodeRowDuplicatesMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeSchemaChangeMonitorParamsDto`
        if _data_type == "AsCodeSchemaChangeMonitorParamsDto":
            instance.actual_instance = AsCodeSchemaChangeMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeSqlMonitorParamsDto`
        if _data_type == "AsCodeSqlMonitorParamsDto":
            instance.actual_instance = AsCodeSqlMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeStaticCompletenessMonitorParamsDto`
        if _data_type == "AsCodeStaticCompletenessMonitorParamsDto":
            instance.actual_instance = AsCodeStaticCompletenessMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeStaticFieldProfilingMonitorParamsDto`
        if _data_type == "AsCodeStaticFieldProfilingMonitorParamsDto":
            instance.actual_instance = AsCodeStaticFieldProfilingMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeStaticMetricMonitorParamsDto`
        if _data_type == "AsCodeStaticMetricMonitorParamsDto":
            instance.actual_instance = AsCodeStaticMetricMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeValueRangeMonitorParamsDto`
        if _data_type == "AsCodeValueRangeMonitorParamsDto":
            instance.actual_instance = AsCodeValueRangeMonitorParamsDto.from_json(json_str)
            return instance

        # check if data type is `AsCodeVolumeMonitorParamsDto`
        if _data_type == "AsCodeVolumeMonitorParamsDto":
            instance.actual_instance = AsCodeVolumeMonitorParamsDto.from_json(json_str)
            return instance

        # deserialize data into AsCodeCompletenessMonitorParamsDto
        try:
            instance.actual_instance = AsCodeCompletenessMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeConditionalMonitorParamsDto
        try:
            instance.actual_instance = AsCodeConditionalMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeCorrelatedMetricsMonitorParamsDto
        try:
            instance.actual_instance = AsCodeCorrelatedMetricsMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeCustomMetricsMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeCustomMetricsMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeCustomMetricsMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeCustomMetricsMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeDistributionMonitorParamsDto
        try:
            instance.actual_instance = AsCodeDistributionMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeDuplicatesMonitorParamsDto
        try:
            instance.actual_instance = AsCodeDuplicatesMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeDynamicFieldProfilingMonitorParamsDto
        try:
            instance.actual_instance = AsCodeDynamicFieldProfilingMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeDynamicMetricMonitorParamsDto
        try:
            instance.actual_instance = AsCodeDynamicMetricMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldDuplicatesMonitorParamsDto
        try:
            instance.actual_instance = AsCodeFieldDuplicatesMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldFormatMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeFieldFormatMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldFormatMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeFieldFormatMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldInListConstraintMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeFieldInListConstraintMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldInListConstraintMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeFieldInListConstraintMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldNullsMonitorParamsDto
        try:
            instance.actual_instance = AsCodeFieldNullsMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFieldUniquenessMonitorParamsDto
        try:
            instance.actual_instance = AsCodeFieldUniquenessMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFreshnessMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeFreshnessMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeFreshnessMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeFreshnessMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeMetadataFreshnessMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeMetadataFreshnessMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeMetadataFreshnessMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeMetadataFreshnessMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeMetricsMonitorParamsDto
        try:
            instance.actual_instance = AsCodeMetricsMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeReferentialIntegrityMonitorParamsDtoV1
        try:
            instance.actual_instance = AsCodeReferentialIntegrityMonitorParamsDtoV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeReferentialIntegrityMonitorParamsDtoV2
        try:
            instance.actual_instance = AsCodeReferentialIntegrityMonitorParamsDtoV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeRowDuplicatesMonitorParamsDto
        try:
            instance.actual_instance = AsCodeRowDuplicatesMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeSchemaChangeMonitorParamsDto
        try:
            instance.actual_instance = AsCodeSchemaChangeMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeSqlMonitorParamsDto
        try:
            instance.actual_instance = AsCodeSqlMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeStaticCompletenessMonitorParamsDto
        try:
            instance.actual_instance = AsCodeStaticCompletenessMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeStaticFieldProfilingMonitorParamsDto
        try:
            instance.actual_instance = AsCodeStaticFieldProfilingMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeStaticMetricMonitorParamsDto
        try:
            instance.actual_instance = AsCodeStaticMetricMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeValueRangeMonitorParamsDto
        try:
            instance.actual_instance = AsCodeValueRangeMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsCodeVolumeMonitorParamsDto
        try:
            instance.actual_instance = AsCodeVolumeMonitorParamsDto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AsCodeMonitorDtoParameters with oneOf schemas: AsCodeCompletenessMonitorParamsDto, AsCodeConditionalMonitorParamsDto, AsCodeCorrelatedMetricsMonitorParamsDto, AsCodeCustomMetricsMonitorParamsDtoV1, AsCodeCustomMetricsMonitorParamsDtoV2, AsCodeDistributionMonitorParamsDto, AsCodeDuplicatesMonitorParamsDto, AsCodeDynamicFieldProfilingMonitorParamsDto, AsCodeDynamicMetricMonitorParamsDto, AsCodeFieldDuplicatesMonitorParamsDto, AsCodeFieldFormatMonitorParamsDtoV1, AsCodeFieldFormatMonitorParamsDtoV2, AsCodeFieldInListConstraintMonitorParamsDtoV1, AsCodeFieldInListConstraintMonitorParamsDtoV2, AsCodeFieldNullsMonitorParamsDto, AsCodeFieldUniquenessMonitorParamsDto, AsCodeFreshnessMonitorParamsDtoV1, AsCodeFreshnessMonitorParamsDtoV2, AsCodeMetadataFreshnessMonitorParamsDtoV1, AsCodeMetadataFreshnessMonitorParamsDtoV2, AsCodeMetricsMonitorParamsDto, AsCodeReferentialIntegrityMonitorParamsDtoV1, AsCodeReferentialIntegrityMonitorParamsDtoV2, AsCodeRowDuplicatesMonitorParamsDto, AsCodeSchemaChangeMonitorParamsDto, AsCodeSqlMonitorParamsDto, AsCodeStaticCompletenessMonitorParamsDto, AsCodeStaticFieldProfilingMonitorParamsDto, AsCodeStaticMetricMonitorParamsDto, AsCodeValueRangeMonitorParamsDto, AsCodeVolumeMonitorParamsDto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AsCodeMonitorDtoParameters with oneOf schemas: AsCodeCompletenessMonitorParamsDto, AsCodeConditionalMonitorParamsDto, AsCodeCorrelatedMetricsMonitorParamsDto, AsCodeCustomMetricsMonitorParamsDtoV1, AsCodeCustomMetricsMonitorParamsDtoV2, AsCodeDistributionMonitorParamsDto, AsCodeDuplicatesMonitorParamsDto, AsCodeDynamicFieldProfilingMonitorParamsDto, AsCodeDynamicMetricMonitorParamsDto, AsCodeFieldDuplicatesMonitorParamsDto, AsCodeFieldFormatMonitorParamsDtoV1, AsCodeFieldFormatMonitorParamsDtoV2, AsCodeFieldInListConstraintMonitorParamsDtoV1, AsCodeFieldInListConstraintMonitorParamsDtoV2, AsCodeFieldNullsMonitorParamsDto, AsCodeFieldUniquenessMonitorParamsDto, AsCodeFreshnessMonitorParamsDtoV1, AsCodeFreshnessMonitorParamsDtoV2, AsCodeMetadataFreshnessMonitorParamsDtoV1, AsCodeMetadataFreshnessMonitorParamsDtoV2, AsCodeMetricsMonitorParamsDto, AsCodeReferentialIntegrityMonitorParamsDtoV1, AsCodeReferentialIntegrityMonitorParamsDtoV2, AsCodeRowDuplicatesMonitorParamsDto, AsCodeSchemaChangeMonitorParamsDto, AsCodeSqlMonitorParamsDto, AsCodeStaticCompletenessMonitorParamsDto, AsCodeStaticFieldProfilingMonitorParamsDto, AsCodeStaticMetricMonitorParamsDto, AsCodeValueRangeMonitorParamsDto, AsCodeVolumeMonitorParamsDto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            AsCodeCompletenessMonitorParamsDto,
            AsCodeConditionalMonitorParamsDto,
            AsCodeCorrelatedMetricsMonitorParamsDto,
            AsCodeCustomMetricsMonitorParamsDtoV1,
            AsCodeCustomMetricsMonitorParamsDtoV2,
            AsCodeDistributionMonitorParamsDto,
            AsCodeDuplicatesMonitorParamsDto,
            AsCodeDynamicFieldProfilingMonitorParamsDto,
            AsCodeDynamicMetricMonitorParamsDto,
            AsCodeFieldDuplicatesMonitorParamsDto,
            AsCodeFieldFormatMonitorParamsDtoV1,
            AsCodeFieldFormatMonitorParamsDtoV2,
            AsCodeFieldInListConstraintMonitorParamsDtoV1,
            AsCodeFieldInListConstraintMonitorParamsDtoV2,
            AsCodeFieldNullsMonitorParamsDto,
            AsCodeFieldUniquenessMonitorParamsDto,
            AsCodeFreshnessMonitorParamsDtoV1,
            AsCodeFreshnessMonitorParamsDtoV2,
            AsCodeMetadataFreshnessMonitorParamsDtoV1,
            AsCodeMetadataFreshnessMonitorParamsDtoV2,
            AsCodeMetricsMonitorParamsDto,
            AsCodeReferentialIntegrityMonitorParamsDtoV1,
            AsCodeReferentialIntegrityMonitorParamsDtoV2,
            AsCodeRowDuplicatesMonitorParamsDto,
            AsCodeSchemaChangeMonitorParamsDto,
            AsCodeSqlMonitorParamsDto,
            AsCodeStaticCompletenessMonitorParamsDto,
            AsCodeStaticFieldProfilingMonitorParamsDto,
            AsCodeStaticMetricMonitorParamsDto,
            AsCodeValueRangeMonitorParamsDto,
            AsCodeVolumeMonitorParamsDto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
