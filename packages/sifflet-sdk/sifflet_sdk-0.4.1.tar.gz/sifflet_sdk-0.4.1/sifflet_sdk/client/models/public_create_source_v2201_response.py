# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.public_get_airflow_source_v2_dto import (
    PublicGetAirflowSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_athena_source_v2_dto import (
    PublicGetAthenaSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_big_query_source_v2_dto import (
    PublicGetBigQuerySourceV2Dto,
)
from sifflet_sdk.client.models.public_get_databricks_source_v2_dto import (
    PublicGetDatabricksSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_dbt_cloud_source_v2_dto import (
    PublicGetDbtCloudSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_dbt_source_v2_dto import (
    PublicGetDbtSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_fivetran_source_v2_dto import (
    PublicGetFivetranSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_looker_source_v2_dto import (
    PublicGetLookerSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_microstrategy_source_v2_dto import (
    PublicGetMicrostrategySourceV2Dto,
)
from sifflet_sdk.client.models.public_get_mssql_source_v2_dto import (
    PublicGetMssqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_mysql_source_v2_dto import (
    PublicGetMysqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_oracle_source_v2_dto import (
    PublicGetOracleSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_postgresql_source_v2_dto import (
    PublicGetPostgresqlSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_power_bi_source_v2_dto import (
    PublicGetPowerBiSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_qlik_source_v2_dto import (
    PublicGetQlikSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_quicksight_source_v2_dto import (
    PublicGetQuicksightSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_redshift_source_v2_dto import (
    PublicGetRedshiftSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_snowflake_source_v2_dto import (
    PublicGetSnowflakeSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_synapse_source_v2_dto import (
    PublicGetSynapseSourceV2Dto,
)
from sifflet_sdk.client.models.public_get_tableau_source_v2_dto import (
    PublicGetTableauSourceV2Dto,
)
from typing_extensions import Literal, Self

PUBLICCREATESOURCEV2201RESPONSE_ONE_OF_SCHEMAS = [
    "PublicGetAirflowSourceV2Dto",
    "PublicGetAthenaSourceV2Dto",
    "PublicGetBigQuerySourceV2Dto",
    "PublicGetDatabricksSourceV2Dto",
    "PublicGetDbtCloudSourceV2Dto",
    "PublicGetDbtSourceV2Dto",
    "PublicGetFivetranSourceV2Dto",
    "PublicGetLookerSourceV2Dto",
    "PublicGetMicrostrategySourceV2Dto",
    "PublicGetMssqlSourceV2Dto",
    "PublicGetMysqlSourceV2Dto",
    "PublicGetOracleSourceV2Dto",
    "PublicGetPostgresqlSourceV2Dto",
    "PublicGetPowerBiSourceV2Dto",
    "PublicGetQlikSourceV2Dto",
    "PublicGetQuicksightSourceV2Dto",
    "PublicGetRedshiftSourceV2Dto",
    "PublicGetSnowflakeSourceV2Dto",
    "PublicGetSynapseSourceV2Dto",
    "PublicGetTableauSourceV2Dto",
]


class PublicCreateSourceV2201Response(BaseModel):
    """
    PublicCreateSourceV2201Response
    """

    # data type: PublicGetAirflowSourceV2Dto
    oneof_schema_1_validator: Optional[PublicGetAirflowSourceV2Dto] = None
    # data type: PublicGetAthenaSourceV2Dto
    oneof_schema_2_validator: Optional[PublicGetAthenaSourceV2Dto] = None
    # data type: PublicGetBigQuerySourceV2Dto
    oneof_schema_3_validator: Optional[PublicGetBigQuerySourceV2Dto] = None
    # data type: PublicGetDatabricksSourceV2Dto
    oneof_schema_4_validator: Optional[PublicGetDatabricksSourceV2Dto] = None
    # data type: PublicGetDbtCloudSourceV2Dto
    oneof_schema_5_validator: Optional[PublicGetDbtCloudSourceV2Dto] = None
    # data type: PublicGetDbtSourceV2Dto
    oneof_schema_6_validator: Optional[PublicGetDbtSourceV2Dto] = None
    # data type: PublicGetFivetranSourceV2Dto
    oneof_schema_7_validator: Optional[PublicGetFivetranSourceV2Dto] = None
    # data type: PublicGetLookerSourceV2Dto
    oneof_schema_8_validator: Optional[PublicGetLookerSourceV2Dto] = None
    # data type: PublicGetMicrostrategySourceV2Dto
    oneof_schema_9_validator: Optional[PublicGetMicrostrategySourceV2Dto] = None
    # data type: PublicGetMssqlSourceV2Dto
    oneof_schema_10_validator: Optional[PublicGetMssqlSourceV2Dto] = None
    # data type: PublicGetMysqlSourceV2Dto
    oneof_schema_11_validator: Optional[PublicGetMysqlSourceV2Dto] = None
    # data type: PublicGetOracleSourceV2Dto
    oneof_schema_12_validator: Optional[PublicGetOracleSourceV2Dto] = None
    # data type: PublicGetPostgresqlSourceV2Dto
    oneof_schema_13_validator: Optional[PublicGetPostgresqlSourceV2Dto] = None
    # data type: PublicGetPowerBiSourceV2Dto
    oneof_schema_14_validator: Optional[PublicGetPowerBiSourceV2Dto] = None
    # data type: PublicGetQlikSourceV2Dto
    oneof_schema_15_validator: Optional[PublicGetQlikSourceV2Dto] = None
    # data type: PublicGetQuicksightSourceV2Dto
    oneof_schema_16_validator: Optional[PublicGetQuicksightSourceV2Dto] = None
    # data type: PublicGetRedshiftSourceV2Dto
    oneof_schema_17_validator: Optional[PublicGetRedshiftSourceV2Dto] = None
    # data type: PublicGetSnowflakeSourceV2Dto
    oneof_schema_18_validator: Optional[PublicGetSnowflakeSourceV2Dto] = None
    # data type: PublicGetSynapseSourceV2Dto
    oneof_schema_19_validator: Optional[PublicGetSynapseSourceV2Dto] = None
    # data type: PublicGetTableauSourceV2Dto
    oneof_schema_20_validator: Optional[PublicGetTableauSourceV2Dto] = None
    actual_instance: Optional[
        Union[
            PublicGetAirflowSourceV2Dto,
            PublicGetAthenaSourceV2Dto,
            PublicGetBigQuerySourceV2Dto,
            PublicGetDatabricksSourceV2Dto,
            PublicGetDbtCloudSourceV2Dto,
            PublicGetDbtSourceV2Dto,
            PublicGetFivetranSourceV2Dto,
            PublicGetLookerSourceV2Dto,
            PublicGetMicrostrategySourceV2Dto,
            PublicGetMssqlSourceV2Dto,
            PublicGetMysqlSourceV2Dto,
            PublicGetOracleSourceV2Dto,
            PublicGetPostgresqlSourceV2Dto,
            PublicGetPowerBiSourceV2Dto,
            PublicGetQlikSourceV2Dto,
            PublicGetQuicksightSourceV2Dto,
            PublicGetRedshiftSourceV2Dto,
            PublicGetSnowflakeSourceV2Dto,
            PublicGetSynapseSourceV2Dto,
            PublicGetTableauSourceV2Dto,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "PublicGetAirflowSourceV2Dto",
        "PublicGetAthenaSourceV2Dto",
        "PublicGetBigQuerySourceV2Dto",
        "PublicGetDatabricksSourceV2Dto",
        "PublicGetDbtCloudSourceV2Dto",
        "PublicGetDbtSourceV2Dto",
        "PublicGetFivetranSourceV2Dto",
        "PublicGetLookerSourceV2Dto",
        "PublicGetMicrostrategySourceV2Dto",
        "PublicGetMssqlSourceV2Dto",
        "PublicGetMysqlSourceV2Dto",
        "PublicGetOracleSourceV2Dto",
        "PublicGetPostgresqlSourceV2Dto",
        "PublicGetPowerBiSourceV2Dto",
        "PublicGetQlikSourceV2Dto",
        "PublicGetQuicksightSourceV2Dto",
        "PublicGetRedshiftSourceV2Dto",
        "PublicGetSnowflakeSourceV2Dto",
        "PublicGetSynapseSourceV2Dto",
        "PublicGetTableauSourceV2Dto",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = PublicCreateSourceV2201Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: PublicGetAirflowSourceV2Dto
        if not isinstance(v, PublicGetAirflowSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetAirflowSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetAthenaSourceV2Dto
        if not isinstance(v, PublicGetAthenaSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetAthenaSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetBigQuerySourceV2Dto
        if not isinstance(v, PublicGetBigQuerySourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetBigQuerySourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetDatabricksSourceV2Dto
        if not isinstance(v, PublicGetDatabricksSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetDatabricksSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetDbtCloudSourceV2Dto
        if not isinstance(v, PublicGetDbtCloudSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetDbtCloudSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetDbtSourceV2Dto
        if not isinstance(v, PublicGetDbtSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetDbtSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetFivetranSourceV2Dto
        if not isinstance(v, PublicGetFivetranSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetFivetranSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetLookerSourceV2Dto
        if not isinstance(v, PublicGetLookerSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetLookerSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetMicrostrategySourceV2Dto
        if not isinstance(v, PublicGetMicrostrategySourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetMicrostrategySourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetMssqlSourceV2Dto
        if not isinstance(v, PublicGetMssqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetMssqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetMysqlSourceV2Dto
        if not isinstance(v, PublicGetMysqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetMysqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetOracleSourceV2Dto
        if not isinstance(v, PublicGetOracleSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetOracleSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetPostgresqlSourceV2Dto
        if not isinstance(v, PublicGetPostgresqlSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetPostgresqlSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetPowerBiSourceV2Dto
        if not isinstance(v, PublicGetPowerBiSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetPowerBiSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetQlikSourceV2Dto
        if not isinstance(v, PublicGetQlikSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetQlikSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetQuicksightSourceV2Dto
        if not isinstance(v, PublicGetQuicksightSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetQuicksightSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetRedshiftSourceV2Dto
        if not isinstance(v, PublicGetRedshiftSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetRedshiftSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetSnowflakeSourceV2Dto
        if not isinstance(v, PublicGetSnowflakeSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetSnowflakeSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetSynapseSourceV2Dto
        if not isinstance(v, PublicGetSynapseSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetSynapseSourceV2Dto`")
        else:
            match += 1
        # validate data type: PublicGetTableauSourceV2Dto
        if not isinstance(v, PublicGetTableauSourceV2Dto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicGetTableauSourceV2Dto`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in PublicCreateSourceV2201Response with oneOf schemas: PublicGetAirflowSourceV2Dto, PublicGetAthenaSourceV2Dto, PublicGetBigQuerySourceV2Dto, PublicGetDatabricksSourceV2Dto, PublicGetDbtCloudSourceV2Dto, PublicGetDbtSourceV2Dto, PublicGetFivetranSourceV2Dto, PublicGetLookerSourceV2Dto, PublicGetMicrostrategySourceV2Dto, PublicGetMssqlSourceV2Dto, PublicGetMysqlSourceV2Dto, PublicGetOracleSourceV2Dto, PublicGetPostgresqlSourceV2Dto, PublicGetPowerBiSourceV2Dto, PublicGetQlikSourceV2Dto, PublicGetQuicksightSourceV2Dto, PublicGetRedshiftSourceV2Dto, PublicGetSnowflakeSourceV2Dto, PublicGetSynapseSourceV2Dto, PublicGetTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in PublicCreateSourceV2201Response with oneOf schemas: PublicGetAirflowSourceV2Dto, PublicGetAthenaSourceV2Dto, PublicGetBigQuerySourceV2Dto, PublicGetDatabricksSourceV2Dto, PublicGetDbtCloudSourceV2Dto, PublicGetDbtSourceV2Dto, PublicGetFivetranSourceV2Dto, PublicGetLookerSourceV2Dto, PublicGetMicrostrategySourceV2Dto, PublicGetMssqlSourceV2Dto, PublicGetMysqlSourceV2Dto, PublicGetOracleSourceV2Dto, PublicGetPostgresqlSourceV2Dto, PublicGetPowerBiSourceV2Dto, PublicGetQlikSourceV2Dto, PublicGetQuicksightSourceV2Dto, PublicGetRedshiftSourceV2Dto, PublicGetSnowflakeSourceV2Dto, PublicGetSynapseSourceV2Dto, PublicGetTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `PublicGetAirflowSourceV2Dto`
        if _data_type == "PublicGetAirflowSourceV2Dto":
            instance.actual_instance = PublicGetAirflowSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetAthenaSourceV2Dto`
        if _data_type == "PublicGetAthenaSourceV2Dto":
            instance.actual_instance = PublicGetAthenaSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetBigQuerySourceV2Dto`
        if _data_type == "PublicGetBigQuerySourceV2Dto":
            instance.actual_instance = PublicGetBigQuerySourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetDatabricksSourceV2Dto`
        if _data_type == "PublicGetDatabricksSourceV2Dto":
            instance.actual_instance = PublicGetDatabricksSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetDbtCloudSourceV2Dto`
        if _data_type == "PublicGetDbtCloudSourceV2Dto":
            instance.actual_instance = PublicGetDbtCloudSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetDbtSourceV2Dto`
        if _data_type == "PublicGetDbtSourceV2Dto":
            instance.actual_instance = PublicGetDbtSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetFivetranSourceV2Dto`
        if _data_type == "PublicGetFivetranSourceV2Dto":
            instance.actual_instance = PublicGetFivetranSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetLookerSourceV2Dto`
        if _data_type == "PublicGetLookerSourceV2Dto":
            instance.actual_instance = PublicGetLookerSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetMicrostrategySourceV2Dto`
        if _data_type == "PublicGetMicrostrategySourceV2Dto":
            instance.actual_instance = PublicGetMicrostrategySourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetMssqlSourceV2Dto`
        if _data_type == "PublicGetMssqlSourceV2Dto":
            instance.actual_instance = PublicGetMssqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetMysqlSourceV2Dto`
        if _data_type == "PublicGetMysqlSourceV2Dto":
            instance.actual_instance = PublicGetMysqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetOracleSourceV2Dto`
        if _data_type == "PublicGetOracleSourceV2Dto":
            instance.actual_instance = PublicGetOracleSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetPostgresqlSourceV2Dto`
        if _data_type == "PublicGetPostgresqlSourceV2Dto":
            instance.actual_instance = PublicGetPostgresqlSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetPowerBiSourceV2Dto`
        if _data_type == "PublicGetPowerBiSourceV2Dto":
            instance.actual_instance = PublicGetPowerBiSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetQlikSourceV2Dto`
        if _data_type == "PublicGetQlikSourceV2Dto":
            instance.actual_instance = PublicGetQlikSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetQuicksightSourceV2Dto`
        if _data_type == "PublicGetQuicksightSourceV2Dto":
            instance.actual_instance = PublicGetQuicksightSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetRedshiftSourceV2Dto`
        if _data_type == "PublicGetRedshiftSourceV2Dto":
            instance.actual_instance = PublicGetRedshiftSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetSnowflakeSourceV2Dto`
        if _data_type == "PublicGetSnowflakeSourceV2Dto":
            instance.actual_instance = PublicGetSnowflakeSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetSynapseSourceV2Dto`
        if _data_type == "PublicGetSynapseSourceV2Dto":
            instance.actual_instance = PublicGetSynapseSourceV2Dto.from_json(json_str)
            return instance

        # check if data type is `PublicGetTableauSourceV2Dto`
        if _data_type == "PublicGetTableauSourceV2Dto":
            instance.actual_instance = PublicGetTableauSourceV2Dto.from_json(json_str)
            return instance

        # deserialize data into PublicGetAirflowSourceV2Dto
        try:
            instance.actual_instance = PublicGetAirflowSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetAthenaSourceV2Dto
        try:
            instance.actual_instance = PublicGetAthenaSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetBigQuerySourceV2Dto
        try:
            instance.actual_instance = PublicGetBigQuerySourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetDatabricksSourceV2Dto
        try:
            instance.actual_instance = PublicGetDatabricksSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetDbtCloudSourceV2Dto
        try:
            instance.actual_instance = PublicGetDbtCloudSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetDbtSourceV2Dto
        try:
            instance.actual_instance = PublicGetDbtSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetFivetranSourceV2Dto
        try:
            instance.actual_instance = PublicGetFivetranSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetLookerSourceV2Dto
        try:
            instance.actual_instance = PublicGetLookerSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetMicrostrategySourceV2Dto
        try:
            instance.actual_instance = PublicGetMicrostrategySourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetMssqlSourceV2Dto
        try:
            instance.actual_instance = PublicGetMssqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetMysqlSourceV2Dto
        try:
            instance.actual_instance = PublicGetMysqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetOracleSourceV2Dto
        try:
            instance.actual_instance = PublicGetOracleSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetPostgresqlSourceV2Dto
        try:
            instance.actual_instance = PublicGetPostgresqlSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetPowerBiSourceV2Dto
        try:
            instance.actual_instance = PublicGetPowerBiSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetQlikSourceV2Dto
        try:
            instance.actual_instance = PublicGetQlikSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetQuicksightSourceV2Dto
        try:
            instance.actual_instance = PublicGetQuicksightSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetRedshiftSourceV2Dto
        try:
            instance.actual_instance = PublicGetRedshiftSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetSnowflakeSourceV2Dto
        try:
            instance.actual_instance = PublicGetSnowflakeSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetSynapseSourceV2Dto
        try:
            instance.actual_instance = PublicGetSynapseSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicGetTableauSourceV2Dto
        try:
            instance.actual_instance = PublicGetTableauSourceV2Dto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into PublicCreateSourceV2201Response with oneOf schemas: PublicGetAirflowSourceV2Dto, PublicGetAthenaSourceV2Dto, PublicGetBigQuerySourceV2Dto, PublicGetDatabricksSourceV2Dto, PublicGetDbtCloudSourceV2Dto, PublicGetDbtSourceV2Dto, PublicGetFivetranSourceV2Dto, PublicGetLookerSourceV2Dto, PublicGetMicrostrategySourceV2Dto, PublicGetMssqlSourceV2Dto, PublicGetMysqlSourceV2Dto, PublicGetOracleSourceV2Dto, PublicGetPostgresqlSourceV2Dto, PublicGetPowerBiSourceV2Dto, PublicGetQlikSourceV2Dto, PublicGetQuicksightSourceV2Dto, PublicGetRedshiftSourceV2Dto, PublicGetSnowflakeSourceV2Dto, PublicGetSynapseSourceV2Dto, PublicGetTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into PublicCreateSourceV2201Response with oneOf schemas: PublicGetAirflowSourceV2Dto, PublicGetAthenaSourceV2Dto, PublicGetBigQuerySourceV2Dto, PublicGetDatabricksSourceV2Dto, PublicGetDbtCloudSourceV2Dto, PublicGetDbtSourceV2Dto, PublicGetFivetranSourceV2Dto, PublicGetLookerSourceV2Dto, PublicGetMicrostrategySourceV2Dto, PublicGetMssqlSourceV2Dto, PublicGetMysqlSourceV2Dto, PublicGetOracleSourceV2Dto, PublicGetPostgresqlSourceV2Dto, PublicGetPowerBiSourceV2Dto, PublicGetQlikSourceV2Dto, PublicGetQuicksightSourceV2Dto, PublicGetRedshiftSourceV2Dto, PublicGetSnowflakeSourceV2Dto, PublicGetSynapseSourceV2Dto, PublicGetTableauSourceV2Dto. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            PublicGetAirflowSourceV2Dto,
            PublicGetAthenaSourceV2Dto,
            PublicGetBigQuerySourceV2Dto,
            PublicGetDatabricksSourceV2Dto,
            PublicGetDbtCloudSourceV2Dto,
            PublicGetDbtSourceV2Dto,
            PublicGetFivetranSourceV2Dto,
            PublicGetLookerSourceV2Dto,
            PublicGetMicrostrategySourceV2Dto,
            PublicGetMssqlSourceV2Dto,
            PublicGetMysqlSourceV2Dto,
            PublicGetOracleSourceV2Dto,
            PublicGetPostgresqlSourceV2Dto,
            PublicGetPowerBiSourceV2Dto,
            PublicGetQlikSourceV2Dto,
            PublicGetQuicksightSourceV2Dto,
            PublicGetRedshiftSourceV2Dto,
            PublicGetSnowflakeSourceV2Dto,
            PublicGetSynapseSourceV2Dto,
            PublicGetTableauSourceV2Dto,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
