# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.domain_dto import DomainDto
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from typing_extensions import Self


class UserDetailDto(BaseModel):
    """
    UserDetailDto
    """  # noqa: E501

    active: Optional[StrictBool] = None
    auth_types: Optional[List[StrictStr]] = Field(default=None, alias="authTypes")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    default_admin: Optional[StrictBool] = Field(default=None, alias="defaultAdmin")
    domains: Optional[List[DomainDto]] = None
    id: StrictStr
    last_login_date: Optional[StrictInt] = Field(default=None, alias="lastLoginDate")
    last_modified_date: Optional[StrictInt] = Field(default=None, alias="lastModifiedDate")
    login: StrictStr
    modified_by: Optional[StrictStr] = Field(default=None, alias="modifiedBy")
    name: Optional[StrictStr] = None
    reset_password: Optional[StrictBool] = Field(default=None, alias="resetPassword")
    roles: StrictStr
    time_zone_data: Optional[TimeZoneDto] = Field(default=None, alias="timeZoneData")
    type: StrictStr
    __properties: ClassVar[List[str]] = [
        "active",
        "authTypes",
        "createdBy",
        "createdDate",
        "defaultAdmin",
        "domains",
        "id",
        "lastLoginDate",
        "lastModifiedDate",
        "login",
        "modifiedBy",
        "name",
        "resetPassword",
        "roles",
        "timeZoneData",
        "type",
    ]

    @field_validator("auth_types")
    def auth_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["SAML2", "LOGIN_PASSWORD"]):
                raise ValueError("each list item must be one of ('SAML2', 'LOGIN_PASSWORD')")
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["INTERNAL", "SUPPORT"]):
            raise ValueError("must be one of enum values ('INTERNAL', 'SUPPORT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in domains (list)
        _items = []
        if self.domains:
            for _item_domains in self.domains:
                if _item_domains:
                    _items.append(_item_domains.to_dict())
            _dict["domains"] = _items
        # override the default output from pydantic by calling `to_dict()` of time_zone_data
        if self.time_zone_data:
            _dict["timeZoneData"] = self.time_zone_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "active": obj.get("active"),
                "authTypes": obj.get("authTypes"),
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "defaultAdmin": obj.get("defaultAdmin"),
                "domains": (
                    [DomainDto.from_dict(_item) for _item in obj["domains"]] if obj.get("domains") is not None else None
                ),
                "id": obj.get("id"),
                "lastLoginDate": obj.get("lastLoginDate"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "login": obj.get("login"),
                "modifiedBy": obj.get("modifiedBy"),
                "name": obj.get("name"),
                "resetPassword": obj.get("resetPassword"),
                "roles": obj.get("roles"),
                "timeZoneData": (
                    TimeZoneDto.from_dict(obj["timeZoneData"]) if obj.get("timeZoneData") is not None else None
                ),
                "type": obj.get("type"),
            }
        )
        return _obj
