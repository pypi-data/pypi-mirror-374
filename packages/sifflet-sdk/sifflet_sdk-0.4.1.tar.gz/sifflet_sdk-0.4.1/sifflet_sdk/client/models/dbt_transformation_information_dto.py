# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.transformation_information_dto import (
    TransformationInformationDto,
)
from typing_extensions import Self


class DbtTransformationInformationDto(TransformationInformationDto):
    """
    DbtTransformationInformationDto
    """  # noqa: E501

    dbt_access: Optional[StrictStr] = Field(default=None, alias="dbtAccess")
    dbt_deprecation_date: Optional[StrictStr] = Field(default=None, alias="dbtDeprecationDate")
    dbt_group: Optional[StrictStr] = Field(default=None, alias="dbtGroup")
    dbt_materialization: Optional[StrictStr] = Field(default=None, alias="dbtMaterialization")
    dbt_metadata: Optional[StrictStr] = Field(default=None, alias="dbtMetadata")
    dbt_project_name: Optional[StrictStr] = Field(default=None, alias="dbtProjectName")
    last_run_date: Optional[StrictInt] = Field(default=None, alias="lastRunDate")
    last_run_status: Optional[StrictStr] = Field(default=None, alias="lastRunStatus")
    source_sql: Optional[StrictStr] = Field(default=None, alias="sourceSql")
    __properties: ClassVar[List[str]] = [
        "type",
        "dbtAccess",
        "dbtDeprecationDate",
        "dbtGroup",
        "dbtMaterialization",
        "dbtMetadata",
        "dbtProjectName",
        "lastRunDate",
        "lastRunStatus",
        "sourceSql",
    ]

    @field_validator("last_run_status")
    def last_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["SUCCESS", "ERROR", "SKIPPED", "PARTIAL_SUCCESS", "NOT_TARGETED", "UNKNOWN"]):
            raise ValueError(
                "must be one of enum values ('SUCCESS', 'ERROR', 'SKIPPED', 'PARTIAL_SUCCESS', 'NOT_TARGETED', 'UNKNOWN')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbtTransformationInformationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbtTransformationInformationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "dbtAccess": obj.get("dbtAccess"),
                "dbtDeprecationDate": obj.get("dbtDeprecationDate"),
                "dbtGroup": obj.get("dbtGroup"),
                "dbtMaterialization": obj.get("dbtMaterialization"),
                "dbtMetadata": obj.get("dbtMetadata"),
                "dbtProjectName": obj.get("dbtProjectName"),
                "lastRunDate": obj.get("lastRunDate"),
                "lastRunStatus": obj.get("lastRunStatus"),
                "sourceSql": obj.get("sourceSql"),
            }
        )
        return _obj
