# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictBytes,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
    validate_call,
)
from sifflet_sdk.client.api_client import ApiClient, RequestSerialized
from sifflet_sdk.client.api_response import ApiResponse
from sifflet_sdk.client.models.get_sifflet_rule_graph200_response_inner import (
    GetSiffletRuleGraph200ResponseInner,
)
from sifflet_sdk.client.models.group_decrypted_values_dto import GroupDecryptedValuesDto
from sifflet_sdk.client.models.rule_group_request_dto import RuleGroupRequestDto
from sifflet_sdk.client.models.rule_overview_group_count_per_status_dto import (
    RuleOverviewGroupCountPerStatusDto,
)
from sifflet_sdk.client.models.rule_run_debug_dto import RuleRunDebugDto
from sifflet_sdk.client.models.rule_run_dto import RuleRunDto
from sifflet_sdk.client.models.search_collection_rule_run_details_by_group_dto import (
    SearchCollectionRuleRunDetailsByGroupDto,
)
from sifflet_sdk.client.models.search_collection_rule_run_dto import (
    SearchCollectionRuleRunDto,
)
from sifflet_sdk.client.rest import RESTResponseType
from typing_extensions import Annotated


class RuleRunApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def decrypt_rule_run_groups(
        self,
        run_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GroupDecryptedValuesDto:
        """Decrypt rule run groups


        :param run_id: (required)
        :type run_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._decrypt_rule_run_groups_serialize(
            run_id=run_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GroupDecryptedValuesDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def decrypt_rule_run_groups_with_http_info(
        self,
        run_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GroupDecryptedValuesDto]:
        """Decrypt rule run groups


        :param run_id: (required)
        :type run_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._decrypt_rule_run_groups_serialize(
            run_id=run_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GroupDecryptedValuesDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def decrypt_rule_run_groups_without_preload_content(
        self,
        run_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Decrypt rule run groups


        :param run_id: (required)
        :type run_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._decrypt_rule_run_groups_serialize(
            run_id=run_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "GroupDecryptedValuesDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _decrypt_rule_run_groups_serialize(
        self,
        run_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/rules/runs/{runId}/decrypt",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_graph_by_run_and_group(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: RuleGroupRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetSiffletRuleGraph200ResponseInner]:
        """Get a single Sifflet rule graph


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto: (required)
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_graph_by_run_and_group_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[GetSiffletRuleGraph200ResponseInner]",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_graph_by_run_and_group_with_http_info(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: RuleGroupRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetSiffletRuleGraph200ResponseInner]]:
        """Get a single Sifflet rule graph


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto: (required)
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_graph_by_run_and_group_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[GetSiffletRuleGraph200ResponseInner]",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_graph_by_run_and_group_without_preload_content(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: RuleGroupRequestDto,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a single Sifflet rule graph


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto: (required)
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_graph_by_run_and_group_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[GetSiffletRuleGraph200ResponseInner]",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_graph_by_run_and_group_serialize(
        self,
        id,
        run_id,
        rule_group_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if rule_group_request_dto is not None:
            _body_params = rule_group_request_dto

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/ui/v1/rules/{id}/runs/{runId}/groups/_graph",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_overview_group_count_per_status(
        self,
        rule_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RuleOverviewGroupCountPerStatusDto:
        """Fetch a Sifflet rule group count per status for overview


        :param rule_id: (required)
        :type rule_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_overview_group_count_per_status_serialize(
            rule_id=rule_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleOverviewGroupCountPerStatusDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_overview_group_count_per_status_with_http_info(
        self,
        rule_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RuleOverviewGroupCountPerStatusDto]:
        """Fetch a Sifflet rule group count per status for overview


        :param rule_id: (required)
        :type rule_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_overview_group_count_per_status_serialize(
            rule_id=rule_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleOverviewGroupCountPerStatusDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_overview_group_count_per_status_without_preload_content(
        self,
        rule_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch a Sifflet rule group count per status for overview


        :param rule_id: (required)
        :type rule_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_overview_group_count_per_status_serialize(
            rule_id=rule_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleOverviewGroupCountPerStatusDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_overview_group_count_per_status_serialize(
        self,
        rule_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if rule_id is not None:
            _path_params["ruleId"] = rule_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ui/v1/rules/{ruleId}/overview/group-count-per-status",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_run(
        self,
        id: StrictStr,
        run_id: StrictStr,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RuleRunDto:
        """Get a Sifflet rule run by rule id and run id


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_serialize(
            id=id,
            run_id=run_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_run_with_http_info(
        self,
        id: StrictStr,
        run_id: StrictStr,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RuleRunDto]:
        """Get a Sifflet rule run by rule id and run id


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_serialize(
            id=id,
            run_id=run_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_run_without_preload_content(
        self,
        id: StrictStr,
        run_id: StrictStr,
        expand: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a Sifflet rule run by rule id and run id


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param expand:
        :type expand: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_serialize(
            id=id,
            run_id=run_id,
            expand=expand,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_run_serialize(
        self,
        id,
        run_id,
        expand,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "expand": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        if expand is not None:

            _query_params.append(("expand", expand))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/rules/{id}/runs/{runId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_run_details(
        self,
        id: StrictStr,
        run_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchCollectionRuleRunDetailsByGroupDto:
        """Fetch a Rule Run details


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_details_serialize(
            id=id,
            run_id=run_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_run_details_with_http_info(
        self,
        id: StrictStr,
        run_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchCollectionRuleRunDetailsByGroupDto]:
        """Fetch a Rule Run details


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_details_serialize(
            id=id,
            run_id=run_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_run_details_without_preload_content(
        self,
        id: StrictStr,
        run_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch a Rule Run details


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_details_serialize(
            id=id,
            run_id=run_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_run_details_serialize(
        self,
        id,
        run_id,
        text_search,
        page,
        items_per_page,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "sort": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        if text_search is not None:

            _query_params.append(("textSearch", text_search))

        if page is not None:

            _query_params.append(("page", page))

        if items_per_page is not None:

            _query_params.append(("itemsPerPage", items_per_page))

        if sort is not None:

            _query_params.append(("sort", sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ui/v1/rules/{id}/runs/{runId}/details",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_run_overview_details(
        self,
        rule_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        rule_group_status: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchCollectionRuleRunDetailsByGroupDto:
        """Fetch a Rule Run details for overview tab (dynamic statuses)


        :param rule_id: (required)
        :type rule_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param rule_group_status:
        :type rule_group_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_overview_details_serialize(
            rule_id=rule_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            rule_group_status=rule_group_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_run_overview_details_with_http_info(
        self,
        rule_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        rule_group_status: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchCollectionRuleRunDetailsByGroupDto]:
        """Fetch a Rule Run details for overview tab (dynamic statuses)


        :param rule_id: (required)
        :type rule_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param rule_group_status:
        :type rule_group_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_overview_details_serialize(
            rule_id=rule_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            rule_group_status=rule_group_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_run_overview_details_without_preload_content(
        self,
        rule_id: StrictStr,
        text_search: Annotated[Optional[StrictStr], Field(description="Global text search")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        rule_group_status: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch a Rule Run details for overview tab (dynamic statuses)


        :param rule_id: (required)
        :type rule_id: str
        :param text_search: Global text search
        :type text_search: str
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param rule_group_status:
        :type rule_group_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_run_overview_details_serialize(
            rule_id=rule_id,
            text_search=text_search,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            rule_group_status=rule_group_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDetailsByGroupDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_run_overview_details_serialize(
        self,
        rule_id,
        text_search,
        page,
        items_per_page,
        sort,
        rule_group_status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "sort": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if rule_id is not None:
            _path_params["ruleId"] = rule_id
        # process the query parameters
        if text_search is not None:

            _query_params.append(("textSearch", text_search))

        if page is not None:

            _query_params.append(("page", page))

        if items_per_page is not None:

            _query_params.append(("itemsPerPage", items_per_page))

        if sort is not None:

            _query_params.append(("sort", sort))

        if rule_group_status is not None:

            _query_params.append(("ruleGroupStatus", rule_group_status))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/ui/v1/rules/{ruleId}/overview/details",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_sifflet_rule_runs(
        self,
        id: StrictStr,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by run status")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchCollectionRuleRunDto:
        """Get all Sifflet rule runs by rule id


        :param id: (required)
        :type id: str
        :param status: Filter by run status
        :type status: List[str]
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_runs_serialize(
            id=id,
            status=status,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_sifflet_rule_runs_with_http_info(
        self,
        id: StrictStr,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by run status")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchCollectionRuleRunDto]:
        """Get all Sifflet rule runs by rule id


        :param id: (required)
        :type id: str
        :param status: Filter by run status
        :type status: List[str]
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_runs_serialize(
            id=id,
            status=status,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_sifflet_rule_runs_without_preload_content(
        self,
        id: StrictStr,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by run status")] = None,
        page: Annotated[
            Optional[StrictInt], Field(description="The requested page number. Zero-based page index (0..N)")
        ] = None,
        items_per_page: Annotated[
            Optional[StrictInt],
            Field(
                description="The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items"
            ),
        ] = None,
        sort: Annotated[
            Optional[List[StrictStr]],
            Field(description="The resource fields on which to apply the sort, format : property,ASC|DESC"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all Sifflet rule runs by rule id


        :param id: (required)
        :type id: str
        :param status: Filter by run status
        :type status: List[str]
        :param page: The requested page number. Zero-based page index (0..N)
        :type page: int
        :param items_per_page: The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
        :type items_per_page: int
        :param sort: The resource fields on which to apply the sort, format : property,ASC|DESC
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_sifflet_rule_runs_serialize(
            id=id,
            status=status,
            page=page,
            items_per_page=items_per_page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SearchCollectionRuleRunDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_sifflet_rule_runs_serialize(
        self,
        id,
        status,
        page,
        items_per_page,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "status": "multi",
            "sort": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        # process the query parameters
        if status is not None:

            _query_params.append(("status", status))

        if page is not None:

            _query_params.append(("page", page))

        if items_per_page is not None:

            _query_params.append(("itemsPerPage", items_per_page))

        if sort is not None:

            _query_params.append(("sort", sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1/rules/{id}/runs",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def sifflet_rule_run_debug(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RuleRunDebugDto:
        """Debug a Sifflet Rule run


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_debug_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDebugDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def sifflet_rule_run_debug_with_http_info(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RuleRunDebugDto]:
        """Debug a Sifflet Rule run


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_debug_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDebugDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def sifflet_rule_run_debug_without_preload_content(
        self,
        id: StrictStr,
        run_id: StrictStr,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Debug a Sifflet Rule run


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_debug_serialize(
            id=id,
            run_id=run_id,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "RuleRunDebugDto",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _sifflet_rule_run_debug_serialize(
        self,
        id,
        run_id,
        rule_group_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if rule_group_request_dto is not None:
            _body_params = rule_group_request_dto

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/ui/v1/rules/{id}/runs/{runId}/_debug",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def sifflet_rule_run_download_by_run(
        self,
        id: StrictStr,
        run_id: StrictStr,
        export_format: Optional[StrictStr] = None,
        filtered_column_names: Optional[List[StrictStr]] = None,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Download failing results of a Sifflet Rule run. The CSV created contains the first 20000 rows sent by the Database


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param export_format:
        :type export_format: str
        :param filtered_column_names:
        :type filtered_column_names: List[str]
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_download_by_run_serialize(
            id=id,
            run_id=run_id,
            export_format=export_format,
            filtered_column_names=filtered_column_names,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def sifflet_rule_run_download_by_run_with_http_info(
        self,
        id: StrictStr,
        run_id: StrictStr,
        export_format: Optional[StrictStr] = None,
        filtered_column_names: Optional[List[StrictStr]] = None,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Download failing results of a Sifflet Rule run. The CSV created contains the first 20000 rows sent by the Database


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param export_format:
        :type export_format: str
        :param filtered_column_names:
        :type filtered_column_names: List[str]
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_download_by_run_serialize(
            id=id,
            run_id=run_id,
            export_format=export_format,
            filtered_column_names=filtered_column_names,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def sifflet_rule_run_download_by_run_without_preload_content(
        self,
        id: StrictStr,
        run_id: StrictStr,
        export_format: Optional[StrictStr] = None,
        filtered_column_names: Optional[List[StrictStr]] = None,
        rule_group_request_dto: Optional[RuleGroupRequestDto] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download failing results of a Sifflet Rule run. The CSV created contains the first 20000 rows sent by the Database


        :param id: (required)
        :type id: str
        :param run_id: (required)
        :type run_id: str
        :param export_format:
        :type export_format: str
        :param filtered_column_names:
        :type filtered_column_names: List[str]
        :param rule_group_request_dto:
        :type rule_group_request_dto: RuleGroupRequestDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._sifflet_rule_run_download_by_run_serialize(
            id=id,
            run_id=run_id,
            export_format=export_format,
            filtered_column_names=filtered_column_names,
            rule_group_request_dto=rule_group_request_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "bytearray",
            "400": "ApiProblemSchema",
            "401": "ApiProblemSchema",
            "403": "ApiProblemSchema",
            "404": "ApiProblemSchema",
            "409": "ApiProblemSchema",
            "500": "ApiProblemSchema",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _sifflet_rule_run_download_by_run_serialize(
        self,
        id,
        run_id,
        export_format,
        filtered_column_names,
        rule_group_request_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            "filteredColumnNames": "multi",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params["id"] = id
        if run_id is not None:
            _path_params["runId"] = run_id
        # process the query parameters
        if export_format is not None:

            _query_params.append(("exportFormat", export_format))

        if filtered_column_names is not None:

            _query_params.append(("filteredColumnNames", filtered_column_names))

        # process the header parameters
        # process the form parameters
        # process the body parameter
        if rule_group_request_dto is not None:
            _body_params = rule_group_request_dto

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "text/csv", "application/problem+json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ["JWT"]

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/ui/v1/rules/{id}/runs/{runId}/_download",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
