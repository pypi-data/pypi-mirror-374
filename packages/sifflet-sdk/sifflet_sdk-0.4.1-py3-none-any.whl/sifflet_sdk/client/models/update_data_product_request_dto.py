# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from sifflet_sdk.client.models.create_data_product_request_dto_asset_input import (
    CreateDataProductRequestDtoAssetInput,
)
from sifflet_sdk.client.models.data_product_collaboration_tools_params_dto import (
    DataProductCollaborationToolsParamsDto,
)
from typing_extensions import Self


class UpdateDataProductRequestDto(BaseModel):
    """
    UpdateDataProductRequestDto
    """  # noqa: E501

    asset_input: CreateDataProductRequestDtoAssetInput = Field(alias="assetInput")
    collaboration_tools_params: DataProductCollaborationToolsParamsDto = Field(alias="collaborationToolsParams")
    description: Optional[StrictStr] = None
    mail_ids: List[StrictStr] = Field(alias="mailIds")
    ms_teams_ids: List[StrictStr] = Field(alias="msTeamsIds")
    name: StrictStr
    owner_ids: List[StrictStr] = Field(alias="ownerIds")
    sla: Optional[StrictStr] = None
    slack_channel_ids: List[StrictStr] = Field(alias="slackChannelIds")
    tag_ids: List[StrictStr] = Field(alias="tagIds")
    webhook_ids: List[StrictStr] = Field(alias="webhookIds")
    __properties: ClassVar[List[str]] = [
        "assetInput",
        "collaborationToolsParams",
        "description",
        "mailIds",
        "msTeamsIds",
        "name",
        "ownerIds",
        "sla",
        "slackChannelIds",
        "tagIds",
        "webhookIds",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDataProductRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_input
        if self.asset_input:
            _dict["assetInput"] = self.asset_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collaboration_tools_params
        if self.collaboration_tools_params:
            _dict["collaborationToolsParams"] = self.collaboration_tools_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDataProductRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assetInput": (
                    CreateDataProductRequestDtoAssetInput.from_dict(obj["assetInput"])
                    if obj.get("assetInput") is not None
                    else None
                ),
                "collaborationToolsParams": (
                    DataProductCollaborationToolsParamsDto.from_dict(obj["collaborationToolsParams"])
                    if obj.get("collaborationToolsParams") is not None
                    else None
                ),
                "description": obj.get("description"),
                "mailIds": obj.get("mailIds"),
                "msTeamsIds": obj.get("msTeamsIds"),
                "name": obj.get("name"),
                "ownerIds": obj.get("ownerIds"),
                "sla": obj.get("sla"),
                "slackChannelIds": obj.get("slackChannelIds"),
                "tagIds": obj.get("tagIds"),
                "webhookIds": obj.get("webhookIds"),
            }
        )
        return _obj
