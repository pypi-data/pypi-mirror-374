# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from sifflet_sdk.client.models.public_declarative_asset_dto import (
    PublicDeclarativeAssetDto,
)
from sifflet_sdk.client.models.public_declarative_lineage_dto import (
    PublicDeclarativeLineageDto,
)
from sifflet_sdk.client.models.public_declarative_source_dto import (
    PublicDeclarativeSourceDto,
)
from typing_extensions import Self


class PublicDeclarativePayloadDto(BaseModel):
    """
    PublicDeclarativePayloadDto
    """  # noqa: E501

    assets: Optional[List[PublicDeclarativeAssetDto]] = Field(
        default=None,
        description="Use this parameter to declare assets and their associated links. It is recommended to use the `lineages` object of the `assets` array of objects rather than the `lineages` array of objects for cases where you want to declare assets and their corresponding lineage links.",
    )
    lineages: Optional[List[PublicDeclarativeLineageDto]] = Field(
        default=None,
        description="Use this parameter to declare lineage links between assets. It is recommended to use the `lineages` arrays of objects object rather than the `lineages` object of the `assets` array of objects for cases where you want to declare lineage links between existing assets.",
    )
    sources: Optional[List[PublicDeclarativeSourceDto]] = Field(
        default=None,
        description="Declaring sources is optional. Declaring a source is useful if you want to attach it specific metadata (e.g. a name, a description, etc.). If no source is declared, Sifflet automatically adds declared assets to sources using declared assets URIs.",
    )
    workspace: StrictStr = Field(
        description='Name of the workspace containing declared assets and sources. <a href="https://docs.siffletdata.com/docs/declarative-assets#workspaces">[Read more about workspaces]</a>'
    )
    __properties: ClassVar[List[str]] = ["assets", "lineages", "sources", "workspace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicDeclarativePayloadDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item_assets in self.assets:
                if _item_assets:
                    _items.append(_item_assets.to_dict())
            _dict["assets"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lineages (list)
        _items = []
        if self.lineages:
            for _item_lineages in self.lineages:
                if _item_lineages:
                    _items.append(_item_lineages.to_dict())
            _dict["lineages"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict["sources"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicDeclarativePayloadDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assets": (
                    [PublicDeclarativeAssetDto.from_dict(_item) for _item in obj["assets"]]
                    if obj.get("assets") is not None
                    else None
                ),
                "lineages": (
                    [PublicDeclarativeLineageDto.from_dict(_item) for _item in obj["lineages"]]
                    if obj.get("lineages") is not None
                    else None
                ),
                "sources": (
                    [PublicDeclarativeSourceDto.from_dict(_item) for _item in obj["sources"]]
                    if obj.get("sources") is not None
                    else None
                ),
                "workspace": obj.get("workspace"),
            }
        )
        return _obj
