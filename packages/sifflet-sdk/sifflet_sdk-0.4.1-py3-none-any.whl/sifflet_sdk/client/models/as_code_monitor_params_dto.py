# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.as_code_completeness_monitor_params_dto import (
        AsCodeCompletenessMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_conditional_monitor_params_dto import (
        AsCodeConditionalMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_correlated_metrics_monitor_params_dto import (
        AsCodeCorrelatedMetricsMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v1 import (
        AsCodeCustomMetricsMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v2 import (
        AsCodeCustomMetricsMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_distribution_monitor_params_dto import (
        AsCodeDistributionMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_duplicates_monitor_params_dto import (
        AsCodeDuplicatesMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_dynamic_field_profiling_monitor_params_dto import (
        AsCodeDynamicFieldProfilingMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_dynamic_metric_monitor_params_dto import (
        AsCodeDynamicMetricMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_field_duplicates_monitor_params_dto import (
        AsCodeFieldDuplicatesMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v1 import (
        AsCodeFieldFormatMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v2 import (
        AsCodeFieldFormatMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v1 import (
        AsCodeFieldInListConstraintMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v2 import (
        AsCodeFieldInListConstraintMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_field_nulls_monitor_params_dto import (
        AsCodeFieldNullsMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_field_uniqueness_monitor_params_dto import (
        AsCodeFieldUniquenessMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v1 import (
        AsCodeFreshnessMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v2 import (
        AsCodeFreshnessMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v1 import (
        AsCodeMetadataFreshnessMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v2 import (
        AsCodeMetadataFreshnessMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_metrics_monitor_params_dto import (
        AsCodeMetricsMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v1 import (
        AsCodeReferentialIntegrityMonitorParamsDtoV1,
    )
    from sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v2 import (
        AsCodeReferentialIntegrityMonitorParamsDtoV2,
    )
    from sifflet_sdk.client.models.as_code_row_duplicates_monitor_params_dto import (
        AsCodeRowDuplicatesMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_schema_change_monitor_params_dto import (
        AsCodeSchemaChangeMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_sql_monitor_params_dto import (
        AsCodeSqlMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_static_completeness_monitor_params_dto import (
        AsCodeStaticCompletenessMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_static_field_profiling_monitor_params_dto import (
        AsCodeStaticFieldProfilingMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_static_metric_monitor_params_dto import (
        AsCodeStaticMetricMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_value_range_monitor_params_dto import (
        AsCodeValueRangeMonitorParamsDto,
    )
    from sifflet_sdk.client.models.as_code_volume_monitor_params_dto import (
        AsCodeVolumeMonitorParamsDto,
    )


class AsCodeMonitorParamsDto(BaseModel):
    """
    AsCodeMonitorParamsDto
    """  # noqa: E501

    kind: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["kind"]

    @field_validator("kind")
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Metrics",
                "Freshness",
                "RowDuplicates",
                "FieldUniqueness",
                "SchemaChange",
                "Sql",
                "Conditional",
                "CorrelatedMetrics",
                "Distribution",
                "CustomMetrics",
                "FieldFormat",
                "FieldInList",
                "MetadataFreshness",
                "ReferentialIntegrity",
                "Volume",
                "ValueRange",
                "FieldDuplicates",
                "FieldNulls",
                "StaticFieldProfiling",
                "DynamicFieldProfiling",
                "StaticMetrics",
                "DynamicMetrics",
                "Completeness",
                "StaticCompleteness",
                "Duplicates",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Metrics', 'Freshness', 'RowDuplicates', 'FieldUniqueness', 'SchemaChange', 'Sql', 'Conditional', 'CorrelatedMetrics', 'Distribution', 'CustomMetrics', 'FieldFormat', 'FieldInList', 'MetadataFreshness', 'ReferentialIntegrity', 'Volume', 'ValueRange', 'FieldDuplicates', 'FieldNulls', 'StaticFieldProfiling', 'DynamicFieldProfiling', 'StaticMetrics', 'DynamicMetrics', 'Completeness', 'StaticCompleteness', 'Duplicates')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "kind"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "AsCodeCompletenessMonitorParamsDto": "AsCodeCompletenessMonitorParamsDto",
        "AsCodeConditionalMonitorParamsDto": "AsCodeConditionalMonitorParamsDto",
        "AsCodeCorrelatedMetricsMonitorParamsDto": "AsCodeCorrelatedMetricsMonitorParamsDto",
        "AsCodeCustomMetricsMonitorParamsDtoV1": "AsCodeCustomMetricsMonitorParamsDtoV1",
        "AsCodeCustomMetricsMonitorParamsDtoV2": "AsCodeCustomMetricsMonitorParamsDtoV2",
        "AsCodeDistributionMonitorParamsDto": "AsCodeDistributionMonitorParamsDto",
        "AsCodeDuplicatesMonitorParamsDto": "AsCodeDuplicatesMonitorParamsDto",
        "AsCodeDynamicFieldProfilingMonitorParamsDto": "AsCodeDynamicFieldProfilingMonitorParamsDto",
        "AsCodeDynamicMetricMonitorParamsDto": "AsCodeDynamicMetricMonitorParamsDto",
        "AsCodeFieldDuplicatesMonitorParamsDto": "AsCodeFieldDuplicatesMonitorParamsDto",
        "AsCodeFieldFormatMonitorParamsDtoV1": "AsCodeFieldFormatMonitorParamsDtoV1",
        "AsCodeFieldFormatMonitorParamsDtoV2": "AsCodeFieldFormatMonitorParamsDtoV2",
        "AsCodeFieldInListConstraintMonitorParamsDtoV1": "AsCodeFieldInListConstraintMonitorParamsDtoV1",
        "AsCodeFieldInListConstraintMonitorParamsDtoV2": "AsCodeFieldInListConstraintMonitorParamsDtoV2",
        "AsCodeFieldNullsMonitorParamsDto": "AsCodeFieldNullsMonitorParamsDto",
        "AsCodeFieldUniquenessMonitorParamsDto": "AsCodeFieldUniquenessMonitorParamsDto",
        "AsCodeFreshnessMonitorParamsDtoV1": "AsCodeFreshnessMonitorParamsDtoV1",
        "AsCodeFreshnessMonitorParamsDtoV2": "AsCodeFreshnessMonitorParamsDtoV2",
        "AsCodeMetadataFreshnessMonitorParamsDtoV1": "AsCodeMetadataFreshnessMonitorParamsDtoV1",
        "AsCodeMetadataFreshnessMonitorParamsDtoV2": "AsCodeMetadataFreshnessMonitorParamsDtoV2",
        "AsCodeMetricsMonitorParamsDto": "AsCodeMetricsMonitorParamsDto",
        "AsCodeReferentialIntegrityMonitorParamsDtoV1": "AsCodeReferentialIntegrityMonitorParamsDtoV1",
        "AsCodeReferentialIntegrityMonitorParamsDtoV2": "AsCodeReferentialIntegrityMonitorParamsDtoV2",
        "AsCodeRowDuplicatesMonitorParamsDto": "AsCodeRowDuplicatesMonitorParamsDto",
        "AsCodeSchemaChangeMonitorParamsDto": "AsCodeSchemaChangeMonitorParamsDto",
        "AsCodeSqlMonitorParamsDto": "AsCodeSqlMonitorParamsDto",
        "AsCodeStaticCompletenessMonitorParamsDto": "AsCodeStaticCompletenessMonitorParamsDto",
        "AsCodeStaticFieldProfilingMonitorParamsDto": "AsCodeStaticFieldProfilingMonitorParamsDto",
        "AsCodeStaticMetricMonitorParamsDto": "AsCodeStaticMetricMonitorParamsDto",
        "AsCodeValueRangeMonitorParamsDto": "AsCodeValueRangeMonitorParamsDto",
        "AsCodeVolumeMonitorParamsDto": "AsCodeVolumeMonitorParamsDto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            AsCodeCompletenessMonitorParamsDto,
            AsCodeConditionalMonitorParamsDto,
            AsCodeCorrelatedMetricsMonitorParamsDto,
            AsCodeCustomMetricsMonitorParamsDtoV1,
            AsCodeCustomMetricsMonitorParamsDtoV2,
            AsCodeDistributionMonitorParamsDto,
            AsCodeDuplicatesMonitorParamsDto,
            AsCodeDynamicFieldProfilingMonitorParamsDto,
            AsCodeDynamicMetricMonitorParamsDto,
            AsCodeFieldDuplicatesMonitorParamsDto,
            AsCodeFieldFormatMonitorParamsDtoV1,
            AsCodeFieldFormatMonitorParamsDtoV2,
            AsCodeFieldInListConstraintMonitorParamsDtoV1,
            AsCodeFieldInListConstraintMonitorParamsDtoV2,
            AsCodeFieldNullsMonitorParamsDto,
            AsCodeFieldUniquenessMonitorParamsDto,
            AsCodeFreshnessMonitorParamsDtoV1,
            AsCodeFreshnessMonitorParamsDtoV2,
            AsCodeMetadataFreshnessMonitorParamsDtoV1,
            AsCodeMetadataFreshnessMonitorParamsDtoV2,
            AsCodeMetricsMonitorParamsDto,
            AsCodeReferentialIntegrityMonitorParamsDtoV1,
            AsCodeReferentialIntegrityMonitorParamsDtoV2,
            AsCodeRowDuplicatesMonitorParamsDto,
            AsCodeSchemaChangeMonitorParamsDto,
            AsCodeSqlMonitorParamsDto,
            AsCodeStaticCompletenessMonitorParamsDto,
            AsCodeStaticFieldProfilingMonitorParamsDto,
            AsCodeStaticMetricMonitorParamsDto,
            AsCodeValueRangeMonitorParamsDto,
            AsCodeVolumeMonitorParamsDto,
        ]
    ]:
        """Create an instance of AsCodeMonitorParamsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            AsCodeCompletenessMonitorParamsDto,
            AsCodeConditionalMonitorParamsDto,
            AsCodeCorrelatedMetricsMonitorParamsDto,
            AsCodeCustomMetricsMonitorParamsDtoV1,
            AsCodeCustomMetricsMonitorParamsDtoV2,
            AsCodeDistributionMonitorParamsDto,
            AsCodeDuplicatesMonitorParamsDto,
            AsCodeDynamicFieldProfilingMonitorParamsDto,
            AsCodeDynamicMetricMonitorParamsDto,
            AsCodeFieldDuplicatesMonitorParamsDto,
            AsCodeFieldFormatMonitorParamsDtoV1,
            AsCodeFieldFormatMonitorParamsDtoV2,
            AsCodeFieldInListConstraintMonitorParamsDtoV1,
            AsCodeFieldInListConstraintMonitorParamsDtoV2,
            AsCodeFieldNullsMonitorParamsDto,
            AsCodeFieldUniquenessMonitorParamsDto,
            AsCodeFreshnessMonitorParamsDtoV1,
            AsCodeFreshnessMonitorParamsDtoV2,
            AsCodeMetadataFreshnessMonitorParamsDtoV1,
            AsCodeMetadataFreshnessMonitorParamsDtoV2,
            AsCodeMetricsMonitorParamsDto,
            AsCodeReferentialIntegrityMonitorParamsDtoV1,
            AsCodeReferentialIntegrityMonitorParamsDtoV2,
            AsCodeRowDuplicatesMonitorParamsDto,
            AsCodeSchemaChangeMonitorParamsDto,
            AsCodeSqlMonitorParamsDto,
            AsCodeStaticCompletenessMonitorParamsDto,
            AsCodeStaticFieldProfilingMonitorParamsDto,
            AsCodeStaticMetricMonitorParamsDto,
            AsCodeValueRangeMonitorParamsDto,
            AsCodeVolumeMonitorParamsDto,
        ]
    ]:
        """Create an instance of AsCodeMonitorParamsDto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AsCodeCompletenessMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_completeness_monitor_params_dto"
            ).AsCodeCompletenessMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeConditionalMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_conditional_monitor_params_dto"
            ).AsCodeConditionalMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeCorrelatedMetricsMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_correlated_metrics_monitor_params_dto"
            ).AsCodeCorrelatedMetricsMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeCustomMetricsMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v1"
            ).AsCodeCustomMetricsMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeCustomMetricsMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_custom_metrics_monitor_params_dto_v2"
            ).AsCodeCustomMetricsMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeDistributionMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_distribution_monitor_params_dto"
            ).AsCodeDistributionMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeDuplicatesMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_duplicates_monitor_params_dto"
            ).AsCodeDuplicatesMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeDynamicFieldProfilingMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_dynamic_field_profiling_monitor_params_dto"
            ).AsCodeDynamicFieldProfilingMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeDynamicMetricMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_dynamic_metric_monitor_params_dto"
            ).AsCodeDynamicMetricMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeFieldDuplicatesMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_duplicates_monitor_params_dto"
            ).AsCodeFieldDuplicatesMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeFieldFormatMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v1"
            ).AsCodeFieldFormatMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeFieldFormatMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_format_monitor_params_dto_v2"
            ).AsCodeFieldFormatMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeFieldInListConstraintMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v1"
            ).AsCodeFieldInListConstraintMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeFieldInListConstraintMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_in_list_constraint_monitor_params_dto_v2"
            ).AsCodeFieldInListConstraintMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeFieldNullsMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_nulls_monitor_params_dto"
            ).AsCodeFieldNullsMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeFieldUniquenessMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_field_uniqueness_monitor_params_dto"
            ).AsCodeFieldUniquenessMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeFreshnessMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v1"
            ).AsCodeFreshnessMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeFreshnessMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_freshness_monitor_params_dto_v2"
            ).AsCodeFreshnessMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeMetadataFreshnessMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v1"
            ).AsCodeMetadataFreshnessMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeMetadataFreshnessMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_metadata_freshness_monitor_params_dto_v2"
            ).AsCodeMetadataFreshnessMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeMetricsMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_metrics_monitor_params_dto"
            ).AsCodeMetricsMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeReferentialIntegrityMonitorParamsDtoV1":
            return import_module(
                "sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v1"
            ).AsCodeReferentialIntegrityMonitorParamsDtoV1.from_dict(obj)
        if object_type == "AsCodeReferentialIntegrityMonitorParamsDtoV2":
            return import_module(
                "sifflet_sdk.client.models.as_code_referential_integrity_monitor_params_dto_v2"
            ).AsCodeReferentialIntegrityMonitorParamsDtoV2.from_dict(obj)
        if object_type == "AsCodeRowDuplicatesMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_row_duplicates_monitor_params_dto"
            ).AsCodeRowDuplicatesMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeSchemaChangeMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_schema_change_monitor_params_dto"
            ).AsCodeSchemaChangeMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeSqlMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_sql_monitor_params_dto"
            ).AsCodeSqlMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeStaticCompletenessMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_static_completeness_monitor_params_dto"
            ).AsCodeStaticCompletenessMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeStaticFieldProfilingMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_static_field_profiling_monitor_params_dto"
            ).AsCodeStaticFieldProfilingMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeStaticMetricMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_static_metric_monitor_params_dto"
            ).AsCodeStaticMetricMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeValueRangeMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_value_range_monitor_params_dto"
            ).AsCodeValueRangeMonitorParamsDto.from_dict(obj)
        if object_type == "AsCodeVolumeMonitorParamsDto":
            return import_module(
                "sifflet_sdk.client.models.as_code_volume_monitor_params_dto"
            ).AsCodeVolumeMonitorParamsDto.from_dict(obj)

        raise ValueError(
            "AsCodeMonitorParamsDto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
