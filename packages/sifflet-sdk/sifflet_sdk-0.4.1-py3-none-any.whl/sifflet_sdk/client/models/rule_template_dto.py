# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class RuleTemplateDto(BaseModel):
    """
    RuleTemplateDto
    """  # noqa: E501

    description: Optional[StrictStr] = None
    enabled: StrictBool
    input: Optional[Dict[str, Any]] = None
    label: Optional[StrictStr] = None
    name: StrictStr
    support_as_code_yaml_conversion: StrictBool = Field(alias="supportAsCodeYAMLConversion")
    supports_joining: StrictBool = Field(alias="supportsJoining")
    target: StrictStr
    testable: StrictBool
    version: StrictStr
    __properties: ClassVar[List[str]] = [
        "description",
        "enabled",
        "input",
        "label",
        "name",
        "supportAsCodeYAMLConversion",
        "supportsJoining",
        "target",
        "testable",
        "version",
    ]

    @field_validator("target")
    def target_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["FIELD", "DATASET", "MULTIFIELD"]):
            raise ValueError("must be one of enum values ('FIELD', 'DATASET', 'MULTIFIELD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleTemplateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleTemplateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "description": obj.get("description"),
                "enabled": obj.get("enabled"),
                "input": obj.get("input"),
                "label": obj.get("label"),
                "name": obj.get("name"),
                "supportAsCodeYAMLConversion": obj.get("supportAsCodeYAMLConversion"),
                "supportsJoining": obj.get("supportsJoining"),
                "target": obj.get("target"),
                "testable": obj.get("testable"),
                "version": obj.get("version"),
            }
        )
        return _obj
