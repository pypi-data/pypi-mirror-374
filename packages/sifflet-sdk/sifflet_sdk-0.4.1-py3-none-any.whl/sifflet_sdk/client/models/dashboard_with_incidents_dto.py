# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.incident_external_dto import IncidentExternalDto
from sifflet_sdk.client.models.tag_dto import TagDto
from sifflet_sdk.client.models.user_dto import UserDto
from typing_extensions import Self


class DashboardWithIncidentsDto(BaseModel):
    """
    DashboardWithIncidentsDto
    """  # noqa: E501

    datasource_id: StrictStr = Field(alias="datasourceId")
    datasource_name: StrictStr = Field(alias="datasourceName")
    datasource_type: StrictStr = Field(alias="datasourceType")
    description: Optional[StrictStr] = None
    favorite_count: StrictInt = Field(alias="favoriteCount")
    incidents: List[IncidentExternalDto]
    owners: List[UserDto]
    source_dashboard_id: StrictStr = Field(alias="sourceDashboardId")
    source_description: Optional[StrictStr] = Field(default=None, alias="sourceDescription")
    tags: List[TagDto]
    terms: List[TagDto]
    title: StrictStr
    type: StrictStr
    urn: StrictStr
    view_count: StrictInt = Field(alias="viewCount")
    __properties: ClassVar[List[str]] = [
        "datasourceId",
        "datasourceName",
        "datasourceType",
        "description",
        "favoriteCount",
        "incidents",
        "owners",
        "sourceDashboardId",
        "sourceDescription",
        "tags",
        "terms",
        "title",
        "type",
        "urn",
        "viewCount",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "LOOKER_DASHBOARD",
                "TABLEAU_DASHBOARD",
                "MICROSTRATEGY_DASHBOARD",
                "MICROSTRATEGY_REPORT",
                "POWERBI_REPORT",
                "POWERBI_DASHBOARD",
                "QLIK_APP",
                "QUICKSIGHT_DASHBOARD",
                "QUICKSIGHT_ANALYSIS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('LOOKER_DASHBOARD', 'TABLEAU_DASHBOARD', 'MICROSTRATEGY_DASHBOARD', 'MICROSTRATEGY_REPORT', 'POWERBI_REPORT', 'POWERBI_DASHBOARD', 'QLIK_APP', 'QUICKSIGHT_DASHBOARD', 'QUICKSIGHT_ANALYSIS')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardWithIncidentsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in incidents (list)
        _items = []
        if self.incidents:
            for _item_incidents in self.incidents:
                if _item_incidents:
                    _items.append(_item_incidents.to_dict())
            _dict["incidents"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict["owners"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardWithIncidentsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "datasourceId": obj.get("datasourceId"),
                "datasourceName": obj.get("datasourceName"),
                "datasourceType": obj.get("datasourceType"),
                "description": obj.get("description"),
                "favoriteCount": obj.get("favoriteCount"),
                "incidents": (
                    [IncidentExternalDto.from_dict(_item) for _item in obj["incidents"]]
                    if obj.get("incidents") is not None
                    else None
                ),
                "owners": (
                    [UserDto.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None
                ),
                "sourceDashboardId": obj.get("sourceDashboardId"),
                "sourceDescription": obj.get("sourceDescription"),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "terms": [TagDto.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
                "title": obj.get("title"),
                "type": obj.get("type"),
                "urn": obj.get("urn"),
                "viewCount": obj.get("viewCount"),
            }
        )
        return _obj
