# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class StronglyTypedRuleInputParams(BaseModel):
    """
    StronglyTypedRuleInputParams
    """  # noqa: E501

    dataset_field_name: Optional[StrictStr] = Field(default=None, alias="datasetFieldName")
    dataset_field_names: Optional[List[StrictStr]] = Field(default=None, alias="datasetFieldNames")
    end_value: Optional[StrictInt] = Field(default=None, alias="endValue")
    group_by_fields: Optional[List[StrictStr]] = Field(default=None, alias="groupByFields")
    has_group_by: Optional[StrictBool] = Field(default=None, alias="hasGroupBy")
    has_offset: Optional[StrictBool] = Field(default=None, alias="hasOffset")
    has_time_window: Optional[StrictBool] = Field(default=None, alias="hasTimeWindow")
    has_where_statement: Optional[StrictBool] = Field(default=None, alias="hasWhereStatement")
    is_partition_query: Optional[StrictBool] = Field(default=None, alias="isPartitionQuery")
    partitioning_field: Optional[StrictStr] = Field(default=None, alias="partitioningField")
    partitioning_interval: Optional[StrictInt] = Field(default=None, alias="partitioningInterval")
    partitioning_time_unit: Optional[StrictStr] = Field(default=None, alias="partitioningTimeUnit")
    start_value: Optional[StrictInt] = Field(default=None, alias="startValue")
    time_window_field: Optional[StrictStr] = Field(default=None, alias="timeWindowField")
    transformation_type: Optional[StrictStr] = Field(default=None, alias="transformationType")
    where_statement: Optional[StrictStr] = Field(default=None, alias="whereStatement")
    __properties: ClassVar[List[str]] = [
        "datasetFieldName",
        "datasetFieldNames",
        "endValue",
        "groupByFields",
        "hasGroupBy",
        "hasOffset",
        "hasTimeWindow",
        "hasWhereStatement",
        "isPartitionQuery",
        "partitioningField",
        "partitioningInterval",
        "partitioningTimeUnit",
        "startValue",
        "timeWindowField",
        "transformationType",
        "whereStatement",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StronglyTypedRuleInputParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StronglyTypedRuleInputParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "datasetFieldName": obj.get("datasetFieldName"),
                "datasetFieldNames": obj.get("datasetFieldNames"),
                "endValue": obj.get("endValue"),
                "groupByFields": obj.get("groupByFields"),
                "hasGroupBy": obj.get("hasGroupBy"),
                "hasOffset": obj.get("hasOffset"),
                "hasTimeWindow": obj.get("hasTimeWindow"),
                "hasWhereStatement": obj.get("hasWhereStatement"),
                "isPartitionQuery": obj.get("isPartitionQuery"),
                "partitioningField": obj.get("partitioningField"),
                "partitioningInterval": obj.get("partitioningInterval"),
                "partitioningTimeUnit": obj.get("partitioningTimeUnit"),
                "startValue": obj.get("startValue"),
                "timeWindowField": obj.get("timeWindowField"),
                "transformationType": obj.get("transformationType"),
                "whereStatement": obj.get("whereStatement"),
            }
        )
        return _obj
