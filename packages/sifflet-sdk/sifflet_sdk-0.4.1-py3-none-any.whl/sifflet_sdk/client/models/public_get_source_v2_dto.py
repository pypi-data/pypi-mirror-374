# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.public_get_last_run_v2_dto import PublicGetLastRunV2Dto
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.public_get_airflow_source_v2_dto import (
        PublicGetAirflowSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_athena_source_v2_dto import (
        PublicGetAthenaSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_big_query_source_v2_dto import (
        PublicGetBigQuerySourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_databricks_source_v2_dto import (
        PublicGetDatabricksSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_dbt_cloud_source_v2_dto import (
        PublicGetDbtCloudSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_dbt_source_v2_dto import (
        PublicGetDbtSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_fivetran_source_v2_dto import (
        PublicGetFivetranSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_looker_source_v2_dto import (
        PublicGetLookerSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_microstrategy_source_v2_dto import (
        PublicGetMicrostrategySourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_mssql_source_v2_dto import (
        PublicGetMssqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_mysql_source_v2_dto import (
        PublicGetMysqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_oracle_source_v2_dto import (
        PublicGetOracleSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_postgresql_source_v2_dto import (
        PublicGetPostgresqlSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_power_bi_source_v2_dto import (
        PublicGetPowerBiSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_qlik_source_v2_dto import (
        PublicGetQlikSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_quicksight_source_v2_dto import (
        PublicGetQuicksightSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_redshift_source_v2_dto import (
        PublicGetRedshiftSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_snowflake_source_v2_dto import (
        PublicGetSnowflakeSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_synapse_source_v2_dto import (
        PublicGetSynapseSourceV2Dto,
    )
    from sifflet_sdk.client.models.public_get_tableau_source_v2_dto import (
        PublicGetTableauSourceV2Dto,
    )


class PublicGetSourceV2Dto(BaseModel):
    """
    PublicGetSourceV2Dto
    """  # noqa: E501

    id: Optional[StrictStr] = Field(default=None, description="id the source")
    last_run: Optional[PublicGetLastRunV2Dto] = Field(default=None, alias="lastRun")
    name: StrictStr = Field(description="Name of the source")
    timezone: Optional[StrictStr] = Field(
        default="UTC", description="A string representing a timezone identifier (e.g. 'UTC' or 'Europe/Paris')"
    )
    type: StrictStr = Field(description="Source type")
    __properties: ClassVar[List[str]] = ["id", "lastRun", "name", "timezone", "type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRESQL",
                "ORACLE",
                "SYNAPSE",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "MICROSTRATEGY",
                "QLIK",
                "AIRFLOW",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "POWER_BI",
                "DECLARATIVE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRESQL', 'ORACLE', 'SYNAPSE', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'MICROSTRATEGY', 'QLIK', 'AIRFLOW', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'POWER_BI', 'DECLARATIVE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "PublicGetAirflowSourceV2Dto": "PublicGetAirflowSourceV2Dto",
        "PublicGetAthenaSourceV2Dto": "PublicGetAthenaSourceV2Dto",
        "PublicGetBigQuerySourceV2Dto": "PublicGetBigQuerySourceV2Dto",
        "PublicGetDatabricksSourceV2Dto": "PublicGetDatabricksSourceV2Dto",
        "PublicGetDbtCloudSourceV2Dto": "PublicGetDbtCloudSourceV2Dto",
        "PublicGetDbtSourceV2Dto": "PublicGetDbtSourceV2Dto",
        "PublicGetFivetranSourceV2Dto": "PublicGetFivetranSourceV2Dto",
        "PublicGetLookerSourceV2Dto": "PublicGetLookerSourceV2Dto",
        "PublicGetMicrostrategySourceV2Dto": "PublicGetMicrostrategySourceV2Dto",
        "PublicGetMssqlSourceV2Dto": "PublicGetMssqlSourceV2Dto",
        "PublicGetMysqlSourceV2Dto": "PublicGetMysqlSourceV2Dto",
        "PublicGetOracleSourceV2Dto": "PublicGetOracleSourceV2Dto",
        "PublicGetPostgresqlSourceV2Dto": "PublicGetPostgresqlSourceV2Dto",
        "PublicGetPowerBiSourceV2Dto": "PublicGetPowerBiSourceV2Dto",
        "PublicGetQlikSourceV2Dto": "PublicGetQlikSourceV2Dto",
        "PublicGetQuicksightSourceV2Dto": "PublicGetQuicksightSourceV2Dto",
        "PublicGetRedshiftSourceV2Dto": "PublicGetRedshiftSourceV2Dto",
        "PublicGetSnowflakeSourceV2Dto": "PublicGetSnowflakeSourceV2Dto",
        "PublicGetSynapseSourceV2Dto": "PublicGetSynapseSourceV2Dto",
        "PublicGetTableauSourceV2Dto": "PublicGetTableauSourceV2Dto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            PublicGetAirflowSourceV2Dto,
            PublicGetAthenaSourceV2Dto,
            PublicGetBigQuerySourceV2Dto,
            PublicGetDatabricksSourceV2Dto,
            PublicGetDbtCloudSourceV2Dto,
            PublicGetDbtSourceV2Dto,
            PublicGetFivetranSourceV2Dto,
            PublicGetLookerSourceV2Dto,
            PublicGetMicrostrategySourceV2Dto,
            PublicGetMssqlSourceV2Dto,
            PublicGetMysqlSourceV2Dto,
            PublicGetOracleSourceV2Dto,
            PublicGetPostgresqlSourceV2Dto,
            PublicGetPowerBiSourceV2Dto,
            PublicGetQlikSourceV2Dto,
            PublicGetQuicksightSourceV2Dto,
            PublicGetRedshiftSourceV2Dto,
            PublicGetSnowflakeSourceV2Dto,
            PublicGetSynapseSourceV2Dto,
            PublicGetTableauSourceV2Dto,
        ]
    ]:
        """Create an instance of PublicGetSourceV2Dto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_run
        if self.last_run:
            _dict["lastRun"] = self.last_run.to_dict()
        # set to None if last_run (nullable) is None
        # and model_fields_set contains the field
        if self.last_run is None and "last_run" in self.model_fields_set:
            _dict["lastRun"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            PublicGetAirflowSourceV2Dto,
            PublicGetAthenaSourceV2Dto,
            PublicGetBigQuerySourceV2Dto,
            PublicGetDatabricksSourceV2Dto,
            PublicGetDbtCloudSourceV2Dto,
            PublicGetDbtSourceV2Dto,
            PublicGetFivetranSourceV2Dto,
            PublicGetLookerSourceV2Dto,
            PublicGetMicrostrategySourceV2Dto,
            PublicGetMssqlSourceV2Dto,
            PublicGetMysqlSourceV2Dto,
            PublicGetOracleSourceV2Dto,
            PublicGetPostgresqlSourceV2Dto,
            PublicGetPowerBiSourceV2Dto,
            PublicGetQlikSourceV2Dto,
            PublicGetQuicksightSourceV2Dto,
            PublicGetRedshiftSourceV2Dto,
            PublicGetSnowflakeSourceV2Dto,
            PublicGetSynapseSourceV2Dto,
            PublicGetTableauSourceV2Dto,
        ]
    ]:
        """Create an instance of PublicGetSourceV2Dto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "PublicGetAirflowSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_airflow_source_v2_dto"
            ).PublicGetAirflowSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetAthenaSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_athena_source_v2_dto"
            ).PublicGetAthenaSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetBigQuerySourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_big_query_source_v2_dto"
            ).PublicGetBigQuerySourceV2Dto.from_dict(obj)
        if object_type == "PublicGetDatabricksSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_databricks_source_v2_dto"
            ).PublicGetDatabricksSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetDbtCloudSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_dbt_cloud_source_v2_dto"
            ).PublicGetDbtCloudSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetDbtSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_dbt_source_v2_dto"
            ).PublicGetDbtSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetFivetranSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_fivetran_source_v2_dto"
            ).PublicGetFivetranSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetLookerSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_looker_source_v2_dto"
            ).PublicGetLookerSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetMicrostrategySourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_microstrategy_source_v2_dto"
            ).PublicGetMicrostrategySourceV2Dto.from_dict(obj)
        if object_type == "PublicGetMssqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_mssql_source_v2_dto"
            ).PublicGetMssqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetMysqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_mysql_source_v2_dto"
            ).PublicGetMysqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetOracleSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_oracle_source_v2_dto"
            ).PublicGetOracleSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetPostgresqlSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_postgresql_source_v2_dto"
            ).PublicGetPostgresqlSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetPowerBiSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_power_bi_source_v2_dto"
            ).PublicGetPowerBiSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetQlikSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_qlik_source_v2_dto"
            ).PublicGetQlikSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetQuicksightSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_quicksight_source_v2_dto"
            ).PublicGetQuicksightSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetRedshiftSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_redshift_source_v2_dto"
            ).PublicGetRedshiftSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetSnowflakeSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_snowflake_source_v2_dto"
            ).PublicGetSnowflakeSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetSynapseSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_synapse_source_v2_dto"
            ).PublicGetSynapseSourceV2Dto.from_dict(obj)
        if object_type == "PublicGetTableauSourceV2Dto":
            return import_module(
                "sifflet_sdk.client.models.public_get_tableau_source_v2_dto"
            ).PublicGetTableauSourceV2Dto.from_dict(obj)

        raise ValueError(
            "PublicGetSourceV2Dto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
