# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.o_auth2_microsoft_entra_id_connection_params import (
        OAuth2MicrosoftEntraIDConnectionParams,
    )
    from sifflet_sdk.client.models.snowflake_native_app_connection_params import (
        SnowflakeNativeAppConnectionParams,
    )
    from sifflet_sdk.client.models.user_password_connection_params import (
        UserPasswordConnectionParams,
    )
    from sifflet_sdk.client.models.user_private_key_connection_params import (
        UserPrivateKeyConnectionParams,
    )


class JdbcDatasourceConnectionParams(BaseModel):
    """
    JdbcDatasourceConnectionParams
    """  # noqa: E501

    properties: Dict[str, StrictStr]
    type: StrictStr
    url: StrictStr
    __properties: ClassVar[List[str]] = ["properties", "type", "url"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["USER_PASSWORD", "USER_PRIVATE_KEY", "OAUTH2_MICROSOFT_ENTRA_ID", "SNOWFLAKE_NATIVE_APP"]):
            raise ValueError(
                "must be one of enum values ('USER_PASSWORD', 'USER_PRIVATE_KEY', 'OAUTH2_MICROSOFT_ENTRA_ID', 'SNOWFLAKE_NATIVE_APP')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "OAUTH2_MICROSOFT_ENTRA_ID": "OAuth2MicrosoftEntraIDConnectionParams",
        "SNOWFLAKE_NATIVE_APP": "SnowflakeNativeAppConnectionParams",
        "USER_PASSWORD": "UserPasswordConnectionParams",
        "USER_PRIVATE_KEY": "UserPrivateKeyConnectionParams",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            OAuth2MicrosoftEntraIDConnectionParams,
            SnowflakeNativeAppConnectionParams,
            UserPasswordConnectionParams,
            UserPrivateKeyConnectionParams,
        ]
    ]:
        """Create an instance of JdbcDatasourceConnectionParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            OAuth2MicrosoftEntraIDConnectionParams,
            SnowflakeNativeAppConnectionParams,
            UserPasswordConnectionParams,
            UserPrivateKeyConnectionParams,
        ]
    ]:
        """Create an instance of JdbcDatasourceConnectionParams from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "OAuth2MicrosoftEntraIDConnectionParams":
            return import_module(
                "sifflet_sdk.client.models.o_auth2_microsoft_entra_id_connection_params"
            ).OAuth2MicrosoftEntraIDConnectionParams.from_dict(obj)
        if object_type == "SnowflakeNativeAppConnectionParams":
            return import_module(
                "sifflet_sdk.client.models.snowflake_native_app_connection_params"
            ).SnowflakeNativeAppConnectionParams.from_dict(obj)
        if object_type == "UserPasswordConnectionParams":
            return import_module(
                "sifflet_sdk.client.models.user_password_connection_params"
            ).UserPasswordConnectionParams.from_dict(obj)
        if object_type == "UserPrivateKeyConnectionParams":
            return import_module(
                "sifflet_sdk.client.models.user_private_key_connection_params"
            ).UserPrivateKeyConnectionParams.from_dict(obj)

        raise ValueError(
            "JdbcDatasourceConnectionParams failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
