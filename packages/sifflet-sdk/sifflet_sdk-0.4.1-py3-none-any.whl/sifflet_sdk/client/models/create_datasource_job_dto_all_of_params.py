# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from sifflet_sdk.client.models.sifflet_agent_datasource_job_params import (
    SiffletAgentDatasourceJobParams,
)
from sifflet_sdk.client.models.sifflet_agent_jdbc_datasource_job_params import (
    SiffletAgentJdbcDatasourceJobParams,
)
from typing_extensions import Literal, Self

CREATEDATASOURCEJOBDTOALLOFPARAMS_ONE_OF_SCHEMAS = [
    "SiffletAgentDatasourceJobParams",
    "SiffletAgentJdbcDatasourceJobParams",
]


class CreateDatasourceJobDtoAllOfParams(BaseModel):
    """
    CreateDatasourceJobDtoAllOfParams
    """

    # data type: SiffletAgentDatasourceJobParams
    oneof_schema_1_validator: Optional[SiffletAgentDatasourceJobParams] = None
    # data type: SiffletAgentJdbcDatasourceJobParams
    oneof_schema_2_validator: Optional[SiffletAgentJdbcDatasourceJobParams] = None
    actual_instance: Optional[Union[SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams]] = None
    one_of_schemas: Set[str] = {"SiffletAgentDatasourceJobParams", "SiffletAgentJdbcDatasourceJobParams"}

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateDatasourceJobDtoAllOfParams.model_construct()
        error_messages = []
        match = 0
        # validate data type: SiffletAgentDatasourceJobParams
        if not isinstance(v, SiffletAgentDatasourceJobParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SiffletAgentDatasourceJobParams`")
        else:
            match += 1
        # validate data type: SiffletAgentJdbcDatasourceJobParams
        if not isinstance(v, SiffletAgentJdbcDatasourceJobParams):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SiffletAgentJdbcDatasourceJobParams`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in CreateDatasourceJobDtoAllOfParams with oneOf schemas: SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in CreateDatasourceJobDtoAllOfParams with oneOf schemas: SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("category")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `category` in the input.")

        # check if data type is `SiffletAgentJdbcDatasourceJobParams`
        if _data_type == "JDBC":
            instance.actual_instance = SiffletAgentJdbcDatasourceJobParams.from_json(json_str)
            return instance

        # check if data type is `SiffletAgentDatasourceJobParams`
        if _data_type == "SiffletAgentDatasourceJobParams":
            instance.actual_instance = SiffletAgentDatasourceJobParams.from_json(json_str)
            return instance

        # check if data type is `SiffletAgentJdbcDatasourceJobParams`
        if _data_type == "SiffletAgentJdbcDatasourceJobParams":
            instance.actual_instance = SiffletAgentJdbcDatasourceJobParams.from_json(json_str)
            return instance

        # deserialize data into SiffletAgentDatasourceJobParams
        try:
            instance.actual_instance = SiffletAgentDatasourceJobParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SiffletAgentJdbcDatasourceJobParams
        try:
            instance.actual_instance = SiffletAgentJdbcDatasourceJobParams.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into CreateDatasourceJobDtoAllOfParams with oneOf schemas: SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into CreateDatasourceJobDtoAllOfParams with oneOf schemas: SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[Union[Dict[str, Any], SiffletAgentDatasourceJobParams, SiffletAgentJdbcDatasourceJobParams]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
