# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.alerting_hook_dto import AlertingHookDto
from sifflet_sdk.client.models.dataset_light_dto import DatasetLightDto
from sifflet_sdk.client.models.entity_custom_metadata_dto import EntityCustomMetadataDto
from sifflet_sdk.client.models.field_search_result_dto import FieldSearchResultDto
from sifflet_sdk.client.models.jira_issue_settings import JiraIssueSettings
from sifflet_sdk.client.models.join_params_dto import JoinParamsDto
from sifflet_sdk.client.models.service_now_incident_settings import (
    ServiceNowIncidentSettings,
)
from sifflet_sdk.client.models.strongly_typed_rule_input_params import (
    StronglyTypedRuleInputParams,
)
from sifflet_sdk.client.models.tag_dto import TagDto
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from typing_extensions import Self


class RuleDto(BaseModel):
    """
    RuleDto
    """  # noqa: E501

    category: Optional[StrictStr] = None
    create_incident_on_fail: StrictBool = Field(alias="createIncidentOnFail")
    creation_method: Optional[StrictStr] = Field(default=None, alias="creationMethod")
    credential_secret_name: Optional[StrictStr] = Field(default=None, alias="credentialSecretName")
    criticality: StrictInt
    custom_email_subject: Optional[StrictStr] = Field(default=None, alias="customEmailSubject")
    custom_metadata: Optional[List[EntityCustomMetadataDto]] = Field(default=None, alias="customMetadata")
    datasets: List[DatasetLightDto]
    description: Optional[StrictStr] = None
    friendly_id: Optional[StrictStr] = Field(default=None, alias="friendlyId")
    id: Optional[StrictStr] = None
    input_values: Optional[StronglyTypedRuleInputParams] = Field(default=None, alias="inputValues")
    jira_issue_settings: Optional[JiraIssueSettings] = Field(default=None, alias="jiraIssueSettings")
    join_params: Optional[JoinParamsDto] = Field(default=None, alias="joinParams")
    mails: Optional[List[AlertingHookDto]] = None
    message: Optional[StrictStr] = None
    monitored_dataset_fields: List[FieldSearchResultDto] = Field(alias="monitoredDatasetFields")
    ms_teams: Optional[List[AlertingHookDto]] = Field(default=None, alias="msTeams")
    name: StrictStr
    rule_template_name: StrictStr = Field(alias="ruleTemplateName")
    schedule: Optional[StrictStr] = None
    schedule_timezone: Optional[TimeZoneDto] = Field(default=None, alias="scheduleTimezone")
    service_now_incident_settings: Optional[ServiceNowIncidentSettings] = Field(
        default=None, alias="serviceNowIncidentSettings"
    )
    slack_channels: Optional[List[AlertingHookDto]] = Field(default=None, alias="slackChannels")
    tags: Optional[List[TagDto]] = None
    terms: Optional[List[TagDto]] = None
    webhooks: Optional[List[AlertingHookDto]] = None
    __properties: ClassVar[List[str]] = [
        "category",
        "createIncidentOnFail",
        "creationMethod",
        "credentialSecretName",
        "criticality",
        "customEmailSubject",
        "customMetadata",
        "datasets",
        "description",
        "friendlyId",
        "id",
        "inputValues",
        "jiraIssueSettings",
        "joinParams",
        "mails",
        "message",
        "monitoredDatasetFields",
        "msTeams",
        "name",
        "ruleTemplateName",
        "schedule",
        "scheduleTimezone",
        "serviceNowIncidentSettings",
        "slackChannels",
        "tags",
        "terms",
        "webhooks",
    ]

    @field_validator("creation_method")
    def creation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["DBT_INGESTION", "UI", "AUTO_COVERAGE", "AS_CODE", "METADATA_MONITORING"]):
            raise ValueError(
                "must be one of enum values ('DBT_INGESTION', 'UI', 'AUTO_COVERAGE', 'AS_CODE', 'METADATA_MONITORING')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "creation_method",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metadata (list)
        _items = []
        if self.custom_metadata:
            for _item_custom_metadata in self.custom_metadata:
                if _item_custom_metadata:
                    _items.append(_item_custom_metadata.to_dict())
            _dict["customMetadata"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict["datasets"] = _items
        # override the default output from pydantic by calling `to_dict()` of input_values
        if self.input_values:
            _dict["inputValues"] = self.input_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jira_issue_settings
        if self.jira_issue_settings:
            _dict["jiraIssueSettings"] = self.jira_issue_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of join_params
        if self.join_params:
            _dict["joinParams"] = self.join_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mails (list)
        _items = []
        if self.mails:
            for _item_mails in self.mails:
                if _item_mails:
                    _items.append(_item_mails.to_dict())
            _dict["mails"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in monitored_dataset_fields (list)
        _items = []
        if self.monitored_dataset_fields:
            for _item_monitored_dataset_fields in self.monitored_dataset_fields:
                if _item_monitored_dataset_fields:
                    _items.append(_item_monitored_dataset_fields.to_dict())
            _dict["monitoredDatasetFields"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ms_teams (list)
        _items = []
        if self.ms_teams:
            for _item_ms_teams in self.ms_teams:
                if _item_ms_teams:
                    _items.append(_item_ms_teams.to_dict())
            _dict["msTeams"] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule_timezone
        if self.schedule_timezone:
            _dict["scheduleTimezone"] = self.schedule_timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_now_incident_settings
        if self.service_now_incident_settings:
            _dict["serviceNowIncidentSettings"] = self.service_now_incident_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slack_channels (list)
        _items = []
        if self.slack_channels:
            for _item_slack_channels in self.slack_channels:
                if _item_slack_channels:
                    _items.append(_item_slack_channels.to_dict())
            _dict["slackChannels"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item_webhooks in self.webhooks:
                if _item_webhooks:
                    _items.append(_item_webhooks.to_dict())
            _dict["webhooks"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "category": obj.get("category"),
                "createIncidentOnFail": obj.get("createIncidentOnFail"),
                "creationMethod": obj.get("creationMethod"),
                "credentialSecretName": obj.get("credentialSecretName"),
                "criticality": obj.get("criticality"),
                "customEmailSubject": obj.get("customEmailSubject"),
                "customMetadata": (
                    [EntityCustomMetadataDto.from_dict(_item) for _item in obj["customMetadata"]]
                    if obj.get("customMetadata") is not None
                    else None
                ),
                "datasets": (
                    [DatasetLightDto.from_dict(_item) for _item in obj["datasets"]]
                    if obj.get("datasets") is not None
                    else None
                ),
                "description": obj.get("description"),
                "friendlyId": obj.get("friendlyId"),
                "id": obj.get("id"),
                "inputValues": (
                    StronglyTypedRuleInputParams.from_dict(obj["inputValues"])
                    if obj.get("inputValues") is not None
                    else None
                ),
                "jiraIssueSettings": (
                    JiraIssueSettings.from_dict(obj["jiraIssueSettings"])
                    if obj.get("jiraIssueSettings") is not None
                    else None
                ),
                "joinParams": JoinParamsDto.from_dict(obj["joinParams"]) if obj.get("joinParams") is not None else None,
                "mails": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["mails"]]
                    if obj.get("mails") is not None
                    else None
                ),
                "message": obj.get("message"),
                "monitoredDatasetFields": (
                    [FieldSearchResultDto.from_dict(_item) for _item in obj["monitoredDatasetFields"]]
                    if obj.get("monitoredDatasetFields") is not None
                    else None
                ),
                "msTeams": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["msTeams"]]
                    if obj.get("msTeams") is not None
                    else None
                ),
                "name": obj.get("name"),
                "ruleTemplateName": obj.get("ruleTemplateName"),
                "schedule": obj.get("schedule"),
                "scheduleTimezone": (
                    TimeZoneDto.from_dict(obj["scheduleTimezone"]) if obj.get("scheduleTimezone") is not None else None
                ),
                "serviceNowIncidentSettings": (
                    ServiceNowIncidentSettings.from_dict(obj["serviceNowIncidentSettings"])
                    if obj.get("serviceNowIncidentSettings") is not None
                    else None
                ),
                "slackChannels": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["slackChannels"]]
                    if obj.get("slackChannels") is not None
                    else None
                ),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "terms": [TagDto.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
                "webhooks": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["webhooks"]]
                    if obj.get("webhooks") is not None
                    else None
                ),
            }
        )
        return _obj
