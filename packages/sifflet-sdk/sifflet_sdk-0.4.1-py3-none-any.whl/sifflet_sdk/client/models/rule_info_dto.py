# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.alerting_hook_dto import AlertingHookDto
from sifflet_sdk.client.models.criticality import Criticality
from sifflet_sdk.client.models.dataset_brief_dto import DatasetBriefDto
from sifflet_sdk.client.models.entity_custom_metadata_dto import EntityCustomMetadataDto
from sifflet_sdk.client.models.incident_light_dto import IncidentLightDto
from sifflet_sdk.client.models.tag_dto import TagDto
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from sifflet_sdk.client.models.workspace_summary_dto import WorkspaceSummaryDto
from typing_extensions import Self


class RuleInfoDto(BaseModel):
    """
    RuleInfoDto
    """  # noqa: E501

    can_be_qualified: StrictBool = Field(alias="canBeQualified")
    can_be_scheduled: StrictBool = Field(alias="canBeScheduled")
    can_manually_run: StrictBool = Field(alias="canManuallyRun")
    criticality: Criticality
    custom_metadata: Optional[List[EntityCustomMetadataDto]] = Field(default=None, alias="customMetadata")
    datasets: Optional[List[DatasetBriefDto]] = None
    id: StrictStr
    last_incident: Optional[IncidentLightDto] = Field(default=None, alias="lastIncident")
    last_run_status: Optional[StrictStr] = Field(default=None, alias="lastRunStatus")
    last_run_timestamp: Optional[StrictInt] = Field(default=None, alias="lastRunTimestamp")
    last_unresolved_incident: Optional[IncidentLightDto] = Field(default=None, alias="lastUnresolvedIncident")
    mails: Optional[List[AlertingHookDto]] = None
    ms_teams: Optional[List[AlertingHookDto]] = Field(default=None, alias="msTeams")
    muted: Optional[StrictBool] = None
    name: StrictStr
    read_only: StrictBool = Field(alias="readOnly")
    rule_label: StrictStr = Field(alias="ruleLabel")
    rule_status: StrictStr = Field(alias="ruleStatus")
    rule_template_name: StrictStr = Field(alias="ruleTemplateName")
    schedule: Optional[StrictStr] = None
    schedule_timezone: Optional[TimeZoneDto] = Field(default=None, alias="scheduleTimezone")
    slack_channels: Optional[List[AlertingHookDto]] = Field(default=None, alias="slackChannels")
    source_platform: StrictStr = Field(alias="sourcePlatform")
    support_as_code_yaml_conversion: StrictBool = Field(alias="supportAsCodeYAMLConversion")
    tags: Optional[List[TagDto]] = None
    unresolved_incidents: StrictInt = Field(alias="unresolvedIncidents")
    workspace: Optional[WorkspaceSummaryDto] = None
    __properties: ClassVar[List[str]] = [
        "canBeQualified",
        "canBeScheduled",
        "canManuallyRun",
        "criticality",
        "customMetadata",
        "datasets",
        "id",
        "lastIncident",
        "lastRunStatus",
        "lastRunTimestamp",
        "lastUnresolvedIncident",
        "mails",
        "msTeams",
        "muted",
        "name",
        "readOnly",
        "ruleLabel",
        "ruleStatus",
        "ruleTemplateName",
        "schedule",
        "scheduleTimezone",
        "slackChannels",
        "sourcePlatform",
        "supportAsCodeYAMLConversion",
        "tags",
        "unresolvedIncidents",
        "workspace",
    ]

    @field_validator("last_run_status")
    def last_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "RUNNING", "SUCCESS", "REQUIRES_YOUR_ATTENTION", "TECHNICAL_ERROR", "FAILED"]):
            raise ValueError(
                "must be one of enum values ('PENDING', 'RUNNING', 'SUCCESS', 'REQUIRES_YOUR_ATTENTION', 'TECHNICAL_ERROR', 'FAILED')"
            )
        return value

    @field_validator("rule_status")
    def rule_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["NOT_EVALUATED", "PASSING", "NEEDS_ATTENTION", "FAILING"]):
            raise ValueError("must be one of enum values ('NOT_EVALUATED', 'PASSING', 'NEEDS_ATTENTION', 'FAILING')")
        return value

    @field_validator("source_platform")
    def source_platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["SIFFLET", "DBT"]):
            raise ValueError("must be one of enum values ('SIFFLET', 'DBT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metadata (list)
        _items = []
        if self.custom_metadata:
            for _item_custom_metadata in self.custom_metadata:
                if _item_custom_metadata:
                    _items.append(_item_custom_metadata.to_dict())
            _dict["customMetadata"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict["datasets"] = _items
        # override the default output from pydantic by calling `to_dict()` of last_incident
        if self.last_incident:
            _dict["lastIncident"] = self.last_incident.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_unresolved_incident
        if self.last_unresolved_incident:
            _dict["lastUnresolvedIncident"] = self.last_unresolved_incident.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mails (list)
        _items = []
        if self.mails:
            for _item_mails in self.mails:
                if _item_mails:
                    _items.append(_item_mails.to_dict())
            _dict["mails"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ms_teams (list)
        _items = []
        if self.ms_teams:
            for _item_ms_teams in self.ms_teams:
                if _item_ms_teams:
                    _items.append(_item_ms_teams.to_dict())
            _dict["msTeams"] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule_timezone
        if self.schedule_timezone:
            _dict["scheduleTimezone"] = self.schedule_timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slack_channels (list)
        _items = []
        if self.slack_channels:
            for _item_slack_channels in self.slack_channels:
                if _item_slack_channels:
                    _items.append(_item_slack_channels.to_dict())
            _dict["slackChannels"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict["workspace"] = self.workspace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "canBeQualified": obj.get("canBeQualified"),
                "canBeScheduled": obj.get("canBeScheduled"),
                "canManuallyRun": obj.get("canManuallyRun"),
                "criticality": obj.get("criticality"),
                "customMetadata": (
                    [EntityCustomMetadataDto.from_dict(_item) for _item in obj["customMetadata"]]
                    if obj.get("customMetadata") is not None
                    else None
                ),
                "datasets": (
                    [DatasetBriefDto.from_dict(_item) for _item in obj["datasets"]]
                    if obj.get("datasets") is not None
                    else None
                ),
                "id": obj.get("id"),
                "lastIncident": (
                    IncidentLightDto.from_dict(obj["lastIncident"]) if obj.get("lastIncident") is not None else None
                ),
                "lastRunStatus": obj.get("lastRunStatus"),
                "lastRunTimestamp": obj.get("lastRunTimestamp"),
                "lastUnresolvedIncident": (
                    IncidentLightDto.from_dict(obj["lastUnresolvedIncident"])
                    if obj.get("lastUnresolvedIncident") is not None
                    else None
                ),
                "mails": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["mails"]]
                    if obj.get("mails") is not None
                    else None
                ),
                "msTeams": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["msTeams"]]
                    if obj.get("msTeams") is not None
                    else None
                ),
                "muted": obj.get("muted"),
                "name": obj.get("name"),
                "readOnly": obj.get("readOnly"),
                "ruleLabel": obj.get("ruleLabel"),
                "ruleStatus": obj.get("ruleStatus"),
                "ruleTemplateName": obj.get("ruleTemplateName"),
                "schedule": obj.get("schedule"),
                "scheduleTimezone": (
                    TimeZoneDto.from_dict(obj["scheduleTimezone"]) if obj.get("scheduleTimezone") is not None else None
                ),
                "slackChannels": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["slackChannels"]]
                    if obj.get("slackChannels") is not None
                    else None
                ),
                "sourcePlatform": obj.get("sourcePlatform"),
                "supportAsCodeYAMLConversion": obj.get("supportAsCodeYAMLConversion"),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "unresolvedIncidents": obj.get("unresolvedIncidents"),
                "workspace": (
                    WorkspaceSummaryDto.from_dict(obj["workspace"]) if obj.get("workspace") is not None else None
                ),
            }
        )
        return _obj
