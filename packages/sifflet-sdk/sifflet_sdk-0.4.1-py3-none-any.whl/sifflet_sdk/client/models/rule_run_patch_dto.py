# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.rule_run_debug import RuleRunDebug
from sifflet_sdk.client.models.rule_run_details import RuleRunDetails
from typing_extensions import Self


class RuleRunPatchDto(BaseModel):
    """
    RuleRunPatchDto
    """  # noqa: E501

    data_scan_details: Optional[StrictStr] = Field(default=None, alias="dataScanDetails")
    debug: Optional[RuleRunDebug] = None
    details: Optional[RuleRunDetails] = None
    end_date: Optional[StrictInt] = Field(default=None, alias="endDate")
    incident_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="incidentIds")
    result: Optional[StrictStr] = None
    run_completed: Optional[StrictBool] = Field(default=None, alias="runCompleted")
    start_date: Optional[StrictInt] = Field(default=None, alias="startDate")
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "dataScanDetails",
        "debug",
        "details",
        "endDate",
        "incidentIds",
        "result",
        "runCompleted",
        "startDate",
        "status",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "RUNNING", "SUCCESS", "REQUIRES_YOUR_ATTENTION", "TECHNICAL_ERROR", "FAILED"]):
            raise ValueError(
                "must be one of enum values ('PENDING', 'RUNNING', 'SUCCESS', 'REQUIRES_YOUR_ATTENTION', 'TECHNICAL_ERROR', 'FAILED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleRunPatchDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug
        if self.debug:
            _dict["debug"] = self.debug.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict["details"] = self.details.to_dict()
        # set to None if data_scan_details (nullable) is None
        # and model_fields_set contains the field
        if self.data_scan_details is None and "data_scan_details" in self.model_fields_set:
            _dict["dataScanDetails"] = None

        # set to None if debug (nullable) is None
        # and model_fields_set contains the field
        if self.debug is None and "debug" in self.model_fields_set:
            _dict["debug"] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict["details"] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict["endDate"] = None

        # set to None if incident_ids (nullable) is None
        # and model_fields_set contains the field
        if self.incident_ids is None and "incident_ids" in self.model_fields_set:
            _dict["incidentIds"] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict["result"] = None

        # set to None if run_completed (nullable) is None
        # and model_fields_set contains the field
        if self.run_completed is None and "run_completed" in self.model_fields_set:
            _dict["runCompleted"] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict["startDate"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleRunPatchDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dataScanDetails": obj.get("dataScanDetails"),
                "debug": RuleRunDebug.from_dict(obj["debug"]) if obj.get("debug") is not None else None,
                "details": RuleRunDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
                "endDate": obj.get("endDate"),
                "incidentIds": obj.get("incidentIds"),
                "result": obj.get("result"),
                "runCompleted": obj.get("runCompleted"),
                "startDate": obj.get("startDate"),
                "status": obj.get("status"),
            }
        )
        return _obj
