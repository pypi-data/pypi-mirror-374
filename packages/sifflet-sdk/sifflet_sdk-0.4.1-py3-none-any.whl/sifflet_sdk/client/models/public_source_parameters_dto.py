# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.public_airflow_parameters_dto import (
        PublicAirflowParametersDto,
    )
    from sifflet_sdk.client.models.public_athena_parameters_dto import (
        PublicAthenaParametersDto,
    )
    from sifflet_sdk.client.models.public_big_query_parameters_dto import (
        PublicBigQueryParametersDto,
    )
    from sifflet_sdk.client.models.public_databricks_parameters_dto import (
        PublicDatabricksParametersDto,
    )
    from sifflet_sdk.client.models.public_dbt_cloud_parameters_dto import (
        PublicDbtCloudParametersDto,
    )
    from sifflet_sdk.client.models.public_dbt_parameters_dto import (
        PublicDbtParametersDto,
    )
    from sifflet_sdk.client.models.public_declarative_parameters_dto import (
        PublicDeclarativeParametersDto,
    )
    from sifflet_sdk.client.models.public_fivetran_parameters_dto import (
        PublicFivetranParametersDto,
    )
    from sifflet_sdk.client.models.public_looker_parameters_dto import (
        PublicLookerParametersDto,
    )
    from sifflet_sdk.client.models.public_mssql_parameters_dto import (
        PublicMssqlParametersDto,
    )
    from sifflet_sdk.client.models.public_mysql_parameters_dto import (
        PublicMysqlParametersDto,
    )
    from sifflet_sdk.client.models.public_oracle_parameters_dto import (
        PublicOracleParametersDto,
    )
    from sifflet_sdk.client.models.public_postgresql_parameters_dto import (
        PublicPostgresqlParametersDto,
    )
    from sifflet_sdk.client.models.public_power_bi_parameters_dto import (
        PublicPowerBiParametersDto,
    )
    from sifflet_sdk.client.models.public_quicksight_parameters_dto import (
        PublicQuicksightParametersDto,
    )
    from sifflet_sdk.client.models.public_redshift_parameters_dto import (
        PublicRedshiftParametersDto,
    )
    from sifflet_sdk.client.models.public_snowflake_parameters_dto import (
        PublicSnowflakeParametersDto,
    )
    from sifflet_sdk.client.models.public_synapse_parameters_dto import (
        PublicSynapseParametersDto,
    )
    from sifflet_sdk.client.models.public_tableau_parameters_dto import (
        PublicTableauParametersDto,
    )


class PublicSourceParametersDto(BaseModel):
    """
    Parameters of the source
    """  # noqa: E501

    type: StrictStr
    __properties: ClassVar[List[str]] = ["type"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRESQL",
                "ORACLE",
                "SYNAPSE",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "AIRFLOW",
                "DBT",
                "DBT_CLOUD",
                "FIVETRAN",
                "POWER_BI",
                "DECLARATIVE",
                "_UNKNOWN_",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRESQL', 'ORACLE', 'SYNAPSE', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'AIRFLOW', 'DBT', 'DBT_CLOUD', 'FIVETRAN', 'POWER_BI', 'DECLARATIVE', '_UNKNOWN_')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "AIRFLOW": "PublicAirflowParametersDto",
        "ATHENA": "PublicAthenaParametersDto",
        "BIGQUERY": "PublicBigQueryParametersDto",
        "DATABRICKS": "PublicDatabricksParametersDto",
        "DBT": "PublicDbtParametersDto",
        "DBT_CLOUD": "PublicDbtCloudParametersDto",
        "DECLARATIVE": "PublicDeclarativeParametersDto",
        "FIVETRAN": "PublicFivetranParametersDto",
        "LOOKER": "PublicLookerParametersDto",
        "MSSQL": "PublicMssqlParametersDto",
        "MYSQL": "PublicMysqlParametersDto",
        "ORACLE": "PublicOracleParametersDto",
        "POSTGRESQL": "PublicPostgresqlParametersDto",
        "POWER_BI": "PublicPowerBiParametersDto",
        "QUICKSIGHT": "PublicQuicksightParametersDto",
        "REDSHIFT": "PublicRedshiftParametersDto",
        "SNOWFLAKE": "PublicSnowflakeParametersDto",
        "SYNAPSE": "PublicSynapseParametersDto",
        "TABLEAU": "PublicTableauParametersDto",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            PublicAirflowParametersDto,
            PublicAthenaParametersDto,
            PublicBigQueryParametersDto,
            PublicDatabricksParametersDto,
            PublicDbtParametersDto,
            PublicDbtCloudParametersDto,
            PublicDeclarativeParametersDto,
            PublicFivetranParametersDto,
            PublicLookerParametersDto,
            PublicMssqlParametersDto,
            PublicMysqlParametersDto,
            PublicOracleParametersDto,
            PublicPostgresqlParametersDto,
            PublicPowerBiParametersDto,
            PublicQuicksightParametersDto,
            PublicRedshiftParametersDto,
            PublicSnowflakeParametersDto,
            PublicSynapseParametersDto,
            PublicTableauParametersDto,
        ]
    ]:
        """Create an instance of PublicSourceParametersDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            PublicAirflowParametersDto,
            PublicAthenaParametersDto,
            PublicBigQueryParametersDto,
            PublicDatabricksParametersDto,
            PublicDbtParametersDto,
            PublicDbtCloudParametersDto,
            PublicDeclarativeParametersDto,
            PublicFivetranParametersDto,
            PublicLookerParametersDto,
            PublicMssqlParametersDto,
            PublicMysqlParametersDto,
            PublicOracleParametersDto,
            PublicPostgresqlParametersDto,
            PublicPowerBiParametersDto,
            PublicQuicksightParametersDto,
            PublicRedshiftParametersDto,
            PublicSnowflakeParametersDto,
            PublicSynapseParametersDto,
            PublicTableauParametersDto,
        ]
    ]:
        """Create an instance of PublicSourceParametersDto from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "PublicAirflowParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_airflow_parameters_dto"
            ).PublicAirflowParametersDto.from_dict(obj)
        if object_type == "PublicAthenaParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_athena_parameters_dto"
            ).PublicAthenaParametersDto.from_dict(obj)
        if object_type == "PublicBigQueryParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_big_query_parameters_dto"
            ).PublicBigQueryParametersDto.from_dict(obj)
        if object_type == "PublicDatabricksParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_databricks_parameters_dto"
            ).PublicDatabricksParametersDto.from_dict(obj)
        if object_type == "PublicDbtParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_dbt_parameters_dto"
            ).PublicDbtParametersDto.from_dict(obj)
        if object_type == "PublicDbtCloudParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_dbt_cloud_parameters_dto"
            ).PublicDbtCloudParametersDto.from_dict(obj)
        if object_type == "PublicDeclarativeParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_declarative_parameters_dto"
            ).PublicDeclarativeParametersDto.from_dict(obj)
        if object_type == "PublicFivetranParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_fivetran_parameters_dto"
            ).PublicFivetranParametersDto.from_dict(obj)
        if object_type == "PublicLookerParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_looker_parameters_dto"
            ).PublicLookerParametersDto.from_dict(obj)
        if object_type == "PublicMssqlParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_mssql_parameters_dto"
            ).PublicMssqlParametersDto.from_dict(obj)
        if object_type == "PublicMysqlParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_mysql_parameters_dto"
            ).PublicMysqlParametersDto.from_dict(obj)
        if object_type == "PublicOracleParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_oracle_parameters_dto"
            ).PublicOracleParametersDto.from_dict(obj)
        if object_type == "PublicPostgresqlParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_postgresql_parameters_dto"
            ).PublicPostgresqlParametersDto.from_dict(obj)
        if object_type == "PublicPowerBiParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_power_bi_parameters_dto"
            ).PublicPowerBiParametersDto.from_dict(obj)
        if object_type == "PublicQuicksightParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_quicksight_parameters_dto"
            ).PublicQuicksightParametersDto.from_dict(obj)
        if object_type == "PublicRedshiftParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_redshift_parameters_dto"
            ).PublicRedshiftParametersDto.from_dict(obj)
        if object_type == "PublicSnowflakeParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_snowflake_parameters_dto"
            ).PublicSnowflakeParametersDto.from_dict(obj)
        if object_type == "PublicSynapseParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_synapse_parameters_dto"
            ).PublicSynapseParametersDto.from_dict(obj)
        if object_type == "PublicTableauParametersDto":
            return import_module(
                "sifflet_sdk.client.models.public_tableau_parameters_dto"
            ).PublicTableauParametersDto.from_dict(obj)

        raise ValueError(
            "PublicSourceParametersDto failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
