# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class SupportedDatasourcesDto(BaseModel):
    """
    SupportedDatasourcesDto
    """  # noqa: E501

    supported_monitors: Optional[List[StrictStr]] = Field(default=None, alias="supportedMonitors")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["supportedMonitors", "type"]

    @field_validator("supported_monitors")
    def supported_monitors_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(
                [
                    "COMPLETENESS",
                    "DUPLICATES",
                    "FRESHNESS",
                    "SCHEMA_CHANGE",
                    "METADATA_FRESHNESS",
                    "NUMERICAL_TRANSFORMATION",
                    "INTERLINKED_METRICS",
                    "CUSTOM_METRICS",
                    "DISTRIBUTION",
                    "UNIQUE",
                    "REFERENTIAL_INTEGRITY",
                    "NOT_IN_LIST",
                    "COUNT_DUPLICATE",
                    "COUNT_NULL_ROWS",
                    "RANGE",
                    "IS_EMAIL",
                    "IS_PHONE_NUMBER",
                    "IS_UUID",
                    "MATCHES_REGEX",
                    "NO_CODE",
                    "SQL",
                    "DBT",
                    "__OBSOLETE__COMPLETENESS_STATIC",
                    "__OBSOLETE__STATIC_COUNT_DUPLICATE",
                    "__OBSOLETE__DUPLICATE",
                    "__OBSOLETE__NULL",
                    "__OBSOLETE__PERCENTAGE_NULL_STATIC",
                    "__OBSOLETE__AVERAGE",
                    "__OBSOLETE__COUNT",
                    "__OBSOLETE__QUANTILE",
                    "__OBSOLETE__SUM",
                    "__OBSOLETE__STANDARD_DEVIATION",
                    "__OBSOLETE__VARIANCE",
                    "__OBSOLETE__PERCENTAGE_NULL_ROWS",
                    "__OBSOLETE__PERCENTAGE_DUPLICATES",
                ]
            ):
                raise ValueError(
                    "each list item must be one of ('COMPLETENESS', 'DUPLICATES', 'FRESHNESS', 'SCHEMA_CHANGE', 'METADATA_FRESHNESS', 'NUMERICAL_TRANSFORMATION', 'INTERLINKED_METRICS', 'CUSTOM_METRICS', 'DISTRIBUTION', 'UNIQUE', 'REFERENTIAL_INTEGRITY', 'NOT_IN_LIST', 'COUNT_DUPLICATE', 'COUNT_NULL_ROWS', 'RANGE', 'IS_EMAIL', 'IS_PHONE_NUMBER', 'IS_UUID', 'MATCHES_REGEX', 'NO_CODE', 'SQL', 'DBT', '__OBSOLETE__COMPLETENESS_STATIC', '__OBSOLETE__STATIC_COUNT_DUPLICATE', '__OBSOLETE__DUPLICATE', '__OBSOLETE__NULL', '__OBSOLETE__PERCENTAGE_NULL_STATIC', '__OBSOLETE__AVERAGE', '__OBSOLETE__COUNT', '__OBSOLETE__QUANTILE', '__OBSOLETE__SUM', '__OBSOLETE__STANDARD_DEVIATION', '__OBSOLETE__VARIANCE', '__OBSOLETE__PERCENTAGE_NULL_ROWS', '__OBSOLETE__PERCENTAGE_DUPLICATES')"
                )
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRES",
                "ORACLE",
                "SYNAPSE",
                "POWER_BI",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "MICROSTRATEGY",
                "QLIK",
                "AIRFLOW",
                "MWAA",
                "COMPOSER",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "DECLARATIVE",
                "_UNKNOWN_",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRES', 'ORACLE', 'SYNAPSE', 'POWER_BI', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'MICROSTRATEGY', 'QLIK', 'AIRFLOW', 'MWAA', 'COMPOSER', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'DECLARATIVE', '_UNKNOWN_')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportedDatasourcesDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportedDatasourcesDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({"supportedMonitors": obj.get("supportedMonitors"), "type": obj.get("type")})
        return _obj
