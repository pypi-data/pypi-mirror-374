# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from sifflet_sdk.client.models.parameterized_query_dto import ParameterizedQueryDto
from sifflet_sdk.client.models.rule_run_details_by_group import RuleRunDetailsByGroup
from sifflet_sdk.client.models.rule_run_discrepancy import RuleRunDiscrepancy
from typing_extensions import Self


class RuleRunDetails(BaseModel):
    """
    RuleRunDetails
    """  # noqa: E501

    details_by_group: Optional[List[RuleRunDetailsByGroup]] = Field(default=None, alias="detailsByGroup")
    discrepancies: Optional[List[RuleRunDiscrepancy]] = None
    group_key_by_dataset_id: Optional[Dict[str, StrictStr]] = Field(default=None, alias="groupKeyByDatasetId")
    partitioning_clause_by_dataset_id: Optional[Dict[str, ParameterizedQueryDto]] = Field(
        default=None, alias="partitioningClauseByDatasetId"
    )
    __properties: ClassVar[List[str]] = [
        "detailsByGroup",
        "discrepancies",
        "groupKeyByDatasetId",
        "partitioningClauseByDatasetId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleRunDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details_by_group (list)
        _items = []
        if self.details_by_group:
            for _item_details_by_group in self.details_by_group:
                if _item_details_by_group:
                    _items.append(_item_details_by_group.to_dict())
            _dict["detailsByGroup"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discrepancies (list)
        _items = []
        if self.discrepancies:
            for _item_discrepancies in self.discrepancies:
                if _item_discrepancies:
                    _items.append(_item_discrepancies.to_dict())
            _dict["discrepancies"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in partitioning_clause_by_dataset_id (dict)
        _field_dict = {}
        if self.partitioning_clause_by_dataset_id:
            for _key_partitioning_clause_by_dataset_id in self.partitioning_clause_by_dataset_id:
                if self.partitioning_clause_by_dataset_id[_key_partitioning_clause_by_dataset_id]:
                    _field_dict[_key_partitioning_clause_by_dataset_id] = self.partitioning_clause_by_dataset_id[
                        _key_partitioning_clause_by_dataset_id
                    ].to_dict()
            _dict["partitioningClauseByDatasetId"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleRunDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "detailsByGroup": (
                    [RuleRunDetailsByGroup.from_dict(_item) for _item in obj["detailsByGroup"]]
                    if obj.get("detailsByGroup") is not None
                    else None
                ),
                "discrepancies": (
                    [RuleRunDiscrepancy.from_dict(_item) for _item in obj["discrepancies"]]
                    if obj.get("discrepancies") is not None
                    else None
                ),
                "groupKeyByDatasetId": obj.get("groupKeyByDatasetId"),
                "partitioningClauseByDatasetId": (
                    dict(
                        (_k, ParameterizedQueryDto.from_dict(_v))
                        for _k, _v in obj["partitioningClauseByDatasetId"].items()
                    )
                    if obj.get("partitioningClauseByDatasetId") is not None
                    else None
                ),
            }
        )
        return _obj
