# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.get_collaboration_tool_item_dto import (
    GetCollaborationToolItemDto,
)
from sifflet_sdk.client.models.user_dto import UserDto
from typing_extensions import Self


class IncidentDetailDto(BaseModel):
    """
    IncidentDetailDto
    """  # noqa: E501

    collaboration_tool_items: List[GetCollaborationToolItemDto] = Field(alias="collaborationToolItems")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    criticality: StrictInt
    id: StrictStr
    issue_no: StrictInt = Field(alias="issueNo")
    last_modified_date: Optional[StrictInt] = Field(default=None, alias="lastModifiedDate")
    last_occurred_date: StrictInt = Field(alias="lastOccurredDate")
    modified_by: Optional[StrictStr] = Field(default=None, alias="modifiedBy")
    name: StrictStr
    number_of_failures: StrictInt = Field(alias="numberOfFailures")
    owners: List[UserDto]
    qualification: Optional[StrictStr] = None
    status: StrictStr
    __properties: ClassVar[List[str]] = [
        "collaborationToolItems",
        "createdBy",
        "createdDate",
        "criticality",
        "id",
        "issueNo",
        "lastModifiedDate",
        "lastOccurredDate",
        "modifiedBy",
        "name",
        "numberOfFailures",
        "owners",
        "qualification",
        "status",
    ]

    @field_validator("qualification")
    def qualification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "FIXED",
                "FALSE_POSITIVE",
                "NO_ACTION_NEEDED",
                "REVIEWED",
                "DUPLICATE",
                "AUTOMATIC",
                "QUALIFIED_MONITORS_REVIEWED",
                "QUALIFIED_MONITORS_NO_ACTION_NEEDED",
                "QUALIFIED_MONITORS_FALSE_POSITIVE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('FIXED', 'FALSE_POSITIVE', 'NO_ACTION_NEEDED', 'REVIEWED', 'DUPLICATE', 'AUTOMATIC', 'QUALIFIED_MONITORS_REVIEWED', 'QUALIFIED_MONITORS_NO_ACTION_NEEDED', 'QUALIFIED_MONITORS_FALSE_POSITIVE')"
            )
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["OPEN", "IN_PROGRESS", "CLOSED"]):
            raise ValueError("must be one of enum values ('OPEN', 'IN_PROGRESS', 'CLOSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncidentDetailDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in collaboration_tool_items (list)
        _items = []
        if self.collaboration_tool_items:
            for _item_collaboration_tool_items in self.collaboration_tool_items:
                if _item_collaboration_tool_items:
                    _items.append(_item_collaboration_tool_items.to_dict())
            _dict["collaborationToolItems"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owners (list)
        _items = []
        if self.owners:
            for _item_owners in self.owners:
                if _item_owners:
                    _items.append(_item_owners.to_dict())
            _dict["owners"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncidentDetailDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "collaborationToolItems": (
                    [GetCollaborationToolItemDto.from_dict(_item) for _item in obj["collaborationToolItems"]]
                    if obj.get("collaborationToolItems") is not None
                    else None
                ),
                "createdBy": obj.get("createdBy"),
                "createdDate": obj.get("createdDate"),
                "criticality": obj.get("criticality"),
                "id": obj.get("id"),
                "issueNo": obj.get("issueNo"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "lastOccurredDate": obj.get("lastOccurredDate"),
                "modifiedBy": obj.get("modifiedBy"),
                "name": obj.get("name"),
                "numberOfFailures": obj.get("numberOfFailures"),
                "owners": (
                    [UserDto.from_dict(_item) for _item in obj["owners"]] if obj.get("owners") is not None else None
                ),
                "qualification": obj.get("qualification"),
                "status": obj.get("status"),
            }
        )
        return _obj
