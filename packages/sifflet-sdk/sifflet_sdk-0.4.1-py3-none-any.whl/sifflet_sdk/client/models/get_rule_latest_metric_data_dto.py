# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.get_rule_latest_metric_data_dto_partition_clause import (
    GetRuleLatestMetricDataDtoPartitionClause,
)
from typing_extensions import Self


class GetRuleLatestMetricDataDto(BaseModel):
    """
    GetRuleLatestMetricDataDto
    """  # noqa: E501

    dataset_field_id: Optional[StrictStr] = Field(default=None, alias="datasetFieldId")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    group_by_field_names: List[StrictStr] = Field(alias="groupByFieldNames")
    metric_type: StrictStr = Field(alias="metricType")
    partition_clause: Optional[GetRuleLatestMetricDataDtoPartitionClause] = Field(default=None, alias="partitionClause")
    quantile_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantilePercentile")
    time_window_dataset_field_name: Optional[StrictStr] = Field(default=None, alias="timeWindowDatasetFieldName")
    where_statement: Optional[StrictStr] = Field(default=None, alias="whereStatement")
    __properties: ClassVar[List[str]] = [
        "datasetFieldId",
        "datasetId",
        "groupByFieldNames",
        "metricType",
        "partitionClause",
        "quantilePercentile",
        "timeWindowDatasetFieldName",
        "whereStatement",
    ]

    @field_validator("metric_type")
    def metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "AVERAGE",
                "NORMALIZED_AVERAGE",
                "STANDARD_DEVIATION",
                "COUNT_ALL",
                "COUNT_DISTINCT",
                "SUM",
                "MIN",
                "MAX",
                "VARIANCE",
                "QUANTILE",
                "FRESHNESS",
                "METADATA_FRESHNESS",
                "TIME_SERIES_INVALID_VALUES_COUNT",
                "TIME_SERIES_INVALID_VALUES_PERCENTAGE",
                "INTERLINKED_RULE_MAXIMUM_VALUES_DIFFERENCE",
                "CUSTOM_USER_QUERY",
                "RULE_RESULT",
                "SCALAR_EXPECTATION",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('AVERAGE', 'NORMALIZED_AVERAGE', 'STANDARD_DEVIATION', 'COUNT_ALL', 'COUNT_DISTINCT', 'SUM', 'MIN', 'MAX', 'VARIANCE', 'QUANTILE', 'FRESHNESS', 'METADATA_FRESHNESS', 'TIME_SERIES_INVALID_VALUES_COUNT', 'TIME_SERIES_INVALID_VALUES_PERCENTAGE', 'INTERLINKED_RULE_MAXIMUM_VALUES_DIFFERENCE', 'CUSTOM_USER_QUERY', 'RULE_RESULT', 'SCALAR_EXPECTATION')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRuleLatestMetricDataDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partition_clause
        if self.partition_clause:
            _dict["partitionClause"] = self.partition_clause.to_dict()
        # set to None if dataset_field_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_field_id is None and "dataset_field_id" in self.model_fields_set:
            _dict["datasetFieldId"] = None

        # set to None if dataset_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_id is None and "dataset_id" in self.model_fields_set:
            _dict["datasetId"] = None

        # set to None if quantile_percentile (nullable) is None
        # and model_fields_set contains the field
        if self.quantile_percentile is None and "quantile_percentile" in self.model_fields_set:
            _dict["quantilePercentile"] = None

        # set to None if time_window_dataset_field_name (nullable) is None
        # and model_fields_set contains the field
        if self.time_window_dataset_field_name is None and "time_window_dataset_field_name" in self.model_fields_set:
            _dict["timeWindowDatasetFieldName"] = None

        # set to None if where_statement (nullable) is None
        # and model_fields_set contains the field
        if self.where_statement is None and "where_statement" in self.model_fields_set:
            _dict["whereStatement"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRuleLatestMetricDataDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "datasetFieldId": obj.get("datasetFieldId"),
                "datasetId": obj.get("datasetId"),
                "groupByFieldNames": obj.get("groupByFieldNames"),
                "metricType": obj.get("metricType"),
                "partitionClause": (
                    GetRuleLatestMetricDataDtoPartitionClause.from_dict(obj["partitionClause"])
                    if obj.get("partitionClause") is not None
                    else None
                ),
                "quantilePercentile": obj.get("quantilePercentile"),
                "timeWindowDatasetFieldName": obj.get("timeWindowDatasetFieldName"),
                "whereStatement": obj.get("whereStatement"),
            }
        )
        return _obj
