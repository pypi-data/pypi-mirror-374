# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from typing_extensions import Self

if TYPE_CHECKING:
    from sifflet_sdk.client.models.airflow_params import AirflowParams
    from sifflet_sdk.client.models.athena_params import AthenaParams
    from sifflet_sdk.client.models.big_query_params import BigQueryParams
    from sifflet_sdk.client.models.composer_params import ComposerParams
    from sifflet_sdk.client.models.databricks_params import DatabricksParams
    from sifflet_sdk.client.models.dbt_cloud_params import DBTCloudParams
    from sifflet_sdk.client.models.dbt_params import DBTParams
    from sifflet_sdk.client.models.declarative_params import DeclarativeParams
    from sifflet_sdk.client.models.fivetran_params import FivetranParams
    from sifflet_sdk.client.models.looker_params import LookerParams
    from sifflet_sdk.client.models.microstrategy_params import MicrostrategyParams
    from sifflet_sdk.client.models.mssql_params import MssqlParams
    from sifflet_sdk.client.models.mwaa_params import MwaaParams
    from sifflet_sdk.client.models.mysql_params import MysqlParams
    from sifflet_sdk.client.models.oracle_params import OracleParams
    from sifflet_sdk.client.models.postgresql_params import PostgresqlParams
    from sifflet_sdk.client.models.power_bi_params import PowerBiParams
    from sifflet_sdk.client.models.qlik_params import QlikParams
    from sifflet_sdk.client.models.quick_sight_params import QuickSightParams
    from sifflet_sdk.client.models.redshift_params import RedshiftParams
    from sifflet_sdk.client.models.snowflake_params import SnowflakeParams
    from sifflet_sdk.client.models.synapse_params import SynapseParams
    from sifflet_sdk.client.models.tableau_params import TableauParams
    from sifflet_sdk.client.models.unknown_datasource_params import (
        UnknownDatasourceParams,
    )


class DatasourceParams(BaseModel):
    """
    DatasourceParams
    """  # noqa: E501

    datasource_type: Optional[StrictStr] = Field(default=None, alias="datasourceType")
    default_refresh_rate: StrictStr = Field(alias="defaultRefreshRate")
    timezone_data: TimeZoneDto = Field(alias="timezoneData")
    type: StrictStr
    __properties: ClassVar[List[str]] = ["datasourceType", "defaultRefreshRate", "timezoneData", "type"]

    @field_validator("datasource_type")
    def datasource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "ATHENA",
                "BIGQUERY",
                "REDSHIFT",
                "SNOWFLAKE",
                "DATABRICKS",
                "MSSQL",
                "MYSQL",
                "POSTGRES",
                "ORACLE",
                "SYNAPSE",
                "POWER_BI",
                "LOOKER",
                "TABLEAU",
                "QUICKSIGHT",
                "MICROSTRATEGY",
                "QLIK",
                "AIRFLOW",
                "MWAA",
                "COMPOSER",
                "DBT",
                "DBTCLOUD",
                "FIVETRAN",
                "DECLARATIVE",
                "_UNKNOWN_",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ATHENA', 'BIGQUERY', 'REDSHIFT', 'SNOWFLAKE', 'DATABRICKS', 'MSSQL', 'MYSQL', 'POSTGRES', 'ORACLE', 'SYNAPSE', 'POWER_BI', 'LOOKER', 'TABLEAU', 'QUICKSIGHT', 'MICROSTRATEGY', 'QLIK', 'AIRFLOW', 'MWAA', 'COMPOSER', 'DBT', 'DBTCLOUD', 'FIVETRAN', 'DECLARATIVE', '_UNKNOWN_')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "AirflowParams": "AirflowParams",
        "AthenaParams": "AthenaParams",
        "BigQueryParams": "BigQueryParams",
        "ComposerParams": "ComposerParams",
        "DBTCloudParams": "DBTCloudParams",
        "DBTParams": "DBTParams",
        "DatabricksParams": "DatabricksParams",
        "DeclarativeParams": "DeclarativeParams",
        "FivetranParams": "FivetranParams",
        "LookerParams": "LookerParams",
        "MicrostrategyParams": "MicrostrategyParams",
        "MssqlParams": "MssqlParams",
        "MwaaParams": "MwaaParams",
        "MysqlParams": "MysqlParams",
        "OracleParams": "OracleParams",
        "PostgresqlParams": "PostgresqlParams",
        "PowerBiParams": "PowerBiParams",
        "QlikParams": "QlikParams",
        "QuickSightParams": "QuickSightParams",
        "RedshiftParams": "RedshiftParams",
        "SnowflakeParams": "SnowflakeParams",
        "SynapseParams": "SynapseParams",
        "TableauParams": "TableauParams",
        "UnknownDatasourceParams": "UnknownDatasourceParams",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[
        Union[
            AirflowParams,
            AthenaParams,
            BigQueryParams,
            ComposerParams,
            DBTCloudParams,
            DBTParams,
            DatabricksParams,
            DeclarativeParams,
            FivetranParams,
            LookerParams,
            MicrostrategyParams,
            MssqlParams,
            MwaaParams,
            MysqlParams,
            OracleParams,
            PostgresqlParams,
            PowerBiParams,
            QlikParams,
            QuickSightParams,
            RedshiftParams,
            SnowflakeParams,
            SynapseParams,
            TableauParams,
            UnknownDatasourceParams,
        ]
    ]:
        """Create an instance of DatasourceParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "default_refresh_rate",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timezone_data
        if self.timezone_data:
            _dict["timezoneData"] = self.timezone_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[
        Union[
            AirflowParams,
            AthenaParams,
            BigQueryParams,
            ComposerParams,
            DBTCloudParams,
            DBTParams,
            DatabricksParams,
            DeclarativeParams,
            FivetranParams,
            LookerParams,
            MicrostrategyParams,
            MssqlParams,
            MwaaParams,
            MysqlParams,
            OracleParams,
            PostgresqlParams,
            PowerBiParams,
            QlikParams,
            QuickSightParams,
            RedshiftParams,
            SnowflakeParams,
            SynapseParams,
            TableauParams,
            UnknownDatasourceParams,
        ]
    ]:
        """Create an instance of DatasourceParams from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AirflowParams":
            return import_module("sifflet_sdk.client.models.airflow_params").AirflowParams.from_dict(obj)
        if object_type == "AthenaParams":
            return import_module("sifflet_sdk.client.models.athena_params").AthenaParams.from_dict(obj)
        if object_type == "BigQueryParams":
            return import_module("sifflet_sdk.client.models.big_query_params").BigQueryParams.from_dict(obj)
        if object_type == "ComposerParams":
            return import_module("sifflet_sdk.client.models.composer_params").ComposerParams.from_dict(obj)
        if object_type == "DBTCloudParams":
            return import_module("sifflet_sdk.client.models.dbt_cloud_params").DBTCloudParams.from_dict(obj)
        if object_type == "DBTParams":
            return import_module("sifflet_sdk.client.models.dbt_params").DBTParams.from_dict(obj)
        if object_type == "DatabricksParams":
            return import_module("sifflet_sdk.client.models.databricks_params").DatabricksParams.from_dict(obj)
        if object_type == "DeclarativeParams":
            return import_module("sifflet_sdk.client.models.declarative_params").DeclarativeParams.from_dict(obj)
        if object_type == "FivetranParams":
            return import_module("sifflet_sdk.client.models.fivetran_params").FivetranParams.from_dict(obj)
        if object_type == "LookerParams":
            return import_module("sifflet_sdk.client.models.looker_params").LookerParams.from_dict(obj)
        if object_type == "MicrostrategyParams":
            return import_module("sifflet_sdk.client.models.microstrategy_params").MicrostrategyParams.from_dict(obj)
        if object_type == "MssqlParams":
            return import_module("sifflet_sdk.client.models.mssql_params").MssqlParams.from_dict(obj)
        if object_type == "MwaaParams":
            return import_module("sifflet_sdk.client.models.mwaa_params").MwaaParams.from_dict(obj)
        if object_type == "MysqlParams":
            return import_module("sifflet_sdk.client.models.mysql_params").MysqlParams.from_dict(obj)
        if object_type == "OracleParams":
            return import_module("sifflet_sdk.client.models.oracle_params").OracleParams.from_dict(obj)
        if object_type == "PostgresqlParams":
            return import_module("sifflet_sdk.client.models.postgresql_params").PostgresqlParams.from_dict(obj)
        if object_type == "PowerBiParams":
            return import_module("sifflet_sdk.client.models.power_bi_params").PowerBiParams.from_dict(obj)
        if object_type == "QlikParams":
            return import_module("sifflet_sdk.client.models.qlik_params").QlikParams.from_dict(obj)
        if object_type == "QuickSightParams":
            return import_module("sifflet_sdk.client.models.quick_sight_params").QuickSightParams.from_dict(obj)
        if object_type == "RedshiftParams":
            return import_module("sifflet_sdk.client.models.redshift_params").RedshiftParams.from_dict(obj)
        if object_type == "SnowflakeParams":
            return import_module("sifflet_sdk.client.models.snowflake_params").SnowflakeParams.from_dict(obj)
        if object_type == "SynapseParams":
            return import_module("sifflet_sdk.client.models.synapse_params").SynapseParams.from_dict(obj)
        if object_type == "TableauParams":
            return import_module("sifflet_sdk.client.models.tableau_params").TableauParams.from_dict(obj)
        if object_type == "UnknownDatasourceParams":
            return import_module(
                "sifflet_sdk.client.models.unknown_datasource_params"
            ).UnknownDatasourceParams.from_dict(obj)

        raise ValueError(
            "DatasourceParams failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
