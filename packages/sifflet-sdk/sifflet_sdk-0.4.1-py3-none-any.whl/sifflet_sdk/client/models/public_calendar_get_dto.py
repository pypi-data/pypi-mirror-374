# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.calendar_timeslot import CalendarTimeslot
from typing_extensions import Self


class PublicCalendarGetDto(BaseModel):
    """
    PublicCalendarGetDto
    """  # noqa: E501

    description: Optional[StrictStr] = None
    editable: Optional[StrictBool] = None
    id: StrictStr
    name: StrictStr
    standard_calendar: Optional[StrictStr] = Field(default=None, alias="standardCalendar")
    timeslots: List[CalendarTimeslot]
    __properties: ClassVar[List[str]] = ["description", "editable", "id", "name", "standardCalendar", "timeslots"]

    @field_validator("standard_calendar")
    def standard_calendar_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "US_PUBLIC_HOLIDAYS",
                "FRANCE_PUBLIC_HOLIDAYS",
                "UK_PUBLIC_HOLIDAYS",
                "BELGIUM_PUBLIC_HOLIDAYS",
                "SPAIN_PUBLIC_HOLIDAYS",
                "GERMANY_PUBLIC_HOLIDAYS",
                "NETHERLANDS_PUBLIC_HOLIDAYS",
                "SUNDAYS",
                "WEEKENDS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('US_PUBLIC_HOLIDAYS', 'FRANCE_PUBLIC_HOLIDAYS', 'UK_PUBLIC_HOLIDAYS', 'BELGIUM_PUBLIC_HOLIDAYS', 'SPAIN_PUBLIC_HOLIDAYS', 'GERMANY_PUBLIC_HOLIDAYS', 'NETHERLANDS_PUBLIC_HOLIDAYS', 'SUNDAYS', 'WEEKENDS')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicCalendarGetDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in timeslots (list)
        _items = []
        if self.timeslots:
            for _item_timeslots in self.timeslots:
                if _item_timeslots:
                    _items.append(_item_timeslots.to_dict())
            _dict["timeslots"] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if standard_calendar (nullable) is None
        # and model_fields_set contains the field
        if self.standard_calendar is None and "standard_calendar" in self.model_fields_set:
            _dict["standardCalendar"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicCalendarGetDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "description": obj.get("description"),
                "editable": obj.get("editable"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "standardCalendar": obj.get("standardCalendar"),
                "timeslots": (
                    [CalendarTimeslot.from_dict(_item) for _item in obj["timeslots"]]
                    if obj.get("timeslots") is not None
                    else None
                ),
            }
        )
        return _obj
