# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.criticality import Criticality
from typing_extensions import Self


class MonitorSearchCriteria(BaseModel):
    """
    MonitorSearchCriteria
    """  # noqa: E501

    created_by: Optional[List[StrictStr]] = Field(default=None, alias="createdBy")
    creation_method: Optional[List[StrictStr]] = Field(default=None, alias="creationMethod")
    creation_method_filters: Optional[List[StrictStr]] = Field(default=None, alias="creationMethodFilters")
    criticality: Optional[List[Criticality]] = None
    custom_metadata_entry: Optional[List[StrictStr]] = Field(default=None, alias="customMetadataEntry")
    dataset: Optional[List[StrictStr]] = None
    datasource: Optional[List[StrictStr]] = None
    domain: Optional[StrictStr] = None
    items_per_page: Optional[StrictInt] = Field(default=25, alias="itemsPerPage")
    monitor: Optional[List[StrictStr]] = None
    page: Optional[StrictInt] = 0
    rule_status: Optional[List[StrictStr]] = Field(default=None, alias="ruleStatus")
    rule_template_name: Optional[List[StrictStr]] = Field(default=None, alias="ruleTemplateName")
    sort: Optional[List[StrictStr]] = None
    tag: Optional[List[StrictStr]] = None
    term: Optional[List[StrictStr]] = None
    text_search: Optional[StrictStr] = Field(default=None, alias="textSearch")
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "creationMethod",
        "creationMethodFilters",
        "criticality",
        "customMetadataEntry",
        "dataset",
        "datasource",
        "domain",
        "itemsPerPage",
        "monitor",
        "page",
        "ruleStatus",
        "ruleTemplateName",
        "sort",
        "tag",
        "term",
        "textSearch",
    ]

    @field_validator("rule_status")
    def rule_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["NOT_EVALUATED", "PASSING", "NEEDS_ATTENTION", "FAILING"]):
                raise ValueError(
                    "each list item must be one of ('NOT_EVALUATED', 'PASSING', 'NEEDS_ATTENTION', 'FAILING')"
                )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitorSearchCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitorSearchCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdBy": obj.get("createdBy"),
                "creationMethod": obj.get("creationMethod"),
                "creationMethodFilters": obj.get("creationMethodFilters"),
                "criticality": obj.get("criticality"),
                "customMetadataEntry": obj.get("customMetadataEntry"),
                "dataset": obj.get("dataset"),
                "datasource": obj.get("datasource"),
                "domain": obj.get("domain"),
                "itemsPerPage": obj.get("itemsPerPage") if obj.get("itemsPerPage") is not None else 25,
                "monitor": obj.get("monitor"),
                "page": obj.get("page") if obj.get("page") is not None else 0,
                "ruleStatus": obj.get("ruleStatus"),
                "ruleTemplateName": obj.get("ruleTemplateName"),
                "sort": obj.get("sort"),
                "tag": obj.get("tag"),
                "term": obj.get("term"),
                "textSearch": obj.get("textSearch"),
            }
        )
        return _obj
