# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from sifflet_sdk.client.models.alerting_hook_dto import AlertingHookDto
from sifflet_sdk.client.models.declared_asset_details_dto_all_of_last_modified_by import (
    DeclaredAssetDetailsDtoAllOfLastModifiedBy,
)
from sifflet_sdk.client.models.tag_dto import TagDto
from typing_extensions import Self


class RuleDetailsDto(BaseModel):
    """
    RuleDetailsDto
    """  # noqa: E501

    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    created_by_provider: DeclaredAssetDetailsDtoAllOfLastModifiedBy = Field(alias="createdByProvider")
    created_date: Optional[StrictInt] = Field(default=None, alias="createdDate")
    jira_template_name: Optional[StrictStr] = Field(default=None, alias="jiraTemplateName")
    last_modified_date: Optional[StrictInt] = Field(default=None, alias="lastModifiedDate")
    mails: List[AlertingHookDto]
    modified_by: Optional[StrictStr] = Field(default=None, alias="modifiedBy")
    modified_by_provider: DeclaredAssetDetailsDtoAllOfLastModifiedBy = Field(alias="modifiedByProvider")
    ms_teams: List[AlertingHookDto] = Field(alias="msTeams")
    provider: DeclaredAssetDetailsDtoAllOfLastModifiedBy
    rule_params: Optional[Dict[str, Any]] = Field(default=None, alias="ruleParams")
    service_now_template_name: Optional[StrictStr] = Field(default=None, alias="serviceNowTemplateName")
    slack_channels: List[AlertingHookDto] = Field(alias="slackChannels")
    tags: List[TagDto]
    terms: List[TagDto]
    webhooks: List[AlertingHookDto]
    __properties: ClassVar[List[str]] = [
        "createdBy",
        "createdByProvider",
        "createdDate",
        "jiraTemplateName",
        "lastModifiedDate",
        "mails",
        "modifiedBy",
        "modifiedByProvider",
        "msTeams",
        "provider",
        "ruleParams",
        "serviceNowTemplateName",
        "slackChannels",
        "tags",
        "terms",
        "webhooks",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by_provider
        if self.created_by_provider:
            _dict["createdByProvider"] = self.created_by_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mails (list)
        _items = []
        if self.mails:
            for _item_mails in self.mails:
                if _item_mails:
                    _items.append(_item_mails.to_dict())
            _dict["mails"] = _items
        # override the default output from pydantic by calling `to_dict()` of modified_by_provider
        if self.modified_by_provider:
            _dict["modifiedByProvider"] = self.modified_by_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ms_teams (list)
        _items = []
        if self.ms_teams:
            for _item_ms_teams in self.ms_teams:
                if _item_ms_teams:
                    _items.append(_item_ms_teams.to_dict())
            _dict["msTeams"] = _items
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict["provider"] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slack_channels (list)
        _items = []
        if self.slack_channels:
            for _item_slack_channels in self.slack_channels:
                if _item_slack_channels:
                    _items.append(_item_slack_channels.to_dict())
            _dict["slackChannels"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item_webhooks in self.webhooks:
                if _item_webhooks:
                    _items.append(_item_webhooks.to_dict())
            _dict["webhooks"] = _items
        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict["createdBy"] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict["createdDate"] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict["lastModifiedDate"] = None

        # set to None if modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.modified_by is None and "modified_by" in self.model_fields_set:
            _dict["modifiedBy"] = None

        # set to None if rule_params (nullable) is None
        # and model_fields_set contains the field
        if self.rule_params is None and "rule_params" in self.model_fields_set:
            _dict["ruleParams"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdBy": obj.get("createdBy"),
                "createdByProvider": (
                    DeclaredAssetDetailsDtoAllOfLastModifiedBy.from_dict(obj["createdByProvider"])
                    if obj.get("createdByProvider") is not None
                    else None
                ),
                "createdDate": obj.get("createdDate"),
                "jiraTemplateName": obj.get("jiraTemplateName"),
                "lastModifiedDate": obj.get("lastModifiedDate"),
                "mails": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["mails"]]
                    if obj.get("mails") is not None
                    else None
                ),
                "modifiedBy": obj.get("modifiedBy"),
                "modifiedByProvider": (
                    DeclaredAssetDetailsDtoAllOfLastModifiedBy.from_dict(obj["modifiedByProvider"])
                    if obj.get("modifiedByProvider") is not None
                    else None
                ),
                "msTeams": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["msTeams"]]
                    if obj.get("msTeams") is not None
                    else None
                ),
                "provider": (
                    DeclaredAssetDetailsDtoAllOfLastModifiedBy.from_dict(obj["provider"])
                    if obj.get("provider") is not None
                    else None
                ),
                "ruleParams": obj.get("ruleParams"),
                "serviceNowTemplateName": obj.get("serviceNowTemplateName"),
                "slackChannels": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["slackChannels"]]
                    if obj.get("slackChannels") is not None
                    else None
                ),
                "tags": [TagDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
                "terms": [TagDto.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
                "webhooks": (
                    [AlertingHookDto.from_dict(_item) for _item in obj["webhooks"]]
                    if obj.get("webhooks") is not None
                    else None
                ),
            }
        )
        return _obj
