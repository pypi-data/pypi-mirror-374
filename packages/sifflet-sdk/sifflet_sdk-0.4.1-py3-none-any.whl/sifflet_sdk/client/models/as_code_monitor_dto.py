# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from sifflet_sdk.client.models.as_code_connection_params_override_dto import (
    AsCodeConnectionParamsOverrideDto,
)
from sifflet_sdk.client.models.as_code_custom_metadata_entry_reference_dto import (
    AsCodeCustomMetadataEntryReferenceDto,
)
from sifflet_sdk.client.models.as_code_dataset_reference_dto import (
    AsCodeDatasetReferenceDto,
)
from sifflet_sdk.client.models.as_code_incident_dto import AsCodeIncidentDto
from sifflet_sdk.client.models.as_code_join_dto import AsCodeJoinDto
from sifflet_sdk.client.models.as_code_monitor_dto_notifications_inner import (
    AsCodeMonitorDtoNotificationsInner,
)
from sifflet_sdk.client.models.as_code_monitor_dto_parameters import (
    AsCodeMonitorDtoParameters,
)
from sifflet_sdk.client.models.as_code_reference_by_id_or_name_dto_impl import (
    AsCodeReferenceByIdOrNameDtoImpl,
)
from sifflet_sdk.client.models.as_code_tag_reference_dto import AsCodeTagReferenceDto
from typing_extensions import Self


class AsCodeMonitorDto(BaseModel):
    """
    AsCodeMonitorDto
    """  # noqa: E501

    connection: Optional[AsCodeConnectionParamsOverrideDto] = None
    custom_metadata_entries: Optional[List[AsCodeCustomMetadataEntryReferenceDto]] = Field(
        default=None, alias="customMetadataEntries"
    )
    datasets: Optional[List[AsCodeDatasetReferenceDto]] = None
    description: Optional[StrictStr] = None
    friendly_id: Optional[StrictStr] = Field(default=None, alias="friendlyId")
    id: Optional[StrictStr] = None
    incident: AsCodeIncidentDto
    joins: List[AsCodeJoinDto]
    kind: Optional[StrictStr] = None
    name: StrictStr
    notifications: Optional[List[AsCodeMonitorDtoNotificationsInner]] = None
    parameters: AsCodeMonitorDtoParameters
    schedule: Optional[StrictStr] = None
    schedule_timezone: Optional[StrictStr] = Field(default=None, alias="scheduleTimezone")
    tags: Optional[List[AsCodeTagReferenceDto]] = None
    terms: Optional[List[AsCodeReferenceByIdOrNameDtoImpl]] = None
    version: StrictInt
    __properties: ClassVar[List[str]] = [
        "connection",
        "customMetadataEntries",
        "datasets",
        "description",
        "friendlyId",
        "id",
        "incident",
        "joins",
        "kind",
        "name",
        "notifications",
        "parameters",
        "schedule",
        "scheduleTimezone",
        "tags",
        "terms",
        "version",
    ]

    @field_validator("kind")
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Workspace", "Monitor", "Asset", "Source", "Lineage"]):
            raise ValueError("must be one of enum values ('Workspace', 'Monitor', 'Asset', 'Source', 'Lineage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsCodeMonitorDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection
        if self.connection:
            _dict["connection"] = self.connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_metadata_entries (list)
        _items = []
        if self.custom_metadata_entries:
            for _item_custom_metadata_entries in self.custom_metadata_entries:
                if _item_custom_metadata_entries:
                    _items.append(_item_custom_metadata_entries.to_dict())
            _dict["customMetadataEntries"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict["datasets"] = _items
        # override the default output from pydantic by calling `to_dict()` of incident
        if self.incident:
            _dict["incident"] = self.incident.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in joins (list)
        _items = []
        if self.joins:
            for _item_joins in self.joins:
                if _item_joins:
                    _items.append(_item_joins.to_dict())
            _dict["joins"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict["notifications"] = _items
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict["parameters"] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict["tags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict["terms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsCodeMonitorDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "connection": (
                    AsCodeConnectionParamsOverrideDto.from_dict(obj["connection"])
                    if obj.get("connection") is not None
                    else None
                ),
                "customMetadataEntries": (
                    [AsCodeCustomMetadataEntryReferenceDto.from_dict(_item) for _item in obj["customMetadataEntries"]]
                    if obj.get("customMetadataEntries") is not None
                    else None
                ),
                "datasets": (
                    [AsCodeDatasetReferenceDto.from_dict(_item) for _item in obj["datasets"]]
                    if obj.get("datasets") is not None
                    else None
                ),
                "description": obj.get("description"),
                "friendlyId": obj.get("friendlyId"),
                "id": obj.get("id"),
                "incident": AsCodeIncidentDto.from_dict(obj["incident"]) if obj.get("incident") is not None else None,
                "joins": (
                    [AsCodeJoinDto.from_dict(_item) for _item in obj["joins"]] if obj.get("joins") is not None else None
                ),
                "kind": obj.get("kind"),
                "name": obj.get("name"),
                "notifications": (
                    [AsCodeMonitorDtoNotificationsInner.from_dict(_item) for _item in obj["notifications"]]
                    if obj.get("notifications") is not None
                    else None
                ),
                "parameters": (
                    AsCodeMonitorDtoParameters.from_dict(obj["parameters"])
                    if obj.get("parameters") is not None
                    else None
                ),
                "schedule": obj.get("schedule"),
                "scheduleTimezone": obj.get("scheduleTimezone"),
                "tags": (
                    [AsCodeTagReferenceDto.from_dict(_item) for _item in obj["tags"]]
                    if obj.get("tags") is not None
                    else None
                ),
                "terms": (
                    [AsCodeReferenceByIdOrNameDtoImpl.from_dict(_item) for _item in obj["terms"]]
                    if obj.get("terms") is not None
                    else None
                ),
                "version": obj.get("version"),
            }
        )
        return _obj
