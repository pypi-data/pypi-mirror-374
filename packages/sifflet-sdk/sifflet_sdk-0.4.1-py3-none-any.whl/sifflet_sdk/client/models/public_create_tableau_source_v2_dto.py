# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field, StrictStr
from sifflet_sdk.client.models.public_create_source_v2_dto import (
    PublicCreateSourceV2Dto,
)
from sifflet_sdk.client.models.public_folders_scope_dto import PublicFoldersScopeDto
from sifflet_sdk.client.models.tableau_information import TableauInformation
from typing_extensions import Self


class PublicCreateTableauSourceV2Dto(PublicCreateSourceV2Dto):
    """
    PublicCreateTableauSourceV2Dto
    """  # noqa: E501

    credentials: StrictStr = Field(description="Credentials of the source")
    schedule: Optional[StrictStr] = Field(
        description="Schedule of the source. Supports CRON syntax. If empty, the source won't be scheduled."
    )
    scope: Optional[PublicFoldersScopeDto] = None
    tableau_information: TableauInformation = Field(alias="tableauInformation")
    __properties: ClassVar[List[str]] = [
        "name",
        "timezone",
        "type",
        "credentials",
        "schedule",
        "scope",
        "tableauInformation",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicCreateTableauSourceV2Dto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict["scope"] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tableau_information
        if self.tableau_information:
            _dict["tableauInformation"] = self.tableau_information.to_dict()
        # set to None if schedule (nullable) is None
        # and model_fields_set contains the field
        if self.schedule is None and "schedule" in self.model_fields_set:
            _dict["schedule"] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict["scope"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicCreateTableauSourceV2Dto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "timezone": obj.get("timezone") if obj.get("timezone") is not None else "UTC",
                "type": obj.get("type"),
                "credentials": obj.get("credentials"),
                "schedule": obj.get("schedule"),
                "scope": PublicFoldersScopeDto.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
                "tableauInformation": (
                    TableauInformation.from_dict(obj["tableauInformation"])
                    if obj.get("tableauInformation") is not None
                    else None
                ),
            }
        )
        return _obj
