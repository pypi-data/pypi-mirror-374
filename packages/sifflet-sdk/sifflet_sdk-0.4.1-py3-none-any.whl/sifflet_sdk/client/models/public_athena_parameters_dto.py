# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field, StrictStr
from sifflet_sdk.client.models.public_source_parameters_dto import (
    PublicSourceParametersDto,
)
from typing_extensions import Self


class PublicAthenaParametersDto(PublicSourceParametersDto):
    """
    PublicAthenaParametersDto
    """  # noqa: E501

    database: StrictStr = Field(description="Your Athena database name")
    datasource: StrictStr = Field(description="Your Athena data source name")
    region: StrictStr = Field(description="Your Athena instance AWS region")
    role_arn: StrictStr = Field(description="ARN of the IAM role to use for Athena queries", alias="roleArn")
    s3_output_location: StrictStr = Field(
        description="The S3 location where Athena query results are stored", alias="s3OutputLocation"
    )
    vpc_url: Optional[StrictStr] = Field(default=None, description="Your VPC URL for Athena connection", alias="vpcUrl")
    workgroup: StrictStr = Field(description="Your Athena workgroup name")
    __properties: ClassVar[List[str]] = [
        "type",
        "database",
        "datasource",
        "region",
        "roleArn",
        "s3OutputLocation",
        "vpcUrl",
        "workgroup",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicAthenaParametersDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicAthenaParametersDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "database": obj.get("database"),
                "datasource": obj.get("datasource"),
                "region": obj.get("region"),
                "roleArn": obj.get("roleArn"),
                "s3OutputLocation": obj.get("s3OutputLocation"),
                "vpcUrl": obj.get("vpcUrl"),
                "workgroup": obj.get("workgroup"),
            }
        )
        return _obj
