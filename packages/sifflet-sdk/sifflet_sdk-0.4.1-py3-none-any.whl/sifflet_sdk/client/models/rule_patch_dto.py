# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.strongly_typed_rule_input_params import (
    StronglyTypedRuleInputParams,
)
from sifflet_sdk.client.models.time_zone_dto import TimeZoneDto
from typing_extensions import Self


class RulePatchDto(BaseModel):
    """
    RulePatchDto
    """  # noqa: E501

    create_incident_on_fail: Optional[StrictBool] = Field(default=None, alias="createIncidentOnFail")
    criticality: Optional[StrictInt] = None
    custom_email_subject: Optional[StrictStr] = Field(default=None, alias="customEmailSubject")
    custom_metadata_entries_operation: Optional[StrictStr] = Field(default=None, alias="customMetadataEntriesOperation")
    custom_metadata_entry_ids: Optional[List[StrictStr]] = Field(default=None, alias="customMetadataEntryIds")
    description: Optional[StrictStr] = None
    mail_ids: Optional[List[StrictStr]] = Field(default=None, alias="mailIds")
    message: Optional[StrictStr] = None
    ms_teams_ids: Optional[List[StrictStr]] = Field(default=None, alias="msTeamsIds")
    rule_params_input_values: Optional[StronglyTypedRuleInputParams] = Field(
        default=None, alias="ruleParamsInputValues"
    )
    schedule: Optional[StrictStr] = None
    schedule_timezone: Optional[TimeZoneDto] = Field(default=None, alias="scheduleTimezone")
    slack_channel_ids: Optional[List[StrictStr]] = Field(default=None, alias="slackChannelIds")
    tag_ids: Optional[List[StrictStr]] = Field(default=None, alias="tagIds")
    term_ids: Optional[List[StrictStr]] = Field(default=None, alias="termIds")
    webhook_ids: Optional[List[StrictStr]] = Field(default=None, alias="webhookIds")
    __properties: ClassVar[List[str]] = [
        "createIncidentOnFail",
        "criticality",
        "customEmailSubject",
        "customMetadataEntriesOperation",
        "customMetadataEntryIds",
        "description",
        "mailIds",
        "message",
        "msTeamsIds",
        "ruleParamsInputValues",
        "schedule",
        "scheduleTimezone",
        "slackChannelIds",
        "tagIds",
        "termIds",
        "webhookIds",
    ]

    @field_validator("custom_metadata_entries_operation")
    def custom_metadata_entries_operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ADD", "REPLACE"]):
            raise ValueError("must be one of enum values ('ADD', 'REPLACE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RulePatchDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rule_params_input_values
        if self.rule_params_input_values:
            _dict["ruleParamsInputValues"] = self.rule_params_input_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_timezone
        if self.schedule_timezone:
            _dict["scheduleTimezone"] = self.schedule_timezone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RulePatchDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createIncidentOnFail": obj.get("createIncidentOnFail"),
                "criticality": obj.get("criticality"),
                "customEmailSubject": obj.get("customEmailSubject"),
                "customMetadataEntriesOperation": obj.get("customMetadataEntriesOperation"),
                "customMetadataEntryIds": obj.get("customMetadataEntryIds"),
                "description": obj.get("description"),
                "mailIds": obj.get("mailIds"),
                "message": obj.get("message"),
                "msTeamsIds": obj.get("msTeamsIds"),
                "ruleParamsInputValues": (
                    StronglyTypedRuleInputParams.from_dict(obj["ruleParamsInputValues"])
                    if obj.get("ruleParamsInputValues") is not None
                    else None
                ),
                "schedule": obj.get("schedule"),
                "scheduleTimezone": (
                    TimeZoneDto.from_dict(obj["scheduleTimezone"]) if obj.get("scheduleTimezone") is not None else None
                ),
                "slackChannelIds": obj.get("slackChannelIds"),
                "tagIds": obj.get("tagIds"),
                "termIds": obj.get("termIds"),
                "webhookIds": obj.get("webhookIds"),
            }
        )
        return _obj
