# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.group_identifier_dto import GroupIdentifierDto
from sifflet_sdk.client.models.parameterized_query_dto import ParameterizedQueryDto
from typing_extensions import Self


class RuleRunDetailsByGroupDto(BaseModel):
    """
    RuleRunDetailsByGroupDto
    """  # noqa: E501

    can_be_qualified: StrictBool = Field(alias="canBeQualified")
    can_show_failing_rows: StrictBool = Field(alias="canShowFailingRows")
    debug_sql: Optional[ParameterizedQueryDto] = Field(default=None, alias="debugSql")
    dimension: StrictStr
    group: GroupIdentifierDto
    group_status: StrictStr = Field(alias="groupStatus")
    has_graph: StrictBool = Field(alias="hasGraph")
    result: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "canBeQualified",
        "canShowFailingRows",
        "debugSql",
        "dimension",
        "group",
        "groupStatus",
        "hasGraph",
        "result",
        "status",
    ]

    @field_validator("group_status")
    def group_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["NOT_EVALUATED", "PASSING", "NEEDS_ATTENTION", "FAILING"]):
            raise ValueError("must be one of enum values ('NOT_EVALUATED', 'PASSING', 'NEEDS_ATTENTION', 'FAILING')")
        return value

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "RUNNING", "SUCCESS", "REQUIRES_YOUR_ATTENTION", "TECHNICAL_ERROR", "FAILED"]):
            raise ValueError(
                "must be one of enum values ('PENDING', 'RUNNING', 'SUCCESS', 'REQUIRES_YOUR_ATTENTION', 'TECHNICAL_ERROR', 'FAILED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleRunDetailsByGroupDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_sql
        if self.debug_sql:
            _dict["debugSql"] = self.debug_sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict["group"] = self.group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleRunDetailsByGroupDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "canBeQualified": obj.get("canBeQualified"),
                "canShowFailingRows": obj.get("canShowFailingRows"),
                "debugSql": (
                    ParameterizedQueryDto.from_dict(obj["debugSql"]) if obj.get("debugSql") is not None else None
                ),
                "dimension": obj.get("dimension"),
                "group": GroupIdentifierDto.from_dict(obj["group"]) if obj.get("group") is not None else None,
                "groupStatus": obj.get("groupStatus"),
                "hasGraph": obj.get("hasGraph"),
                "result": obj.get("result"),
                "status": obj.get("status"),
            }
        )
        return _obj
