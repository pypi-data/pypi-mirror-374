# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.continuous_distribution import ContinuousDistribution
from sifflet_sdk.client.models.discrete_distribution import DiscreteDistribution
from sifflet_sdk.client.models.interlinked_metrics import InterlinkedMetrics
from sifflet_sdk.client.models.time_series import TimeSeries
from typing_extensions import Self


class ButterflyDebug(BaseModel):
    """
    ButterflyDebug
    """  # noqa: E501

    current_distribution_continuous: Optional[ContinuousDistribution] = Field(
        default=None, alias="currentDistributionContinuous"
    )
    current_distribution_discrete: Optional[DiscreteDistribution] = Field(
        default=None, alias="currentDistributionDiscrete"
    )
    distribution_type: Optional[StrictStr] = Field(default=None, alias="distributionType")
    former_distribution_continuous: Optional[ContinuousDistribution] = Field(
        default=None, alias="formerDistributionContinuous"
    )
    former_distribution_discrete: Optional[DiscreteDistribution] = Field(
        default=None, alias="formerDistributionDiscrete"
    )
    has_group_by: StrictBool = Field(alias="hasGroupBy")
    interlinked_metrics_graph: Optional[InterlinkedMetrics] = Field(default=None, alias="interlinkedMetricsGraph")
    model_type: Optional[StrictStr] = Field(default=None, alias="modelType")
    parameters_hash: Optional[StrictStr] = Field(default=None, alias="parametersHash")
    time_series_graph: Optional[TimeSeries] = Field(default=None, alias="timeSeriesGraph")
    timezone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "currentDistributionContinuous",
        "currentDistributionDiscrete",
        "distributionType",
        "formerDistributionContinuous",
        "formerDistributionDiscrete",
        "hasGroupBy",
        "interlinkedMetricsGraph",
        "modelType",
        "parametersHash",
        "timeSeriesGraph",
        "timezone",
    ]

    @field_validator("distribution_type")
    def distribution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["DISCRETE", "CONTINUOUS", "OTHER"]):
            raise ValueError("must be one of enum values ('DISCRETE', 'CONTINUOUS', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ButterflyDebug from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_distribution_continuous
        if self.current_distribution_continuous:
            _dict["currentDistributionContinuous"] = self.current_distribution_continuous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_distribution_discrete
        if self.current_distribution_discrete:
            _dict["currentDistributionDiscrete"] = self.current_distribution_discrete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of former_distribution_continuous
        if self.former_distribution_continuous:
            _dict["formerDistributionContinuous"] = self.former_distribution_continuous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of former_distribution_discrete
        if self.former_distribution_discrete:
            _dict["formerDistributionDiscrete"] = self.former_distribution_discrete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interlinked_metrics_graph
        if self.interlinked_metrics_graph:
            _dict["interlinkedMetricsGraph"] = self.interlinked_metrics_graph.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_series_graph
        if self.time_series_graph:
            _dict["timeSeriesGraph"] = self.time_series_graph.to_dict()
        # set to None if current_distribution_continuous (nullable) is None
        # and model_fields_set contains the field
        if self.current_distribution_continuous is None and "current_distribution_continuous" in self.model_fields_set:
            _dict["currentDistributionContinuous"] = None

        # set to None if current_distribution_discrete (nullable) is None
        # and model_fields_set contains the field
        if self.current_distribution_discrete is None and "current_distribution_discrete" in self.model_fields_set:
            _dict["currentDistributionDiscrete"] = None

        # set to None if distribution_type (nullable) is None
        # and model_fields_set contains the field
        if self.distribution_type is None and "distribution_type" in self.model_fields_set:
            _dict["distributionType"] = None

        # set to None if former_distribution_continuous (nullable) is None
        # and model_fields_set contains the field
        if self.former_distribution_continuous is None and "former_distribution_continuous" in self.model_fields_set:
            _dict["formerDistributionContinuous"] = None

        # set to None if former_distribution_discrete (nullable) is None
        # and model_fields_set contains the field
        if self.former_distribution_discrete is None and "former_distribution_discrete" in self.model_fields_set:
            _dict["formerDistributionDiscrete"] = None

        # set to None if interlinked_metrics_graph (nullable) is None
        # and model_fields_set contains the field
        if self.interlinked_metrics_graph is None and "interlinked_metrics_graph" in self.model_fields_set:
            _dict["interlinkedMetricsGraph"] = None

        # set to None if model_type (nullable) is None
        # and model_fields_set contains the field
        if self.model_type is None and "model_type" in self.model_fields_set:
            _dict["modelType"] = None

        # set to None if parameters_hash (nullable) is None
        # and model_fields_set contains the field
        if self.parameters_hash is None and "parameters_hash" in self.model_fields_set:
            _dict["parametersHash"] = None

        # set to None if time_series_graph (nullable) is None
        # and model_fields_set contains the field
        if self.time_series_graph is None and "time_series_graph" in self.model_fields_set:
            _dict["timeSeriesGraph"] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict["timezone"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ButterflyDebug from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "currentDistributionContinuous": (
                    ContinuousDistribution.from_dict(obj["currentDistributionContinuous"])
                    if obj.get("currentDistributionContinuous") is not None
                    else None
                ),
                "currentDistributionDiscrete": (
                    DiscreteDistribution.from_dict(obj["currentDistributionDiscrete"])
                    if obj.get("currentDistributionDiscrete") is not None
                    else None
                ),
                "distributionType": obj.get("distributionType"),
                "formerDistributionContinuous": (
                    ContinuousDistribution.from_dict(obj["formerDistributionContinuous"])
                    if obj.get("formerDistributionContinuous") is not None
                    else None
                ),
                "formerDistributionDiscrete": (
                    DiscreteDistribution.from_dict(obj["formerDistributionDiscrete"])
                    if obj.get("formerDistributionDiscrete") is not None
                    else None
                ),
                "hasGroupBy": obj.get("hasGroupBy"),
                "interlinkedMetricsGraph": (
                    InterlinkedMetrics.from_dict(obj["interlinkedMetricsGraph"])
                    if obj.get("interlinkedMetricsGraph") is not None
                    else None
                ),
                "modelType": obj.get("modelType"),
                "parametersHash": obj.get("parametersHash"),
                "timeSeriesGraph": (
                    TimeSeries.from_dict(obj["timeSeriesGraph"]) if obj.get("timeSeriesGraph") is not None else None
                ),
                "timezone": obj.get("timezone"),
            }
        )
        return _obj
