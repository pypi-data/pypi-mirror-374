# coding: utf-8

"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from sifflet_sdk.client.models.search_collection_get_custom_metadata_entry_value_response_dto import (
    SearchCollectionGetCustomMetadataEntryValueResponseDto,
)
from typing_extensions import Self


class GetCustomMetadataResponseDto(BaseModel):
    """
    GetCustomMetadataResponseDto
    """  # noqa: E501

    authorized_assets: List[StrictStr] = Field(alias="authorizedAssets")
    description: Optional[StrictStr] = None
    entries: SearchCollectionGetCustomMetadataEntryValueResponseDto
    id: StrictStr
    is_allow_multiple_values: StrictBool = Field(alias="isAllowMultipleValues")
    is_show_in_filter: StrictBool = Field(alias="isShowInFilter")
    name: StrictStr
    type: StrictStr
    __properties: ClassVar[List[str]] = [
        "authorizedAssets",
        "description",
        "entries",
        "id",
        "isAllowMultipleValues",
        "isShowInFilter",
        "name",
        "type",
    ]

    @field_validator("authorized_assets")
    def authorized_assets_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(["TABLE_AND_VIEW", "DASHBOARD", "PIPELINE", "DECLARATIVE_ASSET", "MONITOR"]):
                raise ValueError(
                    "each list item must be one of ('TABLE_AND_VIEW', 'DASHBOARD', 'PIPELINE', 'DECLARATIVE_ASSET', 'MONITOR')"
                )
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["LABEL", "USER", "STRING"]):
            raise ValueError("must be one of enum values ('LABEL', 'USER', 'STRING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCustomMetadataResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entries
        if self.entries:
            _dict["entries"] = self.entries.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCustomMetadataResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "authorizedAssets": obj.get("authorizedAssets"),
                "description": obj.get("description"),
                "entries": (
                    SearchCollectionGetCustomMetadataEntryValueResponseDto.from_dict(obj["entries"])
                    if obj.get("entries") is not None
                    else None
                ),
                "id": obj.get("id"),
                "isAllowMultipleValues": obj.get("isAllowMultipleValues"),
                "isShowInFilter": obj.get("isShowInFilter"),
                "name": obj.get("name"),
                "type": obj.get("type"),
            }
        )
        return _obj
