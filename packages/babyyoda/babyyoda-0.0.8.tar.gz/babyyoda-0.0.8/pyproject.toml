[build-system]
requires = [
  "hatchling",
  "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name = "babyyoda"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.9"
keywords = []
authors = [
  { name = "Alexander Puck Neuwirth", email = "alexander@neuwirth-informatik.de" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Scientific/Engineering",
]
dependencies = [
  "numpy",
  "uhi>=1.0.0",
  "mplhep>=0.3.55",
  "smplr",
]
[project.optional-dependencies]
lint = [
    "ruff",
]
test = [
    "boost_histogram",
    "hist",
    "histoprint",
    "mplhep",
    "pydocstyle",
    "pytest-cov>=2.5.1",
    "pytest>=6.0",
]
develop = [
    "babyyoda[test,lint]",
    "boost_histogram",
    "notebook",
    "pre-commit",
    "tbump>=6.7.0",
]
docs = [
  "sphinx"
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.develop]
features = [
  "develop",
]


[project.scripts]
babyyoda = "babyyoda.cli.main:main"

[project.urls]
Documentation = "https://github.com/APN-Pucky/babyyoda#readme"
Issues = "https://github.com/APN-Pucky/babyyoda/issues"
Source = "https://github.com/APN-Pucky/babyyoda/"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/babyyoda tests}"

[tool.coverage.run]
source_pkgs = ["babyyoda", "tests"]
branch = true
parallel = true
omit = [
  "src/babyyoda/__about__.py",
]

[tool.coverage.paths]
babyyoda= ["src/babyyoda", "*/babyyoda/src/babyyoda"]
tests = ["tests", "*/babyyoda/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.version]
source = "vcs"



[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/babyyoda/_version.py"

[tool.mypy]
warn_unused_configs = true
warn_unused_ignores = true
python_version = "3.9"
files = "src"
strict = true
warn_unreachable = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]


[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "FURB",     # refurb
  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "RUF012",   # TODO: mutable class attributes
  "SIM115",   # TODO: use context manager for opening files
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
junit_family = "xunit2"
log_cli_level = "info"
xfail_strict = true
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
filterwarnings = [
  "error",
  "ignore:Integer weights indicate poissonian data:UserWarning"
]
