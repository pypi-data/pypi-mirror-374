[project]
name = "agentup"
version = "0.7.5"
description = "Create AI agents with all the trappings, out of the box."
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Luke Hinds", email = "luke@rdrocket.com" }]
dependencies = [
    "click>=8.1.0",
    "questionary>=2.0.1",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.0",
    "httpx>=0.28.1",
    "a2a-sdk[sql]>=0.3.0",
    "uvicorn>=0.34.3",
    "fastapi[standard]>=0.115.12",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "numpy>=1.26.4",
    "pillow>=11.3.0",
    "asyncio>=3.4.3",
    "fastmcp>=2.8.1",
    "mcp>=1.0.0",
    "pydantic>=2.11.5",
    "pydantic-settings>=2.7.0",
    "python-dotenv>=1.1.0",
    "authlib>=1.6.0",
    "psutil>=7.0.0",
    "valkey>=6.0.0",
    "pyjwt>=2.10.1",
    "structlog>=25.4.0,<26.0.0",
    "asgi-correlation-id>=4.3.4",
    "redis>=6.2.0",
    "aiohttp>=3.12.15",
    "semver>=3.0.4",
    "packaging>=23.0",
    "importlib-metadata>=8.7.0",
]

[project.scripts]
agentup = "agent.cli.main:cli"

[project.optional-dependencies]
agent = ["pytest>=8.0.0", "pytest-asyncio>=0.23.0"]
crewai = ["crewai>=0.157.0"]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.8.0",
    "pytest-cov>=6.0.0",
    "pytest-watch>=4.2.0",
    "twine>=6.0.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.32.0",
    "pre-commit>=4.2.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "mkdocs-mermaid2-plugin>=1.1.1",
    "mkdocs-include-markdown-plugin>=6.2.5",
    "mkdocs-minify-plugin>=0.8.0",
    "pymdown-extensions>=10.12.1",
    "mkdocs-git-committers-plugin>=0.2.3",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-minify-plugin>=0.8.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/agent"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--verbose --tb=short"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.uv]
package = true

[tool.ruff]
target-version = "py310"
line-length = 120
exclude = [".git", "__pycache__", "build", "dist", ".venv", "venv"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["questionary.*", "a2a.*", "fastmcp.*", "authlib.*"]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101"]                                           # assert_used

[tool.pyright]
venvPath = "."
venv = ".venv"

[dependency-groups]
dev = ["coverage>=7.9.1", "mypy-extensions>=1.1.0", "pathspec>=0.12.1"]
