---
description: Best practices and patterns for AgentUp Plugin Development
globs: **/*.py, src/**/*.py, tests/**/*.py
---

This is an AgentUp plugin that provides {{ display_name }} functionality. It
uses the AgentUp plugin architecture via the pluggy hook system for entry points
to the AgentUp runtime.

## Plugin Structure

```
{{ plugin_name }}/
├── src/
│   └── {{ plugin_name_snake }}/
│       ├── __init__.py
│       └── plugin.py           # Main plugin implementation
├── tests/
│   └── test_{{ plugin_name_snake }}.py
├── pyproject.toml              # Package configuration with AgentUp entry point
├── README.md                   # Plugin documentation
└── CLAUDE.md                   # This file
```
## Plugin Overview

This is an AgentUp plugin that provides {{ display_name }} functionality.

## Plugin Structure

```
{{ plugin_name }}/
├── src/
│   └── {{ plugin_name_snake }}/
│       ├── __init__.py
│       └── plugin.py           # Main plugin implementation
├── tests/
│   └── test_{{ plugin_name_snake }}.py
├── pyproject.toml              # Package configuration with AgentUp entry point
├── README.md                   # Plugin documentation
└── CLAUDE.md                   # This file
```

## Core Plugin Architecture

### Hook System
The plugin uses pluggy hooks to integrate with AgentUp:

- `@hookimpl def register_capability()` - **Required** - Registers the plugin's capability(s)
- `@hookimpl def can_handle_task()` - **Required** - Determines if plugin can handle a task
- `@hookimpl def execute_capability()` - **Required** - Main capability execution logic
- `@hookimpl def validate_config()` - Optional - Validates plugin configuration
- `@hookimpl def get_ai_functions()` - Optional - Provides AI-callable functions
- `@hookimpl def configure_services()` - Optional - Configures external services
- `@hookimpl def get_middleware_config()` - Optional - Requests middleware

### Entry Point
The plugin is registered via entry point in `pyproject.toml`:
```toml
[project.entry-points."agentup.plugins"]
{{ plugin_name_snake }} = "{{ plugin_name_snake }}.plugin:Plugin"
```

## Development Guidelines

### Code Style
- Follow PEP 8 and Python best practices
- Use type hints throughout the codebase (following modern Python typing conventions)
- Use async/await for I/O operations
- Handle errors gracefully with proper A2A error responses

### Modern Typing Conventions (Python 3.9+)
- **Use built-in types**: `dict[str, Any]` instead of `typing.Dict[str, Any]`
- **Use built-in types**: `list[str]` instead of `typing.List[str]`
- **Use union syntax**: `str | None` instead of `Optional[str]` (Python 3.10+)
- **Import selectively**: Only import from `typing` what's not available as built-ins

### Pydantic v2 Requirements
- Use `@field_validator` instead of deprecated `@validator`
- Use `@model_validator(mode='after')` instead of `@root_validator`
- Always add `@classmethod` decorator for field validators
- Use `model_dump()` and `model_validate()` methods (Pydantic v2)

### Plugin Implementation Patterns

#### 1. Capability Registration
```python
@hookimpl
def register_capability(self) -> CapabilityDefinition:
    return CapabilityDefinition(
        id="{{ capability_id }}",
        name="{{ display_name }}",
        version="{{ agentup_version }}",
        description="{{ description }}",
        capabilities=[CapabilityType.TEXT],  # Add capabilities as needed
        tags=["{{ plugin_name }}", "custom"],
        config_schema={
            # JSON schema for configuration validation
        }
    )
```

#### 2. Task Routing
```python
@hookimpl
def can_handle_task(self, context: CapabilityContext) -> float:
    user_input = self._extract_user_input(context).lower()

    # Return confidence score (0.0 to 1.0)
    # Higher scores = more likely to handle the task
    keywords = {'keyword1': 1.0, 'keyword2': 0.8}

    confidence = 0.0
    for keyword, score in keywords.items():
        if keyword in user_input:
            confidence = max(confidence, score)

    return confidence
```

#### 3. Capability Execution
```python
@hookimpl
def execute_capability(self, context: CapabilityContext) -> CapabilityResult:
    try:
        user_input = self._extract_user_input(context)

        # Your capability logic here
        response = self._process_request(user_input)

        return CapabilityResult(
            content=response,
            success=True,
            metadata={"capability": "{{ capability_id }}"}
        )
    except Exception as e:
        return CapabilityResult(
            content=f"Error: {str(e)}",
            success=False,
            error=str(e)
        )
```

#### 4. AI Function Support (Modern Typing)
```python
@hookimpl
def get_ai_functions(self) -> list[AIFunction]:  # Use list, not List
    return [
        AIFunction(
            name="function_name",
            description="Function description for LLM",
            parameters={
                "type": "object",
                "properties": {
                    "param1": {
                        "type": "string",
                        "description": "Parameter description"
                    }
                },
                "required": ["param1"]
            },
            handler=self._handle_function
        )
    ]

async def _handle_function(self, param1: str, config: dict[str, Any] | None = None) -> str:
    """Handle function with modern type annotations."""
    # Use dict[str, Any] instead of Dict[str, Any]
    settings: dict[str, Any] = config or {}
    return f"Processed: {param1}"
```

### Error Handling
- Always return CapabilityResult objects from execute_capability
- Use success=False for errors
- Include descriptive error messages
- Log errors appropriately for debugging

### Testing
- Write comprehensive tests for all plugin functionality
- Test both success and error cases
- Mock external dependencies
- Use pytest and async test patterns

### Configuration
- Define configuration schema in register_capability()
- Validate configuration in validate_config() hook
- Use environment variables for sensitive data
- Provide sensible defaults

## Development Workflow

### Local Development
1. Install in development mode: `pip install -e .`
2. Create test agent: `agentup init test-agent --template minimal`
3. Configure plugin in agent's `agentup.yml`
4. Test with: `agentup run`

### Testing
```bash
# Run tests
pytest tests/ -v

# Check plugin loading
agentup plugin list

# Validate plugin
agentup plugin validate {{ plugin_name_snake }}
```

### External Dependencies
- Use AgentUp's service registry for HTTP clients, databases, etc.
- Declare all dependencies in pyproject.toml
- Use async libraries for better performance

## Plugin Capabilities

### Available Capabilities
- `CapabilityType.TEXT` - Text processing
- `CapabilityType.MULTIMODAL` - Images, documents, etc.
- `CapabilityType.AI_FUNCTION` - LLM-callable functions
- `CapabilityType.STREAMING` - Streaming responses
- `CapabilityType.STATEFUL` - State management

### Middleware Support
Request middleware for common functionality:
- Rate limiting
- Caching
- Retry logic
- Logging
- Validation

### Service Integration
Access external services via AgentUp's service registry:
- HTTP clients
- Database connections
- Cache backends
- Message queues

## Best Practices

### Performance
- Use async/await for I/O operations
- Implement caching for expensive operations
- Use connection pooling for external APIs
- Minimize blocking operations

### Security
- Validate all inputs
- Sanitize outputs
- Use secure authentication methods
- Never log sensitive data

### Maintainability
- Follow single responsibility principle
- Keep functions small and focused
- Use descriptive variable names
- Add docstrings to all public methods

## Common Patterns

### External API Integration
```python
async def _call_external_api(self, data):
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://api.example.com/endpoint",
            json=data,
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        response.raise_for_status()
        return response.json()
```

### State Management
```python
@hookimpl
def get_state_schema(self) -> dict:
    return {
        "type": "object",
        "properties": {
            "user_preferences": {"type": "object"},
            "session_data": {"type": "object"}
        }
    }
```

### Configuration Validation (Pydantic v2)
```python
from pydantic import BaseModel, Field, field_validator
from typing import Any

class PluginConfig(BaseModel):
    """Plugin configuration with validation."""
    api_key: str = Field(..., description="API key")
    timeout: int = Field(30, ge=1, le=300)
    metadata: dict[str, Any] = Field(default_factory=dict)
    
    @field_validator("api_key")
    @classmethod
    def validate_api_key(cls, v: str) -> str:
        if len(v) < 10:
            raise ValueError("API key too short")
        return v

@hookimpl
def validate_config(self, config: dict[str, Any]) -> PluginValidationResult:
    try:
        PluginConfig(**config)
        return PluginValidationResult(valid=True, errors=[], warnings=[])
    except Exception as e:
        return PluginValidationResult(valid=False, errors=[str(e)], warnings=[])
```

## Modern Plugin Architecture

### Required Import Structure
```python
from __future__ import annotations  # Enable modern type annotations

from typing import Any, Literal, Union  # Only import non-built-in types
from pydantic import BaseModel, Field, field_validator, model_validator
from datetime import datetime

# Use built-in types for collections
def process_data(items: list[str], metadata: dict[str, Any]) -> dict[str, Any]:
    """Example function with modern typing."""
    results: list[dict[str, Any]] = []
    for item in items:
        results.append({"item": item, "processed": True})
    return {"results": results, "count": len(results)}
```

### Data Validation Patterns
```python
class RequestModel(BaseModel):
    """Input validation model."""
    action: Literal["process", "analyze"]
    data: dict[str, Any] = Field(default_factory=dict)
    options: dict[str, str] = Field(default_factory=dict)
    
    @field_validator("data")
    @classmethod
    def validate_data(cls, v: dict[str, Any]) -> dict[str, Any]:
        if not v:
            raise ValueError("Data cannot be empty")
        return v

class ResponseModel(BaseModel):
    """Output validation model."""
    success: bool
    result: str | dict[str, Any] | None = None
    errors: list[str] = Field(default_factory=list)
    timestamp: datetime = Field(default_factory=datetime.utcnow)
```

### Error Handling Best Practices
```python
class PluginError(Exception):
    """Base plugin exception."""
    def __init__(self, message: str, error_code: str = "PLUGIN_ERROR"):
        self.error_code = error_code
        super().__init__(message)

async def safe_execute(self, context: CapabilityContext) -> CapabilityResult:
    """Execute with comprehensive error handling."""
    try:
        # Validate input using Pydantic
        request = RequestModel(**context.input_data)
        
        # Process request
        result = await self._process_request(request)
        
        # Validate output
        response = ResponseModel(success=True, result=result)
        
        return CapabilityResult(
            content=response.model_dump_json(),  # Pydantic v2 method
            success=True,
            metadata={"response_type": "json"}
        )
        
    except PluginError as e:
        return CapabilityResult(
            content=f"Plugin error: {e}",
            success=False,
            error=str(e),
            metadata={"error_code": e.error_code}
        )
    except Exception as e:
        logger.exception("Unexpected error in plugin")
        return CapabilityResult(
            content="Internal plugin error",
            success=False,
            error=str(e),
            metadata={"error_code": "INTERNAL_ERROR"}
        )
```

## Debugging Tips

### Common Issues
- Plugin not loading: Check entry point in pyproject.toml
- Functions not available: Verify get_ai_functions() returns valid schemas
- Routing not working: Debug can_handle_task() logic
- Configuration errors: Implement validate_config() hook

### Logging
```python
import logging
logger = logging.getLogger(__name__)

def execute_capability(self, context: CapabilityContext) -> CapabilityResult:
    logger.info("Processing request", extra={"capability": "{{ capability_id }}"})
    # ... implementation
```

## Distribution

### Package Structure
- Follow Python package conventions
- Include comprehensive README.md
- Add LICENSE file
- Include CHANGELOG.md for version history

### Publishing
1. Test thoroughly with various agents
2. Update version in pyproject.toml
3. Build package: `python -m build`
4. Upload to PyPI: `python -m twine upload dist/*`

## Important Notes


### Framework Integration
- Leverage AgentUp's built-in features
- Use provided utilities and helpers
- Follow established patterns from other plugins
- Maintain compatibility with different agent templates

### Community Guidelines
- Write clear documentation
- Provide usage examples
- Follow semantic versioning
- Respond to issues and pull requests

## Resources

- [AgentUp Documentation](https://docs.agentup.dev)
- [Plugin Development Guide](https://docs.agentup.dev/plugins/development)
- [Testing Guide](https://docs.agentup.dev/plugins/testing)
- [AI Functions Guide](https://docs.agentup.dev/plugins/ai-functions)

---

Remember: This plugin is part of the AgentUp ecosystem. Always consider how it
integrates with other plugins and follows AgentUp approach for maximum
compatibility and maintainability.
