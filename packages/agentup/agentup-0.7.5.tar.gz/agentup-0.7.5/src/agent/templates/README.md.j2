# {{ project_name_title }}

{{ description }}

## Quick Start

1. Install dependencies:
   ```bash
   uv sync
   ```

2. Configure your agent:
   - Edit `agentup.yml` to customize skills, providers, and features
   - Set environment variables in `.env` file

3. Start the development server:
   ```bash
   agentup run
   ```

   Or run direct with uvicorn:
   ```bash
   uv run uvicorn agent.api.app:app --reload --port 8000
   ```

### **Template-Specific Features**
This agent was created with the **{{ template_name }}** template and includes:

{% if has_middleware %}
- ✓ Middleware system (rate limiting, caching, retry logic)
{% endif %}
{% if has_services %}
- ✓ External service integrations
{% endif %}
{% if has_multimodal %}
- ✓ Multi-modal processing (images, documents)
{% endif %}
{% if has_state_management %}
- ✓ Enhanced state management and conversation persistence
{% endif %}
{% if has_auth %}
- ✓ Advanced authentication and security schemes
{% endif %}
{% if has_testing %}
- ✓ Comprehensive A2A-compliant test suite
{% endif %}
{% if has_deployment %}
- ✓ Deployment tools (Docker, Kubernetes)
{% endif %}

## Development

This agent runs from the AgentUp framework package.

#### 1. Adding New Tools via Plugins

**Create a Local Plugin:**
```bash
# Create plugin in the plugins directory
agentup plugin init my-skill --output-dir plugins/

# Install in development mode
pip install -e plugins/my-skill

# Add to agentup.yml
```

**Use Existing Plugins:**
```bash
# Install from PyPI
pip install agentup-plugin-name

# Or from Git
pip install git+https://github.com/user/agentup-plugin-name
```

#### 2. Configuration-Based Customization

**Modify Agent Behavior** (`agentup.yml`):
```yaml
skills:
  - plugin_id: my_plugin_skill  # From installed plugin
    name: My Skill
    description: Custom skill via plugin
    tags: [custom, business]
    # Routing is now implicit - no configuration needed
    priority: 100
```

**Environment Configuration** (`.env`):
```bash
# Set API keys and service URLs
OPENAI_API_KEY=your_key_here
GITHUB_TOKEN=your_token_here
```

#### 3. Framework Updates

Your agent automatically gets framework updates when you upgrade AgentUp:

```bash
# Upgrade to latest AgentUp version
pip install --upgrade agentup

# Restart your agent - new features available immediately
agentup run
```

## Testing

Test your agent using A2A-compliant JSON-RPC calls:

```bash
# Test basic message handling
curl -X POST http://localhost:8000/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "message/send",
    "params": {
      "message": {
        "role": "user",
        "parts": [{"kind": "text", "text": "Hello"}],
        "message_id": "msg-001",
        "context_id": "ctx-001",
        "kind": "message"
      }
    },
    "id": "req-001"
  }'

# Test agent discovery
curl http://localhost:8000/.well-known/agent-card.json
```

## Project Structure

```
{{ project_name_snake }}/
├── agentup.yml          # Main configuration
├── .env                 # Environment variables  
├── README.md           # This file
├── pyproject.toml      # Dependencies (just agentup)
{% if has_deployment %}├── Dockerfile          # Container image definition
├── docker-compose.yml  # Local development with dependencies
└── helm/               # Kubernetes Helm charts
    ├── Chart.yaml      # Helm chart metadata
    ├── values.yaml     # Default configuration values
    └── templates/      # Kubernetes resource templates
        ├── deployment.yaml
        ├── service.yaml
        └── _helpers.tpl
{% endif %}```

## Deployment

The agent can be deployed anywhere Python runs:

```bash
uvicorn agent.api.app:app --host 0.0.0.0 --port 8000
```

{% if has_deployment %}
### Docker Deployment

This project includes Docker support for easy deployment:

```bash
# Build the Docker image
docker build -t {{ project_name_snake }}:latest .

# Run with docker-compose (includes dependencies)
docker-compose up -d

# Or run directly
docker run -d -p 8000:8000 --env-file .env {{ project_name_snake }}:latest
```

{% if feature_config.docker_registry %}
**Push to Registry:**
```bash
# Tag for your registry
docker tag {{ project_name_snake }}:latest {{ feature_config.docker_registry }}/{{ project_name_snake }}:latest

# Push to registry
docker push {{ feature_config.docker_registry }}/{{ project_name_snake }}:latest
```
{% endif %}

### Kubernetes Deployment

Deploy to Kubernetes using the included Helm charts:

```bash
# Install with Helm
helm install {{ project_name_snake }} ./helm/

# Or apply directly to Kubernetes
kubectl apply -f helm/templates/

# Port forward for local testing
kubectl port-forward service/{{ project_name_snake }} 8000:8000
```

**Helm Configuration:**
```bash
# Customize deployment
helm install {{ project_name_snake }} ./helm/ \
  --set image.repository=your-registry/{{ project_name_snake }} \
  --set image.tag=v1.0.0 \
  --set ingress.enabled=true \
  --set ingress.hosts[0].host={{ project_name_snake }}.example.com

# Upgrade deployment
helm upgrade {{ project_name_snake }} ./helm/
```

### Production Considerations

**Security:**
- Uses Chainguard distroless base image for minimal attack surface
- Runs as non-root user (UID 65532)
- Read-only root filesystem in containers

**Monitoring:**
- Health check endpoint at `/health`
- Structured logging with JSON format
- Metrics available via AgentUp framework

**Scaling:**
- Stateless design supports horizontal scaling
- External state management via Valkey/Redis{% if feature_config.state_backend == "valkey" %} (configured){% endif %}
- Load balancer friendly

{% endif %}

## Documentation

For more information:
- [AgentUp Documentation](https://docs.agentup.dev)
- [Plugin Development Guide](https://docs.agentup.dev/plugins)

## License

Apache 2.0

---
Created with [AgentUp](https://github.com/RedDotRocket/AgentUp)

