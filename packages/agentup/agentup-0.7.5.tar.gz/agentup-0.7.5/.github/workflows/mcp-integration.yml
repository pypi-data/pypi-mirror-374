name: MCP Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/agent/mcp_support/**'
      - 'scripts/mcp/**'
      - 'tests/integration/test_mcp_integration.py'
      - 'tests/integration/mocks/**'
      - 'tests/integration/utils/**'
      - 'tests/integration/conftest.py'
      - '.github/workflows/mcp-integration.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/agent/mcp_support/**'
      - 'scripts/mcp/**'
      - 'tests/integration/test_mcp_integration.py'
      - 'tests/integration/mocks/**'
      - 'tests/integration/utils/**'
      - 'tests/integration/conftest.py'
      - '.github/workflows/mcp-integration.yml'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      transport_type:
        description: 'MCP transport type to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - sse
          - streamable_http
          - stdio
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

jobs:
  mcp-health-check:
    name: MCP Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        enable-cache: true

    - name: Set up Python
      run: |
        uv python install 3.11
        uv python pin 3.11

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run MCP health check
      run: |
        chmod +x tests/integration/run_mcp_tests.sh
        tests/integration/run_mcp_tests.sh health
      env:
        MCP_API_KEY: "test-token-123"
        RUN_MCP_TESTS: "1"

    - name: Upload health check logs
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: mcp-health-check-logs
        path: test_results/mcp_integration/
        retention-days: 7

  mcp-integration-tests:
    name: MCP Integration Tests
    needs: mcp-health-check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        transport: [sse, streamable_http, stdio]
        include:
          - transport: sse
            port: 8123
            auth_required: true
          - transport: streamable_http
            port: 8123
            auth_required: true
          - transport: stdio
            port: null
            auth_required: false

    env:
      MCP_API_KEY: "test-token-123"
      INVALID_MCP_API_KEY: "wrong-token-456"
      RUN_MCP_TESTS: "1"
      TRANSPORT_TYPE: ${{ matrix.transport }}

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        enable-cache: true

    - name: Set up Python
      run: |
        uv python install 3.11
        uv python pin 3.11

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Set up test environment
      run: |
        # Create test results directory
        mkdir -p test_results/mcp_integration

        # Set debug logging if requested
        if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
          echo "PYTEST_LOG_LEVEL=DEBUG" >> $GITHUB_ENV
        fi

    - name: Run MCP integration tests - ${{ matrix.transport }}
      run: |
        chmod +x tests/integration/run_mcp_tests.sh

        # Run tests for specific transport or all if requested
        if [[ "${{ github.event.inputs.transport_type }}" == "all" || "${{ github.event.inputs.transport_type }}" == "" ]]; then
          tests/integration/run_mcp_tests.sh transport ${{ matrix.transport }}
        elif [[ "${{ github.event.inputs.transport_type }}" == "${{ matrix.transport }}" ]]; then
          tests/integration/run_mcp_tests.sh transport ${{ matrix.transport }}
        else
          echo "Skipping ${{ matrix.transport }} tests as requested"
          exit 0
        fi
      env:
        PYTEST_ARGS: "--tb=short --log-cli-level=${{ env.PYTEST_LOG_LEVEL || 'INFO' }}"

    - name: Run authentication tests - ${{ matrix.transport }}
      if: matrix.auth_required
      run: |
        # Test authentication failure scenarios
        export MCP_API_KEY="$INVALID_MCP_API_KEY"

        uv run pytest tests/integration/test_mcp_integration.py::TestMCPAuthentication::test_invalid_authentication_sse \
          -v -s --tb=short \
          --junit-xml=test_results/mcp_integration/junit_auth_fail_${{ matrix.transport }}.xml \
          --log-cli-level=INFO || true  # Don't fail the build on auth failure tests

        # Reset to valid token
        export MCP_API_KEY="test-token-123"

    - name: Collect test artifacts
      if: always()
      run: |
        # Collect logs and results
        mkdir -p artifacts/${{ matrix.transport }}
        cp -r test_results/mcp_integration/* artifacts/${{ matrix.transport }}/ 2>/dev/null || true

        # Create summary
        echo "## MCP Integration Test Summary - ${{ matrix.transport }}" > artifacts/${{ matrix.transport }}/summary.md
        echo "Transport: ${{ matrix.transport }}" >> artifacts/${{ matrix.transport }}/summary.md
        echo "Auth Required: ${{ matrix.auth_required }}" >> artifacts/${{ matrix.transport }}/summary.md
        echo "Test Time: $(date)" >> artifacts/${{ matrix.transport }}/summary.md
        echo "" >> artifacts/${{ matrix.transport }}/summary.md

        # Add test results if available
        if [[ -f "test_results/mcp_integration/junit_${{ matrix.transport }}.xml" ]]; then
          echo "### Test Results" >> artifacts/${{ matrix.transport }}/summary.md
          grep -o 'tests="[0-9]*"' test_results/mcp_integration/junit_${{ matrix.transport }}.xml | head -1 >> artifacts/${{ matrix.transport }}/summary.md || true
          grep -o 'failures="[0-9]*"' test_results/mcp_integration/junit_${{ matrix.transport }}.xml | head -1 >> artifacts/${{ matrix.transport }}/summary.md || true
          grep -o 'errors="[0-9]*"' test_results/mcp_integration/junit_${{ matrix.transport }}.xml | head -1 >> artifacts/${{ matrix.transport }}/summary.md || true
        fi

    - name: Upload test results - ${{ matrix.transport }}
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: mcp-integration-results-${{ matrix.transport }}
        path: artifacts/${{ matrix.transport }}/
        retention-days: 14

    - name: Upload JUnit results
      if: always()
      uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v1
      with:
        name: MCP Integration Tests - ${{ matrix.transport }}
        path: test_results/mcp_integration/junit_*.xml
        reporter: java-junit
        fail-on-error: false

  mcp-comprehensive-tests:
    name: MCP Comprehensive Tests
    needs: mcp-integration-tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: always() && (github.event_name == 'push' || github.event.inputs.transport_type == 'all')

    env:
      MCP_API_KEY: "test-token-123"
      RUN_MCP_TESTS: "1"

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

    - name: Install uv
      uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6 # v4
      with:
        enable-cache: true

    - name: Set up Python
      run: |
        uv python install 3.11
        uv python pin 3.11

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run comprehensive MCP tests
      run: |
        chmod +x tests/integration/run_mcp_tests.sh
        tests/integration/run_mcp_tests.sh all

    - name: Generate final test report
      if: always()
      run: |
        # Create comprehensive report
        echo "# MCP Integration Test Report" > final_report.md
        echo "Generated: $(date)" >> final_report.md
        echo "" >> final_report.md

        # Add summary from test results
        if [[ -f "test_results/mcp_integration/test_report.md" ]]; then
          cat test_results/mcp_integration/test_report.md >> final_report.md
        fi

        # Add coverage information if available
        if [[ -f "test_results/mcp_integration/coverage.xml" ]]; then
          echo "" >> final_report.md
          echo "## Coverage Report" >> final_report.md
          echo "Coverage data available in artifacts." >> final_report.md
        fi

    - name: Upload comprehensive results
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: mcp-comprehensive-results
        path: |
          test_results/mcp_integration/
          final_report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let reportContent = 'MCP Integration Tests completed.\n\n';

          try {
            if (fs.existsSync('final_report.md')) {
              reportContent += fs.readFileSync('final_report.md', 'utf8');
            }
          } catch (error) {
            reportContent += 'Report generation failed: ' + error.message;
          }

          // Truncate if too long
          if (reportContent.length > 65536) {
            reportContent = reportContent.substring(0, 65500) + '\n\n... (truncated)';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportContent
          });
