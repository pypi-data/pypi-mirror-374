[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "marvelpy"
version = "0.2.1"
description = "A fully-typed Python client for the Marvel Comics API."
readme = "README.md"
license = {text = "MIT"}
authors = [
    { name = "Jeff Granof", email = "jlgranof@icloud.com" }
]
maintainers = [
    { name = "Jeff Granof", email = "jlgranof@icloud.com" }
]
keywords = ["marvel", "api", "comics", "client", "async", "typed"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.23.0",
    "pydantic>=1.10.0",
    "typing-extensions>=4.9.0",
    "click>=8.1.0"
]

[project.urls]
"Homepage" = "https://github.com/jlgranof/marvelpy"
"Documentation" = "https://jlgranof.github.io/marvelpy/"
"Issue Tracker" = "https://github.com/jlgranof/marvelpy/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "respx>=0.20.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocstrings[python]>=0.20.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "httpx>=0.23.0",
    "pydantic>=1.10.0",
    "python-dotenv>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "respx>=0.20.0",
]
docs = [
    "mkdocs-material>=9.0.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocstrings[python]>=0.20.0",
    "mike>=1.1.0",
]

[project.scripts]
marvelpy = "marvelpy.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
marvelpy = ["py.typed"]

[tool.setuptools.exclude-package-data]
"*" = ["LICENSE", "*.pyc", "*.pyo", "__pycache__", "*.so", ".DS_Store"]

# Build configuration
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["src"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "RUF", # ruff-specific rules
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["marvelpy"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.8"
strict = true
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "examples.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "docs-dev"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "dotenv"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "httpx"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
