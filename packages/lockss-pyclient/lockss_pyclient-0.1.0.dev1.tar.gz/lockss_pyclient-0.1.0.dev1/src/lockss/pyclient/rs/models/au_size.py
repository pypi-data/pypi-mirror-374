# coding: utf-8

"""
    LOCKSS Repository Service REST API

    REST API of the LOCKSS Repository Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuSize(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_latest_versions': 'int',
        'total_all_versions': 'int',
        'total_warc_size': 'int'
    }

    attribute_map = {
        'total_latest_versions': 'totalLatestVersions',
        'total_all_versions': 'totalAllVersions',
        'total_warc_size': 'totalWarcSize'
    }

    def __init__(self, total_latest_versions=None, total_all_versions=None, total_warc_size=None):  # noqa: E501
        """AuSize - a model defined in Swagger"""  # noqa: E501
        self._total_latest_versions = None
        self._total_all_versions = None
        self._total_warc_size = None
        self.discriminator = None
        if total_latest_versions is not None:
            self.total_latest_versions = total_latest_versions
        if total_all_versions is not None:
            self.total_all_versions = total_all_versions
        if total_warc_size is not None:
            self.total_warc_size = total_warc_size

    @property
    def total_latest_versions(self):
        """Gets the total_latest_versions of this AuSize.  # noqa: E501


        :return: The total_latest_versions of this AuSize.  # noqa: E501
        :rtype: int
        """
        return self._total_latest_versions

    @total_latest_versions.setter
    def total_latest_versions(self, total_latest_versions):
        """Sets the total_latest_versions of this AuSize.


        :param total_latest_versions: The total_latest_versions of this AuSize.  # noqa: E501
        :type: int
        """

        self._total_latest_versions = total_latest_versions

    @property
    def total_all_versions(self):
        """Gets the total_all_versions of this AuSize.  # noqa: E501


        :return: The total_all_versions of this AuSize.  # noqa: E501
        :rtype: int
        """
        return self._total_all_versions

    @total_all_versions.setter
    def total_all_versions(self, total_all_versions):
        """Sets the total_all_versions of this AuSize.


        :param total_all_versions: The total_all_versions of this AuSize.  # noqa: E501
        :type: int
        """

        self._total_all_versions = total_all_versions

    @property
    def total_warc_size(self):
        """Gets the total_warc_size of this AuSize.  # noqa: E501


        :return: The total_warc_size of this AuSize.  # noqa: E501
        :rtype: int
        """
        return self._total_warc_size

    @total_warc_size.setter
    def total_warc_size(self, total_warc_size):
        """Sets the total_warc_size of this AuSize.


        :param total_warc_size: The total_warc_size of this AuSize.  # noqa: E501
        :type: int
        """

        self._total_warc_size = total_warc_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuSize, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
