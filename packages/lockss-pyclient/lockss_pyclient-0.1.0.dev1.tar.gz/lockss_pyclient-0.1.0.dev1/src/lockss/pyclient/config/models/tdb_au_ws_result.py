# coding: utf-8

"""
    LOCKSS Configuration Service REST API

    REST API of the LOCKSS Configuration Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TdbAuWsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'au_id': 'str',
        'name': 'str',
        'plugin_name': 'str',
        'tdb_title': 'TdbTitleWsResult',
        'tdb_publisher': 'TdbPublisherWsResult',
        'down': 'bool',
        'active': 'bool',
        'params': 'dict(str, str)',
        'attrs': 'dict(str, str)',
        'props': 'dict(str, str)'
    }

    attribute_map = {
        'au_id': 'auId',
        'name': 'name',
        'plugin_name': 'pluginName',
        'tdb_title': 'tdbTitle',
        'tdb_publisher': 'tdbPublisher',
        'down': 'down',
        'active': 'active',
        'params': 'params',
        'attrs': 'attrs',
        'props': 'props'
    }

    def __init__(self, au_id=None, name=None, plugin_name=None, tdb_title=None, tdb_publisher=None, down=None, active=None, params=None, attrs=None, props=None):  # noqa: E501
        """TdbAuWsResult - a model defined in Swagger"""  # noqa: E501
        self._au_id = None
        self._name = None
        self._plugin_name = None
        self._tdb_title = None
        self._tdb_publisher = None
        self._down = None
        self._active = None
        self._params = None
        self._attrs = None
        self._props = None
        self.discriminator = None
        if au_id is not None:
            self.au_id = au_id
        if name is not None:
            self.name = name
        if plugin_name is not None:
            self.plugin_name = plugin_name
        if tdb_title is not None:
            self.tdb_title = tdb_title
        if tdb_publisher is not None:
            self.tdb_publisher = tdb_publisher
        if down is not None:
            self.down = down
        if active is not None:
            self.active = active
        if params is not None:
            self.params = params
        if attrs is not None:
            self.attrs = attrs
        if props is not None:
            self.props = props

    @property
    def au_id(self):
        """Gets the au_id of this TdbAuWsResult.  # noqa: E501

        The identifier of the Archival Unit  # noqa: E501

        :return: The au_id of this TdbAuWsResult.  # noqa: E501
        :rtype: str
        """
        return self._au_id

    @au_id.setter
    def au_id(self, au_id):
        """Sets the au_id of this TdbAuWsResult.

        The identifier of the Archival Unit  # noqa: E501

        :param au_id: The au_id of this TdbAuWsResult.  # noqa: E501
        :type: str
        """

        self._au_id = au_id

    @property
    def name(self):
        """Gets the name of this TdbAuWsResult.  # noqa: E501

        The name of the Archival Unit  # noqa: E501

        :return: The name of this TdbAuWsResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TdbAuWsResult.

        The name of the Archival Unit  # noqa: E501

        :param name: The name of this TdbAuWsResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plugin_name(self):
        """Gets the plugin_name of this TdbAuWsResult.  # noqa: E501

        The name of the Archival Unit plugin  # noqa: E501

        :return: The plugin_name of this TdbAuWsResult.  # noqa: E501
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this TdbAuWsResult.

        The name of the Archival Unit plugin  # noqa: E501

        :param plugin_name: The plugin_name of this TdbAuWsResult.  # noqa: E501
        :type: str
        """

        self._plugin_name = plugin_name

    @property
    def tdb_title(self):
        """Gets the tdb_title of this TdbAuWsResult.  # noqa: E501


        :return: The tdb_title of this TdbAuWsResult.  # noqa: E501
        :rtype: TdbTitleWsResult
        """
        return self._tdb_title

    @tdb_title.setter
    def tdb_title(self, tdb_title):
        """Sets the tdb_title of this TdbAuWsResult.


        :param tdb_title: The tdb_title of this TdbAuWsResult.  # noqa: E501
        :type: TdbTitleWsResult
        """

        self._tdb_title = tdb_title

    @property
    def tdb_publisher(self):
        """Gets the tdb_publisher of this TdbAuWsResult.  # noqa: E501


        :return: The tdb_publisher of this TdbAuWsResult.  # noqa: E501
        :rtype: TdbPublisherWsResult
        """
        return self._tdb_publisher

    @tdb_publisher.setter
    def tdb_publisher(self, tdb_publisher):
        """Sets the tdb_publisher of this TdbAuWsResult.


        :param tdb_publisher: The tdb_publisher of this TdbAuWsResult.  # noqa: E501
        :type: TdbPublisherWsResult
        """

        self._tdb_publisher = tdb_publisher

    @property
    def down(self):
        """Gets the down of this TdbAuWsResult.  # noqa: E501

        An indication of whether the AU is marked as down or not  # noqa: E501

        :return: The down of this TdbAuWsResult.  # noqa: E501
        :rtype: bool
        """
        return self._down

    @down.setter
    def down(self, down):
        """Sets the down of this TdbAuWsResult.

        An indication of whether the AU is marked as down or not  # noqa: E501

        :param down: The down of this TdbAuWsResult.  # noqa: E501
        :type: bool
        """

        self._down = down

    @property
    def active(self):
        """Gets the active of this TdbAuWsResult.  # noqa: E501

        An indication of whether the AU is active or not  # noqa: E501

        :return: The active of this TdbAuWsResult.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TdbAuWsResult.

        An indication of whether the AU is active or not  # noqa: E501

        :param active: The active of this TdbAuWsResult.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def params(self):
        """Gets the params of this TdbAuWsResult.  # noqa: E501

        The map of Archival Unit parameters  # noqa: E501

        :return: The params of this TdbAuWsResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this TdbAuWsResult.

        The map of Archival Unit parameters  # noqa: E501

        :param params: The params of this TdbAuWsResult.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def attrs(self):
        """Gets the attrs of this TdbAuWsResult.  # noqa: E501

        The map of Archival Unit attributes  # noqa: E501

        :return: The attrs of this TdbAuWsResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this TdbAuWsResult.

        The map of Archival Unit attributes  # noqa: E501

        :param attrs: The attrs of this TdbAuWsResult.  # noqa: E501
        :type: dict(str, str)
        """

        self._attrs = attrs

    @property
    def props(self):
        """Gets the props of this TdbAuWsResult.  # noqa: E501

        The map of Archival Unit properties  # noqa: E501

        :return: The props of this TdbAuWsResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this TdbAuWsResult.

        The map of Archival Unit properties  # noqa: E501

        :param props: The props of this TdbAuWsResult.  # noqa: E501
        :type: dict(str, str)
        """

        self._props = props

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TdbAuWsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TdbAuWsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
