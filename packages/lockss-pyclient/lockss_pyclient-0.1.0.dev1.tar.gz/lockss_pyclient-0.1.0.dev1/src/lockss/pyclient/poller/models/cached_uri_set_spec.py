# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CachedUriSetSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_prefix': 'str',
        'lower_bound': 'str',
        'upper_bound': 'str'
    }

    attribute_map = {
        'url_prefix': 'urlPrefix',
        'lower_bound': 'lowerBound',
        'upper_bound': 'upperBound'
    }

    def __init__(self, url_prefix=None, lower_bound=None, upper_bound=None):  # noqa: E501
        """CachedUriSetSpec - a model defined in Swagger"""  # noqa: E501
        self._url_prefix = None
        self._lower_bound = None
        self._upper_bound = None
        self.discriminator = None
        self.url_prefix = url_prefix
        if lower_bound is not None:
            self.lower_bound = lower_bound
        if upper_bound is not None:
            self.upper_bound = upper_bound

    @property
    def url_prefix(self):
        """Gets the url_prefix of this CachedUriSetSpec.  # noqa: E501

        The base which roots the lower and upper bound  # noqa: E501

        :return: The url_prefix of this CachedUriSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._url_prefix

    @url_prefix.setter
    def url_prefix(self, url_prefix):
        """Sets the url_prefix of this CachedUriSetSpec.

        The base which roots the lower and upper bound  # noqa: E501

        :param url_prefix: The url_prefix of this CachedUriSetSpec.  # noqa: E501
        :type: str
        """
        if url_prefix is None:
            raise ValueError("Invalid value for `url_prefix`, must not be `None`")  # noqa: E501

        self._url_prefix = url_prefix

    @property
    def lower_bound(self):
        """Gets the lower_bound of this CachedUriSetSpec.  # noqa: E501

        lower bound of the prefix range, inclusive.  # noqa: E501

        :return: The lower_bound of this CachedUriSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this CachedUriSetSpec.

        lower bound of the prefix range, inclusive.  # noqa: E501

        :param lower_bound: The lower_bound of this CachedUriSetSpec.  # noqa: E501
        :type: str
        """

        self._lower_bound = lower_bound

    @property
    def upper_bound(self):
        """Gets the upper_bound of this CachedUriSetSpec.  # noqa: E501

        upper bound of prefix range, inclusive.  # noqa: E501

        :return: The upper_bound of this CachedUriSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this CachedUriSetSpec.

        upper bound of prefix range, inclusive.  # noqa: E501

        :param upper_bound: The upper_bound of this CachedUriSetSpec.  # noqa: E501
        :type: str
        """

        self._upper_bound = upper_bound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CachedUriSetSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CachedUriSetSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
