# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepairData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repair_url': 'str',
        'repair_from': 'str',
        'result': 'str'
    }

    attribute_map = {
        'repair_url': 'repairUrl',
        'repair_from': 'repairFrom',
        'result': 'result'
    }

    def __init__(self, repair_url=None, repair_from=None, result=None):  # noqa: E501
        """RepairData - a model defined in Swagger"""  # noqa: E501
        self._repair_url = None
        self._repair_from = None
        self._result = None
        self.discriminator = None
        self.repair_url = repair_url
        self.repair_from = repair_from
        if result is not None:
            self.result = result

    @property
    def repair_url(self):
        """Gets the repair_url of this RepairData.  # noqa: E501

        The url to repair  # noqa: E501

        :return: The repair_url of this RepairData.  # noqa: E501
        :rtype: str
        """
        return self._repair_url

    @repair_url.setter
    def repair_url(self, repair_url):
        """Sets the repair_url of this RepairData.

        The url to repair  # noqa: E501

        :param repair_url: The repair_url of this RepairData.  # noqa: E501
        :type: str
        """
        if repair_url is None:
            raise ValueError("Invalid value for `repair_url`, must not be `None`")  # noqa: E501

        self._repair_url = repair_url

    @property
    def repair_from(self):
        """Gets the repair_from of this RepairData.  # noqa: E501

        The peer to repair from  # noqa: E501

        :return: The repair_from of this RepairData.  # noqa: E501
        :rtype: str
        """
        return self._repair_from

    @repair_from.setter
    def repair_from(self, repair_from):
        """Sets the repair_from of this RepairData.

        The peer to repair from  # noqa: E501

        :param repair_from: The repair_from of this RepairData.  # noqa: E501
        :type: str
        """
        if repair_from is None:
            raise ValueError("Invalid value for `repair_from`, must not be `None`")  # noqa: E501

        self._repair_from = repair_from

    @property
    def result(self):
        """Gets the result of this RepairData.  # noqa: E501

        The status of this repair  # noqa: E501

        :return: The result of this RepairData.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RepairData.

        The status of this repair  # noqa: E501

        :param result: The result of this RepairData.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoQuorum", "TooClose", "Lost", "LostPollerOnly", "LostVoterOnly", "Won"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
