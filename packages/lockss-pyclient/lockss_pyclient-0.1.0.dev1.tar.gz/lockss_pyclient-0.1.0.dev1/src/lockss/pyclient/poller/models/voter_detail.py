# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoterDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'poll_desc': 'PollDesc',
        'poller_id': 'str',
        'caller_id': 'str',
        'status': 'str',
        'poll_key': 'str',
        'create_time': 'int',
        'duration': 'int',
        'deadline': 'int',
        'hash_algorithm': 'str',
        'agreement': 'float',
        'wt_agreement': 'float',
        'symmetric_agreement': 'float',
        'wt_symmetric_agreement': 'float',
        'poller_nonce': 'str',
        'voter_nonce': 'str',
        'voter2_nonce': 'str',
        'vote_deadline': 'int',
        'num_agree': 'int',
        'num_disagree': 'int',
        'num_poller_only': 'int',
        'num_voter_only': 'int',
        'error_details': 'str'
    }

    attribute_map = {
        'poll_desc': 'pollDesc',
        'poller_id': 'pollerId',
        'caller_id': 'callerId',
        'status': 'status',
        'poll_key': 'pollKey',
        'create_time': 'createTime',
        'duration': 'duration',
        'deadline': 'deadline',
        'hash_algorithm': 'hashAlgorithm',
        'agreement': 'agreement',
        'wt_agreement': 'wtAgreement',
        'symmetric_agreement': 'symmetricAgreement',
        'wt_symmetric_agreement': 'wtSymmetricAgreement',
        'poller_nonce': 'pollerNonce',
        'voter_nonce': 'voterNonce',
        'voter2_nonce': 'voter2Nonce',
        'vote_deadline': 'voteDeadline',
        'num_agree': 'numAgree',
        'num_disagree': 'numDisagree',
        'num_poller_only': 'numPollerOnly',
        'num_voter_only': 'numVoterOnly',
        'error_details': 'errorDetails'
    }

    def __init__(self, poll_desc=None, poller_id=None, caller_id=None, status=None, poll_key=None, create_time=None, duration=None, deadline=None, hash_algorithm=None, agreement=None, wt_agreement=None, symmetric_agreement=None, wt_symmetric_agreement=None, poller_nonce=None, voter_nonce=None, voter2_nonce=None, vote_deadline=None, num_agree=None, num_disagree=None, num_poller_only=None, num_voter_only=None, error_details=None):  # noqa: E501
        """VoterDetail - a model defined in Swagger"""  # noqa: E501
        self._poll_desc = None
        self._poller_id = None
        self._caller_id = None
        self._status = None
        self._poll_key = None
        self._create_time = None
        self._duration = None
        self._deadline = None
        self._hash_algorithm = None
        self._agreement = None
        self._wt_agreement = None
        self._symmetric_agreement = None
        self._wt_symmetric_agreement = None
        self._poller_nonce = None
        self._voter_nonce = None
        self._voter2_nonce = None
        self._vote_deadline = None
        self._num_agree = None
        self._num_disagree = None
        self._num_poller_only = None
        self._num_voter_only = None
        self._error_details = None
        self.discriminator = None
        self.poll_desc = poll_desc
        self.poller_id = poller_id
        if caller_id is not None:
            self.caller_id = caller_id
        self.status = status
        if poll_key is not None:
            self.poll_key = poll_key
        if create_time is not None:
            self.create_time = create_time
        if duration is not None:
            self.duration = duration
        if deadline is not None:
            self.deadline = deadline
        if hash_algorithm is not None:
            self.hash_algorithm = hash_algorithm
        if agreement is not None:
            self.agreement = agreement
        if wt_agreement is not None:
            self.wt_agreement = wt_agreement
        if symmetric_agreement is not None:
            self.symmetric_agreement = symmetric_agreement
        if wt_symmetric_agreement is not None:
            self.wt_symmetric_agreement = wt_symmetric_agreement
        if poller_nonce is not None:
            self.poller_nonce = poller_nonce
        if voter_nonce is not None:
            self.voter_nonce = voter_nonce
        if voter2_nonce is not None:
            self.voter2_nonce = voter2_nonce
        if vote_deadline is not None:
            self.vote_deadline = vote_deadline
        if num_agree is not None:
            self.num_agree = num_agree
        if num_disagree is not None:
            self.num_disagree = num_disagree
        if num_poller_only is not None:
            self.num_poller_only = num_poller_only
        if num_voter_only is not None:
            self.num_voter_only = num_voter_only
        if error_details is not None:
            self.error_details = error_details

    @property
    def poll_desc(self):
        """Gets the poll_desc of this VoterDetail.  # noqa: E501


        :return: The poll_desc of this VoterDetail.  # noqa: E501
        :rtype: PollDesc
        """
        return self._poll_desc

    @poll_desc.setter
    def poll_desc(self, poll_desc):
        """Sets the poll_desc of this VoterDetail.


        :param poll_desc: The poll_desc of this VoterDetail.  # noqa: E501
        :type: PollDesc
        """
        if poll_desc is None:
            raise ValueError("Invalid value for `poll_desc`, must not be `None`")  # noqa: E501

        self._poll_desc = poll_desc

    @property
    def poller_id(self):
        """Gets the poller_id of this VoterDetail.  # noqa: E501

        The id of the voter in the poll  # noqa: E501

        :return: The poller_id of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._poller_id

    @poller_id.setter
    def poller_id(self, poller_id):
        """Sets the poller_id of this VoterDetail.

        The id of the voter in the poll  # noqa: E501

        :param poller_id: The poller_id of this VoterDetail.  # noqa: E501
        :type: str
        """
        if poller_id is None:
            raise ValueError("Invalid value for `poller_id`, must not be `None`")  # noqa: E501

        self._poller_id = poller_id

    @property
    def caller_id(self):
        """Gets the caller_id of this VoterDetail.  # noqa: E501

        The id of the poller who called the poll  # noqa: E501

        :return: The caller_id of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this VoterDetail.

        The id of the poller who called the poll  # noqa: E501

        :param caller_id: The caller_id of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._caller_id = caller_id

    @property
    def status(self):
        """Gets the status of this VoterDetail.  # noqa: E501

        The current status of the poll.  # noqa: E501

        :return: The status of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VoterDetail.

        The current status of the poll.  # noqa: E501

        :param status: The status of this VoterDetail.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def poll_key(self):
        """Gets the poll_key of this VoterDetail.  # noqa: E501

        Key generated by poll manager when poll is created.  # noqa: E501

        :return: The poll_key of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._poll_key

    @poll_key.setter
    def poll_key(self, poll_key):
        """Sets the poll_key of this VoterDetail.

        Key generated by poll manager when poll is created.  # noqa: E501

        :param poll_key: The poll_key of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._poll_key = poll_key

    @property
    def create_time(self):
        """Gets the create_time of this VoterDetail.  # noqa: E501

        The timestamp  at which the poll was created.  # noqa: E501

        :return: The create_time of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VoterDetail.

        The timestamp  at which the poll was created.  # noqa: E501

        :param create_time: The create_time of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def duration(self):
        """Gets the duration of this VoterDetail.  # noqa: E501

        The estimated duration for the poll.  # noqa: E501

        :return: The duration of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VoterDetail.

        The estimated duration for the poll.  # noqa: E501

        :param duration: The duration of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def deadline(self):
        """Gets the deadline of this VoterDetail.  # noqa: E501

        The time by which the poll must have completed  # noqa: E501

        :return: The deadline of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this VoterDetail.

        The time by which the poll must have completed  # noqa: E501

        :param deadline: The deadline of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._deadline = deadline

    @property
    def hash_algorithm(self):
        """Gets the hash_algorithm of this VoterDetail.  # noqa: E501

        The algorithm used by the hasher for this poll.  # noqa: E501

        :return: The hash_algorithm of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """Sets the hash_algorithm of this VoterDetail.

        The algorithm used by the hasher for this poll.  # noqa: E501

        :param hash_algorithm: The hash_algorithm of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._hash_algorithm = hash_algorithm

    @property
    def agreement(self):
        """Gets the agreement of this VoterDetail.  # noqa: E501

        The percentage agreement.  # noqa: E501

        :return: The agreement of this VoterDetail.  # noqa: E501
        :rtype: float
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this VoterDetail.

        The percentage agreement.  # noqa: E501

        :param agreement: The agreement of this VoterDetail.  # noqa: E501
        :type: float
        """

        self._agreement = agreement

    @property
    def wt_agreement(self):
        """Gets the wt_agreement of this VoterDetail.  # noqa: E501

        The weighted percentage agreement.  # noqa: E501

        :return: The wt_agreement of this VoterDetail.  # noqa: E501
        :rtype: float
        """
        return self._wt_agreement

    @wt_agreement.setter
    def wt_agreement(self, wt_agreement):
        """Sets the wt_agreement of this VoterDetail.

        The weighted percentage agreement.  # noqa: E501

        :param wt_agreement: The wt_agreement of this VoterDetail.  # noqa: E501
        :type: float
        """

        self._wt_agreement = wt_agreement

    @property
    def symmetric_agreement(self):
        """Gets the symmetric_agreement of this VoterDetail.  # noqa: E501

        The percentage of symmetric agreement.  # noqa: E501

        :return: The symmetric_agreement of this VoterDetail.  # noqa: E501
        :rtype: float
        """
        return self._symmetric_agreement

    @symmetric_agreement.setter
    def symmetric_agreement(self, symmetric_agreement):
        """Sets the symmetric_agreement of this VoterDetail.

        The percentage of symmetric agreement.  # noqa: E501

        :param symmetric_agreement: The symmetric_agreement of this VoterDetail.  # noqa: E501
        :type: float
        """

        self._symmetric_agreement = symmetric_agreement

    @property
    def wt_symmetric_agreement(self):
        """Gets the wt_symmetric_agreement of this VoterDetail.  # noqa: E501

        The weighted percentage of symmetric agreement.  # noqa: E501

        :return: The wt_symmetric_agreement of this VoterDetail.  # noqa: E501
        :rtype: float
        """
        return self._wt_symmetric_agreement

    @wt_symmetric_agreement.setter
    def wt_symmetric_agreement(self, wt_symmetric_agreement):
        """Sets the wt_symmetric_agreement of this VoterDetail.

        The weighted percentage of symmetric agreement.  # noqa: E501

        :param wt_symmetric_agreement: The wt_symmetric_agreement of this VoterDetail.  # noqa: E501
        :type: float
        """

        self._wt_symmetric_agreement = wt_symmetric_agreement

    @property
    def poller_nonce(self):
        """Gets the poller_nonce of this VoterDetail.  # noqa: E501

        the poller nonce  # noqa: E501

        :return: The poller_nonce of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._poller_nonce

    @poller_nonce.setter
    def poller_nonce(self, poller_nonce):
        """Sets the poller_nonce of this VoterDetail.

        the poller nonce  # noqa: E501

        :param poller_nonce: The poller_nonce of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._poller_nonce = poller_nonce

    @property
    def voter_nonce(self):
        """Gets the voter_nonce of this VoterDetail.  # noqa: E501

        the voter nonce  # noqa: E501

        :return: The voter_nonce of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._voter_nonce

    @voter_nonce.setter
    def voter_nonce(self, voter_nonce):
        """Sets the voter_nonce of this VoterDetail.

        the voter nonce  # noqa: E501

        :param voter_nonce: The voter_nonce of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._voter_nonce = voter_nonce

    @property
    def voter2_nonce(self):
        """Gets the voter2_nonce of this VoterDetail.  # noqa: E501

        the voter2 nonce  # noqa: E501

        :return: The voter2_nonce of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._voter2_nonce

    @voter2_nonce.setter
    def voter2_nonce(self, voter2_nonce):
        """Sets the voter2_nonce of this VoterDetail.

        the voter2 nonce  # noqa: E501

        :param voter2_nonce: The voter2_nonce of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._voter2_nonce = voter2_nonce

    @property
    def vote_deadline(self):
        """Gets the vote_deadline of this VoterDetail.  # noqa: E501

        The  time by which all voters must have voted.  # noqa: E501

        :return: The vote_deadline of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._vote_deadline

    @vote_deadline.setter
    def vote_deadline(self, vote_deadline):
        """Sets the vote_deadline of this VoterDetail.

        The  time by which all voters must have voted.  # noqa: E501

        :param vote_deadline: The vote_deadline of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._vote_deadline = vote_deadline

    @property
    def num_agree(self):
        """Gets the num_agree of this VoterDetail.  # noqa: E501

        The number of urls with agreement.  # noqa: E501

        :return: The num_agree of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_agree

    @num_agree.setter
    def num_agree(self, num_agree):
        """Sets the num_agree of this VoterDetail.

        The number of urls with agreement.  # noqa: E501

        :param num_agree: The num_agree of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._num_agree = num_agree

    @property
    def num_disagree(self):
        """Gets the num_disagree of this VoterDetail.  # noqa: E501

        The number of urls with disagreement.  # noqa: E501

        :return: The num_disagree of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_disagree

    @num_disagree.setter
    def num_disagree(self, num_disagree):
        """Sets the num_disagree of this VoterDetail.

        The number of urls with disagreement.  # noqa: E501

        :param num_disagree: The num_disagree of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._num_disagree = num_disagree

    @property
    def num_poller_only(self):
        """Gets the num_poller_only of this VoterDetail.  # noqa: E501

        The number of urls found by only the poller.  # noqa: E501

        :return: The num_poller_only of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_poller_only

    @num_poller_only.setter
    def num_poller_only(self, num_poller_only):
        """Sets the num_poller_only of this VoterDetail.

        The number of urls found by only the poller.  # noqa: E501

        :param num_poller_only: The num_poller_only of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._num_poller_only = num_poller_only

    @property
    def num_voter_only(self):
        """Gets the num_voter_only of this VoterDetail.  # noqa: E501

        The number of urls found by only a voter.  # noqa: E501

        :return: The num_voter_only of this VoterDetail.  # noqa: E501
        :rtype: int
        """
        return self._num_voter_only

    @num_voter_only.setter
    def num_voter_only(self, num_voter_only):
        """Sets the num_voter_only of this VoterDetail.

        The number of urls found by only a voter.  # noqa: E501

        :param num_voter_only: The num_voter_only of this VoterDetail.  # noqa: E501
        :type: int
        """

        self._num_voter_only = num_voter_only

    @property
    def error_details(self):
        """Gets the error_details of this VoterDetail.  # noqa: E501

        The error which caused the poll to fail.  # noqa: E501

        :return: The error_details of this VoterDetail.  # noqa: E501
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this VoterDetail.

        The error which caused the poll to fail.  # noqa: E501

        :param error_details: The error_details of this VoterDetail.  # noqa: E501
        :type: str
        """

        self._error_details = error_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoterDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoterDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
