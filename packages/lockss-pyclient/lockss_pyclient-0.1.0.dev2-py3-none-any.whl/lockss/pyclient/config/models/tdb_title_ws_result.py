# coding: utf-8

"""
    LOCKSS Configuration Service REST API

    REST API of the LOCKSS Configuration Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TdbTitleWsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'tdb_publisher': 'TdbPublisherWsResult',
        'id': 'str',
        'proprietaryid': 'str',
        'proprietaryids': 'list[str]',
        'publicationtype': 'str',
        'issn': 'str',
        'issnl': 'str',
        'eissn': 'str',
        'printissn': 'str',
        'issns': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'tdb_publisher': 'tdbPublisher',
        'id': 'id',
        'proprietaryid': 'proprietaryid',
        'proprietaryids': 'proprietaryids',
        'publicationtype': 'publicationtype',
        'issn': 'issn',
        'issnl': 'issnl',
        'eissn': 'eissn',
        'printissn': 'printissn',
        'issns': 'issns'
    }

    def __init__(self, name=None, tdb_publisher=None, id=None, proprietaryid=None, proprietaryids=None, publicationtype=None, issn=None, issnl=None, eissn=None, printissn=None, issns=None):  # noqa: E501
        """TdbTitleWsResult - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._tdb_publisher = None
        self._id = None
        self._proprietaryid = None
        self._proprietaryids = None
        self._publicationtype = None
        self._issn = None
        self._issnl = None
        self._eissn = None
        self._printissn = None
        self._issns = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if tdb_publisher is not None:
            self.tdb_publisher = tdb_publisher
        if id is not None:
            self.id = id
        if proprietaryid is not None:
            self.proprietaryid = proprietaryid
        if proprietaryids is not None:
            self.proprietaryids = proprietaryids
        if publicationtype is not None:
            self.publicationtype = publicationtype
        if issn is not None:
            self.issn = issn
        if issnl is not None:
            self.issnl = issnl
        if eissn is not None:
            self.eissn = eissn
        if printissn is not None:
            self.printissn = printissn
        if issns is not None:
            self.issns = issns

    @property
    def name(self):
        """Gets the name of this TdbTitleWsResult.  # noqa: E501

        The name of the TDB Title  # noqa: E501

        :return: The name of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TdbTitleWsResult.

        The name of the TDB Title  # noqa: E501

        :param name: The name of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tdb_publisher(self):
        """Gets the tdb_publisher of this TdbTitleWsResult.  # noqa: E501


        :return: The tdb_publisher of this TdbTitleWsResult.  # noqa: E501
        :rtype: TdbPublisherWsResult
        """
        return self._tdb_publisher

    @tdb_publisher.setter
    def tdb_publisher(self, tdb_publisher):
        """Sets the tdb_publisher of this TdbTitleWsResult.


        :param tdb_publisher: The tdb_publisher of this TdbTitleWsResult.  # noqa: E501
        :type: TdbPublisherWsResult
        """

        self._tdb_publisher = tdb_publisher

    @property
    def id(self):
        """Gets the id of this TdbTitleWsResult.  # noqa: E501

        The identifier of the TDB Title  # noqa: E501

        :return: The id of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TdbTitleWsResult.

        The identifier of the TDB Title  # noqa: E501

        :param id: The id of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def proprietaryid(self):
        """Gets the proprietaryid of this TdbTitleWsResult.  # noqa: E501

        The proprietary identifier of the TDB Title  # noqa: E501

        :return: The proprietaryid of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._proprietaryid

    @proprietaryid.setter
    def proprietaryid(self, proprietaryid):
        """Sets the proprietaryid of this TdbTitleWsResult.

        The proprietary identifier of the TDB Title  # noqa: E501

        :param proprietaryid: The proprietaryid of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._proprietaryid = proprietaryid

    @property
    def proprietaryids(self):
        """Gets the proprietaryids of this TdbTitleWsResult.  # noqa: E501

        The proprietary identifiers of the TDB Title  # noqa: E501

        :return: The proprietaryids of this TdbTitleWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._proprietaryids

    @proprietaryids.setter
    def proprietaryids(self, proprietaryids):
        """Sets the proprietaryids of this TdbTitleWsResult.

        The proprietary identifiers of the TDB Title  # noqa: E501

        :param proprietaryids: The proprietaryids of this TdbTitleWsResult.  # noqa: E501
        :type: list[str]
        """

        self._proprietaryids = proprietaryids

    @property
    def publicationtype(self):
        """Gets the publicationtype of this TdbTitleWsResult.  # noqa: E501

        The publication type of the TDB Title  # noqa: E501

        :return: The publicationtype of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._publicationtype

    @publicationtype.setter
    def publicationtype(self, publicationtype):
        """Sets the publicationtype of this TdbTitleWsResult.

        The publication type of the TDB Title  # noqa: E501

        :param publicationtype: The publicationtype of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._publicationtype = publicationtype

    @property
    def issn(self):
        """Gets the issn of this TdbTitleWsResult.  # noqa: E501

        The ISSN of the TDB Title  # noqa: E501

        :return: The issn of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._issn

    @issn.setter
    def issn(self, issn):
        """Sets the issn of this TdbTitleWsResult.

        The ISSN of the TDB Title  # noqa: E501

        :param issn: The issn of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._issn = issn

    @property
    def issnl(self):
        """Gets the issnl of this TdbTitleWsResult.  # noqa: E501

        The ISSNL of the TDB Title  # noqa: E501

        :return: The issnl of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._issnl

    @issnl.setter
    def issnl(self, issnl):
        """Sets the issnl of this TdbTitleWsResult.

        The ISSNL of the TDB Title  # noqa: E501

        :param issnl: The issnl of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._issnl = issnl

    @property
    def eissn(self):
        """Gets the eissn of this TdbTitleWsResult.  # noqa: E501

        The eISSN of the TDB Title  # noqa: E501

        :return: The eissn of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._eissn

    @eissn.setter
    def eissn(self, eissn):
        """Sets the eissn of this TdbTitleWsResult.

        The eISSN of the TDB Title  # noqa: E501

        :param eissn: The eissn of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._eissn = eissn

    @property
    def printissn(self):
        """Gets the printissn of this TdbTitleWsResult.  # noqa: E501

        The print ISSN of the TDB Title  # noqa: E501

        :return: The printissn of this TdbTitleWsResult.  # noqa: E501
        :rtype: str
        """
        return self._printissn

    @printissn.setter
    def printissn(self, printissn):
        """Sets the printissn of this TdbTitleWsResult.

        The print ISSN of the TDB Title  # noqa: E501

        :param printissn: The printissn of this TdbTitleWsResult.  # noqa: E501
        :type: str
        """

        self._printissn = printissn

    @property
    def issns(self):
        """Gets the issns of this TdbTitleWsResult.  # noqa: E501

        The ISSNs of the TDB Title  # noqa: E501

        :return: The issns of this TdbTitleWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._issns

    @issns.setter
    def issns(self, issns):
        """Sets the issns of this TdbTitleWsResult.

        The ISSNs of the TDB Title  # noqa: E501

        :param issns: The issns of this TdbTitleWsResult.  # noqa: E501
        :type: list[str]
        """

        self._issns = issns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TdbTitleWsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TdbTitleWsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
