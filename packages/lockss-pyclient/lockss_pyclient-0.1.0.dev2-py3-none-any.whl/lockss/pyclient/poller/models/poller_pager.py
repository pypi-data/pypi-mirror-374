# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PollerPager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_desc': 'PageDesc',
        'polls': 'list[PollerSummary]'
    }

    attribute_map = {
        'page_desc': 'pageDesc',
        'polls': 'polls'
    }

    def __init__(self, page_desc=None, polls=None):  # noqa: E501
        """PollerPager - a model defined in Swagger"""  # noqa: E501
        self._page_desc = None
        self._polls = None
        self.discriminator = None
        self.page_desc = page_desc
        if polls is not None:
            self.polls = polls

    @property
    def page_desc(self):
        """Gets the page_desc of this PollerPager.  # noqa: E501


        :return: The page_desc of this PollerPager.  # noqa: E501
        :rtype: PageDesc
        """
        return self._page_desc

    @page_desc.setter
    def page_desc(self, page_desc):
        """Sets the page_desc of this PollerPager.


        :param page_desc: The page_desc of this PollerPager.  # noqa: E501
        :type: PageDesc
        """
        if page_desc is None:
            raise ValueError("Invalid value for `page_desc`, must not be `None`")  # noqa: E501

        self._page_desc = page_desc

    @property
    def polls(self):
        """Gets the polls of this PollerPager.  # noqa: E501

        The list of polls for the current page or null  # noqa: E501

        :return: The polls of this PollerPager.  # noqa: E501
        :rtype: list[PollerSummary]
        """
        return self._polls

    @polls.setter
    def polls(self, polls):
        """Sets the polls of this PollerPager.

        The list of polls for the current page or null  # noqa: E501

        :param polls: The polls of this PollerPager.  # noqa: E501
        :type: list[PollerSummary]
        """

        self._polls = polls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollerPager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollerPager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
