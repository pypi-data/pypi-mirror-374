# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoterSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'au_id': 'str',
        'caller': 'str',
        'start': 'int',
        'status': 'str',
        'deadline': 'int',
        'poll_key': 'str',
        'detail_link': 'LinkDesc'
    }

    attribute_map = {
        'au_id': 'auId',
        'caller': 'caller',
        'start': 'start',
        'status': 'status',
        'deadline': 'deadline',
        'poll_key': 'pollKey',
        'detail_link': 'detailLink'
    }

    def __init__(self, au_id=None, caller=None, start=None, status=None, deadline=None, poll_key=None, detail_link=None):  # noqa: E501
        """VoterSummary - a model defined in Swagger"""  # noqa: E501
        self._au_id = None
        self._caller = None
        self._start = None
        self._status = None
        self._deadline = None
        self._poll_key = None
        self._detail_link = None
        self.discriminator = None
        self.au_id = au_id
        self.caller = caller
        self.start = start
        self.status = status
        self.deadline = deadline
        self.poll_key = poll_key
        if detail_link is not None:
            self.detail_link = detail_link

    @property
    def au_id(self):
        """Gets the au_id of this VoterSummary.  # noqa: E501

        The id for the au being polled.  # noqa: E501

        :return: The au_id of this VoterSummary.  # noqa: E501
        :rtype: str
        """
        return self._au_id

    @au_id.setter
    def au_id(self, au_id):
        """Sets the au_id of this VoterSummary.

        The id for the au being polled.  # noqa: E501

        :param au_id: The au_id of this VoterSummary.  # noqa: E501
        :type: str
        """
        if au_id is None:
            raise ValueError("Invalid value for `au_id`, must not be `None`")  # noqa: E501

        self._au_id = au_id

    @property
    def caller(self):
        """Gets the caller of this VoterSummary.  # noqa: E501

        The id of who called the poll.  # noqa: E501

        :return: The caller of this VoterSummary.  # noqa: E501
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this VoterSummary.

        The id of who called the poll.  # noqa: E501

        :param caller: The caller of this VoterSummary.  # noqa: E501
        :type: str
        """
        if caller is None:
            raise ValueError("Invalid value for `caller`, must not be `None`")  # noqa: E501

        self._caller = caller

    @property
    def start(self):
        """Gets the start of this VoterSummary.  # noqa: E501

        The timestamp for when the poll started.  # noqa: E501

        :return: The start of this VoterSummary.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this VoterSummary.

        The timestamp for when the poll started.  # noqa: E501

        :param start: The start of this VoterSummary.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def status(self):
        """Gets the status of this VoterSummary.  # noqa: E501

        The current status of the poll.  # noqa: E501

        :return: The status of this VoterSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VoterSummary.

        The current status of the poll.  # noqa: E501

        :param status: The status of this VoterSummary.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def deadline(self):
        """Gets the deadline of this VoterSummary.  # noqa: E501

        The deadline for voting in this poll.  # noqa: E501

        :return: The deadline of this VoterSummary.  # noqa: E501
        :rtype: int
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this VoterSummary.

        The deadline for voting in this poll.  # noqa: E501

        :param deadline: The deadline of this VoterSummary.  # noqa: E501
        :type: int
        """
        if deadline is None:
            raise ValueError("Invalid value for `deadline`, must not be `None`")  # noqa: E501

        self._deadline = deadline

    @property
    def poll_key(self):
        """Gets the poll_key of this VoterSummary.  # noqa: E501

        Key generated by poll manager when poll was created.  # noqa: E501

        :return: The poll_key of this VoterSummary.  # noqa: E501
        :rtype: str
        """
        return self._poll_key

    @poll_key.setter
    def poll_key(self, poll_key):
        """Sets the poll_key of this VoterSummary.

        Key generated by poll manager when poll was created.  # noqa: E501

        :param poll_key: The poll_key of this VoterSummary.  # noqa: E501
        :type: str
        """
        if poll_key is None:
            raise ValueError("Invalid value for `poll_key`, must not be `None`")  # noqa: E501

        self._poll_key = poll_key

    @property
    def detail_link(self):
        """Gets the detail_link of this VoterSummary.  # noqa: E501


        :return: The detail_link of this VoterSummary.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._detail_link

    @detail_link.setter
    def detail_link(self, detail_link):
        """Sets the detail_link of this VoterSummary.


        :param detail_link: The detail_link of this VoterSummary.  # noqa: E501
        :type: LinkDesc
        """

        self._detail_link = detail_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoterSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoterSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
