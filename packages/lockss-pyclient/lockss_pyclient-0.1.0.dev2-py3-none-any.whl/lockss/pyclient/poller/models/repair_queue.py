# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepairQueue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_pending': 'int',
        'pending_link': 'LinkDesc',
        'num_active': 'int',
        'active_link': 'LinkDesc',
        'num_completed': 'int',
        'completed_link': 'LinkDesc'
    }

    attribute_map = {
        'num_pending': 'numPending',
        'pending_link': 'pendingLink',
        'num_active': 'numActive',
        'active_link': 'activeLink',
        'num_completed': 'numCompleted',
        'completed_link': 'completedLink'
    }

    def __init__(self, num_pending=None, pending_link=None, num_active=None, active_link=None, num_completed=None, completed_link=None):  # noqa: E501
        """RepairQueue - a model defined in Swagger"""  # noqa: E501
        self._num_pending = None
        self._pending_link = None
        self._num_active = None
        self._active_link = None
        self._num_completed = None
        self._completed_link = None
        self.discriminator = None
        self.num_pending = num_pending
        if pending_link is not None:
            self.pending_link = pending_link
        self.num_active = num_active
        if active_link is not None:
            self.active_link = active_link
        self.num_completed = num_completed
        if completed_link is not None:
            self.completed_link = completed_link

    @property
    def num_pending(self):
        """Gets the num_pending of this RepairQueue.  # noqa: E501

        The number of pending repairs  # noqa: E501

        :return: The num_pending of this RepairQueue.  # noqa: E501
        :rtype: int
        """
        return self._num_pending

    @num_pending.setter
    def num_pending(self, num_pending):
        """Sets the num_pending of this RepairQueue.

        The number of pending repairs  # noqa: E501

        :param num_pending: The num_pending of this RepairQueue.  # noqa: E501
        :type: int
        """
        if num_pending is None:
            raise ValueError("Invalid value for `num_pending`, must not be `None`")  # noqa: E501

        self._num_pending = num_pending

    @property
    def pending_link(self):
        """Gets the pending_link of this RepairQueue.  # noqa: E501


        :return: The pending_link of this RepairQueue.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._pending_link

    @pending_link.setter
    def pending_link(self, pending_link):
        """Sets the pending_link of this RepairQueue.


        :param pending_link: The pending_link of this RepairQueue.  # noqa: E501
        :type: LinkDesc
        """

        self._pending_link = pending_link

    @property
    def num_active(self):
        """Gets the num_active of this RepairQueue.  # noqa: E501

        The number of active repairs  # noqa: E501

        :return: The num_active of this RepairQueue.  # noqa: E501
        :rtype: int
        """
        return self._num_active

    @num_active.setter
    def num_active(self, num_active):
        """Sets the num_active of this RepairQueue.

        The number of active repairs  # noqa: E501

        :param num_active: The num_active of this RepairQueue.  # noqa: E501
        :type: int
        """
        if num_active is None:
            raise ValueError("Invalid value for `num_active`, must not be `None`")  # noqa: E501

        self._num_active = num_active

    @property
    def active_link(self):
        """Gets the active_link of this RepairQueue.  # noqa: E501


        :return: The active_link of this RepairQueue.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._active_link

    @active_link.setter
    def active_link(self, active_link):
        """Sets the active_link of this RepairQueue.


        :param active_link: The active_link of this RepairQueue.  # noqa: E501
        :type: LinkDesc
        """

        self._active_link = active_link

    @property
    def num_completed(self):
        """Gets the num_completed of this RepairQueue.  # noqa: E501

        The number of completed repairs  # noqa: E501

        :return: The num_completed of this RepairQueue.  # noqa: E501
        :rtype: int
        """
        return self._num_completed

    @num_completed.setter
    def num_completed(self, num_completed):
        """Sets the num_completed of this RepairQueue.

        The number of completed repairs  # noqa: E501

        :param num_completed: The num_completed of this RepairQueue.  # noqa: E501
        :type: int
        """
        if num_completed is None:
            raise ValueError("Invalid value for `num_completed`, must not be `None`")  # noqa: E501

        self._num_completed = num_completed

    @property
    def completed_link(self):
        """Gets the completed_link of this RepairQueue.  # noqa: E501


        :return: The completed_link of this RepairQueue.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._completed_link

    @completed_link.setter
    def completed_link(self, completed_link):
        """Sets the completed_link of this RepairQueue.


        :param completed_link: The completed_link of this RepairQueue.  # noqa: E501
        :type: LinkDesc
        """

        self._completed_link = completed_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairQueue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairQueue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
