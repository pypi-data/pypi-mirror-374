# coding: utf-8

"""
    LOCKSS Crawler Service REST API

    REST API of the LOCKSS Crawler Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrawlJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawl_desc': 'CrawlDesc',
        'request_date': 'int',
        'job_id': 'str',
        'job_status': 'JobStatus',
        'start_date': 'int',
        'end_date': 'int',
        'result': 'str'
    }

    attribute_map = {
        'crawl_desc': 'crawlDesc',
        'request_date': 'requestDate',
        'job_id': 'jobId',
        'job_status': 'jobStatus',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'result': 'result'
    }

    def __init__(self, crawl_desc=None, request_date=None, job_id=None, job_status=None, start_date=None, end_date=None, result=None):  # noqa: E501
        """CrawlJob - a model defined in Swagger"""  # noqa: E501
        self._crawl_desc = None
        self._request_date = None
        self._job_id = None
        self._job_status = None
        self._start_date = None
        self._end_date = None
        self._result = None
        self.discriminator = None
        self.crawl_desc = crawl_desc
        self.request_date = request_date
        self.job_id = job_id
        self.job_status = job_status
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if result is not None:
            self.result = result

    @property
    def crawl_desc(self):
        """Gets the crawl_desc of this CrawlJob.  # noqa: E501


        :return: The crawl_desc of this CrawlJob.  # noqa: E501
        :rtype: CrawlDesc
        """
        return self._crawl_desc

    @crawl_desc.setter
    def crawl_desc(self, crawl_desc):
        """Sets the crawl_desc of this CrawlJob.


        :param crawl_desc: The crawl_desc of this CrawlJob.  # noqa: E501
        :type: CrawlDesc
        """
        if crawl_desc is None:
            raise ValueError("Invalid value for `crawl_desc`, must not be `None`")  # noqa: E501

        self._crawl_desc = crawl_desc

    @property
    def request_date(self):
        """Gets the request_date of this CrawlJob.  # noqa: E501

        The timestamp when the crawl was requested.  # noqa: E501

        :return: The request_date of this CrawlJob.  # noqa: E501
        :rtype: int
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this CrawlJob.

        The timestamp when the crawl was requested.  # noqa: E501

        :param request_date: The request_date of this CrawlJob.  # noqa: E501
        :type: int
        """
        if request_date is None:
            raise ValueError("Invalid value for `request_date`, must not be `None`")  # noqa: E501

        self._request_date = request_date

    @property
    def job_id(self):
        """Gets the job_id of this CrawlJob.  # noqa: E501

        Identifier of the crawl job.  # noqa: E501

        :return: The job_id of this CrawlJob.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CrawlJob.

        Identifier of the crawl job.  # noqa: E501

        :param job_id: The job_id of this CrawlJob.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def job_status(self):
        """Gets the job_status of this CrawlJob.  # noqa: E501


        :return: The job_status of this CrawlJob.  # noqa: E501
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this CrawlJob.


        :param job_status: The job_status of this CrawlJob.  # noqa: E501
        :type: JobStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")  # noqa: E501

        self._job_status = job_status

    @property
    def start_date(self):
        """Gets the start_date of this CrawlJob.  # noqa: E501

        The timestamp when the crawl began.  # noqa: E501

        :return: The start_date of this CrawlJob.  # noqa: E501
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CrawlJob.

        The timestamp when the crawl began.  # noqa: E501

        :param start_date: The start_date of this CrawlJob.  # noqa: E501
        :type: int
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CrawlJob.  # noqa: E501

        The timestamp when the crawl ended.  # noqa: E501

        :return: The end_date of this CrawlJob.  # noqa: E501
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CrawlJob.

        The timestamp when the crawl ended.  # noqa: E501

        :param end_date: The end_date of this CrawlJob.  # noqa: E501
        :type: int
        """

        self._end_date = end_date

    @property
    def result(self):
        """Gets the result of this CrawlJob.  # noqa: E501

        A URI which can be used to retrieve the crawl data.  # noqa: E501

        :return: The result of this CrawlJob.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CrawlJob.

        A URI which can be used to retrieve the crawl data.  # noqa: E501

        :param result: The result of this CrawlJob.  # noqa: E501
        :type: str
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrawlJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrawlJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
