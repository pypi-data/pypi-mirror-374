# coding: utf-8

"""
    LOCKSS Crawler Service REST API

    REST API of the LOCKSS Crawler Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrawlWsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'au_id': 'str',
        'au_name': 'str',
        'priority': 'int',
        'crawl_key': 'str',
        'crawl_type': 'str',
        'start_time': 'int',
        'duration': 'int',
        'crawl_status': 'str',
        'bytes_fetched_count': 'int',
        'pages_fetched_count': 'int',
        'pages_fetched': 'list[str]',
        'pages_parsed_count': 'int',
        'pages_parsed': 'list[str]',
        'pages_pending_count': 'int',
        'pages_pending': 'list[str]',
        'pages_excluded_count': 'int',
        'pages_excluded': 'list[str]',
        'off_site_urls_excluded_count': 'int',
        'pages_not_modified_count': 'int',
        'pages_not_modified': 'list[str]',
        'pages_with_errors_count': 'int',
        'pages_with_errors': 'list[CrawlWsResultPagesWithErrors]',
        'mime_type_count': 'int',
        'mime_types': 'list[str]',
        'sources': 'list[str]',
        'starting_urls': 'list[str]',
        'refetch_depth': 'int',
        'link_depth': 'int'
    }

    attribute_map = {
        'au_id': 'auId',
        'au_name': 'auName',
        'priority': 'priority',
        'crawl_key': 'crawlKey',
        'crawl_type': 'crawlType',
        'start_time': 'startTime',
        'duration': 'duration',
        'crawl_status': 'crawlStatus',
        'bytes_fetched_count': 'bytesFetchedCount',
        'pages_fetched_count': 'pagesFetchedCount',
        'pages_fetched': 'pagesFetched',
        'pages_parsed_count': 'pagesParsedCount',
        'pages_parsed': 'pagesParsed',
        'pages_pending_count': 'pagesPendingCount',
        'pages_pending': 'pagesPending',
        'pages_excluded_count': 'pagesExcludedCount',
        'pages_excluded': 'pagesExcluded',
        'off_site_urls_excluded_count': 'offSiteUrlsExcludedCount',
        'pages_not_modified_count': 'pagesNotModifiedCount',
        'pages_not_modified': 'pagesNotModified',
        'pages_with_errors_count': 'pagesWithErrorsCount',
        'pages_with_errors': 'pagesWithErrors',
        'mime_type_count': 'mimeTypeCount',
        'mime_types': 'mimeTypes',
        'sources': 'sources',
        'starting_urls': 'startingUrls',
        'refetch_depth': 'refetchDepth',
        'link_depth': 'linkDepth'
    }

    def __init__(self, au_id=None, au_name=None, priority=None, crawl_key=None, crawl_type=None, start_time=None, duration=None, crawl_status=None, bytes_fetched_count=None, pages_fetched_count=None, pages_fetched=None, pages_parsed_count=None, pages_parsed=None, pages_pending_count=None, pages_pending=None, pages_excluded_count=None, pages_excluded=None, off_site_urls_excluded_count=None, pages_not_modified_count=None, pages_not_modified=None, pages_with_errors_count=None, pages_with_errors=None, mime_type_count=None, mime_types=None, sources=None, starting_urls=None, refetch_depth=None, link_depth=None):  # noqa: E501
        """CrawlWsResult - a model defined in Swagger"""  # noqa: E501
        self._au_id = None
        self._au_name = None
        self._priority = None
        self._crawl_key = None
        self._crawl_type = None
        self._start_time = None
        self._duration = None
        self._crawl_status = None
        self._bytes_fetched_count = None
        self._pages_fetched_count = None
        self._pages_fetched = None
        self._pages_parsed_count = None
        self._pages_parsed = None
        self._pages_pending_count = None
        self._pages_pending = None
        self._pages_excluded_count = None
        self._pages_excluded = None
        self._off_site_urls_excluded_count = None
        self._pages_not_modified_count = None
        self._pages_not_modified = None
        self._pages_with_errors_count = None
        self._pages_with_errors = None
        self._mime_type_count = None
        self._mime_types = None
        self._sources = None
        self._starting_urls = None
        self._refetch_depth = None
        self._link_depth = None
        self.discriminator = None
        self.au_id = au_id
        self.au_name = au_name
        if priority is not None:
            self.priority = priority
        if crawl_key is not None:
            self.crawl_key = crawl_key
        if crawl_type is not None:
            self.crawl_type = crawl_type
        if start_time is not None:
            self.start_time = start_time
        if duration is not None:
            self.duration = duration
        if crawl_status is not None:
            self.crawl_status = crawl_status
        if bytes_fetched_count is not None:
            self.bytes_fetched_count = bytes_fetched_count
        if pages_fetched_count is not None:
            self.pages_fetched_count = pages_fetched_count
        if pages_fetched is not None:
            self.pages_fetched = pages_fetched
        if pages_parsed_count is not None:
            self.pages_parsed_count = pages_parsed_count
        if pages_parsed is not None:
            self.pages_parsed = pages_parsed
        if pages_pending_count is not None:
            self.pages_pending_count = pages_pending_count
        if pages_pending is not None:
            self.pages_pending = pages_pending
        if pages_excluded_count is not None:
            self.pages_excluded_count = pages_excluded_count
        if pages_excluded is not None:
            self.pages_excluded = pages_excluded
        if off_site_urls_excluded_count is not None:
            self.off_site_urls_excluded_count = off_site_urls_excluded_count
        if pages_not_modified_count is not None:
            self.pages_not_modified_count = pages_not_modified_count
        if pages_not_modified is not None:
            self.pages_not_modified = pages_not_modified
        if pages_with_errors_count is not None:
            self.pages_with_errors_count = pages_with_errors_count
        if pages_with_errors is not None:
            self.pages_with_errors = pages_with_errors
        if mime_type_count is not None:
            self.mime_type_count = mime_type_count
        if mime_types is not None:
            self.mime_types = mime_types
        if sources is not None:
            self.sources = sources
        if starting_urls is not None:
            self.starting_urls = starting_urls
        if refetch_depth is not None:
            self.refetch_depth = refetch_depth
        if link_depth is not None:
            self.link_depth = link_depth

    @property
    def au_id(self):
        """Gets the au_id of this CrawlWsResult.  # noqa: E501


        :return: The au_id of this CrawlWsResult.  # noqa: E501
        :rtype: str
        """
        return self._au_id

    @au_id.setter
    def au_id(self, au_id):
        """Sets the au_id of this CrawlWsResult.


        :param au_id: The au_id of this CrawlWsResult.  # noqa: E501
        :type: str
        """
        if au_id is None:
            raise ValueError("Invalid value for `au_id`, must not be `None`")  # noqa: E501

        self._au_id = au_id

    @property
    def au_name(self):
        """Gets the au_name of this CrawlWsResult.  # noqa: E501


        :return: The au_name of this CrawlWsResult.  # noqa: E501
        :rtype: str
        """
        return self._au_name

    @au_name.setter
    def au_name(self, au_name):
        """Sets the au_name of this CrawlWsResult.


        :param au_name: The au_name of this CrawlWsResult.  # noqa: E501
        :type: str
        """
        if au_name is None:
            raise ValueError("Invalid value for `au_name`, must not be `None`")  # noqa: E501

        self._au_name = au_name

    @property
    def priority(self):
        """Gets the priority of this CrawlWsResult.  # noqa: E501


        :return: The priority of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CrawlWsResult.


        :param priority: The priority of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def crawl_key(self):
        """Gets the crawl_key of this CrawlWsResult.  # noqa: E501


        :return: The crawl_key of this CrawlWsResult.  # noqa: E501
        :rtype: str
        """
        return self._crawl_key

    @crawl_key.setter
    def crawl_key(self, crawl_key):
        """Sets the crawl_key of this CrawlWsResult.


        :param crawl_key: The crawl_key of this CrawlWsResult.  # noqa: E501
        :type: str
        """

        self._crawl_key = crawl_key

    @property
    def crawl_type(self):
        """Gets the crawl_type of this CrawlWsResult.  # noqa: E501


        :return: The crawl_type of this CrawlWsResult.  # noqa: E501
        :rtype: str
        """
        return self._crawl_type

    @crawl_type.setter
    def crawl_type(self, crawl_type):
        """Sets the crawl_type of this CrawlWsResult.


        :param crawl_type: The crawl_type of this CrawlWsResult.  # noqa: E501
        :type: str
        """

        self._crawl_type = crawl_type

    @property
    def start_time(self):
        """Gets the start_time of this CrawlWsResult.  # noqa: E501


        :return: The start_time of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CrawlWsResult.


        :param start_time: The start_time of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def duration(self):
        """Gets the duration of this CrawlWsResult.  # noqa: E501


        :return: The duration of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CrawlWsResult.


        :param duration: The duration of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def crawl_status(self):
        """Gets the crawl_status of this CrawlWsResult.  # noqa: E501


        :return: The crawl_status of this CrawlWsResult.  # noqa: E501
        :rtype: str
        """
        return self._crawl_status

    @crawl_status.setter
    def crawl_status(self, crawl_status):
        """Sets the crawl_status of this CrawlWsResult.


        :param crawl_status: The crawl_status of this CrawlWsResult.  # noqa: E501
        :type: str
        """

        self._crawl_status = crawl_status

    @property
    def bytes_fetched_count(self):
        """Gets the bytes_fetched_count of this CrawlWsResult.  # noqa: E501


        :return: The bytes_fetched_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._bytes_fetched_count

    @bytes_fetched_count.setter
    def bytes_fetched_count(self, bytes_fetched_count):
        """Sets the bytes_fetched_count of this CrawlWsResult.


        :param bytes_fetched_count: The bytes_fetched_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._bytes_fetched_count = bytes_fetched_count

    @property
    def pages_fetched_count(self):
        """Gets the pages_fetched_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_fetched_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_fetched_count

    @pages_fetched_count.setter
    def pages_fetched_count(self, pages_fetched_count):
        """Sets the pages_fetched_count of this CrawlWsResult.


        :param pages_fetched_count: The pages_fetched_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_fetched_count = pages_fetched_count

    @property
    def pages_fetched(self):
        """Gets the pages_fetched of this CrawlWsResult.  # noqa: E501


        :return: The pages_fetched of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_fetched

    @pages_fetched.setter
    def pages_fetched(self, pages_fetched):
        """Sets the pages_fetched of this CrawlWsResult.


        :param pages_fetched: The pages_fetched of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._pages_fetched = pages_fetched

    @property
    def pages_parsed_count(self):
        """Gets the pages_parsed_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_parsed_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_parsed_count

    @pages_parsed_count.setter
    def pages_parsed_count(self, pages_parsed_count):
        """Sets the pages_parsed_count of this CrawlWsResult.


        :param pages_parsed_count: The pages_parsed_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_parsed_count = pages_parsed_count

    @property
    def pages_parsed(self):
        """Gets the pages_parsed of this CrawlWsResult.  # noqa: E501


        :return: The pages_parsed of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_parsed

    @pages_parsed.setter
    def pages_parsed(self, pages_parsed):
        """Sets the pages_parsed of this CrawlWsResult.


        :param pages_parsed: The pages_parsed of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._pages_parsed = pages_parsed

    @property
    def pages_pending_count(self):
        """Gets the pages_pending_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_pending_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_pending_count

    @pages_pending_count.setter
    def pages_pending_count(self, pages_pending_count):
        """Sets the pages_pending_count of this CrawlWsResult.


        :param pages_pending_count: The pages_pending_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_pending_count = pages_pending_count

    @property
    def pages_pending(self):
        """Gets the pages_pending of this CrawlWsResult.  # noqa: E501


        :return: The pages_pending of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_pending

    @pages_pending.setter
    def pages_pending(self, pages_pending):
        """Sets the pages_pending of this CrawlWsResult.


        :param pages_pending: The pages_pending of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._pages_pending = pages_pending

    @property
    def pages_excluded_count(self):
        """Gets the pages_excluded_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_excluded_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_excluded_count

    @pages_excluded_count.setter
    def pages_excluded_count(self, pages_excluded_count):
        """Sets the pages_excluded_count of this CrawlWsResult.


        :param pages_excluded_count: The pages_excluded_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_excluded_count = pages_excluded_count

    @property
    def pages_excluded(self):
        """Gets the pages_excluded of this CrawlWsResult.  # noqa: E501


        :return: The pages_excluded of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_excluded

    @pages_excluded.setter
    def pages_excluded(self, pages_excluded):
        """Sets the pages_excluded of this CrawlWsResult.


        :param pages_excluded: The pages_excluded of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._pages_excluded = pages_excluded

    @property
    def off_site_urls_excluded_count(self):
        """Gets the off_site_urls_excluded_count of this CrawlWsResult.  # noqa: E501


        :return: The off_site_urls_excluded_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._off_site_urls_excluded_count

    @off_site_urls_excluded_count.setter
    def off_site_urls_excluded_count(self, off_site_urls_excluded_count):
        """Sets the off_site_urls_excluded_count of this CrawlWsResult.


        :param off_site_urls_excluded_count: The off_site_urls_excluded_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._off_site_urls_excluded_count = off_site_urls_excluded_count

    @property
    def pages_not_modified_count(self):
        """Gets the pages_not_modified_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_not_modified_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_not_modified_count

    @pages_not_modified_count.setter
    def pages_not_modified_count(self, pages_not_modified_count):
        """Sets the pages_not_modified_count of this CrawlWsResult.


        :param pages_not_modified_count: The pages_not_modified_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_not_modified_count = pages_not_modified_count

    @property
    def pages_not_modified(self):
        """Gets the pages_not_modified of this CrawlWsResult.  # noqa: E501


        :return: The pages_not_modified of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages_not_modified

    @pages_not_modified.setter
    def pages_not_modified(self, pages_not_modified):
        """Sets the pages_not_modified of this CrawlWsResult.


        :param pages_not_modified: The pages_not_modified of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._pages_not_modified = pages_not_modified

    @property
    def pages_with_errors_count(self):
        """Gets the pages_with_errors_count of this CrawlWsResult.  # noqa: E501


        :return: The pages_with_errors_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._pages_with_errors_count

    @pages_with_errors_count.setter
    def pages_with_errors_count(self, pages_with_errors_count):
        """Sets the pages_with_errors_count of this CrawlWsResult.


        :param pages_with_errors_count: The pages_with_errors_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._pages_with_errors_count = pages_with_errors_count

    @property
    def pages_with_errors(self):
        """Gets the pages_with_errors of this CrawlWsResult.  # noqa: E501


        :return: The pages_with_errors of this CrawlWsResult.  # noqa: E501
        :rtype: list[CrawlWsResultPagesWithErrors]
        """
        return self._pages_with_errors

    @pages_with_errors.setter
    def pages_with_errors(self, pages_with_errors):
        """Sets the pages_with_errors of this CrawlWsResult.


        :param pages_with_errors: The pages_with_errors of this CrawlWsResult.  # noqa: E501
        :type: list[CrawlWsResultPagesWithErrors]
        """

        self._pages_with_errors = pages_with_errors

    @property
    def mime_type_count(self):
        """Gets the mime_type_count of this CrawlWsResult.  # noqa: E501


        :return: The mime_type_count of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._mime_type_count

    @mime_type_count.setter
    def mime_type_count(self, mime_type_count):
        """Sets the mime_type_count of this CrawlWsResult.


        :param mime_type_count: The mime_type_count of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._mime_type_count = mime_type_count

    @property
    def mime_types(self):
        """Gets the mime_types of this CrawlWsResult.  # noqa: E501


        :return: The mime_types of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._mime_types

    @mime_types.setter
    def mime_types(self, mime_types):
        """Sets the mime_types of this CrawlWsResult.


        :param mime_types: The mime_types of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._mime_types = mime_types

    @property
    def sources(self):
        """Gets the sources of this CrawlWsResult.  # noqa: E501


        :return: The sources of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CrawlWsResult.


        :param sources: The sources of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def starting_urls(self):
        """Gets the starting_urls of this CrawlWsResult.  # noqa: E501


        :return: The starting_urls of this CrawlWsResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._starting_urls

    @starting_urls.setter
    def starting_urls(self, starting_urls):
        """Sets the starting_urls of this CrawlWsResult.


        :param starting_urls: The starting_urls of this CrawlWsResult.  # noqa: E501
        :type: list[str]
        """

        self._starting_urls = starting_urls

    @property
    def refetch_depth(self):
        """Gets the refetch_depth of this CrawlWsResult.  # noqa: E501


        :return: The refetch_depth of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._refetch_depth

    @refetch_depth.setter
    def refetch_depth(self, refetch_depth):
        """Sets the refetch_depth of this CrawlWsResult.


        :param refetch_depth: The refetch_depth of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._refetch_depth = refetch_depth

    @property
    def link_depth(self):
        """Gets the link_depth of this CrawlWsResult.  # noqa: E501


        :return: The link_depth of this CrawlWsResult.  # noqa: E501
        :rtype: int
        """
        return self._link_depth

    @link_depth.setter
    def link_depth(self, link_depth):
        """Sets the link_depth of this CrawlWsResult.


        :param link_depth: The link_depth of this CrawlWsResult.  # noqa: E501
        :type: int
        """

        self._link_depth = link_depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrawlWsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrawlWsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
