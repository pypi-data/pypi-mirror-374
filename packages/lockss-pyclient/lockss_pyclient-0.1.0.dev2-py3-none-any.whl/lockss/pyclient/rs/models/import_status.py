# coding: utf-8

"""
    LOCKSS Repository Service REST API

    REST API of the LOCKSS Repository Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warc_id': 'str',
        'offset': 'int',
        'url': 'str',
        'artifact_uuid': 'str',
        'digest': 'str',
        'version': 'int',
        'status': 'str',
        'status_message': 'str'
    }

    attribute_map = {
        'warc_id': 'warcId',
        'offset': 'offset',
        'url': 'url',
        'artifact_uuid': 'artifactUuid',
        'digest': 'digest',
        'version': 'version',
        'status': 'status',
        'status_message': 'statusMessage'
    }

    def __init__(self, warc_id=None, offset=None, url=None, artifact_uuid=None, digest=None, version=None, status=None, status_message=None):  # noqa: E501
        """ImportStatus - a model defined in Swagger"""  # noqa: E501
        self._warc_id = None
        self._offset = None
        self._url = None
        self._artifact_uuid = None
        self._digest = None
        self._version = None
        self._status = None
        self._status_message = None
        self.discriminator = None
        if warc_id is not None:
            self.warc_id = warc_id
        if offset is not None:
            self.offset = offset
        if url is not None:
            self.url = url
        if artifact_uuid is not None:
            self.artifact_uuid = artifact_uuid
        if digest is not None:
            self.digest = digest
        if version is not None:
            self.version = version
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message

    @property
    def warc_id(self):
        """Gets the warc_id of this ImportStatus.  # noqa: E501


        :return: The warc_id of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._warc_id

    @warc_id.setter
    def warc_id(self, warc_id):
        """Sets the warc_id of this ImportStatus.


        :param warc_id: The warc_id of this ImportStatus.  # noqa: E501
        :type: str
        """

        self._warc_id = warc_id

    @property
    def offset(self):
        """Gets the offset of this ImportStatus.  # noqa: E501


        :return: The offset of this ImportStatus.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ImportStatus.


        :param offset: The offset of this ImportStatus.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def url(self):
        """Gets the url of this ImportStatus.  # noqa: E501


        :return: The url of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImportStatus.


        :param url: The url of this ImportStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def artifact_uuid(self):
        """Gets the artifact_uuid of this ImportStatus.  # noqa: E501


        :return: The artifact_uuid of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uuid

    @artifact_uuid.setter
    def artifact_uuid(self, artifact_uuid):
        """Sets the artifact_uuid of this ImportStatus.


        :param artifact_uuid: The artifact_uuid of this ImportStatus.  # noqa: E501
        :type: str
        """

        self._artifact_uuid = artifact_uuid

    @property
    def digest(self):
        """Gets the digest of this ImportStatus.  # noqa: E501


        :return: The digest of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImportStatus.


        :param digest: The digest of this ImportStatus.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def version(self):
        """Gets the version of this ImportStatus.  # noqa: E501


        :return: The version of this ImportStatus.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImportStatus.


        :param version: The version of this ImportStatus.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this ImportStatus.  # noqa: E501


        :return: The status of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportStatus.


        :param status: The status of this ImportStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "ERROR", "DUPLICATE", "EXCLUDED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ImportStatus.  # noqa: E501


        :return: The status_message of this ImportStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ImportStatus.


        :param status_message: The status_message of this ImportStatus.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
