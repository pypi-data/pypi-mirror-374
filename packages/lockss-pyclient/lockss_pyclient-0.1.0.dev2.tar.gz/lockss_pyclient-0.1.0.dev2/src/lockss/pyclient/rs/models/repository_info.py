# coding: utf-8

"""
    LOCKSS Repository Service REST API

    REST API of the LOCKSS Repository Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepositoryInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_info': 'StorageInfo',
        'index_info': 'StorageInfo',
        'repository_statistics': 'RepositoryStatistics'
    }

    attribute_map = {
        'store_info': 'storeInfo',
        'index_info': 'indexInfo',
        'repository_statistics': 'repositoryStatistics'
    }

    def __init__(self, store_info=None, index_info=None, repository_statistics=None):  # noqa: E501
        """RepositoryInfo - a model defined in Swagger"""  # noqa: E501
        self._store_info = None
        self._index_info = None
        self._repository_statistics = None
        self.discriminator = None
        self.store_info = store_info
        self.index_info = index_info
        if repository_statistics is not None:
            self.repository_statistics = repository_statistics

    @property
    def store_info(self):
        """Gets the store_info of this RepositoryInfo.  # noqa: E501


        :return: The store_info of this RepositoryInfo.  # noqa: E501
        :rtype: StorageInfo
        """
        return self._store_info

    @store_info.setter
    def store_info(self, store_info):
        """Sets the store_info of this RepositoryInfo.


        :param store_info: The store_info of this RepositoryInfo.  # noqa: E501
        :type: StorageInfo
        """
        if store_info is None:
            raise ValueError("Invalid value for `store_info`, must not be `None`")  # noqa: E501

        self._store_info = store_info

    @property
    def index_info(self):
        """Gets the index_info of this RepositoryInfo.  # noqa: E501


        :return: The index_info of this RepositoryInfo.  # noqa: E501
        :rtype: StorageInfo
        """
        return self._index_info

    @index_info.setter
    def index_info(self, index_info):
        """Sets the index_info of this RepositoryInfo.


        :param index_info: The index_info of this RepositoryInfo.  # noqa: E501
        :type: StorageInfo
        """
        if index_info is None:
            raise ValueError("Invalid value for `index_info`, must not be `None`")  # noqa: E501

        self._index_info = index_info

    @property
    def repository_statistics(self):
        """Gets the repository_statistics of this RepositoryInfo.  # noqa: E501


        :return: The repository_statistics of this RepositoryInfo.  # noqa: E501
        :rtype: RepositoryStatistics
        """
        return self._repository_statistics

    @repository_statistics.setter
    def repository_statistics(self, repository_statistics):
        """Sets the repository_statistics of this RepositoryInfo.


        :param repository_statistics: The repository_statistics of this RepositoryInfo.  # noqa: E501
        :type: RepositoryStatistics
        """

        self._repository_statistics = repository_statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
