# coding: utf-8

"""
    LOCKSS Crawler Service REST API

    REST API of the LOCKSS Crawler Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrawlPager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawls': 'list[CrawlStatus]',
        'page_info': 'PageInfo'
    }

    attribute_map = {
        'crawls': 'crawls',
        'page_info': 'pageInfo'
    }

    def __init__(self, crawls=None, page_info=None):  # noqa: E501
        """CrawlPager - a model defined in Swagger"""  # noqa: E501
        self._crawls = None
        self._page_info = None
        self.discriminator = None
        self.crawls = crawls
        self.page_info = page_info

    @property
    def crawls(self):
        """Gets the crawls of this CrawlPager.  # noqa: E501

        The crawls displayed in the page  # noqa: E501

        :return: The crawls of this CrawlPager.  # noqa: E501
        :rtype: list[CrawlStatus]
        """
        return self._crawls

    @crawls.setter
    def crawls(self, crawls):
        """Sets the crawls of this CrawlPager.

        The crawls displayed in the page  # noqa: E501

        :param crawls: The crawls of this CrawlPager.  # noqa: E501
        :type: list[CrawlStatus]
        """
        if crawls is None:
            raise ValueError("Invalid value for `crawls`, must not be `None`")  # noqa: E501

        self._crawls = crawls

    @property
    def page_info(self):
        """Gets the page_info of this CrawlPager.  # noqa: E501


        :return: The page_info of this CrawlPager.  # noqa: E501
        :rtype: PageInfo
        """
        return self._page_info

    @page_info.setter
    def page_info(self, page_info):
        """Sets the page_info of this CrawlPager.


        :param page_info: The page_info of this CrawlPager.  # noqa: E501
        :type: PageInfo
        """
        if page_info is None:
            raise ValueError("Invalid value for `page_info`, must not be `None`")  # noqa: E501

        self._page_info = page_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrawlPager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrawlPager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
