# coding: utf-8

"""
    LOCKSS Crawler Service REST API

    REST API of the LOCKSS Crawler Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrawlerStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'is_auto_crawl_enabled': 'bool',
        'num_jobs_active': 'int',
        'num_jobs_failed': 'int',
        'num_jobs_successful': 'int',
        'num_jobs_pending': 'int',
        'err_message': 'str'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'is_auto_crawl_enabled': 'isAutoCrawlEnabled',
        'num_jobs_active': 'numJobsActive',
        'num_jobs_failed': 'numJobsFailed',
        'num_jobs_successful': 'numJobsSuccessful',
        'num_jobs_pending': 'numJobsPending',
        'err_message': 'errMessage'
    }

    def __init__(self, is_enabled=None, is_auto_crawl_enabled=None, num_jobs_active=None, num_jobs_failed=None, num_jobs_successful=None, num_jobs_pending=None, err_message=None):  # noqa: E501
        """CrawlerStatus - a model defined in Swagger"""  # noqa: E501
        self._is_enabled = None
        self._is_auto_crawl_enabled = None
        self._num_jobs_active = None
        self._num_jobs_failed = None
        self._num_jobs_successful = None
        self._num_jobs_pending = None
        self._err_message = None
        self.discriminator = None
        self.is_enabled = is_enabled
        if is_auto_crawl_enabled is not None:
            self.is_auto_crawl_enabled = is_auto_crawl_enabled
        if num_jobs_active is not None:
            self.num_jobs_active = num_jobs_active
        if num_jobs_failed is not None:
            self.num_jobs_failed = num_jobs_failed
        if num_jobs_successful is not None:
            self.num_jobs_successful = num_jobs_successful
        if num_jobs_pending is not None:
            self.num_jobs_pending = num_jobs_pending
        if err_message is not None:
            self.err_message = err_message

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CrawlerStatus.  # noqa: E501

        Is the crawler enabled  # noqa: E501

        :return: The is_enabled of this CrawlerStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CrawlerStatus.

        Is the crawler enabled  # noqa: E501

        :param is_enabled: The is_enabled of this CrawlerStatus.  # noqa: E501
        :type: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    @property
    def is_auto_crawl_enabled(self):
        """Gets the is_auto_crawl_enabled of this CrawlerStatus.  # noqa: E501

        Does crawler autocrawl AUs when needed.  # noqa: E501

        :return: The is_auto_crawl_enabled of this CrawlerStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_crawl_enabled

    @is_auto_crawl_enabled.setter
    def is_auto_crawl_enabled(self, is_auto_crawl_enabled):
        """Sets the is_auto_crawl_enabled of this CrawlerStatus.

        Does crawler autocrawl AUs when needed.  # noqa: E501

        :param is_auto_crawl_enabled: The is_auto_crawl_enabled of this CrawlerStatus.  # noqa: E501
        :type: bool
        """

        self._is_auto_crawl_enabled = is_auto_crawl_enabled

    @property
    def num_jobs_active(self):
        """Gets the num_jobs_active of this CrawlerStatus.  # noqa: E501

        The number of jobs running.  # noqa: E501

        :return: The num_jobs_active of this CrawlerStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_jobs_active

    @num_jobs_active.setter
    def num_jobs_active(self, num_jobs_active):
        """Sets the num_jobs_active of this CrawlerStatus.

        The number of jobs running.  # noqa: E501

        :param num_jobs_active: The num_jobs_active of this CrawlerStatus.  # noqa: E501
        :type: int
        """

        self._num_jobs_active = num_jobs_active

    @property
    def num_jobs_failed(self):
        """Gets the num_jobs_failed of this CrawlerStatus.  # noqa: E501

        The number of jobs failed.  # noqa: E501

        :return: The num_jobs_failed of this CrawlerStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_jobs_failed

    @num_jobs_failed.setter
    def num_jobs_failed(self, num_jobs_failed):
        """Sets the num_jobs_failed of this CrawlerStatus.

        The number of jobs failed.  # noqa: E501

        :param num_jobs_failed: The num_jobs_failed of this CrawlerStatus.  # noqa: E501
        :type: int
        """

        self._num_jobs_failed = num_jobs_failed

    @property
    def num_jobs_successful(self):
        """Gets the num_jobs_successful of this CrawlerStatus.  # noqa: E501

        The number of jobs succeeded  # noqa: E501

        :return: The num_jobs_successful of this CrawlerStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_jobs_successful

    @num_jobs_successful.setter
    def num_jobs_successful(self, num_jobs_successful):
        """Sets the num_jobs_successful of this CrawlerStatus.

        The number of jobs succeeded  # noqa: E501

        :param num_jobs_successful: The num_jobs_successful of this CrawlerStatus.  # noqa: E501
        :type: int
        """

        self._num_jobs_successful = num_jobs_successful

    @property
    def num_jobs_pending(self):
        """Gets the num_jobs_pending of this CrawlerStatus.  # noqa: E501

        The number of active jobs  # noqa: E501

        :return: The num_jobs_pending of this CrawlerStatus.  # noqa: E501
        :rtype: int
        """
        return self._num_jobs_pending

    @num_jobs_pending.setter
    def num_jobs_pending(self, num_jobs_pending):
        """Sets the num_jobs_pending of this CrawlerStatus.

        The number of active jobs  # noqa: E501

        :param num_jobs_pending: The num_jobs_pending of this CrawlerStatus.  # noqa: E501
        :type: int
        """

        self._num_jobs_pending = num_jobs_pending

    @property
    def err_message(self):
        """Gets the err_message of this CrawlerStatus.  # noqa: E501


        :return: The err_message of this CrawlerStatus.  # noqa: E501
        :rtype: str
        """
        return self._err_message

    @err_message.setter
    def err_message(self, err_message):
        """Sets the err_message of this CrawlerStatus.


        :param err_message: The err_message of this CrawlerStatus.  # noqa: E501
        :type: str
        """

        self._err_message = err_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrawlerStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrawlerStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
