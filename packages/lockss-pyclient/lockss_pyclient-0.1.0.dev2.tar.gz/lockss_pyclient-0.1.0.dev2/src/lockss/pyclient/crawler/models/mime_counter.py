# coding: utf-8

"""
    LOCKSS Crawler Service REST API

    REST API of the LOCKSS Crawler Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MimeCounter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mime_type': 'str',
        'count': 'int',
        'counter_link': 'str'
    }

    attribute_map = {
        'mime_type': 'mimeType',
        'count': 'count',
        'counter_link': 'counterLink'
    }

    def __init__(self, mime_type=None, count=None, counter_link=None):  # noqa: E501
        """MimeCounter - a model defined in Swagger"""  # noqa: E501
        self._mime_type = None
        self._count = None
        self._counter_link = None
        self.discriminator = None
        self.mime_type = mime_type
        if count is not None:
            self.count = count
        if counter_link is not None:
            self.counter_link = counter_link

    @property
    def mime_type(self):
        """Gets the mime_type of this MimeCounter.  # noqa: E501

        The mime type to count.  # noqa: E501

        :return: The mime_type of this MimeCounter.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MimeCounter.

        The mime type to count.  # noqa: E501

        :param mime_type: The mime_type of this MimeCounter.  # noqa: E501
        :type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def count(self):
        """Gets the count of this MimeCounter.  # noqa: E501

        The number of elements of mime type  # noqa: E501

        :return: The count of this MimeCounter.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MimeCounter.

        The number of elements of mime type  # noqa: E501

        :param count: The count of this MimeCounter.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def counter_link(self):
        """Gets the counter_link of this MimeCounter.  # noqa: E501

        A link to the list of count elements or to a pager with count elements.  # noqa: E501

        :return: The counter_link of this MimeCounter.  # noqa: E501
        :rtype: str
        """
        return self._counter_link

    @counter_link.setter
    def counter_link(self, counter_link):
        """Sets the counter_link of this MimeCounter.

        A link to the list of count elements or to a pager with count elements.  # noqa: E501

        :param counter_link: The counter_link of this MimeCounter.  # noqa: E501
        :type: str
        """

        self._counter_link = counter_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MimeCounter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MimeCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
