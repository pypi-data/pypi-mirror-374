# coding: utf-8

"""
    LOCKSS Configuration Service REST API

    REST API of the LOCKSS Configuration Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginWsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plugin_id': 'str',
        'name': 'str',
        'version': 'str',
        'type': 'str',
        'definition': 'dict(str, str)',
        'registry': 'str',
        'url': 'str',
        'au_count': 'int',
        'publishing_platform': 'str'
    }

    attribute_map = {
        'plugin_id': 'pluginId',
        'name': 'name',
        'version': 'version',
        'type': 'type',
        'definition': 'definition',
        'registry': 'registry',
        'url': 'url',
        'au_count': 'auCount',
        'publishing_platform': 'publishingPlatform'
    }

    def __init__(self, plugin_id=None, name=None, version=None, type=None, definition=None, registry=None, url=None, au_count=None, publishing_platform=None):  # noqa: E501
        """PluginWsResult - a model defined in Swagger"""  # noqa: E501
        self._plugin_id = None
        self._name = None
        self._version = None
        self._type = None
        self._definition = None
        self._registry = None
        self._url = None
        self._au_count = None
        self._publishing_platform = None
        self.discriminator = None
        self.plugin_id = plugin_id
        self.name = name
        self.version = version
        self.type = type
        self.definition = definition
        self.registry = registry
        self.url = url
        self.au_count = au_count
        self.publishing_platform = publishing_platform

    @property
    def plugin_id(self):
        """Gets the plugin_id of this PluginWsResult.  # noqa: E501

        The identifier of the plugin  # noqa: E501

        :return: The plugin_id of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this PluginWsResult.

        The identifier of the plugin  # noqa: E501

        :param plugin_id: The plugin_id of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if plugin_id is None:
            raise ValueError("Invalid value for `plugin_id`, must not be `None`")  # noqa: E501

        self._plugin_id = plugin_id

    @property
    def name(self):
        """Gets the name of this PluginWsResult.  # noqa: E501

        The name of the plugin  # noqa: E501

        :return: The name of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginWsResult.

        The name of the plugin  # noqa: E501

        :param name: The name of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this PluginWsResult.  # noqa: E501

        The version of the plugin  # noqa: E501

        :return: The version of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PluginWsResult.

        The version of the plugin  # noqa: E501

        :param version: The version of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def type(self):
        """Gets the type of this PluginWsResult.  # noqa: E501

        The type of the plugin  # noqa: E501

        :return: The type of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PluginWsResult.

        The type of the plugin  # noqa: E501

        :param type: The type of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def definition(self):
        """Gets the definition of this PluginWsResult.  # noqa: E501

        The map of plugin definition properties  # noqa: E501

        :return: The definition of this PluginWsResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this PluginWsResult.

        The map of plugin definition properties  # noqa: E501

        :param definition: The definition of this PluginWsResult.  # noqa: E501
        :type: dict(str, str)
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def registry(self):
        """Gets the registry of this PluginWsResult.  # noqa: E501

        The registry of the plugin  # noqa: E501

        :return: The registry of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this PluginWsResult.

        The registry of the plugin  # noqa: E501

        :param registry: The registry of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")  # noqa: E501

        self._registry = registry

    @property
    def url(self):
        """Gets the url of this PluginWsResult.  # noqa: E501

        The URL of the plugin  # noqa: E501

        :return: The url of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PluginWsResult.

        The URL of the plugin  # noqa: E501

        :param url: The url of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def au_count(self):
        """Gets the au_count of this PluginWsResult.  # noqa: E501

        The count of Archival Units linked to the plugin  # noqa: E501

        :return: The au_count of this PluginWsResult.  # noqa: E501
        :rtype: int
        """
        return self._au_count

    @au_count.setter
    def au_count(self, au_count):
        """Sets the au_count of this PluginWsResult.

        The count of Archival Units linked to the plugin  # noqa: E501

        :param au_count: The au_count of this PluginWsResult.  # noqa: E501
        :type: int
        """
        if au_count is None:
            raise ValueError("Invalid value for `au_count`, must not be `None`")  # noqa: E501

        self._au_count = au_count

    @property
    def publishing_platform(self):
        """Gets the publishing_platform of this PluginWsResult.  # noqa: E501

        The publishing platform of the plugin  # noqa: E501

        :return: The publishing_platform of this PluginWsResult.  # noqa: E501
        :rtype: str
        """
        return self._publishing_platform

    @publishing_platform.setter
    def publishing_platform(self, publishing_platform):
        """Sets the publishing_platform of this PluginWsResult.

        The publishing platform of the plugin  # noqa: E501

        :param publishing_platform: The publishing_platform of this PluginWsResult.  # noqa: E501
        :type: str
        """
        if publishing_platform is None:
            raise ValueError("Invalid value for `publishing_platform`, must not be `None`")  # noqa: E501

        self._publishing_platform = publishing_platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginWsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginWsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
