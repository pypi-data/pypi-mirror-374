# coding: utf-8

"""
    LOCKSS Configuration Service REST API

    REST API of the LOCKSS Configuration Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CheckSubstanceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'old_state': 'str',
        'new_state': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'old_state': 'oldState',
        'new_state': 'newState',
        'error_message': 'errorMessage'
    }

    def __init__(self, id=None, old_state=None, new_state=None, error_message=None):  # noqa: E501
        """CheckSubstanceResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._old_state = None
        self._new_state = None
        self._error_message = None
        self.discriminator = None
        self.id = id
        self.old_state = old_state
        self.new_state = new_state
        self.error_message = error_message

    @property
    def id(self):
        """Gets the id of this CheckSubstanceResult.  # noqa: E501

        The identifier of the archival unit  # noqa: E501

        :return: The id of this CheckSubstanceResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckSubstanceResult.

        The identifier of the archival unit  # noqa: E501

        :param id: The id of this CheckSubstanceResult.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def old_state(self):
        """Gets the old_state of this CheckSubstanceResult.  # noqa: E501

        An indication of whether the result is successful  # noqa: E501

        :return: The old_state of this CheckSubstanceResult.  # noqa: E501
        :rtype: str
        """
        return self._old_state

    @old_state.setter
    def old_state(self, old_state):
        """Sets the old_state of this CheckSubstanceResult.

        An indication of whether the result is successful  # noqa: E501

        :param old_state: The old_state of this CheckSubstanceResult.  # noqa: E501
        :type: str
        """
        if old_state is None:
            raise ValueError("Invalid value for `old_state`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "Yes", "No"]  # noqa: E501
        if old_state not in allowed_values:
            raise ValueError(
                "Invalid value for `old_state` ({0}), must be one of {1}"  # noqa: E501
                .format(old_state, allowed_values)
            )

        self._old_state = old_state

    @property
    def new_state(self):
        """Gets the new_state of this CheckSubstanceResult.  # noqa: E501

        An indication of whether the result is successful  # noqa: E501

        :return: The new_state of this CheckSubstanceResult.  # noqa: E501
        :rtype: str
        """
        return self._new_state

    @new_state.setter
    def new_state(self, new_state):
        """Sets the new_state of this CheckSubstanceResult.

        An indication of whether the result is successful  # noqa: E501

        :param new_state: The new_state of this CheckSubstanceResult.  # noqa: E501
        :type: str
        """
        if new_state is None:
            raise ValueError("Invalid value for `new_state`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "Yes", "No"]  # noqa: E501
        if new_state not in allowed_values:
            raise ValueError(
                "Invalid value for `new_state` ({0}), must be one of {1}"  # noqa: E501
                .format(new_state, allowed_values)
            )

        self._new_state = new_state

    @property
    def error_message(self):
        """Gets the error_message of this CheckSubstanceResult.  # noqa: E501

        The error message as a result of the operation  # noqa: E501

        :return: The error_message of this CheckSubstanceResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CheckSubstanceResult.

        The error message as a result of the operation  # noqa: E501

        :param error_message: The error_message of this CheckSubstanceResult.  # noqa: E501
        :type: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")  # noqa: E501

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckSubstanceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckSubstanceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
