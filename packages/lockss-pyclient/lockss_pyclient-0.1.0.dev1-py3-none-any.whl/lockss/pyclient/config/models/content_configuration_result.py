# coding: utf-8

"""
    LOCKSS Configuration Service REST API

    REST API of the LOCKSS Configuration Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentConfigurationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'au_id': 'str',
        'name': 'str',
        'is_success': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'au_id': 'auId',
        'name': 'name',
        'is_success': 'isSuccess',
        'message': 'message'
    }

    def __init__(self, au_id=None, name=None, is_success=None, message=None):  # noqa: E501
        """ContentConfigurationResult - a model defined in Swagger"""  # noqa: E501
        self._au_id = None
        self._name = None
        self._is_success = None
        self._message = None
        self.discriminator = None
        self.au_id = au_id
        self.name = name
        self.is_success = is_success
        self.message = message

    @property
    def au_id(self):
        """Gets the au_id of this ContentConfigurationResult.  # noqa: E501

        The identifier of the Archival Unit  # noqa: E501

        :return: The au_id of this ContentConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._au_id

    @au_id.setter
    def au_id(self, au_id):
        """Sets the au_id of this ContentConfigurationResult.

        The identifier of the Archival Unit  # noqa: E501

        :param au_id: The au_id of this ContentConfigurationResult.  # noqa: E501
        :type: str
        """
        if au_id is None:
            raise ValueError("Invalid value for `au_id`, must not be `None`")  # noqa: E501

        self._au_id = au_id

    @property
    def name(self):
        """Gets the name of this ContentConfigurationResult.  # noqa: E501

        The name of the Archival Unit  # noqa: E501

        :return: The name of this ContentConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentConfigurationResult.

        The name of the Archival Unit  # noqa: E501

        :param name: The name of this ContentConfigurationResult.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_success(self):
        """Gets the is_success of this ContentConfigurationResult.  # noqa: E501

        An indication of whether the AU was successfully added or not  # noqa: E501

        :return: The is_success of this ContentConfigurationResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this ContentConfigurationResult.

        An indication of whether the AU was successfully added or not  # noqa: E501

        :param is_success: The is_success of this ContentConfigurationResult.  # noqa: E501
        :type: bool
        """
        if is_success is None:
            raise ValueError("Invalid value for `is_success`, must not be `None`")  # noqa: E501

        self._is_success = is_success

    @property
    def message(self):
        """Gets the message of this ContentConfigurationResult.  # noqa: E501

        A descriptive message regarding the result of the operation  # noqa: E501

        :return: The message of this ContentConfigurationResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ContentConfigurationResult.

        A descriptive message regarding the result of the operation  # noqa: E501

        :param message: The message of this ContentConfigurationResult.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentConfigurationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentConfigurationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
