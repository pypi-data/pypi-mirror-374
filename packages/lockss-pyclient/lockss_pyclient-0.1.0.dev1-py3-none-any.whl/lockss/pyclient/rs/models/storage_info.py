# coding: utf-8

"""
    LOCKSS Repository Service REST API

    REST API of the LOCKSS Repository Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StorageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'size': 'int',
        'used': 'int',
        'avail': 'int',
        'percent_used_string': 'str',
        'percent_used': 'float'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'size': 'size',
        'used': 'used',
        'avail': 'avail',
        'percent_used_string': 'percentUsedString',
        'percent_used': 'percentUsed'
    }

    def __init__(self, type=None, name=None, size=None, used=None, avail=None, percent_used_string=None, percent_used=None):  # noqa: E501
        """StorageInfo - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._size = None
        self._used = None
        self._avail = None
        self._percent_used_string = None
        self._percent_used = None
        self.discriminator = None
        self.type = type
        self.name = name
        self.size = size
        self.used = used
        self.avail = avail
        self.percent_used_string = percent_used_string
        self.percent_used = percent_used

    @property
    def type(self):
        """Gets the type of this StorageInfo.  # noqa: E501

        Type of the storage area  # noqa: E501

        :return: The type of this StorageInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageInfo.

        Type of the storage area  # noqa: E501

        :param type: The type of this StorageInfo.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this StorageInfo.  # noqa: E501

        Name of the storage area  # noqa: E501

        :return: The name of this StorageInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageInfo.

        Name of the storage area  # noqa: E501

        :param name: The name of this StorageInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this StorageInfo.  # noqa: E501

        Size in bytes of the storage area  # noqa: E501

        :return: The size of this StorageInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StorageInfo.

        Size in bytes of the storage area  # noqa: E501

        :param size: The size of this StorageInfo.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def used(self):
        """Gets the used of this StorageInfo.  # noqa: E501

        Used size in bytes of the storage area  # noqa: E501

        :return: The used of this StorageInfo.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this StorageInfo.

        Used size in bytes of the storage area  # noqa: E501

        :param used: The used of this StorageInfo.  # noqa: E501
        :type: int
        """
        if used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")  # noqa: E501

        self._used = used

    @property
    def avail(self):
        """Gets the avail of this StorageInfo.  # noqa: E501

        Available size in bytes of the storage area  # noqa: E501

        :return: The avail of this StorageInfo.  # noqa: E501
        :rtype: int
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this StorageInfo.

        Available size in bytes of the storage area  # noqa: E501

        :param avail: The avail of this StorageInfo.  # noqa: E501
        :type: int
        """
        if avail is None:
            raise ValueError("Invalid value for `avail`, must not be `None`")  # noqa: E501

        self._avail = avail

    @property
    def percent_used_string(self):
        """Gets the percent_used_string of this StorageInfo.  # noqa: E501

        Percentage of size used, formatted as a string  # noqa: E501

        :return: The percent_used_string of this StorageInfo.  # noqa: E501
        :rtype: str
        """
        return self._percent_used_string

    @percent_used_string.setter
    def percent_used_string(self, percent_used_string):
        """Sets the percent_used_string of this StorageInfo.

        Percentage of size used, formatted as a string  # noqa: E501

        :param percent_used_string: The percent_used_string of this StorageInfo.  # noqa: E501
        :type: str
        """
        if percent_used_string is None:
            raise ValueError("Invalid value for `percent_used_string`, must not be `None`")  # noqa: E501

        self._percent_used_string = percent_used_string

    @property
    def percent_used(self):
        """Gets the percent_used of this StorageInfo.  # noqa: E501

        Percentage of size used  # noqa: E501

        :return: The percent_used of this StorageInfo.  # noqa: E501
        :rtype: float
        """
        return self._percent_used

    @percent_used.setter
    def percent_used(self, percent_used):
        """Sets the percent_used of this StorageInfo.

        Percentage of size used  # noqa: E501

        :param percent_used: The percent_used of this StorageInfo.  # noqa: E501
        :type: float
        """
        if percent_used is None:
            raise ValueError("Invalid value for `percent_used`, must not be `None`")  # noqa: E501

        self._percent_used = percent_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
