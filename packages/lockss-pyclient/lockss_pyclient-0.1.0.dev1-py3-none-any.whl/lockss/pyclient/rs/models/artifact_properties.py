# coding: utf-8

"""
    LOCKSS Repository Service REST API

    REST API of the LOCKSS Repository Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'uuid': 'str',
        'auid': 'str',
        'uri': 'str',
        'version': 'int',
        'content_length': 'int',
        'content_digest': 'str',
        'collection_date': 'int',
        'store_date': 'int',
        'state': 'str'
    }

    attribute_map = {
        'namespace': 'namespace',
        'uuid': 'uuid',
        'auid': 'auid',
        'uri': 'uri',
        'version': 'version',
        'content_length': 'contentLength',
        'content_digest': 'contentDigest',
        'collection_date': 'collectionDate',
        'store_date': 'storeDate',
        'state': 'state'
    }

    def __init__(self, namespace='lockss', uuid=None, auid=None, uri=None, version=None, content_length=None, content_digest=None, collection_date=None, store_date=None, state=None):  # noqa: E501
        """ArtifactProperties - a model defined in Swagger"""  # noqa: E501
        self._namespace = None
        self._uuid = None
        self._auid = None
        self._uri = None
        self._version = None
        self._content_length = None
        self._content_digest = None
        self._collection_date = None
        self._store_date = None
        self._state = None
        self.discriminator = None
        if namespace is not None:
            self.namespace = namespace
        if uuid is not None:
            self.uuid = uuid
        if auid is not None:
            self.auid = auid
        if uri is not None:
            self.uri = uri
        if version is not None:
            self.version = version
        if content_length is not None:
            self.content_length = content_length
        if content_digest is not None:
            self.content_digest = content_digest
        if collection_date is not None:
            self.collection_date = collection_date
        if store_date is not None:
            self.store_date = store_date
        if state is not None:
            self.state = state

    @property
    def namespace(self):
        """Gets the namespace of this ArtifactProperties.  # noqa: E501


        :return: The namespace of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ArtifactProperties.


        :param namespace: The namespace of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def uuid(self):
        """Gets the uuid of this ArtifactProperties.  # noqa: E501


        :return: The uuid of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ArtifactProperties.


        :param uuid: The uuid of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def auid(self):
        """Gets the auid of this ArtifactProperties.  # noqa: E501


        :return: The auid of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._auid

    @auid.setter
    def auid(self, auid):
        """Sets the auid of this ArtifactProperties.


        :param auid: The auid of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._auid = auid

    @property
    def uri(self):
        """Gets the uri of this ArtifactProperties.  # noqa: E501


        :return: The uri of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ArtifactProperties.


        :param uri: The uri of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def version(self):
        """Gets the version of this ArtifactProperties.  # noqa: E501


        :return: The version of this ArtifactProperties.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ArtifactProperties.


        :param version: The version of this ArtifactProperties.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def content_length(self):
        """Gets the content_length of this ArtifactProperties.  # noqa: E501


        :return: The content_length of this ArtifactProperties.  # noqa: E501
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this ArtifactProperties.


        :param content_length: The content_length of this ArtifactProperties.  # noqa: E501
        :type: int
        """

        self._content_length = content_length

    @property
    def content_digest(self):
        """Gets the content_digest of this ArtifactProperties.  # noqa: E501


        :return: The content_digest of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._content_digest

    @content_digest.setter
    def content_digest(self, content_digest):
        """Sets the content_digest of this ArtifactProperties.


        :param content_digest: The content_digest of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._content_digest = content_digest

    @property
    def collection_date(self):
        """Gets the collection_date of this ArtifactProperties.  # noqa: E501


        :return: The collection_date of this ArtifactProperties.  # noqa: E501
        :rtype: int
        """
        return self._collection_date

    @collection_date.setter
    def collection_date(self, collection_date):
        """Sets the collection_date of this ArtifactProperties.


        :param collection_date: The collection_date of this ArtifactProperties.  # noqa: E501
        :type: int
        """

        self._collection_date = collection_date

    @property
    def store_date(self):
        """Gets the store_date of this ArtifactProperties.  # noqa: E501


        :return: The store_date of this ArtifactProperties.  # noqa: E501
        :rtype: int
        """
        return self._store_date

    @store_date.setter
    def store_date(self, store_date):
        """Sets the store_date of this ArtifactProperties.


        :param store_date: The store_date of this ArtifactProperties.  # noqa: E501
        :type: int
        """

        self._store_date = store_date

    @property
    def state(self):
        """Gets the state of this ArtifactProperties.  # noqa: E501


        :return: The state of this ArtifactProperties.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ArtifactProperties.


        :param state: The state of this ArtifactProperties.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
