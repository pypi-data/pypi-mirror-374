# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AusImportBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_base_url_path': 'str',
        'target_url': 'str',
        'file': 'str',
        'user_properties': 'list[str]'
    }

    attribute_map = {
        'target_base_url_path': 'targetBaseUrlPath',
        'target_url': 'targetUrl',
        'file': 'file',
        'user_properties': 'userProperties'
    }

    def __init__(self, target_base_url_path=None, target_url=None, file=None, user_properties=None):  # noqa: E501
        """AusImportBody - a model defined in Swagger"""  # noqa: E501
        self._target_base_url_path = None
        self._target_url = None
        self._file = None
        self._user_properties = None
        self.discriminator = None
        self.target_base_url_path = target_base_url_path
        self.target_url = target_url
        self.file = file
        if user_properties is not None:
            self.user_properties = user_properties

    @property
    def target_base_url_path(self):
        """Gets the target_base_url_path of this AusImportBody.  # noqa: E501

        The base URL path of the target AU  # noqa: E501

        :return: The target_base_url_path of this AusImportBody.  # noqa: E501
        :rtype: str
        """
        return self._target_base_url_path

    @target_base_url_path.setter
    def target_base_url_path(self, target_base_url_path):
        """Sets the target_base_url_path of this AusImportBody.

        The base URL path of the target AU  # noqa: E501

        :param target_base_url_path: The target_base_url_path of this AusImportBody.  # noqa: E501
        :type: str
        """
        if target_base_url_path is None:
            raise ValueError("Invalid value for `target_base_url_path`, must not be `None`")  # noqa: E501

        self._target_base_url_path = target_base_url_path

    @property
    def target_url(self):
        """Gets the target_url of this AusImportBody.  # noqa: E501

        The target AU URL  # noqa: E501

        :return: The target_url of this AusImportBody.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this AusImportBody.

        The target AU URL  # noqa: E501

        :param target_url: The target_url of this AusImportBody.  # noqa: E501
        :type: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")  # noqa: E501

        self._target_url = target_url

    @property
    def file(self):
        """Gets the file of this AusImportBody.  # noqa: E501

        The content of the file to be imported  # noqa: E501

        :return: The file of this AusImportBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AusImportBody.

        The content of the file to be imported  # noqa: E501

        :param file: The file of this AusImportBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def user_properties(self):
        """Gets the user_properties of this AusImportBody.  # noqa: E501

        The user-specified properties  # noqa: E501

        :return: The user_properties of this AusImportBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_properties

    @user_properties.setter
    def user_properties(self, user_properties):
        """Sets the user_properties of this AusImportBody.

        The user-specified properties  # noqa: E501

        :param user_properties: The user_properties of this AusImportBody.  # noqa: E501
        :type: list[str]
        """

        self._user_properties = user_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AusImportBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AusImportBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
