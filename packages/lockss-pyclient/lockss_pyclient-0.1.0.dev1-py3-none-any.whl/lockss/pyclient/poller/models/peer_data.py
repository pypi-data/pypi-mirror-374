# coding: utf-8

"""
    LOCKSS Poller Service REST API

    REST API of the LOCKSS Poller Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeerData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'peer_id': 'str',
        'status': 'str',
        'agreement': 'float',
        'num_agree': 'int',
        'agree_link': 'LinkDesc',
        'num_disagree': 'int',
        'disagree_link': 'LinkDesc',
        'num_poller_only': 'int',
        'poller_only_link': 'LinkDesc',
        'num_voter_only': 'int',
        'voter_only_link': 'LinkDesc',
        'bytes_hashed': 'int',
        'bytes_read': 'int',
        'wt_agreement': 'float',
        'wt_num_agree': 'float',
        'wt_num_disagree': 'float',
        'wt_num_poller_only': 'float',
        'wt_num_voter_only': 'float',
        'state': 'str',
        'last_state_change': 'int'
    }

    attribute_map = {
        'peer_id': 'peerId',
        'status': 'status',
        'agreement': 'agreement',
        'num_agree': 'numAgree',
        'agree_link': 'agreeLink',
        'num_disagree': 'numDisagree',
        'disagree_link': 'disagreeLink',
        'num_poller_only': 'numPollerOnly',
        'poller_only_link': 'pollerOnlyLink',
        'num_voter_only': 'numVoterOnly',
        'voter_only_link': 'voterOnlyLink',
        'bytes_hashed': 'bytesHashed',
        'bytes_read': 'bytesRead',
        'wt_agreement': 'wtAgreement',
        'wt_num_agree': 'wtNumAgree',
        'wt_num_disagree': 'wtNumDisagree',
        'wt_num_poller_only': 'wtNumPollerOnly',
        'wt_num_voter_only': 'wtNumVoterOnly',
        'state': 'state',
        'last_state_change': 'lastStateChange'
    }

    def __init__(self, peer_id=None, status=None, agreement=None, num_agree=None, agree_link=None, num_disagree=None, disagree_link=None, num_poller_only=None, poller_only_link=None, num_voter_only=None, voter_only_link=None, bytes_hashed=None, bytes_read=None, wt_agreement=None, wt_num_agree=None, wt_num_disagree=None, wt_num_poller_only=None, wt_num_voter_only=None, state=None, last_state_change=None):  # noqa: E501
        """PeerData - a model defined in Swagger"""  # noqa: E501
        self._peer_id = None
        self._status = None
        self._agreement = None
        self._num_agree = None
        self._agree_link = None
        self._num_disagree = None
        self._disagree_link = None
        self._num_poller_only = None
        self._poller_only_link = None
        self._num_voter_only = None
        self._voter_only_link = None
        self._bytes_hashed = None
        self._bytes_read = None
        self._wt_agreement = None
        self._wt_num_agree = None
        self._wt_num_disagree = None
        self._wt_num_poller_only = None
        self._wt_num_voter_only = None
        self._state = None
        self._last_state_change = None
        self.discriminator = None
        self.peer_id = peer_id
        self.status = status
        if agreement is not None:
            self.agreement = agreement
        if num_agree is not None:
            self.num_agree = num_agree
        if agree_link is not None:
            self.agree_link = agree_link
        if num_disagree is not None:
            self.num_disagree = num_disagree
        if disagree_link is not None:
            self.disagree_link = disagree_link
        if num_poller_only is not None:
            self.num_poller_only = num_poller_only
        if poller_only_link is not None:
            self.poller_only_link = poller_only_link
        if num_voter_only is not None:
            self.num_voter_only = num_voter_only
        if voter_only_link is not None:
            self.voter_only_link = voter_only_link
        if bytes_hashed is not None:
            self.bytes_hashed = bytes_hashed
        if bytes_read is not None:
            self.bytes_read = bytes_read
        if wt_agreement is not None:
            self.wt_agreement = wt_agreement
        if wt_num_agree is not None:
            self.wt_num_agree = wt_num_agree
        if wt_num_disagree is not None:
            self.wt_num_disagree = wt_num_disagree
        if wt_num_poller_only is not None:
            self.wt_num_poller_only = wt_num_poller_only
        if wt_num_voter_only is not None:
            self.wt_num_voter_only = wt_num_voter_only
        if state is not None:
            self.state = state
        if last_state_change is not None:
            self.last_state_change = last_state_change

    @property
    def peer_id(self):
        """Gets the peer_id of this PeerData.  # noqa: E501

        the peer id for this participant  # noqa: E501

        :return: The peer_id of this PeerData.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this PeerData.

        the peer id for this participant  # noqa: E501

        :param peer_id: The peer_id of this PeerData.  # noqa: E501
        :type: str
        """
        if peer_id is None:
            raise ValueError("Invalid value for `peer_id`, must not be `None`")  # noqa: E501

        self._peer_id = peer_id

    @property
    def status(self):
        """Gets the status of this PeerData.  # noqa: E501

        the status of this peer  # noqa: E501

        :return: The status of this PeerData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PeerData.

        the status of this peer  # noqa: E501

        :param status: The status of this PeerData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def agreement(self):
        """Gets the agreement of this PeerData.  # noqa: E501

        the percentage of vote agreement.  # noqa: E501

        :return: The agreement of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this PeerData.

        the percentage of vote agreement.  # noqa: E501

        :param agreement: The agreement of this PeerData.  # noqa: E501
        :type: float
        """

        self._agreement = agreement

    @property
    def num_agree(self):
        """Gets the num_agree of this PeerData.  # noqa: E501

        The number of urls for which there was agreement.  # noqa: E501

        :return: The num_agree of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._num_agree

    @num_agree.setter
    def num_agree(self, num_agree):
        """Sets the num_agree of this PeerData.

        The number of urls for which there was agreement.  # noqa: E501

        :param num_agree: The num_agree of this PeerData.  # noqa: E501
        :type: int
        """

        self._num_agree = num_agree

    @property
    def agree_link(self):
        """Gets the agree_link of this PeerData.  # noqa: E501


        :return: The agree_link of this PeerData.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._agree_link

    @agree_link.setter
    def agree_link(self, agree_link):
        """Sets the agree_link of this PeerData.


        :param agree_link: The agree_link of this PeerData.  # noqa: E501
        :type: LinkDesc
        """

        self._agree_link = agree_link

    @property
    def num_disagree(self):
        """Gets the num_disagree of this PeerData.  # noqa: E501

        The number of urls for which there was disagreement.  # noqa: E501

        :return: The num_disagree of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._num_disagree

    @num_disagree.setter
    def num_disagree(self, num_disagree):
        """Sets the num_disagree of this PeerData.

        The number of urls for which there was disagreement.  # noqa: E501

        :param num_disagree: The num_disagree of this PeerData.  # noqa: E501
        :type: int
        """

        self._num_disagree = num_disagree

    @property
    def disagree_link(self):
        """Gets the disagree_link of this PeerData.  # noqa: E501


        :return: The disagree_link of this PeerData.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._disagree_link

    @disagree_link.setter
    def disagree_link(self, disagree_link):
        """Sets the disagree_link of this PeerData.


        :param disagree_link: The disagree_link of this PeerData.  # noqa: E501
        :type: LinkDesc
        """

        self._disagree_link = disagree_link

    @property
    def num_poller_only(self):
        """Gets the num_poller_only of this PeerData.  # noqa: E501

        The number of urls which were poller only.  # noqa: E501

        :return: The num_poller_only of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._num_poller_only

    @num_poller_only.setter
    def num_poller_only(self, num_poller_only):
        """Sets the num_poller_only of this PeerData.

        The number of urls which were poller only.  # noqa: E501

        :param num_poller_only: The num_poller_only of this PeerData.  # noqa: E501
        :type: int
        """

        self._num_poller_only = num_poller_only

    @property
    def poller_only_link(self):
        """Gets the poller_only_link of this PeerData.  # noqa: E501


        :return: The poller_only_link of this PeerData.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._poller_only_link

    @poller_only_link.setter
    def poller_only_link(self, poller_only_link):
        """Sets the poller_only_link of this PeerData.


        :param poller_only_link: The poller_only_link of this PeerData.  # noqa: E501
        :type: LinkDesc
        """

        self._poller_only_link = poller_only_link

    @property
    def num_voter_only(self):
        """Gets the num_voter_only of this PeerData.  # noqa: E501

        The number of urls for which were voter only.  # noqa: E501

        :return: The num_voter_only of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._num_voter_only

    @num_voter_only.setter
    def num_voter_only(self, num_voter_only):
        """Sets the num_voter_only of this PeerData.

        The number of urls for which were voter only.  # noqa: E501

        :param num_voter_only: The num_voter_only of this PeerData.  # noqa: E501
        :type: int
        """

        self._num_voter_only = num_voter_only

    @property
    def voter_only_link(self):
        """Gets the voter_only_link of this PeerData.  # noqa: E501


        :return: The voter_only_link of this PeerData.  # noqa: E501
        :rtype: LinkDesc
        """
        return self._voter_only_link

    @voter_only_link.setter
    def voter_only_link(self, voter_only_link):
        """Sets the voter_only_link of this PeerData.


        :param voter_only_link: The voter_only_link of this PeerData.  # noqa: E501
        :type: LinkDesc
        """

        self._voter_only_link = voter_only_link

    @property
    def bytes_hashed(self):
        """Gets the bytes_hashed of this PeerData.  # noqa: E501

        the number of bytes hashed.  # noqa: E501

        :return: The bytes_hashed of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._bytes_hashed

    @bytes_hashed.setter
    def bytes_hashed(self, bytes_hashed):
        """Sets the bytes_hashed of this PeerData.

        the number of bytes hashed.  # noqa: E501

        :param bytes_hashed: The bytes_hashed of this PeerData.  # noqa: E501
        :type: int
        """

        self._bytes_hashed = bytes_hashed

    @property
    def bytes_read(self):
        """Gets the bytes_read of this PeerData.  # noqa: E501

        the number of bytes read.  # noqa: E501

        :return: The bytes_read of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._bytes_read

    @bytes_read.setter
    def bytes_read(self, bytes_read):
        """Sets the bytes_read of this PeerData.

        the number of bytes read.  # noqa: E501

        :param bytes_read: The bytes_read of this PeerData.  # noqa: E501
        :type: int
        """

        self._bytes_read = bytes_read

    @property
    def wt_agreement(self):
        """Gets the wt_agreement of this PeerData.  # noqa: E501

        the weight of vote percentage agreement.  # noqa: E501

        :return: The wt_agreement of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._wt_agreement

    @wt_agreement.setter
    def wt_agreement(self, wt_agreement):
        """Sets the wt_agreement of this PeerData.

        the weight of vote percentage agreement.  # noqa: E501

        :param wt_agreement: The wt_agreement of this PeerData.  # noqa: E501
        :type: float
        """

        self._wt_agreement = wt_agreement

    @property
    def wt_num_agree(self):
        """Gets the wt_num_agree of this PeerData.  # noqa: E501

        the weight of number agree votes.  # noqa: E501

        :return: The wt_num_agree of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._wt_num_agree

    @wt_num_agree.setter
    def wt_num_agree(self, wt_num_agree):
        """Sets the wt_num_agree of this PeerData.

        the weight of number agree votes.  # noqa: E501

        :param wt_num_agree: The wt_num_agree of this PeerData.  # noqa: E501
        :type: float
        """

        self._wt_num_agree = wt_num_agree

    @property
    def wt_num_disagree(self):
        """Gets the wt_num_disagree of this PeerData.  # noqa: E501

        the weight of number of disagree votes.  # noqa: E501

        :return: The wt_num_disagree of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._wt_num_disagree

    @wt_num_disagree.setter
    def wt_num_disagree(self, wt_num_disagree):
        """Sets the wt_num_disagree of this PeerData.

        the weight of number of disagree votes.  # noqa: E501

        :param wt_num_disagree: The wt_num_disagree of this PeerData.  # noqa: E501
        :type: float
        """

        self._wt_num_disagree = wt_num_disagree

    @property
    def wt_num_poller_only(self):
        """Gets the wt_num_poller_only of this PeerData.  # noqa: E501

        the weight of number of poller only votes.  # noqa: E501

        :return: The wt_num_poller_only of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._wt_num_poller_only

    @wt_num_poller_only.setter
    def wt_num_poller_only(self, wt_num_poller_only):
        """Sets the wt_num_poller_only of this PeerData.

        the weight of number of poller only votes.  # noqa: E501

        :param wt_num_poller_only: The wt_num_poller_only of this PeerData.  # noqa: E501
        :type: float
        """

        self._wt_num_poller_only = wt_num_poller_only

    @property
    def wt_num_voter_only(self):
        """Gets the wt_num_voter_only of this PeerData.  # noqa: E501

        the weight of number of voter only votes.  # noqa: E501

        :return: The wt_num_voter_only of this PeerData.  # noqa: E501
        :rtype: float
        """
        return self._wt_num_voter_only

    @wt_num_voter_only.setter
    def wt_num_voter_only(self, wt_num_voter_only):
        """Sets the wt_num_voter_only of this PeerData.

        the weight of number of voter only votes.  # noqa: E501

        :param wt_num_voter_only: The wt_num_voter_only of this PeerData.  # noqa: E501
        :type: float
        """

        self._wt_num_voter_only = wt_num_voter_only

    @property
    def state(self):
        """Gets the state of this PeerData.  # noqa: E501

        the state machine state.  # noqa: E501

        :return: The state of this PeerData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PeerData.

        the state machine state.  # noqa: E501

        :param state: The state of this PeerData.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def last_state_change(self):
        """Gets the last_state_change of this PeerData.  # noqa: E501

        the time of last state change.  # noqa: E501

        :return: The last_state_change of this PeerData.  # noqa: E501
        :rtype: int
        """
        return self._last_state_change

    @last_state_change.setter
    def last_state_change(self, last_state_change):
        """Sets the last_state_change of this PeerData.

        the time of last state change.  # noqa: E501

        :param last_state_change: The last_state_change of this PeerData.  # noqa: E501
        :type: int
        """

        self._last_state_change = last_state_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeerData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
