# coding: utf-8

"""
    LOCKSS Metadata Service REST API

    REST API of the LOCKSS Metadata Service  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: lockss-support@lockss.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'au': 'Au',
        'id': 'str',
        'description': 'str',
        'creation_date': 'date',
        'start_date': 'date',
        'end_date': 'date',
        'status': 'Status'
    }

    attribute_map = {
        'au': 'au',
        'id': 'id',
        'description': 'description',
        'creation_date': 'creationDate',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'status': 'status'
    }

    def __init__(self, au=None, id=None, description=None, creation_date=None, start_date=None, end_date=None, status=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._au = None
        self._id = None
        self._description = None
        self._creation_date = None
        self._start_date = None
        self._end_date = None
        self._status = None
        self.discriminator = None
        self.au = au
        self.id = id
        if description is not None:
            self.description = description
        self.creation_date = creation_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.status = status

    @property
    def au(self):
        """Gets the au of this Job.  # noqa: E501


        :return: The au of this Job.  # noqa: E501
        :rtype: Au
        """
        return self._au

    @au.setter
    def au(self, au):
        """Sets the au of this Job.


        :param au: The au of this Job.  # noqa: E501
        :type: Au
        """
        if au is None:
            raise ValueError("Invalid value for `au`, must not be `None`")  # noqa: E501

        self._au = au

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        The identifier of this job  # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The identifier of this job  # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Job.  # noqa: E501

        A description of the task being performed by this job  # noqa: E501

        :return: The description of this Job.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        A description of the task being performed by this job  # noqa: E501

        :param description: The description of this Job.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creation_date(self):
        """Gets the creation_date of this Job.  # noqa: E501

        The timestamp when this job was created  # noqa: E501

        :return: The creation_date of this Job.  # noqa: E501
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Job.

        The timestamp when this job was created  # noqa: E501

        :param creation_date: The creation_date of this Job.  # noqa: E501
        :type: date
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def start_date(self):
        """Gets the start_date of this Job.  # noqa: E501

        The timestamp when this job processing started  # noqa: E501

        :return: The start_date of this Job.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Job.

        The timestamp when this job processing started  # noqa: E501

        :param start_date: The start_date of this Job.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Job.  # noqa: E501

        The timestamp when this job processing ended  # noqa: E501

        :return: The end_date of this Job.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Job.

        The timestamp when this job processing ended  # noqa: E501

        :param end_date: The end_date of this Job.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
