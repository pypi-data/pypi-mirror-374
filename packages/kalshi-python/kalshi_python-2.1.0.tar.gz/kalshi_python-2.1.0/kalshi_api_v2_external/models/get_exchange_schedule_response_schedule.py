# coding: utf-8

"""
    Kalshi Trading API

    Complete API for the Kalshi trading platform including all handlers for SDK generation

    The version of the OpenAPI document: 2.0.0
    Contact: support@kalshi.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from kalshi_api_v2_external.models.daily_schedule import DailySchedule
from typing import Optional, Set
from typing_extensions import Self

class GetExchangeScheduleResponseSchedule(BaseModel):
    """
    GetExchangeScheduleResponseSchedule
    """ # noqa: E501
    monday: Optional[DailySchedule] = None
    tuesday: Optional[DailySchedule] = None
    wednesday: Optional[DailySchedule] = None
    thursday: Optional[DailySchedule] = None
    friday: Optional[DailySchedule] = None
    saturday: Optional[DailySchedule] = None
    sunday: Optional[DailySchedule] = None
    __properties: ClassVar[List[str]] = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetExchangeScheduleResponseSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of monday
        if self.monday:
            _dict['monday'] = self.monday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tuesday
        if self.tuesday:
            _dict['tuesday'] = self.tuesday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wednesday
        if self.wednesday:
            _dict['wednesday'] = self.wednesday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thursday
        if self.thursday:
            _dict['thursday'] = self.thursday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of friday
        if self.friday:
            _dict['friday'] = self.friday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saturday
        if self.saturday:
            _dict['saturday'] = self.saturday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sunday
        if self.sunday:
            _dict['sunday'] = self.sunday.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetExchangeScheduleResponseSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "monday": DailySchedule.from_dict(obj["monday"]) if obj.get("monday") is not None else None,
            "tuesday": DailySchedule.from_dict(obj["tuesday"]) if obj.get("tuesday") is not None else None,
            "wednesday": DailySchedule.from_dict(obj["wednesday"]) if obj.get("wednesday") is not None else None,
            "thursday": DailySchedule.from_dict(obj["thursday"]) if obj.get("thursday") is not None else None,
            "friday": DailySchedule.from_dict(obj["friday"]) if obj.get("friday") is not None else None,
            "saturday": DailySchedule.from_dict(obj["saturday"]) if obj.get("saturday") is not None else None,
            "sunday": DailySchedule.from_dict(obj["sunday"]) if obj.get("sunday") is not None else None
        })
        return _obj


