# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PolicyDataLoaderArgs', 'PolicyDataLoader']

@pulumi.input_type
class PolicyDataLoaderArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 key: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 worker_code: pulumi.Input[_builtins.str],
                 worker_runtime: pulumi.Input[_builtins.str],
                 worker_schedule: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a PolicyDataLoader resource.
        :param pulumi.Input[_builtins.str] description: Policy data loader description.
        :param pulumi.Input[_builtins.str] key: The key to access the output data of this policy data loader.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        :param pulumi.Input[_builtins.str] worker_code: The code that will be executed to fetch and output the data.
        :param pulumi.Input[_builtins.str] worker_runtime: The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        :param pulumi.Input[_builtins.str] worker_schedule: Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        :param pulumi.Input[_builtins.str] name: Friendly name for this policy data loader.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this policy data loader cannot be deleted.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "worker_code", worker_code)
        pulumi.set(__self__, "worker_runtime", worker_runtime)
        pulumi.set(__self__, "worker_schedule", worker_schedule)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Policy data loader description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        The key to access the output data of this policy data loader.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="workerCode")
    def worker_code(self) -> pulumi.Input[_builtins.str]:
        """
        The code that will be executed to fetch and output the data.
        """
        return pulumi.get(self, "worker_code")

    @worker_code.setter
    def worker_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_code", value)

    @_builtins.property
    @pulumi.getter(name="workerRuntime")
    def worker_runtime(self) -> pulumi.Input[_builtins.str]:
        """
        The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        """
        return pulumi.get(self, "worker_runtime")

    @worker_runtime.setter
    def worker_runtime(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_runtime", value)

    @_builtins.property
    @pulumi.getter(name="workerSchedule")
    def worker_schedule(self) -> pulumi.Input[_builtins.str]:
        """
        Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        return pulumi.get(self, "worker_schedule")

    @worker_schedule.setter
    def worker_schedule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_schedule", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this policy data loader.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this policy data loader cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _PolicyDataLoaderState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_code: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_schedule: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyDataLoader resources.
        :param pulumi.Input[_builtins.str] created_at: When the policy data loader was created.
        :param pulumi.Input[_builtins.str] description: Policy data loader description.
        :param pulumi.Input[_builtins.str] key: The key to access the output data of this policy data loader.
        :param pulumi.Input[_builtins.str] name: Friendly name for this policy data loader.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this policy data loader cannot be deleted.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        :param pulumi.Input[_builtins.str] worker_code: The code that will be executed to fetch and output the data.
        :param pulumi.Input[_builtins.str] worker_runtime: The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        :param pulumi.Input[_builtins.str] worker_schedule: Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if worker_code is not None:
            pulumi.set(__self__, "worker_code", worker_code)
        if worker_runtime is not None:
            pulumi.set(__self__, "worker_runtime", worker_runtime)
        if worker_schedule is not None:
            pulumi.set(__self__, "worker_schedule", worker_schedule)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the policy data loader was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy data loader description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The key to access the output data of this policy data loader.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this policy data loader.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this policy data loader cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="workerCode")
    def worker_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The code that will be executed to fetch and output the data.
        """
        return pulumi.get(self, "worker_code")

    @worker_code.setter
    def worker_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_code", value)

    @_builtins.property
    @pulumi.getter(name="workerRuntime")
    def worker_runtime(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        """
        return pulumi.get(self, "worker_runtime")

    @worker_runtime.setter
    def worker_runtime(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_runtime", value)

    @_builtins.property
    @pulumi.getter(name="workerSchedule")
    def worker_schedule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        return pulumi.get(self, "worker_schedule")

    @worker_schedule.setter
    def worker_schedule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_schedule", value)


@pulumi.type_token("formal:index/policyDataLoader:PolicyDataLoader")
class PolicyDataLoader(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_code: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a policy data loader with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Policy data loader description.
        :param pulumi.Input[_builtins.str] key: The key to access the output data of this policy data loader.
        :param pulumi.Input[_builtins.str] name: Friendly name for this policy data loader.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this policy data loader cannot be deleted.
        :param pulumi.Input[_builtins.str] worker_code: The code that will be executed to fetch and output the data.
        :param pulumi.Input[_builtins.str] worker_runtime: The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        :param pulumi.Input[_builtins.str] worker_schedule: Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyDataLoaderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a policy data loader with Formal.

        :param str resource_name: The name of the resource.
        :param PolicyDataLoaderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyDataLoaderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_code: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyDataLoaderArgs.__new__(PolicyDataLoaderArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["name"] = name
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["termination_protection"] = termination_protection
            if worker_code is None and not opts.urn:
                raise TypeError("Missing required property 'worker_code'")
            __props__.__dict__["worker_code"] = worker_code
            if worker_runtime is None and not opts.urn:
                raise TypeError("Missing required property 'worker_runtime'")
            __props__.__dict__["worker_runtime"] = worker_runtime
            if worker_schedule is None and not opts.urn:
                raise TypeError("Missing required property 'worker_schedule'")
            __props__.__dict__["worker_schedule"] = worker_schedule
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(PolicyDataLoader, __self__).__init__(
            'formal:index/policyDataLoader:PolicyDataLoader',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            worker_code: Optional[pulumi.Input[_builtins.str]] = None,
            worker_runtime: Optional[pulumi.Input[_builtins.str]] = None,
            worker_schedule: Optional[pulumi.Input[_builtins.str]] = None) -> 'PolicyDataLoader':
        """
        Get an existing PolicyDataLoader resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: When the policy data loader was created.
        :param pulumi.Input[_builtins.str] description: Policy data loader description.
        :param pulumi.Input[_builtins.str] key: The key to access the output data of this policy data loader.
        :param pulumi.Input[_builtins.str] name: Friendly name for this policy data loader.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this policy data loader cannot be deleted.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        :param pulumi.Input[_builtins.str] worker_code: The code that will be executed to fetch and output the data.
        :param pulumi.Input[_builtins.str] worker_runtime: The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        :param pulumi.Input[_builtins.str] worker_schedule: Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyDataLoaderState.__new__(_PolicyDataLoaderState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["worker_code"] = worker_code
        __props__.__dict__["worker_runtime"] = worker_runtime
        __props__.__dict__["worker_schedule"] = worker_schedule
        return PolicyDataLoader(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the policy data loader was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Policy data loader description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        The key to access the output data of this policy data loader.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for this policy data loader.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this policy data loader cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="workerCode")
    def worker_code(self) -> pulumi.Output[_builtins.str]:
        """
        The code that will be executed to fetch and output the data.
        """
        return pulumi.get(self, "worker_code")

    @_builtins.property
    @pulumi.getter(name="workerRuntime")
    def worker_runtime(self) -> pulumi.Output[_builtins.str]:
        """
        The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        """
        return pulumi.get(self, "worker_runtime")

    @_builtins.property
    @pulumi.getter(name="workerSchedule")
    def worker_schedule(self) -> pulumi.Output[_builtins.str]:
        """
        Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        """
        return pulumi.get(self, "worker_schedule")

