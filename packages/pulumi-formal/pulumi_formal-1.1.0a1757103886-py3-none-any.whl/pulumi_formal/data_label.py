# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DataLabelArgs', 'DataLabel']

@pulumi.input_type
class DataLabelArgs:
    def __init__(__self__, *,
                 classifier_data: pulumi.Input[_builtins.str],
                 classifier_type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataLabel resource.
        :param pulumi.Input[_builtins.str] classifier_data: Data for the classifier (pattern for regex or label name for prompt).
        :param pulumi.Input[_builtins.str] classifier_type: Type of classifier for the data label (regex or prompt)
        :param pulumi.Input[_builtins.str] name: Friendly name for this data label.
        """
        pulumi.set(__self__, "classifier_data", classifier_data)
        pulumi.set(__self__, "classifier_type", classifier_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="classifierData")
    def classifier_data(self) -> pulumi.Input[_builtins.str]:
        """
        Data for the classifier (pattern for regex or label name for prompt).
        """
        return pulumi.get(self, "classifier_data")

    @classifier_data.setter
    def classifier_data(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "classifier_data", value)

    @_builtins.property
    @pulumi.getter(name="classifierType")
    def classifier_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of classifier for the data label (regex or prompt)
        """
        return pulumi.get(self, "classifier_type")

    @classifier_type.setter
    def classifier_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "classifier_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this data label.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DataLabelState:
    def __init__(__self__, *,
                 classifier_data: Optional[pulumi.Input[_builtins.str]] = None,
                 classifier_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataLabel resources.
        :param pulumi.Input[_builtins.str] classifier_data: Data for the classifier (pattern for regex or label name for prompt).
        :param pulumi.Input[_builtins.str] classifier_type: Type of classifier for the data label (regex or prompt)
        :param pulumi.Input[_builtins.str] name: Friendly name for this data label.
        """
        if classifier_data is not None:
            pulumi.set(__self__, "classifier_data", classifier_data)
        if classifier_type is not None:
            pulumi.set(__self__, "classifier_type", classifier_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="classifierData")
    def classifier_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data for the classifier (pattern for regex or label name for prompt).
        """
        return pulumi.get(self, "classifier_data")

    @classifier_data.setter
    def classifier_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "classifier_data", value)

    @_builtins.property
    @pulumi.getter(name="classifierType")
    def classifier_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of classifier for the data label (regex or prompt)
        """
        return pulumi.get(self, "classifier_type")

    @classifier_type.setter
    def classifier_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "classifier_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this data label.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.type_token("formal:index/dataLabel:DataLabel")
class DataLabel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 classifier_data: Optional[pulumi.Input[_builtins.str]] = None,
                 classifier_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Data Label with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] classifier_data: Data for the classifier (pattern for regex or label name for prompt).
        :param pulumi.Input[_builtins.str] classifier_type: Type of classifier for the data label (regex or prompt)
        :param pulumi.Input[_builtins.str] name: Friendly name for this data label.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataLabelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Data Label with Formal.

        :param str resource_name: The name of the resource.
        :param DataLabelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataLabelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 classifier_data: Optional[pulumi.Input[_builtins.str]] = None,
                 classifier_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataLabelArgs.__new__(DataLabelArgs)

            if classifier_data is None and not opts.urn:
                raise TypeError("Missing required property 'classifier_data'")
            __props__.__dict__["classifier_data"] = classifier_data
            if classifier_type is None and not opts.urn:
                raise TypeError("Missing required property 'classifier_type'")
            __props__.__dict__["classifier_type"] = classifier_type
            __props__.__dict__["name"] = name
        super(DataLabel, __self__).__init__(
            'formal:index/dataLabel:DataLabel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            classifier_data: Optional[pulumi.Input[_builtins.str]] = None,
            classifier_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataLabel':
        """
        Get an existing DataLabel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] classifier_data: Data for the classifier (pattern for regex or label name for prompt).
        :param pulumi.Input[_builtins.str] classifier_type: Type of classifier for the data label (regex or prompt)
        :param pulumi.Input[_builtins.str] name: Friendly name for this data label.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataLabelState.__new__(_DataLabelState)

        __props__.__dict__["classifier_data"] = classifier_data
        __props__.__dict__["classifier_type"] = classifier_type
        __props__.__dict__["name"] = name
        return DataLabel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="classifierData")
    def classifier_data(self) -> pulumi.Output[_builtins.str]:
        """
        Data for the classifier (pattern for regex or label name for prompt).
        """
        return pulumi.get(self, "classifier_data")

    @_builtins.property
    @pulumi.getter(name="classifierType")
    def classifier_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of classifier for the data label (regex or prompt)
        """
        return pulumi.get(self, "classifier_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for this data label.
        """
        return pulumi.get(self, "name")

