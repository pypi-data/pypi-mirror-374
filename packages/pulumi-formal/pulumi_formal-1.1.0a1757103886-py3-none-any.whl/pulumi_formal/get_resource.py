# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceResult',
    'AwaitableGetResourceResult',
    'get_resource',
    'get_resource_output',
]

@pulumi.output_type
class GetResourceResult:
    """
    A collection of values returned by getResource.
    """
    def __init__(__self__, created_at=None, environment=None, hostname=None, id=None, name=None, port=None, space_id=None, technology=None, termination_protection=None):
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if technology and not isinstance(technology, str):
            raise TypeError("Expected argument 'technology' to be a str")
        pulumi.set(__self__, "technology", technology)
        if termination_protection and not isinstance(termination_protection, bool):
            raise TypeError("Expected argument 'termination_protection' to be a bool")
        pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.int:
        """
        Creation time of the Resource.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> _builtins.str:
        """
        Environment for the Resource.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname of the Resource.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port your Resource is listening on.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> _builtins.str:
        """
        The ID of the Space the Resource is in.
        """
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter
    def technology(self) -> _builtins.str:
        """
        Technology of the Resource.
        """
        return pulumi.get(self, "technology")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> _builtins.bool:
        """
        If set to true, the Resource cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")


class AwaitableGetResourceResult(GetResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceResult(
            created_at=self.created_at,
            environment=self.environment,
            hostname=self.hostname,
            id=self.id,
            name=self.name,
            port=self.port,
            space_id=self.space_id,
            technology=self.technology,
            termination_protection=self.termination_protection)


def get_resource(name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceResult:
    """
    Data source for looking up a Resource by name.


    :param _builtins.str name: The name of the Resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('formal:index/getResource:getResource', __args__, opts=opts, typ=GetResourceResult).value

    return AwaitableGetResourceResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        environment=pulumi.get(__ret__, 'environment'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        space_id=pulumi.get(__ret__, 'space_id'),
        technology=pulumi.get(__ret__, 'technology'),
        termination_protection=pulumi.get(__ret__, 'termination_protection'))
def get_resource_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceResult]:
    """
    Data source for looking up a Resource by name.


    :param _builtins.str name: The name of the Resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('formal:index/getResource:getResource', __args__, opts=opts, typ=GetResourceResult)
    return __ret__.apply(lambda __response__: GetResourceResult(
        created_at=pulumi.get(__response__, 'created_at'),
        environment=pulumi.get(__response__, 'environment'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        space_id=pulumi.get(__response__, 'space_id'),
        technology=pulumi.get(__response__, 'technology'),
        termination_protection=pulumi.get(__response__, 'termination_protection')))
