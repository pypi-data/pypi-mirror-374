# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ResourceTlsConfigurationArgs', 'ResourceTlsConfiguration']

@pulumi.input_type
class ResourceTlsConfigurationArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 tls_config: pulumi.Input[_builtins.str],
                 tls_ca_truststore: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_min_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ResourceTlsConfiguration resource.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID for which the TLS configuration is applied to.
        :param pulumi.Input[_builtins.str] tls_config: Validation mode for the TLS configuration.
        :param pulumi.Input[_builtins.str] tls_ca_truststore: PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        :param pulumi.Input[_builtins.str] tls_min_version: Minimum TLS version to be used for connections.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "tls_config", tls_config)
        if tls_ca_truststore is not None:
            pulumi.set(__self__, "tls_ca_truststore", tls_ca_truststore)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Resource ID for which the TLS configuration is applied to.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> pulumi.Input[_builtins.str]:
        """
        Validation mode for the TLS configuration.
        """
        return pulumi.get(self, "tls_config")

    @tls_config.setter
    def tls_config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tls_config", value)

    @_builtins.property
    @pulumi.getter(name="tlsCaTruststore")
    def tls_ca_truststore(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        """
        return pulumi.get(self, "tls_ca_truststore")

    @tls_ca_truststore.setter
    def tls_ca_truststore(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_ca_truststore", value)

    @_builtins.property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Minimum TLS version to be used for connections.
        """
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_min_version", value)


@pulumi.input_type
class _ResourceTlsConfigurationState:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_ca_truststore: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_config: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_min_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceTlsConfiguration resources.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID for which the TLS configuration is applied to.
        :param pulumi.Input[_builtins.str] tls_ca_truststore: PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        :param pulumi.Input[_builtins.str] tls_config: Validation mode for the TLS configuration.
        :param pulumi.Input[_builtins.str] tls_min_version: Minimum TLS version to be used for connections.
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if tls_ca_truststore is not None:
            pulumi.set(__self__, "tls_ca_truststore", tls_ca_truststore)
        if tls_config is not None:
            pulumi.set(__self__, "tls_config", tls_config)
        if tls_min_version is not None:
            pulumi.set(__self__, "tls_min_version", tls_min_version)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource ID for which the TLS configuration is applied to.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="tlsCaTruststore")
    def tls_ca_truststore(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        """
        return pulumi.get(self, "tls_ca_truststore")

    @tls_ca_truststore.setter
    def tls_ca_truststore(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_ca_truststore", value)

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Validation mode for the TLS configuration.
        """
        return pulumi.get(self, "tls_config")

    @tls_config.setter
    def tls_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_config", value)

    @_builtins.property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Minimum TLS version to be used for connections.
        """
        return pulumi.get(self, "tls_min_version")

    @tls_min_version.setter
    def tls_min_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_min_version", value)


@pulumi.type_token("formal:index/resourceTlsConfiguration:ResourceTlsConfiguration")
class ResourceTlsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_ca_truststore: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_config: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_min_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Creating a TLS Configuration of a Resource in Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID for which the TLS configuration is applied to.
        :param pulumi.Input[_builtins.str] tls_ca_truststore: PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        :param pulumi.Input[_builtins.str] tls_config: Validation mode for the TLS configuration.
        :param pulumi.Input[_builtins.str] tls_min_version: Minimum TLS version to be used for connections.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceTlsConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creating a TLS Configuration of a Resource in Formal.

        :param str resource_name: The name of the resource.
        :param ResourceTlsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceTlsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_ca_truststore: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_config: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_min_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceTlsConfigurationArgs.__new__(ResourceTlsConfigurationArgs)

            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["tls_ca_truststore"] = tls_ca_truststore
            if tls_config is None and not opts.urn:
                raise TypeError("Missing required property 'tls_config'")
            __props__.__dict__["tls_config"] = tls_config
            __props__.__dict__["tls_min_version"] = tls_min_version
        super(ResourceTlsConfiguration, __self__).__init__(
            'formal:index/resourceTlsConfiguration:ResourceTlsConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            tls_ca_truststore: Optional[pulumi.Input[_builtins.str]] = None,
            tls_config: Optional[pulumi.Input[_builtins.str]] = None,
            tls_min_version: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceTlsConfiguration':
        """
        Get an existing ResourceTlsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID for which the TLS configuration is applied to.
        :param pulumi.Input[_builtins.str] tls_ca_truststore: PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        :param pulumi.Input[_builtins.str] tls_config: Validation mode for the TLS configuration.
        :param pulumi.Input[_builtins.str] tls_min_version: Minimum TLS version to be used for connections.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceTlsConfigurationState.__new__(_ResourceTlsConfigurationState)

        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["tls_ca_truststore"] = tls_ca_truststore
        __props__.__dict__["tls_config"] = tls_config
        __props__.__dict__["tls_min_version"] = tls_min_version
        return ResourceTlsConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource ID for which the TLS configuration is applied to.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="tlsCaTruststore")
    def tls_ca_truststore(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
        """
        return pulumi.get(self, "tls_ca_truststore")

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> pulumi.Output[_builtins.str]:
        """
        Validation mode for the TLS configuration.
        """
        return pulumi.get(self, "tls_config")

    @_builtins.property
    @pulumi.getter(name="tlsMinVersion")
    def tls_min_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Minimum TLS version to be used for connections.
        """
        return pulumi.get(self, "tls_min_version")

