# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationCloudArgs', 'IntegrationCloud']

@pulumi.input_type
class IntegrationCloudArgs:
    def __init__(__self__, *,
                 cloud_region: pulumi.Input[_builtins.str],
                 aws: Optional[pulumi.Input['IntegrationCloudAwsArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IntegrationCloud resource.
        :param pulumi.Input[_builtins.str] cloud_region: Region of the cloud provider.
        :param pulumi.Input['IntegrationCloudAwsArgs'] aws: Configuration block for AWS integration.
        :param pulumi.Input[_builtins.str] name: Name of the Integration.
        :param pulumi.Input[_builtins.str] type: Type of the Integration. (Supported: aws)
        """
        pulumi.set(__self__, "cloud_region", cloud_region)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            warnings.warn("""This field is deprecated and will be removed in a future version.""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: This field is deprecated and will be removed in a future version.""")
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cloudRegion")
    def cloud_region(self) -> pulumi.Input[_builtins.str]:
        """
        Region of the cloud provider.
        """
        return pulumi.get(self, "cloud_region")

    @cloud_region.setter
    def cloud_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_region", value)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['IntegrationCloudAwsArgs']]:
        """
        Configuration block for AWS integration.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['IntegrationCloudAwsArgs']]):
        pulumi.set(self, "aws", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Integration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated and will be removed in a future version.""")
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the Integration. (Supported: aws)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _IntegrationCloudState:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['IntegrationCloudAwsArgs']] = None,
                 aws_allow_s3_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_enable_ec2_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_enable_ecs_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_enable_eks_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_enable_rds_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_enable_redshift_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_formal_iam_role: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_formal_pingback_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_formal_stack_name: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_s3_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 aws_template_body: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_region: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IntegrationCloud resources.
        :param pulumi.Input['IntegrationCloudAwsArgs'] aws: Configuration block for AWS integration.
        :param pulumi.Input[_builtins.bool] aws_allow_s3_access: Whether AWS S3 access is allowed or not.
        :param pulumi.Input[_builtins.bool] aws_enable_ec2_autodiscovery: Whether AWS EC2 autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_ecs_autodiscovery: Whether AWS ECS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_eks_autodiscovery: Whether AWS EKS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_rds_autodiscovery: Whether AWS RDS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_redshift_autodiscovery: Whether AWS Redshift autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.str] aws_formal_iam_role: The IAM role ID Formal will use to access your resources.
        :param pulumi.Input[_builtins.str] aws_formal_pingback_arn: The SNS topic ARN CloudFormation can use to send events to Formal.
        :param pulumi.Input[_builtins.str] aws_formal_stack_name: A generated name for your CloudFormation stack.
        :param pulumi.Input[_builtins.str] aws_s3_bucket_arn: The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        :param pulumi.Input[_builtins.str] aws_template_body: The template body of the CloudFormation stack.
        :param pulumi.Input[_builtins.str] cloud_region: Region of the cloud provider.
        :param pulumi.Input[_builtins.str] name: Name of the Integration.
        :param pulumi.Input[_builtins.str] type: Type of the Integration. (Supported: aws)
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if aws_allow_s3_access is not None:
            pulumi.set(__self__, "aws_allow_s3_access", aws_allow_s3_access)
        if aws_enable_ec2_autodiscovery is not None:
            pulumi.set(__self__, "aws_enable_ec2_autodiscovery", aws_enable_ec2_autodiscovery)
        if aws_enable_ecs_autodiscovery is not None:
            pulumi.set(__self__, "aws_enable_ecs_autodiscovery", aws_enable_ecs_autodiscovery)
        if aws_enable_eks_autodiscovery is not None:
            pulumi.set(__self__, "aws_enable_eks_autodiscovery", aws_enable_eks_autodiscovery)
        if aws_enable_rds_autodiscovery is not None:
            pulumi.set(__self__, "aws_enable_rds_autodiscovery", aws_enable_rds_autodiscovery)
        if aws_enable_redshift_autodiscovery is not None:
            pulumi.set(__self__, "aws_enable_redshift_autodiscovery", aws_enable_redshift_autodiscovery)
        if aws_formal_iam_role is not None:
            pulumi.set(__self__, "aws_formal_iam_role", aws_formal_iam_role)
        if aws_formal_pingback_arn is not None:
            pulumi.set(__self__, "aws_formal_pingback_arn", aws_formal_pingback_arn)
        if aws_formal_stack_name is not None:
            pulumi.set(__self__, "aws_formal_stack_name", aws_formal_stack_name)
        if aws_s3_bucket_arn is not None:
            pulumi.set(__self__, "aws_s3_bucket_arn", aws_s3_bucket_arn)
        if aws_template_body is not None:
            pulumi.set(__self__, "aws_template_body", aws_template_body)
        if cloud_region is not None:
            pulumi.set(__self__, "cloud_region", cloud_region)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            warnings.warn("""This field is deprecated and will be removed in a future version.""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: This field is deprecated and will be removed in a future version.""")
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['IntegrationCloudAwsArgs']]:
        """
        Configuration block for AWS integration.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['IntegrationCloudAwsArgs']]):
        pulumi.set(self, "aws", value)

    @_builtins.property
    @pulumi.getter(name="awsAllowS3Access")
    def aws_allow_s3_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS S3 access is allowed or not.
        """
        return pulumi.get(self, "aws_allow_s3_access")

    @aws_allow_s3_access.setter
    def aws_allow_s3_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_allow_s3_access", value)

    @_builtins.property
    @pulumi.getter(name="awsEnableEc2Autodiscovery")
    def aws_enable_ec2_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS EC2 autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_ec2_autodiscovery")

    @aws_enable_ec2_autodiscovery.setter
    def aws_enable_ec2_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_enable_ec2_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="awsEnableEcsAutodiscovery")
    def aws_enable_ecs_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS ECS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_ecs_autodiscovery")

    @aws_enable_ecs_autodiscovery.setter
    def aws_enable_ecs_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_enable_ecs_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="awsEnableEksAutodiscovery")
    def aws_enable_eks_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS EKS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_eks_autodiscovery")

    @aws_enable_eks_autodiscovery.setter
    def aws_enable_eks_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_enable_eks_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="awsEnableRdsAutodiscovery")
    def aws_enable_rds_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS RDS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_rds_autodiscovery")

    @aws_enable_rds_autodiscovery.setter
    def aws_enable_rds_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_enable_rds_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="awsEnableRedshiftAutodiscovery")
    def aws_enable_redshift_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether AWS Redshift autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_redshift_autodiscovery")

    @aws_enable_redshift_autodiscovery.setter
    def aws_enable_redshift_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aws_enable_redshift_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="awsFormalIamRole")
    def aws_formal_iam_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IAM role ID Formal will use to access your resources.
        """
        return pulumi.get(self, "aws_formal_iam_role")

    @aws_formal_iam_role.setter
    def aws_formal_iam_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_formal_iam_role", value)

    @_builtins.property
    @pulumi.getter(name="awsFormalPingbackArn")
    def aws_formal_pingback_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The SNS topic ARN CloudFormation can use to send events to Formal.
        """
        return pulumi.get(self, "aws_formal_pingback_arn")

    @aws_formal_pingback_arn.setter
    def aws_formal_pingback_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_formal_pingback_arn", value)

    @_builtins.property
    @pulumi.getter(name="awsFormalStackName")
    def aws_formal_stack_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A generated name for your CloudFormation stack.
        """
        return pulumi.get(self, "aws_formal_stack_name")

    @aws_formal_stack_name.setter
    def aws_formal_stack_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_formal_stack_name", value)

    @_builtins.property
    @pulumi.getter(name="awsS3BucketArn")
    def aws_s3_bucket_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        """
        return pulumi.get(self, "aws_s3_bucket_arn")

    @aws_s3_bucket_arn.setter
    def aws_s3_bucket_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_s3_bucket_arn", value)

    @_builtins.property
    @pulumi.getter(name="awsTemplateBody")
    def aws_template_body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The template body of the CloudFormation stack.
        """
        return pulumi.get(self, "aws_template_body")

    @aws_template_body.setter
    def aws_template_body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_template_body", value)

    @_builtins.property
    @pulumi.getter(name="cloudRegion")
    def cloud_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the cloud provider.
        """
        return pulumi.get(self, "cloud_region")

    @cloud_region.setter
    def cloud_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_region", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Integration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated and will be removed in a future version.""")
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the Integration. (Supported: aws)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("formal:index/integrationCloud:IntegrationCloud")
class IntegrationCloud(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[Union['IntegrationCloudAwsArgs', 'IntegrationCloudAwsArgsDict']]] = None,
                 cloud_region: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Cloud integration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationCloudAwsArgs', 'IntegrationCloudAwsArgsDict']] aws: Configuration block for AWS integration.
        :param pulumi.Input[_builtins.str] cloud_region: Region of the cloud provider.
        :param pulumi.Input[_builtins.str] name: Name of the Integration.
        :param pulumi.Input[_builtins.str] type: Type of the Integration. (Supported: aws)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationCloudArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Cloud integration.

        :param str resource_name: The name of the resource.
        :param IntegrationCloudArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationCloudArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[Union['IntegrationCloudAwsArgs', 'IntegrationCloudAwsArgsDict']]] = None,
                 cloud_region: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationCloudArgs.__new__(IntegrationCloudArgs)

            __props__.__dict__["aws"] = aws
            if cloud_region is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_region'")
            __props__.__dict__["cloud_region"] = cloud_region
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["aws_allow_s3_access"] = None
            __props__.__dict__["aws_enable_ec2_autodiscovery"] = None
            __props__.__dict__["aws_enable_ecs_autodiscovery"] = None
            __props__.__dict__["aws_enable_eks_autodiscovery"] = None
            __props__.__dict__["aws_enable_rds_autodiscovery"] = None
            __props__.__dict__["aws_enable_redshift_autodiscovery"] = None
            __props__.__dict__["aws_formal_iam_role"] = None
            __props__.__dict__["aws_formal_pingback_arn"] = None
            __props__.__dict__["aws_formal_stack_name"] = None
            __props__.__dict__["aws_s3_bucket_arn"] = None
            __props__.__dict__["aws_template_body"] = None
        super(IntegrationCloud, __self__).__init__(
            'formal:index/integrationCloud:IntegrationCloud',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws: Optional[pulumi.Input[Union['IntegrationCloudAwsArgs', 'IntegrationCloudAwsArgsDict']]] = None,
            aws_allow_s3_access: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_enable_ec2_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_enable_ecs_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_enable_eks_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_enable_rds_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_enable_redshift_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
            aws_formal_iam_role: Optional[pulumi.Input[_builtins.str]] = None,
            aws_formal_pingback_arn: Optional[pulumi.Input[_builtins.str]] = None,
            aws_formal_stack_name: Optional[pulumi.Input[_builtins.str]] = None,
            aws_s3_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None,
            aws_template_body: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_region: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IntegrationCloud':
        """
        Get an existing IntegrationCloud resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationCloudAwsArgs', 'IntegrationCloudAwsArgsDict']] aws: Configuration block for AWS integration.
        :param pulumi.Input[_builtins.bool] aws_allow_s3_access: Whether AWS S3 access is allowed or not.
        :param pulumi.Input[_builtins.bool] aws_enable_ec2_autodiscovery: Whether AWS EC2 autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_ecs_autodiscovery: Whether AWS ECS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_eks_autodiscovery: Whether AWS EKS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_rds_autodiscovery: Whether AWS RDS autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.bool] aws_enable_redshift_autodiscovery: Whether AWS Redshift autodiscovery is enabled or not.
        :param pulumi.Input[_builtins.str] aws_formal_iam_role: The IAM role ID Formal will use to access your resources.
        :param pulumi.Input[_builtins.str] aws_formal_pingback_arn: The SNS topic ARN CloudFormation can use to send events to Formal.
        :param pulumi.Input[_builtins.str] aws_formal_stack_name: A generated name for your CloudFormation stack.
        :param pulumi.Input[_builtins.str] aws_s3_bucket_arn: The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        :param pulumi.Input[_builtins.str] aws_template_body: The template body of the CloudFormation stack.
        :param pulumi.Input[_builtins.str] cloud_region: Region of the cloud provider.
        :param pulumi.Input[_builtins.str] name: Name of the Integration.
        :param pulumi.Input[_builtins.str] type: Type of the Integration. (Supported: aws)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationCloudState.__new__(_IntegrationCloudState)

        __props__.__dict__["aws"] = aws
        __props__.__dict__["aws_allow_s3_access"] = aws_allow_s3_access
        __props__.__dict__["aws_enable_ec2_autodiscovery"] = aws_enable_ec2_autodiscovery
        __props__.__dict__["aws_enable_ecs_autodiscovery"] = aws_enable_ecs_autodiscovery
        __props__.__dict__["aws_enable_eks_autodiscovery"] = aws_enable_eks_autodiscovery
        __props__.__dict__["aws_enable_rds_autodiscovery"] = aws_enable_rds_autodiscovery
        __props__.__dict__["aws_enable_redshift_autodiscovery"] = aws_enable_redshift_autodiscovery
        __props__.__dict__["aws_formal_iam_role"] = aws_formal_iam_role
        __props__.__dict__["aws_formal_pingback_arn"] = aws_formal_pingback_arn
        __props__.__dict__["aws_formal_stack_name"] = aws_formal_stack_name
        __props__.__dict__["aws_s3_bucket_arn"] = aws_s3_bucket_arn
        __props__.__dict__["aws_template_body"] = aws_template_body
        __props__.__dict__["cloud_region"] = cloud_region
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        return IntegrationCloud(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> pulumi.Output[Optional['outputs.IntegrationCloudAws']]:
        """
        Configuration block for AWS integration.
        """
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter(name="awsAllowS3Access")
    def aws_allow_s3_access(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS S3 access is allowed or not.
        """
        return pulumi.get(self, "aws_allow_s3_access")

    @_builtins.property
    @pulumi.getter(name="awsEnableEc2Autodiscovery")
    def aws_enable_ec2_autodiscovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS EC2 autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_ec2_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="awsEnableEcsAutodiscovery")
    def aws_enable_ecs_autodiscovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS ECS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_ecs_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="awsEnableEksAutodiscovery")
    def aws_enable_eks_autodiscovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS EKS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_eks_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="awsEnableRdsAutodiscovery")
    def aws_enable_rds_autodiscovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS RDS autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_rds_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="awsEnableRedshiftAutodiscovery")
    def aws_enable_redshift_autodiscovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether AWS Redshift autodiscovery is enabled or not.
        """
        return pulumi.get(self, "aws_enable_redshift_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="awsFormalIamRole")
    def aws_formal_iam_role(self) -> pulumi.Output[_builtins.str]:
        """
        The IAM role ID Formal will use to access your resources.
        """
        return pulumi.get(self, "aws_formal_iam_role")

    @_builtins.property
    @pulumi.getter(name="awsFormalPingbackArn")
    def aws_formal_pingback_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The SNS topic ARN CloudFormation can use to send events to Formal.
        """
        return pulumi.get(self, "aws_formal_pingback_arn")

    @_builtins.property
    @pulumi.getter(name="awsFormalStackName")
    def aws_formal_stack_name(self) -> pulumi.Output[_builtins.str]:
        """
        A generated name for your CloudFormation stack.
        """
        return pulumi.get(self, "aws_formal_stack_name")

    @_builtins.property
    @pulumi.getter(name="awsS3BucketArn")
    def aws_s3_bucket_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        """
        return pulumi.get(self, "aws_s3_bucket_arn")

    @_builtins.property
    @pulumi.getter(name="awsTemplateBody")
    def aws_template_body(self) -> pulumi.Output[_builtins.str]:
        """
        The template body of the CloudFormation stack.
        """
        return pulumi.get(self, "aws_template_body")

    @_builtins.property
    @pulumi.getter(name="cloudRegion")
    def cloud_region(self) -> pulumi.Output[_builtins.str]:
        """
        Region of the cloud provider.
        """
        return pulumi.get(self, "cloud_region")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Integration.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""This field is deprecated and will be removed in a future version.""")
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Type of the Integration. (Supported: aws)
        """
        return pulumi.get(self, "type")

