# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DataDomainOwnerArgs',
    'DataDomainOwnerArgsDict',
    'IntegrationBiMetabaseArgs',
    'IntegrationBiMetabaseArgsDict',
    'IntegrationCloudAwsArgs',
    'IntegrationCloudAwsArgsDict',
    'IntegrationDataCatalogDatahubArgs',
    'IntegrationDataCatalogDatahubArgsDict',
    'IntegrationLogAwsS3Args',
    'IntegrationLogAwsS3ArgsDict',
    'IntegrationLogDatadogArgs',
    'IntegrationLogDatadogArgsDict',
    'IntegrationLogSplunkArgs',
    'IntegrationLogSplunkArgsDict',
    'IntegrationMdmKandjiArgs',
    'IntegrationMdmKandjiArgsDict',
    'IntegrationMfaDuoArgs',
    'IntegrationMfaDuoArgsDict',
    'LogConfigurationRequestArgs',
    'LogConfigurationRequestArgsDict',
    'LogConfigurationRequestSqlArgs',
    'LogConfigurationRequestSqlArgsDict',
    'LogConfigurationResponseArgs',
    'LogConfigurationResponseArgsDict',
    'LogConfigurationScopeArgs',
    'LogConfigurationScopeArgsDict',
    'LogConfigurationStreamArgs',
    'LogConfigurationStreamArgsDict',
]

MYPY = False

if not MYPY:
    class DataDomainOwnerArgsDict(TypedDict):
        object_id: pulumi.Input[_builtins.str]
        object_type: pulumi.Input[_builtins.str]
elif False:
    DataDomainOwnerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataDomainOwnerArgs:
    def __init__(__self__, *,
                 object_id: pulumi.Input[_builtins.str],
                 object_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "object_id", value)

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class IntegrationBiMetabaseArgsDict(TypedDict):
        hostname: pulumi.Input[_builtins.str]
        """
        Hostname of the Metabase instance.
        """
        password: pulumi.Input[_builtins.str]
        """
        Password for the Metabase instance.
        """
        username: pulumi.Input[_builtins.str]
        """
        Username for the Metabase instance.
        """
elif False:
    IntegrationBiMetabaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationBiMetabaseArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] hostname: Hostname of the Metabase instance.
        :param pulumi.Input[_builtins.str] password: Password for the Metabase instance.
        :param pulumi.Input[_builtins.str] username: Username for the Metabase instance.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[_builtins.str]:
        """
        Hostname of the Metabase instance.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Password for the Metabase instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        Username for the Metabase instance.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class IntegrationCloudAwsArgsDict(TypedDict):
        template_version: pulumi.Input[_builtins.str]
        """
        The template version of the CloudFormation stack. Use `latest` to stay in sync.
        """
        allow_s3_access: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Allows the Cloud Integration to access S3 buckets for Log Integrations.
        """
        aws_customer_role_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
        """
        enable_ec2_autodiscovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables resource autodiscovery for EC2 instances.
        """
        enable_ecs_autodiscovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables resource autodiscovery for ECS clusters.
        """
        enable_eks_autodiscovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables resource autodiscovery for EKS clusters.
        """
        enable_rds_autodiscovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
        """
        enable_redshift_autodiscovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables resource autodiscovery for Redshift clusters.
        """
        s3_bucket_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
        """
elif False:
    IntegrationCloudAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationCloudAwsArgs:
    def __init__(__self__, *,
                 template_version: pulumi.Input[_builtins.str],
                 allow_s3_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 aws_customer_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_ec2_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_ecs_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_eks_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_rds_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_redshift_autodiscovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 s3_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] template_version: The template version of the CloudFormation stack. Use `latest` to stay in sync.
        :param pulumi.Input[_builtins.bool] allow_s3_access: Allows the Cloud Integration to access S3 buckets for Log Integrations.
        :param pulumi.Input[_builtins.str] aws_customer_role_arn: The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
        :param pulumi.Input[_builtins.bool] enable_ec2_autodiscovery: Enables resource autodiscovery for EC2 instances.
        :param pulumi.Input[_builtins.bool] enable_ecs_autodiscovery: Enables resource autodiscovery for ECS clusters.
        :param pulumi.Input[_builtins.bool] enable_eks_autodiscovery: Enables resource autodiscovery for EKS clusters.
        :param pulumi.Input[_builtins.bool] enable_rds_autodiscovery: Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
        :param pulumi.Input[_builtins.bool] enable_redshift_autodiscovery: Enables resource autodiscovery for Redshift clusters.
        :param pulumi.Input[_builtins.str] s3_bucket_arn: The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
        """
        pulumi.set(__self__, "template_version", template_version)
        if allow_s3_access is not None:
            pulumi.set(__self__, "allow_s3_access", allow_s3_access)
        if aws_customer_role_arn is not None:
            pulumi.set(__self__, "aws_customer_role_arn", aws_customer_role_arn)
        if enable_ec2_autodiscovery is not None:
            pulumi.set(__self__, "enable_ec2_autodiscovery", enable_ec2_autodiscovery)
        if enable_ecs_autodiscovery is not None:
            pulumi.set(__self__, "enable_ecs_autodiscovery", enable_ecs_autodiscovery)
        if enable_eks_autodiscovery is not None:
            pulumi.set(__self__, "enable_eks_autodiscovery", enable_eks_autodiscovery)
        if enable_rds_autodiscovery is not None:
            pulumi.set(__self__, "enable_rds_autodiscovery", enable_rds_autodiscovery)
        if enable_redshift_autodiscovery is not None:
            pulumi.set(__self__, "enable_redshift_autodiscovery", enable_redshift_autodiscovery)
        if s3_bucket_arn is not None:
            pulumi.set(__self__, "s3_bucket_arn", s3_bucket_arn)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> pulumi.Input[_builtins.str]:
        """
        The template version of the CloudFormation stack. Use `latest` to stay in sync.
        """
        return pulumi.get(self, "template_version")

    @template_version.setter
    def template_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_version", value)

    @_builtins.property
    @pulumi.getter(name="allowS3Access")
    def allow_s3_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allows the Cloud Integration to access S3 buckets for Log Integrations.
        """
        return pulumi.get(self, "allow_s3_access")

    @allow_s3_access.setter
    def allow_s3_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_s3_access", value)

    @_builtins.property
    @pulumi.getter(name="awsCustomerRoleArn")
    def aws_customer_role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
        """
        return pulumi.get(self, "aws_customer_role_arn")

    @aws_customer_role_arn.setter
    def aws_customer_role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aws_customer_role_arn", value)

    @_builtins.property
    @pulumi.getter(name="enableEc2Autodiscovery")
    def enable_ec2_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables resource autodiscovery for EC2 instances.
        """
        return pulumi.get(self, "enable_ec2_autodiscovery")

    @enable_ec2_autodiscovery.setter
    def enable_ec2_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_ec2_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="enableEcsAutodiscovery")
    def enable_ecs_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables resource autodiscovery for ECS clusters.
        """
        return pulumi.get(self, "enable_ecs_autodiscovery")

    @enable_ecs_autodiscovery.setter
    def enable_ecs_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_ecs_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="enableEksAutodiscovery")
    def enable_eks_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables resource autodiscovery for EKS clusters.
        """
        return pulumi.get(self, "enable_eks_autodiscovery")

    @enable_eks_autodiscovery.setter
    def enable_eks_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_eks_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="enableRdsAutodiscovery")
    def enable_rds_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
        """
        return pulumi.get(self, "enable_rds_autodiscovery")

    @enable_rds_autodiscovery.setter
    def enable_rds_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_rds_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="enableRedshiftAutodiscovery")
    def enable_redshift_autodiscovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables resource autodiscovery for Redshift clusters.
        """
        return pulumi.get(self, "enable_redshift_autodiscovery")

    @enable_redshift_autodiscovery.setter
    def enable_redshift_autodiscovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_redshift_autodiscovery", value)

    @_builtins.property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
        """
        return pulumi.get(self, "s3_bucket_arn")

    @s3_bucket_arn.setter
    def s3_bucket_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_bucket_arn", value)


if not MYPY:
    class IntegrationDataCatalogDatahubArgsDict(TypedDict):
        api_key: pulumi.Input[_builtins.str]
        """
        Api Key for the Datahub instance.
        """
        generalized_metadata_service_url: pulumi.Input[_builtins.str]
        """
        Generalized metadata service url for the Datahub instance.
        """
        webhook_secret: pulumi.Input[_builtins.str]
        """
        Webhook secret of the Datahub instance.
        """
elif False:
    IntegrationDataCatalogDatahubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationDataCatalogDatahubArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[_builtins.str],
                 generalized_metadata_service_url: pulumi.Input[_builtins.str],
                 webhook_secret: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] api_key: Api Key for the Datahub instance.
        :param pulumi.Input[_builtins.str] generalized_metadata_service_url: Generalized metadata service url for the Datahub instance.
        :param pulumi.Input[_builtins.str] webhook_secret: Webhook secret of the Datahub instance.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "generalized_metadata_service_url", generalized_metadata_service_url)
        pulumi.set(__self__, "webhook_secret", webhook_secret)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[_builtins.str]:
        """
        Api Key for the Datahub instance.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="generalizedMetadataServiceUrl")
    def generalized_metadata_service_url(self) -> pulumi.Input[_builtins.str]:
        """
        Generalized metadata service url for the Datahub instance.
        """
        return pulumi.get(self, "generalized_metadata_service_url")

    @generalized_metadata_service_url.setter
    def generalized_metadata_service_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "generalized_metadata_service_url", value)

    @_builtins.property
    @pulumi.getter(name="webhookSecret")
    def webhook_secret(self) -> pulumi.Input[_builtins.str]:
        """
        Webhook secret of the Datahub instance.
        """
        return pulumi.get(self, "webhook_secret")

    @webhook_secret.setter
    def webhook_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "webhook_secret", value)


if not MYPY:
    class IntegrationLogAwsS3ArgsDict(TypedDict):
        cloud_integration_id: pulumi.Input[_builtins.str]
        """
        Cloud Integration ID.
        """
        s3_bucket_name: pulumi.Input[_builtins.str]
        """
        AWS S3 Bucket Name.
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        AWS Region.
        """
elif False:
    IntegrationLogAwsS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationLogAwsS3Args:
    def __init__(__self__, *,
                 cloud_integration_id: pulumi.Input[_builtins.str],
                 s3_bucket_name: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cloud_integration_id: Cloud Integration ID.
        :param pulumi.Input[_builtins.str] s3_bucket_name: AWS S3 Bucket Name.
        :param pulumi.Input[_builtins.str] region: AWS Region.
        """
        pulumi.set(__self__, "cloud_integration_id", cloud_integration_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cloudIntegrationId")
    def cloud_integration_id(self) -> pulumi.Input[_builtins.str]:
        """
        Cloud Integration ID.
        """
        return pulumi.get(self, "cloud_integration_id")

    @cloud_integration_id.setter
    def cloud_integration_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_integration_id", value)

    @_builtins.property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        AWS S3 Bucket Name.
        """
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "s3_bucket_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class IntegrationLogDatadogArgsDict(TypedDict):
        account_id: pulumi.Input[_builtins.str]
        """
        Account ID of Datadog.
        """
        api_key: pulumi.Input[_builtins.str]
        """
        API Key of Datadog.
        """
        site: pulumi.Input[_builtins.str]
        """
        URL of your Datadog app.
        """
elif False:
    IntegrationLogDatadogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationLogDatadogArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 api_key: pulumi.Input[_builtins.str],
                 site: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] account_id: Account ID of Datadog.
        :param pulumi.Input[_builtins.str] api_key: API Key of Datadog.
        :param pulumi.Input[_builtins.str] site: URL of your Datadog app.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "site", site)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Account ID of Datadog.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[_builtins.str]:
        """
        API Key of Datadog.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter
    def site(self) -> pulumi.Input[_builtins.str]:
        """
        URL of your Datadog app.
        """
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "site", value)


if not MYPY:
    class IntegrationLogSplunkArgsDict(TypedDict):
        access_token: pulumi.Input[_builtins.str]
        """
        Access Token of Splunk.
        """
        host: pulumi.Input[_builtins.str]
        """
        URL of your Splunk app.
        """
        port: pulumi.Input[_builtins.int]
        """
        Port of your Splunk app.
        """
elif False:
    IntegrationLogSplunkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationLogSplunkArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[_builtins.str],
                 host: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] access_token: Access Token of Splunk.
        :param pulumi.Input[_builtins.str] host: URL of your Splunk app.
        :param pulumi.Input[_builtins.int] port: Port of your Splunk app.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[_builtins.str]:
        """
        Access Token of Splunk.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        URL of your Splunk app.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        Port of your Splunk app.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)


if not MYPY:
    class IntegrationMdmKandjiArgsDict(TypedDict):
        api_key: pulumi.Input[_builtins.str]
        """
        API Key of your Kandji organization.
        """
        api_url: pulumi.Input[_builtins.str]
        """
        API URL of your Kandji organization.
        """
elif False:
    IntegrationMdmKandjiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationMdmKandjiArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[_builtins.str],
                 api_url: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] api_key: API Key of your Kandji organization.
        :param pulumi.Input[_builtins.str] api_url: API URL of your Kandji organization.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_url", api_url)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[_builtins.str]:
        """
        API Key of your Kandji organization.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Input[_builtins.str]:
        """
        API URL of your Kandji organization.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_url", value)


if not MYPY:
    class IntegrationMfaDuoArgsDict(TypedDict):
        api_hostname: pulumi.Input[_builtins.str]
        """
        Duo API Hostname.
        """
        integration_key: pulumi.Input[_builtins.str]
        """
        Duo Integration Key.
        """
        secret_key: pulumi.Input[_builtins.str]
        """
        Duo Secret Key.
        """
elif False:
    IntegrationMfaDuoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationMfaDuoArgs:
    def __init__(__self__, *,
                 api_hostname: pulumi.Input[_builtins.str],
                 integration_key: pulumi.Input[_builtins.str],
                 secret_key: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] api_hostname: Duo API Hostname.
        :param pulumi.Input[_builtins.str] integration_key: Duo Integration Key.
        :param pulumi.Input[_builtins.str] secret_key: Duo Secret Key.
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> pulumi.Input[_builtins.str]:
        """
        Duo API Hostname.
        """
        return pulumi.get(self, "api_hostname")

    @api_hostname.setter
    def api_hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_hostname", value)

    @_builtins.property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Input[_builtins.str]:
        """
        Duo Integration Key.
        """
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "integration_key", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[_builtins.str]:
        """
        Duo Secret Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_key", value)


if not MYPY:
    class LogConfigurationRequestArgsDict(TypedDict):
        encrypt: pulumi.Input[_builtins.bool]
        """
        Whether to encrypt request payloads.
        """
        max_payload_size: pulumi.Input[_builtins.int]
        """
        Maximum size of request payloads to log.
        """
        sql: NotRequired[pulumi.Input['LogConfigurationRequestSqlArgsDict']]
        """
        SQL logging configuration for requests.
        """
elif False:
    LogConfigurationRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigurationRequestArgs:
    def __init__(__self__, *,
                 encrypt: pulumi.Input[_builtins.bool],
                 max_payload_size: pulumi.Input[_builtins.int],
                 sql: Optional[pulumi.Input['LogConfigurationRequestSqlArgs']] = None):
        """
        :param pulumi.Input[_builtins.bool] encrypt: Whether to encrypt request payloads.
        :param pulumi.Input[_builtins.int] max_payload_size: Maximum size of request payloads to log.
        :param pulumi.Input['LogConfigurationRequestSqlArgs'] sql: SQL logging configuration for requests.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_payload_size", max_payload_size)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to encrypt request payloads.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "encrypt", value)

    @_builtins.property
    @pulumi.getter(name="maxPayloadSize")
    def max_payload_size(self) -> pulumi.Input[_builtins.int]:
        """
        Maximum size of request payloads to log.
        """
        return pulumi.get(self, "max_payload_size")

    @max_payload_size.setter
    def max_payload_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_payload_size", value)

    @_builtins.property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input['LogConfigurationRequestSqlArgs']]:
        """
        SQL logging configuration for requests.
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input['LogConfigurationRequestSqlArgs']]):
        pulumi.set(self, "sql", value)


if not MYPY:
    class LogConfigurationRequestSqlArgsDict(TypedDict):
        encrypt: pulumi.Input[_builtins.bool]
        """
        Whether to encrypt SQL queries in logs.
        """
        strip_values: pulumi.Input[_builtins.bool]
        """
        Whether to obfuscate SQL queries in logs.
        """
elif False:
    LogConfigurationRequestSqlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigurationRequestSqlArgs:
    def __init__(__self__, *,
                 encrypt: pulumi.Input[_builtins.bool],
                 strip_values: pulumi.Input[_builtins.bool]):
        """
        :param pulumi.Input[_builtins.bool] encrypt: Whether to encrypt SQL queries in logs.
        :param pulumi.Input[_builtins.bool] strip_values: Whether to obfuscate SQL queries in logs.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "strip_values", strip_values)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to encrypt SQL queries in logs.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "encrypt", value)

    @_builtins.property
    @pulumi.getter(name="stripValues")
    def strip_values(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to obfuscate SQL queries in logs.
        """
        return pulumi.get(self, "strip_values")

    @strip_values.setter
    def strip_values(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "strip_values", value)


if not MYPY:
    class LogConfigurationResponseArgsDict(TypedDict):
        encrypt: pulumi.Input[_builtins.bool]
        """
        Whether to encrypt response payloads.
        """
        max_payload_size: pulumi.Input[_builtins.int]
        """
        Maximum size of response payloads to log.
        """
elif False:
    LogConfigurationResponseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigurationResponseArgs:
    def __init__(__self__, *,
                 encrypt: pulumi.Input[_builtins.bool],
                 max_payload_size: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.bool] encrypt: Whether to encrypt response payloads.
        :param pulumi.Input[_builtins.int] max_payload_size: Maximum size of response payloads to log.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_payload_size", max_payload_size)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to encrypt response payloads.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "encrypt", value)

    @_builtins.property
    @pulumi.getter(name="maxPayloadSize")
    def max_payload_size(self) -> pulumi.Input[_builtins.int]:
        """
        Maximum size of response payloads to log.
        """
        return pulumi.get(self, "max_payload_size")

    @max_payload_size.setter
    def max_payload_size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_payload_size", value)


if not MYPY:
    class LogConfigurationScopeArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The type of scope (resource, connector, space, org).
        """
        connector_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the connector (required when type is connector).
        """
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the resource (required when type is resource).
        """
        space_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the space (required when type is space).
        """
elif False:
    LogConfigurationScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigurationScopeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: The type of scope (resource, connector, space, org).
        :param pulumi.Input[_builtins.str] connector_id: The ID of the connector (required when type is connector).
        :param pulumi.Input[_builtins.str] resource_id: The ID of the resource (required when type is resource).
        :param pulumi.Input[_builtins.str] space_id: The ID of the space (required when type is space).
        """
        pulumi.set(__self__, "type", type)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of scope (resource, connector, space, org).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the connector (required when type is connector).
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource (required when type is resource).
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the space (required when type is space).
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)


if not MYPY:
    class LogConfigurationStreamArgsDict(TypedDict):
        encrypt: pulumi.Input[_builtins.bool]
        """
        Whether to encrypt stream data.
        """
elif False:
    LogConfigurationStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigurationStreamArgs:
    def __init__(__self__, *,
                 encrypt: pulumi.Input[_builtins.bool]):
        """
        :param pulumi.Input[_builtins.bool] encrypt: Whether to encrypt stream data.
        """
        pulumi.set(__self__, "encrypt", encrypt)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> pulumi.Input[_builtins.bool]:
        """
        Whether to encrypt stream data.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "encrypt", value)


