# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationBiArgs', 'IntegrationBi']

@pulumi.input_type
class IntegrationBiArgs:
    def __init__(__self__, *,
                 sync: pulumi.Input[_builtins.bool],
                 metabase: Optional[pulumi.Input['IntegrationBiMetabaseArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IntegrationBi resource.
        :param pulumi.Input[_builtins.bool] sync: Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        :param pulumi.Input['IntegrationBiMetabaseArgs'] metabase: Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the App.
        """
        pulumi.set(__self__, "sync", sync)
        if metabase is not None:
            pulumi.set(__self__, "metabase", metabase)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def sync(self) -> pulumi.Input[_builtins.bool]:
        """
        Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        return pulumi.get(self, "sync")

    @sync.setter
    def sync(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "sync", value)

    @_builtins.property
    @pulumi.getter
    def metabase(self) -> Optional[pulumi.Input['IntegrationBiMetabaseArgs']]:
        """
        Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        """
        return pulumi.get(self, "metabase")

    @metabase.setter
    def metabase(self, value: Optional[pulumi.Input['IntegrationBiMetabaseArgs']]):
        pulumi.set(self, "metabase", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the App.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IntegrationBiState:
    def __init__(__self__, *,
                 metabase: Optional[pulumi.Input['IntegrationBiMetabaseArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering IntegrationBi resources.
        :param pulumi.Input['IntegrationBiMetabaseArgs'] metabase: Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the App.
        :param pulumi.Input[_builtins.bool] sync: Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        if metabase is not None:
            pulumi.set(__self__, "metabase", metabase)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sync is not None:
            pulumi.set(__self__, "sync", sync)

    @_builtins.property
    @pulumi.getter
    def metabase(self) -> Optional[pulumi.Input['IntegrationBiMetabaseArgs']]:
        """
        Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        """
        return pulumi.get(self, "metabase")

    @metabase.setter
    def metabase(self, value: Optional[pulumi.Input['IntegrationBiMetabaseArgs']]):
        pulumi.set(self, "metabase", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the App.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def sync(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        return pulumi.get(self, "sync")

    @sync.setter
    def sync(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sync", value)


@pulumi.type_token("formal:index/integrationBi:IntegrationBi")
class IntegrationBi(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metabase: Optional[pulumi.Input[Union['IntegrationBiMetabaseArgs', 'IntegrationBiMetabaseArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Registering a BI App.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationBiMetabaseArgs', 'IntegrationBiMetabaseArgsDict']] metabase: Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the App.
        :param pulumi.Input[_builtins.bool] sync: Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationBiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a BI App.

        :param str resource_name: The name of the resource.
        :param IntegrationBiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationBiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metabase: Optional[pulumi.Input[Union['IntegrationBiMetabaseArgs', 'IntegrationBiMetabaseArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationBiArgs.__new__(IntegrationBiArgs)

            __props__.__dict__["metabase"] = metabase
            __props__.__dict__["name"] = name
            if sync is None and not opts.urn:
                raise TypeError("Missing required property 'sync'")
            __props__.__dict__["sync"] = sync
        super(IntegrationBi, __self__).__init__(
            'formal:index/integrationBi:IntegrationBi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metabase: Optional[pulumi.Input[Union['IntegrationBiMetabaseArgs', 'IntegrationBiMetabaseArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            sync: Optional[pulumi.Input[_builtins.bool]] = None) -> 'IntegrationBi':
        """
        Get an existing IntegrationBi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationBiMetabaseArgs', 'IntegrationBiMetabaseArgsDict']] metabase: Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the App.
        :param pulumi.Input[_builtins.bool] sync: Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationBiState.__new__(_IntegrationBiState)

        __props__.__dict__["metabase"] = metabase
        __props__.__dict__["name"] = name
        __props__.__dict__["sync"] = sync
        return IntegrationBi(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def metabase(self) -> pulumi.Output[Optional['outputs.IntegrationBiMetabase']]:
        """
        Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
        """
        return pulumi.get(self, "metabase")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for the App.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sync(self) -> pulumi.Output[_builtins.bool]:
        """
        Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
        """
        return pulumi.get(self, "sync")

