# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EncryptionKeyArgs', 'EncryptionKey']

@pulumi.input_type
class EncryptionKeyArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[_builtins.str],
                 decryptor_uri: pulumi.Input[_builtins.str],
                 key_id: pulumi.Input[_builtins.str],
                 key_provider: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a EncryptionKey resource.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        :param pulumi.Input[_builtins.str] decryptor_uri: The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        :param pulumi.Input[_builtins.str] key_id: The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        :param pulumi.Input[_builtins.str] key_provider: The provider of the encryption key. Currently only 'aws' is supported.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "decryptor_uri", decryptor_uri)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_provider", key_provider)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="decryptorUri")
    def decryptor_uri(self) -> pulumi.Input[_builtins.str]:
        """
        The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        """
        return pulumi.get(self, "decryptor_uri")

    @decryptor_uri.setter
    def decryptor_uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "decryptor_uri", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="keyProvider")
    def key_provider(self) -> pulumi.Input[_builtins.str]:
        """
        The provider of the encryption key. Currently only 'aws' is supported.
        """
        return pulumi.get(self, "key_provider")

    @key_provider.setter
    def key_provider(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_provider", value)


@pulumi.input_type
class _EncryptionKeyState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 decryptor_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EncryptionKey resources.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        :param pulumi.Input[_builtins.str] created_at: When the encryption key was created.
        :param pulumi.Input[_builtins.str] decryptor_uri: The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        :param pulumi.Input[_builtins.str] key_id: The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        :param pulumi.Input[_builtins.str] key_provider: The provider of the encryption key. Currently only 'aws' is supported.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if decryptor_uri is not None:
            pulumi.set(__self__, "decryptor_uri", decryptor_uri)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_provider is not None:
            pulumi.set(__self__, "key_provider", key_provider)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the encryption key was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="decryptorUri")
    def decryptor_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        """
        return pulumi.get(self, "decryptor_uri")

    @decryptor_uri.setter
    def decryptor_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "decryptor_uri", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="keyProvider")
    def key_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The provider of the encryption key. Currently only 'aws' is supported.
        """
        return pulumi.get(self, "key_provider")

    @key_provider.setter
    def key_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_provider", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("formal:index/encryptionKey:EncryptionKey")
class EncryptionKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 decryptor_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering an Encryption Key with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        :param pulumi.Input[_builtins.str] decryptor_uri: The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        :param pulumi.Input[_builtins.str] key_id: The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        :param pulumi.Input[_builtins.str] key_provider: The provider of the encryption key. Currently only 'aws' is supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EncryptionKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering an Encryption Key with Formal.

        :param str resource_name: The name of the resource.
        :param EncryptionKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EncryptionKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 decryptor_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EncryptionKeyArgs.__new__(EncryptionKeyArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            if decryptor_uri is None and not opts.urn:
                raise TypeError("Missing required property 'decryptor_uri'")
            __props__.__dict__["decryptor_uri"] = decryptor_uri
            if key_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_id'")
            __props__.__dict__["key_id"] = key_id
            if key_provider is None and not opts.urn:
                raise TypeError("Missing required property 'key_provider'")
            __props__.__dict__["key_provider"] = key_provider
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(EncryptionKey, __self__).__init__(
            'formal:index/encryptionKey:EncryptionKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            decryptor_uri: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_provider: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'EncryptionKey':
        """
        Get an existing EncryptionKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        :param pulumi.Input[_builtins.str] created_at: When the encryption key was created.
        :param pulumi.Input[_builtins.str] decryptor_uri: The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        :param pulumi.Input[_builtins.str] key_id: The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        :param pulumi.Input[_builtins.str] key_provider: The provider of the encryption key. Currently only 'aws' is supported.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EncryptionKeyState.__new__(_EncryptionKeyState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["decryptor_uri"] = decryptor_uri
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_provider"] = key_provider
        __props__.__dict__["updated_at"] = updated_at
        return EncryptionKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the encryption key was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="decryptorUri")
    def decryptor_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        """
        return pulumi.get(self, "decryptor_uri")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyProvider")
    def key_provider(self) -> pulumi.Output[_builtins.str]:
        """
        The provider of the encryption key. Currently only 'aws' is supported.
        """
        return pulumi.get(self, "key_provider")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

