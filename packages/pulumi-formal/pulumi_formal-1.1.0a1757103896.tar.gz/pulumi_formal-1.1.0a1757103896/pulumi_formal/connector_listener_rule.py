# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConnectorListenerRuleArgs', 'ConnectorListenerRule']

@pulumi.input_type
class ConnectorListenerRuleArgs:
    def __init__(__self__, *,
                 connector_listener_id: pulumi.Input[_builtins.str],
                 rule: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ConnectorListenerRule resource.
        :param pulumi.Input[_builtins.str] connector_listener_id: The ID of the listener this rule is associated with.
        :param pulumi.Input[_builtins.str] rule: The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        :param pulumi.Input[_builtins.str] type: The type of the rule. It can be either `any`, `resource` or `technology`
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector listener rule cannot be deleted.
        """
        pulumi.set(__self__, "connector_listener_id", connector_listener_id)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "type", type)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter(name="connectorListenerId")
    def connector_listener_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the listener this rule is associated with.
        """
        return pulumi.get(self, "connector_listener_id")

    @connector_listener_id.setter
    def connector_listener_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connector_listener_id", value)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> pulumi.Input[_builtins.str]:
        """
        The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the rule. It can be either `any`, `resource` or `technology`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this connector listener rule cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _ConnectorListenerRuleState:
    def __init__(__self__, *,
                 connector_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectorListenerRule resources.
        :param pulumi.Input[_builtins.str] connector_listener_id: The ID of the listener this rule is associated with.
        :param pulumi.Input[_builtins.str] rule: The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector listener rule cannot be deleted.
        :param pulumi.Input[_builtins.str] type: The type of the rule. It can be either `any`, `resource` or `technology`
        """
        if connector_listener_id is not None:
            pulumi.set(__self__, "connector_listener_id", connector_listener_id)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="connectorListenerId")
    def connector_listener_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the listener this rule is associated with.
        """
        return pulumi.get(self, "connector_listener_id")

    @connector_listener_id.setter
    def connector_listener_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_listener_id", value)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this connector listener rule cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the rule. It can be either `any`, `resource` or `technology`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("formal:index/connectorListenerRule:ConnectorListenerRule")
class ConnectorListenerRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Connector Listener Rule with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_listener_id: The ID of the listener this rule is associated with.
        :param pulumi.Input[_builtins.str] rule: The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector listener rule cannot be deleted.
        :param pulumi.Input[_builtins.str] type: The type of the rule. It can be either `any`, `resource` or `technology`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorListenerRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Connector Listener Rule with Formal.

        :param str resource_name: The name of the resource.
        :param ConnectorListenerRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorListenerRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorListenerRuleArgs.__new__(ConnectorListenerRuleArgs)

            if connector_listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_listener_id'")
            __props__.__dict__["connector_listener_id"] = connector_listener_id
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
            __props__.__dict__["termination_protection"] = termination_protection
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ConnectorListenerRule, __self__).__init__(
            'formal:index/connectorListenerRule:ConnectorListenerRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
            rule: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectorListenerRule':
        """
        Get an existing ConnectorListenerRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_listener_id: The ID of the listener this rule is associated with.
        :param pulumi.Input[_builtins.str] rule: The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector listener rule cannot be deleted.
        :param pulumi.Input[_builtins.str] type: The type of the rule. It can be either `any`, `resource` or `technology`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorListenerRuleState.__new__(_ConnectorListenerRuleState)

        __props__.__dict__["connector_listener_id"] = connector_listener_id
        __props__.__dict__["rule"] = rule
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["type"] = type
        return ConnectorListenerRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectorListenerId")
    def connector_listener_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the listener this rule is associated with.
        """
        return pulumi.get(self, "connector_listener_id")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> pulumi.Output[_builtins.str]:
        """
        The rule to apply to the listener. It should be either the id of the resource or the name of the technology.
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this connector listener rule cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the rule. It can be either `any`, `resource` or `technology`
        """
        return pulumi.get(self, "type")

