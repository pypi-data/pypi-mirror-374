# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DataDiscoveryArgs', 'DataDiscovery']

@pulumi.input_type
class DataDiscoveryArgs:
    def __init__(__self__, *,
                 deletion_policy: pulumi.Input[_builtins.str],
                 native_user_id: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str],
                 schedule: pulumi.Input[_builtins.str],
                 path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataDiscovery resource.
        :param pulumi.Input[_builtins.str] deletion_policy: Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        :param pulumi.Input[_builtins.str] native_user_id: Native user ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] schedule: Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        :param pulumi.Input[_builtins.str] path: Path of the inventory object.
        """
        pulumi.set(__self__, "deletion_policy", deletion_policy)
        pulumi.set(__self__, "native_user_id", native_user_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "schedule", schedule)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @_builtins.property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> pulumi.Input[_builtins.str]:
        """
        Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        """
        return pulumi.get(self, "deletion_policy")

    @deletion_policy.setter
    def deletion_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "deletion_policy", value)

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> pulumi.Input[_builtins.str]:
        """
        Native user ID linked to this Data Discovery.
        """
        return pulumi.get(self, "native_user_id")

    @native_user_id.setter
    def native_user_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "native_user_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        Resource ID linked to this Data Discovery.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[_builtins.str]:
        """
        Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the inventory object.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class _DataDiscoveryState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 deletion_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataDiscovery resources.
        :param pulumi.Input[_builtins.int] created_at: Creation time of the Data Discovery.
        :param pulumi.Input[_builtins.str] deletion_policy: Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        :param pulumi.Input[_builtins.str] native_user_id: Native user ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] path: Path of the inventory object.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] schedule: Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deletion_policy is not None:
            pulumi.set(__self__, "deletion_policy", deletion_policy)
        if native_user_id is not None:
            pulumi.set(__self__, "native_user_id", native_user_id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Creation time of the Data Discovery.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        """
        return pulumi.get(self, "deletion_policy")

    @deletion_policy.setter
    def deletion_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deletion_policy", value)

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Native user ID linked to this Data Discovery.
        """
        return pulumi.get(self, "native_user_id")

    @native_user_id.setter
    def native_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "native_user_id", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path of the inventory object.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource ID linked to this Data Discovery.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule", value)


@pulumi.type_token("formal:index/dataDiscovery:DataDiscovery")
class DataDiscovery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deletion_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Data Discovery with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] deletion_policy: Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        :param pulumi.Input[_builtins.str] native_user_id: Native user ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] path: Path of the inventory object.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] schedule: Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataDiscoveryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Data Discovery with Formal.

        :param str resource_name: The name of the resource.
        :param DataDiscoveryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataDiscoveryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deletion_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataDiscoveryArgs.__new__(DataDiscoveryArgs)

            if deletion_policy is None and not opts.urn:
                raise TypeError("Missing required property 'deletion_policy'")
            __props__.__dict__["deletion_policy"] = deletion_policy
            if native_user_id is None and not opts.urn:
                raise TypeError("Missing required property 'native_user_id'")
            __props__.__dict__["native_user_id"] = native_user_id
            __props__.__dict__["path"] = path
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["created_at"] = None
        super(DataDiscovery, __self__).__init__(
            'formal:index/dataDiscovery:DataDiscovery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            deletion_policy: Optional[pulumi.Input[_builtins.str]] = None,
            native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataDiscovery':
        """
        Get an existing DataDiscovery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] created_at: Creation time of the Data Discovery.
        :param pulumi.Input[_builtins.str] deletion_policy: Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        :param pulumi.Input[_builtins.str] native_user_id: Native user ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] path: Path of the inventory object.
        :param pulumi.Input[_builtins.str] resource_id: Resource ID linked to this Data Discovery.
        :param pulumi.Input[_builtins.str] schedule: Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataDiscoveryState.__new__(_DataDiscoveryState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deletion_policy"] = deletion_policy
        __props__.__dict__["native_user_id"] = native_user_id
        __props__.__dict__["path"] = path
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["schedule"] = schedule
        return DataDiscovery(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        Creation time of the Data Discovery.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Deletion policy of the Data Discovery. Possible values: `delete`, `mark_for_deletion`.
        """
        return pulumi.get(self, "deletion_policy")

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> pulumi.Output[_builtins.str]:
        """
        Native user ID linked to this Data Discovery.
        """
        return pulumi.get(self, "native_user_id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Path of the inventory object.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource ID linked to this Data Discovery.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[_builtins.str]:
        """
        Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
        """
        return pulumi.get(self, "schedule")

