# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 module: pulumi.Input[_builtins.str],
                 notification: pulumi.Input[_builtins.str],
                 owner: pulumi.Input[_builtins.str],
                 status: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[_builtins.str] description: Policy Description.
        :param pulumi.Input[_builtins.str] module: The module describing how the policy works. Create one in the Formal Console.
        :param pulumi.Input[_builtins.str] notification: Notification settings for this policy.
        :param pulumi.Input[_builtins.str] owner: Owner of this policy: it can be either a group name or a user email.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        :param pulumi.Input[_builtins.str] name: Policy Name
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Policy cannot be deleted.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "module", module)
        pulumi.set(__self__, "notification", notification)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "status", status)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        Policy Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def module(self) -> pulumi.Input[_builtins.str]:
        """
        The module describing how the policy works. Create one in the Formal Console.
        """
        return pulumi.get(self, "module")

    @module.setter
    def module(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "module", value)

    @_builtins.property
    @pulumi.getter
    def notification(self) -> pulumi.Input[_builtins.str]:
        """
        Notification settings for this policy.
        """
        return pulumi.get(self, "notification")

    @notification.setter
    def notification(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "notification", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Input[_builtins.str]:
        """
        Owner of this policy: it can be either a group name or a user email.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Policy cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 module: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[_builtins.str] created_at: When the policy was created.
        :param pulumi.Input[_builtins.str] description: Policy Description.
        :param pulumi.Input[_builtins.str] module: The module describing how the policy works. Create one in the Formal Console.
        :param pulumi.Input[_builtins.str] name: Policy Name
        :param pulumi.Input[_builtins.str] notification: Notification settings for this policy.
        :param pulumi.Input[_builtins.str] owner: Owner of this policy: it can be either a group name or a user email.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Policy cannot be deleted.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if module is not None:
            pulumi.set(__self__, "module", module)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification is not None:
            pulumi.set(__self__, "notification", notification)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the policy was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def module(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The module describing how the policy works. Create one in the Formal Console.
        """
        return pulumi.get(self, "module")

    @module.setter
    def module(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "module", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notification(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Notification settings for this policy.
        """
        return pulumi.get(self, "notification")

    @notification.setter
    def notification(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification", value)

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Owner of this policy: it can be either a group name or a user email.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Policy cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("formal:index/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 module: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Creating a Policy in Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Policy Description.
        :param pulumi.Input[_builtins.str] module: The module describing how the policy works. Create one in the Formal Console.
        :param pulumi.Input[_builtins.str] name: Policy Name
        :param pulumi.Input[_builtins.str] notification: Notification settings for this policy.
        :param pulumi.Input[_builtins.str] owner: Owner of this policy: it can be either a group name or a user email.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Policy cannot be deleted.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creating a Policy in Formal.

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 module: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification: Optional[pulumi.Input[_builtins.str]] = None,
                 owner: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if module is None and not opts.urn:
                raise TypeError("Missing required property 'module'")
            __props__.__dict__["module"] = module
            __props__.__dict__["name"] = name
            if notification is None and not opts.urn:
                raise TypeError("Missing required property 'notification'")
            __props__.__dict__["notification"] = notification
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["termination_protection"] = termination_protection
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(Policy, __self__).__init__(
            'formal:index/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            module: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification: Optional[pulumi.Input[_builtins.str]] = None,
            owner: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: When the policy was created.
        :param pulumi.Input[_builtins.str] description: Policy Description.
        :param pulumi.Input[_builtins.str] module: The module describing how the policy works. Create one in the Formal Console.
        :param pulumi.Input[_builtins.str] name: Policy Name
        :param pulumi.Input[_builtins.str] notification: Notification settings for this policy.
        :param pulumi.Input[_builtins.str] owner: Owner of this policy: it can be either a group name or a user email.
        :param pulumi.Input[_builtins.str] status: Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Policy cannot be deleted.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["module"] = module
        __props__.__dict__["name"] = name
        __props__.__dict__["notification"] = notification
        __props__.__dict__["owner"] = owner
        __props__.__dict__["status"] = status
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["updated_at"] = updated_at
        return Policy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Policy Description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def module(self) -> pulumi.Output[_builtins.str]:
        """
        The module describing how the policy works. Create one in the Formal Console.
        """
        return pulumi.get(self, "module")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Policy Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notification(self) -> pulumi.Output[_builtins.str]:
        """
        Notification settings for this policy.
        """
        return pulumi.get(self, "notification")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> pulumi.Output[_builtins.str]:
        """
        Owner of this policy: it can be either a group name or a user email.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this Policy cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

