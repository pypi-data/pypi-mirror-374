# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ResourceClassifierConfigurationArgs', 'ResourceClassifierConfiguration']

@pulumi.input_type
class ResourceClassifierConfigurationArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a ResourceClassifierConfiguration resource.
        :param pulumi.Input[_builtins.str] preference: The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        :param pulumi.Input[_builtins.str] resource_id: The ID of the Resource.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> pulumi.Input[_builtins.str]:
        """
        The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)


@pulumi.input_type
class _ResourceClassifierConfigurationState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 preference: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering ResourceClassifierConfiguration resources.
        :param pulumi.Input[_builtins.int] created_at: The timestamp of the Resource Classifier Preference creation.
        :param pulumi.Input[_builtins.str] preference: The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        :param pulumi.Input[_builtins.str] resource_id: The ID of the Resource.
        :param pulumi.Input[_builtins.int] updated_at: The timestamp of the Resource Classifier Preference update.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timestamp of the Resource Classifier Preference creation.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timestamp of the Resource Classifier Preference update.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("formal:index/resourceClassifierConfiguration:ResourceClassifierConfiguration")
class ResourceClassifierConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 preference: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        A Resource Classifier Configuration is a configuration for a resource classifier.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] preference: The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        :param pulumi.Input[_builtins.str] resource_id: The ID of the Resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceClassifierConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Resource Classifier Configuration is a configuration for a resource classifier.

        :param str resource_name: The name of the resource.
        :param ResourceClassifierConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceClassifierConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 preference: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceClassifierConfigurationArgs.__new__(ResourceClassifierConfigurationArgs)

            if preference is None and not opts.urn:
                raise TypeError("Missing required property 'preference'")
            __props__.__dict__["preference"] = preference
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(ResourceClassifierConfiguration, __self__).__init__(
            'formal:index/resourceClassifierConfiguration:ResourceClassifierConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            preference: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.int]] = None) -> 'ResourceClassifierConfiguration':
        """
        Get an existing ResourceClassifierConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] created_at: The timestamp of the Resource Classifier Preference creation.
        :param pulumi.Input[_builtins.str] preference: The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        :param pulumi.Input[_builtins.str] resource_id: The ID of the Resource.
        :param pulumi.Input[_builtins.int] updated_at: The timestamp of the Resource Classifier Preference update.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceClassifierConfigurationState.__new__(_ResourceClassifierConfigurationState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["preference"] = preference
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["updated_at"] = updated_at
        return ResourceClassifierConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        The timestamp of the Resource Classifier Preference creation.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> pulumi.Output[_builtins.str]:
        """
        The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.int]:
        """
        The timestamp of the Resource Classifier Preference update.
        """
        return pulumi.get(self, "updated_at")

