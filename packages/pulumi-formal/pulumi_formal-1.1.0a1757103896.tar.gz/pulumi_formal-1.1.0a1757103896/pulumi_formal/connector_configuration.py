# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConnectorConfigurationArgs', 'ConnectorConfiguration']

@pulumi.input_type
class ConnectorConfigurationArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[_builtins.str],
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ConnectorConfiguration resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this configuration is linked to.
        :param pulumi.Input[_builtins.int] health_check_port: The port to be used for this Connector's health check.
        :param pulumi.Input[_builtins.str] log_level: The log level to be configured for this Connector.
        """
        pulumi.set(__self__, "connector_id", connector_id)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Connector this configuration is linked to.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port to be used for this Connector's health check.
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_port", value)

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log level to be configured for this Connector.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class _ConnectorConfigurationState:
    def __init__(__self__, *,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectorConfiguration resources.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this configuration is linked to.
        :param pulumi.Input[_builtins.int] health_check_port: The port to be used for this Connector's health check.
        :param pulumi.Input[_builtins.str] log_level: The log level to be configured for this Connector.
        """
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Connector this configuration is linked to.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port to be used for this Connector's health check.
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_port", value)

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The log level to be configured for this Connector.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_level", value)


@pulumi.type_token("formal:index/connectorConfiguration:ConnectorConfiguration")
class ConnectorConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Connector Configuration with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this configuration is linked to.
        :param pulumi.Input[_builtins.int] health_check_port: The port to be used for this Connector's health check.
        :param pulumi.Input[_builtins.str] log_level: The log level to be configured for this Connector.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Connector Configuration with Formal.

        :param str resource_name: The name of the resource.
        :param ConnectorConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 log_level: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorConfigurationArgs.__new__(ConnectorConfigurationArgs)

            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            __props__.__dict__["health_check_port"] = health_check_port
            __props__.__dict__["log_level"] = log_level
        super(ConnectorConfiguration, __self__).__init__(
            'formal:index/connectorConfiguration:ConnectorConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_id: Optional[pulumi.Input[_builtins.str]] = None,
            health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
            log_level: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectorConfiguration':
        """
        Get an existing ConnectorConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this configuration is linked to.
        :param pulumi.Input[_builtins.int] health_check_port: The port to be used for this Connector's health check.
        :param pulumi.Input[_builtins.str] log_level: The log level to be configured for this Connector.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorConfigurationState.__new__(_ConnectorConfigurationState)

        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["health_check_port"] = health_check_port
        __props__.__dict__["log_level"] = log_level
        return ConnectorConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Connector this configuration is linked to.
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The port to be used for this Connector's health check.
        """
        return pulumi.get(self, "health_check_port")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The log level to be configured for this Connector.
        """
        return pulumi.get(self, "log_level")

