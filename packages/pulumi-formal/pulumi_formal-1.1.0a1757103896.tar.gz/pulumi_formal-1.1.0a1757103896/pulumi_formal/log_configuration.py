# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogConfigurationArgs', 'LogConfiguration']

@pulumi.input_type
class LogConfigurationArgs:
    def __init__(__self__, *,
                 encryption_key_id: pulumi.Input[_builtins.str],
                 request: pulumi.Input['LogConfigurationRequestArgs'],
                 response: pulumi.Input['LogConfigurationResponseArgs'],
                 scope: pulumi.Input['LogConfigurationScopeArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 stream: Optional[pulumi.Input['LogConfigurationStreamArgs']] = None):
        """
        The set of arguments for constructing a LogConfiguration resource.
        :param pulumi.Input[_builtins.str] encryption_key_id: The ID of the encryption key to use for this log configuration.
        :param pulumi.Input['LogConfigurationRequestArgs'] request: Request logging configuration.
        :param pulumi.Input['LogConfigurationResponseArgs'] response: Response logging configuration.
        :param pulumi.Input['LogConfigurationScopeArgs'] scope: The scope configuration for this log configuration.
        :param pulumi.Input[_builtins.str] name: The name of this log configuration.
        :param pulumi.Input['LogConfigurationStreamArgs'] stream: Stream logging configuration.
        """
        pulumi.set(__self__, "encryption_key_id", encryption_key_id)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "scope", scope)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)

    @_builtins.property
    @pulumi.getter(name="encryptionKeyId")
    def encryption_key_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the encryption key to use for this log configuration.
        """
        return pulumi.get(self, "encryption_key_id")

    @encryption_key_id.setter
    def encryption_key_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "encryption_key_id", value)

    @_builtins.property
    @pulumi.getter
    def request(self) -> pulumi.Input['LogConfigurationRequestArgs']:
        """
        Request logging configuration.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: pulumi.Input['LogConfigurationRequestArgs']):
        pulumi.set(self, "request", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> pulumi.Input['LogConfigurationResponseArgs']:
        """
        Response logging configuration.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: pulumi.Input['LogConfigurationResponseArgs']):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Input['LogConfigurationScopeArgs']:
        """
        The scope configuration for this log configuration.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['LogConfigurationScopeArgs']):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of this log configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input['LogConfigurationStreamArgs']]:
        """
        Stream logging configuration.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input['LogConfigurationStreamArgs']]):
        pulumi.set(self, "stream", value)


@pulumi.input_type
class _LogConfigurationState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 request: Optional[pulumi.Input['LogConfigurationRequestArgs']] = None,
                 response: Optional[pulumi.Input['LogConfigurationResponseArgs']] = None,
                 scope: Optional[pulumi.Input['LogConfigurationScopeArgs']] = None,
                 stream: Optional[pulumi.Input['LogConfigurationStreamArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogConfiguration resources.
        :param pulumi.Input[_builtins.str] created_at: When the log configuration was created.
        :param pulumi.Input[_builtins.str] encryption_key_id: The ID of the encryption key to use for this log configuration.
        :param pulumi.Input[_builtins.str] name: The name of this log configuration.
        :param pulumi.Input['LogConfigurationRequestArgs'] request: Request logging configuration.
        :param pulumi.Input['LogConfigurationResponseArgs'] response: Response logging configuration.
        :param pulumi.Input['LogConfigurationScopeArgs'] scope: The scope configuration for this log configuration.
        :param pulumi.Input['LogConfigurationStreamArgs'] stream: Stream logging configuration.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if encryption_key_id is not None:
            pulumi.set(__self__, "encryption_key_id", encryption_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the log configuration was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKeyId")
    def encryption_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the encryption key to use for this log configuration.
        """
        return pulumi.get(self, "encryption_key_id")

    @encryption_key_id.setter
    def encryption_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of this log configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['LogConfigurationRequestArgs']]:
        """
        Request logging configuration.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['LogConfigurationRequestArgs']]):
        pulumi.set(self, "request", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['LogConfigurationResponseArgs']]:
        """
        Response logging configuration.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['LogConfigurationResponseArgs']]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['LogConfigurationScopeArgs']]:
        """
        The scope configuration for this log configuration.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['LogConfigurationScopeArgs']]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter
    def stream(self) -> Optional[pulumi.Input['LogConfigurationStreamArgs']]:
        """
        Stream logging configuration.
        """
        return pulumi.get(self, "stream")

    @stream.setter
    def stream(self, value: Optional[pulumi.Input['LogConfigurationStreamArgs']]):
        pulumi.set(self, "stream", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("formal:index/logConfiguration:LogConfiguration")
class LogConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 request: Optional[pulumi.Input[Union['LogConfigurationRequestArgs', 'LogConfigurationRequestArgsDict']]] = None,
                 response: Optional[pulumi.Input[Union['LogConfigurationResponseArgs', 'LogConfigurationResponseArgsDict']]] = None,
                 scope: Optional[pulumi.Input[Union['LogConfigurationScopeArgs', 'LogConfigurationScopeArgsDict']]] = None,
                 stream: Optional[pulumi.Input[Union['LogConfigurationStreamArgs', 'LogConfigurationStreamArgsDict']]] = None,
                 __props__=None):
        """
        Managing Log Configuration with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] encryption_key_id: The ID of the encryption key to use for this log configuration.
        :param pulumi.Input[_builtins.str] name: The name of this log configuration.
        :param pulumi.Input[Union['LogConfigurationRequestArgs', 'LogConfigurationRequestArgsDict']] request: Request logging configuration.
        :param pulumi.Input[Union['LogConfigurationResponseArgs', 'LogConfigurationResponseArgsDict']] response: Response logging configuration.
        :param pulumi.Input[Union['LogConfigurationScopeArgs', 'LogConfigurationScopeArgsDict']] scope: The scope configuration for this log configuration.
        :param pulumi.Input[Union['LogConfigurationStreamArgs', 'LogConfigurationStreamArgsDict']] stream: Stream logging configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Managing Log Configuration with Formal.

        :param str resource_name: The name of the resource.
        :param LogConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 request: Optional[pulumi.Input[Union['LogConfigurationRequestArgs', 'LogConfigurationRequestArgsDict']]] = None,
                 response: Optional[pulumi.Input[Union['LogConfigurationResponseArgs', 'LogConfigurationResponseArgsDict']]] = None,
                 scope: Optional[pulumi.Input[Union['LogConfigurationScopeArgs', 'LogConfigurationScopeArgsDict']]] = None,
                 stream: Optional[pulumi.Input[Union['LogConfigurationStreamArgs', 'LogConfigurationStreamArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogConfigurationArgs.__new__(LogConfigurationArgs)

            if encryption_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_key_id'")
            __props__.__dict__["encryption_key_id"] = encryption_key_id
            __props__.__dict__["name"] = name
            if request is None and not opts.urn:
                raise TypeError("Missing required property 'request'")
            __props__.__dict__["request"] = request
            if response is None and not opts.urn:
                raise TypeError("Missing required property 'response'")
            __props__.__dict__["response"] = response
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["stream"] = stream
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(LogConfiguration, __self__).__init__(
            'formal:index/logConfiguration:LogConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            request: Optional[pulumi.Input[Union['LogConfigurationRequestArgs', 'LogConfigurationRequestArgsDict']]] = None,
            response: Optional[pulumi.Input[Union['LogConfigurationResponseArgs', 'LogConfigurationResponseArgsDict']]] = None,
            scope: Optional[pulumi.Input[Union['LogConfigurationScopeArgs', 'LogConfigurationScopeArgsDict']]] = None,
            stream: Optional[pulumi.Input[Union['LogConfigurationStreamArgs', 'LogConfigurationStreamArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogConfiguration':
        """
        Get an existing LogConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: When the log configuration was created.
        :param pulumi.Input[_builtins.str] encryption_key_id: The ID of the encryption key to use for this log configuration.
        :param pulumi.Input[_builtins.str] name: The name of this log configuration.
        :param pulumi.Input[Union['LogConfigurationRequestArgs', 'LogConfigurationRequestArgsDict']] request: Request logging configuration.
        :param pulumi.Input[Union['LogConfigurationResponseArgs', 'LogConfigurationResponseArgsDict']] response: Response logging configuration.
        :param pulumi.Input[Union['LogConfigurationScopeArgs', 'LogConfigurationScopeArgsDict']] scope: The scope configuration for this log configuration.
        :param pulumi.Input[Union['LogConfigurationStreamArgs', 'LogConfigurationStreamArgsDict']] stream: Stream logging configuration.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogConfigurationState.__new__(_LogConfigurationState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["encryption_key_id"] = encryption_key_id
        __props__.__dict__["name"] = name
        __props__.__dict__["request"] = request
        __props__.__dict__["response"] = response
        __props__.__dict__["scope"] = scope
        __props__.__dict__["stream"] = stream
        __props__.__dict__["updated_at"] = updated_at
        return LogConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the log configuration was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encryptionKeyId")
    def encryption_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the encryption key to use for this log configuration.
        """
        return pulumi.get(self, "encryption_key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of this log configuration.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def request(self) -> pulumi.Output['outputs.LogConfigurationRequest']:
        """
        Request logging configuration.
        """
        return pulumi.get(self, "request")

    @_builtins.property
    @pulumi.getter
    def response(self) -> pulumi.Output['outputs.LogConfigurationResponse']:
        """
        Response logging configuration.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output['outputs.LogConfigurationScope']:
        """
        The scope configuration for this log configuration.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter
    def stream(self) -> pulumi.Output[Optional['outputs.LogConfigurationStream']]:
        """
        Stream logging configuration.
        """
        return pulumi.get(self, "stream")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

