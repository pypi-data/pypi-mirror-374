# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SidecarArgs', 'Sidecar']

@pulumi.input_type
class SidecarArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[_builtins.str],
                 technology: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Sidecar resource.
        :param pulumi.Input[_builtins.str] hostname: The hostname of the created sidecar.
        :param pulumi.Input[_builtins.str] technology: Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        :param pulumi.Input[_builtins.str] name: Friendly name for this Sidecar.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Sidecar cannot be deleted.
        :param pulumi.Input[_builtins.str] version: Version of the Sidecar to deploy for `managed`.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "technology", technology)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[_builtins.str]:
        """
        The hostname of the created sidecar.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def technology(self) -> pulumi.Input[_builtins.str]:
        """
        Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "technology", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this Sidecar.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Sidecar cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the Sidecar to deploy for `managed`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _SidecarState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.int]] = None,
                 formal_control_plane_tls_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 technology: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Sidecar resources.
        :param pulumi.Input[_builtins.str] api_key: Api key for the deployed Sidecar.
        :param pulumi.Input[_builtins.int] created_at: Creation time of the sidecar.
        :param pulumi.Input[_builtins.str] formal_control_plane_tls_certificate: If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        :param pulumi.Input[_builtins.str] hostname: The hostname of the created sidecar.
        :param pulumi.Input[_builtins.str] name: Friendly name for this Sidecar.
        :param pulumi.Input[_builtins.str] technology: Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Sidecar cannot be deleted.
        :param pulumi.Input[_builtins.str] version: Version of the Sidecar to deploy for `managed`.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if formal_control_plane_tls_certificate is not None:
            pulumi.set(__self__, "formal_control_plane_tls_certificate", formal_control_plane_tls_certificate)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Api key for the deployed Sidecar.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Creation time of the sidecar.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="formalControlPlaneTlsCertificate")
    def formal_control_plane_tls_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        """
        return pulumi.get(self, "formal_control_plane_tls_certificate")

    @formal_control_plane_tls_certificate.setter
    def formal_control_plane_tls_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "formal_control_plane_tls_certificate", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname of the created sidecar.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for this Sidecar.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "technology", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Sidecar cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the Sidecar to deploy for `managed`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("formal:index/sidecar:Sidecar")
class Sidecar(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 technology: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Sidecar with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] hostname: The hostname of the created sidecar.
        :param pulumi.Input[_builtins.str] name: Friendly name for this Sidecar.
        :param pulumi.Input[_builtins.str] technology: Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Sidecar cannot be deleted.
        :param pulumi.Input[_builtins.str] version: Version of the Sidecar to deploy for `managed`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SidecarArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Sidecar with Formal.

        :param str resource_name: The name of the resource.
        :param SidecarArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SidecarArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 technology: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SidecarArgs.__new__(SidecarArgs)

            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["name"] = name
            if technology is None and not opts.urn:
                raise TypeError("Missing required property 'technology'")
            __props__.__dict__["technology"] = technology
            __props__.__dict__["termination_protection"] = termination_protection
            __props__.__dict__["version"] = version
            __props__.__dict__["api_key"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["formal_control_plane_tls_certificate"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey", "formalControlPlaneTlsCertificate"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Sidecar, __self__).__init__(
            'formal:index/sidecar:Sidecar',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.int]] = None,
            formal_control_plane_tls_certificate: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            technology: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'Sidecar':
        """
        Get an existing Sidecar resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_key: Api key for the deployed Sidecar.
        :param pulumi.Input[_builtins.int] created_at: Creation time of the sidecar.
        :param pulumi.Input[_builtins.str] formal_control_plane_tls_certificate: If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        :param pulumi.Input[_builtins.str] hostname: The hostname of the created sidecar.
        :param pulumi.Input[_builtins.str] name: Friendly name for this Sidecar.
        :param pulumi.Input[_builtins.str] technology: Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Sidecar cannot be deleted.
        :param pulumi.Input[_builtins.str] version: Version of the Sidecar to deploy for `managed`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SidecarState.__new__(_SidecarState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["formal_control_plane_tls_certificate"] = formal_control_plane_tls_certificate
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["name"] = name
        __props__.__dict__["technology"] = technology
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["version"] = version
        return Sidecar(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[_builtins.str]:
        """
        Api key for the deployed Sidecar.
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.int]:
        """
        Creation time of the sidecar.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="formalControlPlaneTlsCertificate")
    def formal_control_plane_tls_certificate(self) -> pulumi.Output[_builtins.str]:
        """
        If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        """
        return pulumi.get(self, "formal_control_plane_tls_certificate")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        The hostname of the created sidecar.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for this Sidecar.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def technology(self) -> pulumi.Output[_builtins.str]:
        """
        Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        """
        return pulumi.get(self, "technology")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this Sidecar cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Version of the Sidecar to deploy for `managed`.
        """
        return pulumi.get(self, "version")

