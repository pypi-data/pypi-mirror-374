# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationMdmArgs', 'IntegrationMdm']

@pulumi.input_type
class IntegrationMdmArgs:
    def __init__(__self__, *,
                 kandji: Optional[pulumi.Input['IntegrationMdmKandjiArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IntegrationMdm resource.
        :param pulumi.Input['IntegrationMdmKandjiArgs'] kandji: Configuration block for Kandji integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        """
        if kandji is not None:
            pulumi.set(__self__, "kandji", kandji)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def kandji(self) -> Optional[pulumi.Input['IntegrationMdmKandjiArgs']]:
        """
        Configuration block for Kandji integration.
        """
        return pulumi.get(self, "kandji")

    @kandji.setter
    def kandji(self, value: Optional[pulumi.Input['IntegrationMdmKandjiArgs']]):
        pulumi.set(self, "kandji", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IntegrationMdmState:
    def __init__(__self__, *,
                 kandji: Optional[pulumi.Input['IntegrationMdmKandjiArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IntegrationMdm resources.
        :param pulumi.Input['IntegrationMdmKandjiArgs'] kandji: Configuration block for Kandji integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        """
        if kandji is not None:
            pulumi.set(__self__, "kandji", kandji)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def kandji(self) -> Optional[pulumi.Input['IntegrationMdmKandjiArgs']]:
        """
        Configuration block for Kandji integration.
        """
        return pulumi.get(self, "kandji")

    @kandji.setter
    def kandji(self, value: Optional[pulumi.Input['IntegrationMdmKandjiArgs']]):
        pulumi.set(self, "kandji", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.type_token("formal:index/integrationMdm:IntegrationMdm")
class IntegrationMdm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kandji: Optional[pulumi.Input[Union['IntegrationMdmKandjiArgs', 'IntegrationMdmKandjiArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Registering a Integration MDM app.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationMdmKandjiArgs', 'IntegrationMdmKandjiArgsDict']] kandji: Configuration block for Kandji integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IntegrationMdmArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Integration MDM app.

        :param str resource_name: The name of the resource.
        :param IntegrationMdmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationMdmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kandji: Optional[pulumi.Input[Union['IntegrationMdmKandjiArgs', 'IntegrationMdmKandjiArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationMdmArgs.__new__(IntegrationMdmArgs)

            __props__.__dict__["kandji"] = kandji
            __props__.__dict__["name"] = name
        super(IntegrationMdm, __self__).__init__(
            'formal:index/integrationMdm:IntegrationMdm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            kandji: Optional[pulumi.Input[Union['IntegrationMdmKandjiArgs', 'IntegrationMdmKandjiArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None) -> 'IntegrationMdm':
        """
        Get an existing IntegrationMdm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationMdmKandjiArgs', 'IntegrationMdmKandjiArgsDict']] kandji: Configuration block for Kandji integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationMdmState.__new__(_IntegrationMdmState)

        __props__.__dict__["kandji"] = kandji
        __props__.__dict__["name"] = name
        return IntegrationMdm(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def kandji(self) -> pulumi.Output[Optional['outputs.IntegrationMdmKandji']]:
        """
        Configuration block for Kandji integration.
        """
        return pulumi.get(self, "kandji")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

