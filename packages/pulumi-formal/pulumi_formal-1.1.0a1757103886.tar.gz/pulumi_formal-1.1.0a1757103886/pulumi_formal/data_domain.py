# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataDomainArgs', 'DataDomain']

@pulumi.input_type
class DataDomainArgs:
    def __init__(__self__, *,
                 excluded_paths: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 included_paths: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 owners: pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DataDomain resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_paths: Excluded paths of this data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_paths: Included paths of this data domain.
        :param pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]] owners: Owners of this policy.
        :param pulumi.Input[_builtins.str] description: Description of the data domain.
        :param pulumi.Input[_builtins.str] name: Name of the data domain.
        """
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "included_paths", included_paths)
        pulumi.set(__self__, "owners", owners)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Excluded paths of this data domain.
        """
        return pulumi.get(self, "excluded_paths")

    @excluded_paths.setter
    def excluded_paths(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "excluded_paths", value)

    @_builtins.property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Included paths of this data domain.
        """
        return pulumi.get(self, "included_paths")

    @included_paths.setter
    def included_paths(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "included_paths", value)

    @_builtins.property
    @pulumi.getter
    def owners(self) -> pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]]:
        """
        Owners of this policy.
        """
        return pulumi.get(self, "owners")

    @owners.setter
    def owners(self, value: pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]]):
        pulumi.set(self, "owners", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the data domain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the data domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DataDomainState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DataDomain resources.
        :param pulumi.Input[_builtins.str] created_at: When the policy was created.
        :param pulumi.Input[_builtins.str] description: Description of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_paths: Excluded paths of this data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_paths: Included paths of this data domain.
        :param pulumi.Input[_builtins.str] name: Name of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]] owners: Owners of this policy.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if included_paths is not None:
            pulumi.set(__self__, "included_paths", included_paths)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owners is not None:
            pulumi.set(__self__, "owners", owners)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the policy was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the data domain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Excluded paths of this data domain.
        """
        return pulumi.get(self, "excluded_paths")

    @excluded_paths.setter
    def excluded_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "excluded_paths", value)

    @_builtins.property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Included paths of this data domain.
        """
        return pulumi.get(self, "included_paths")

    @included_paths.setter
    def included_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "included_paths", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the data domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]]]:
        """
        Owners of this policy.
        """
        return pulumi.get(self, "owners")

    @owners.setter
    def owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataDomainOwnerArgs']]]]):
        pulumi.set(self, "owners", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("formal:index/dataDomain:DataDomain")
class DataDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataDomainOwnerArgs', 'DataDomainOwnerArgsDict']]]]] = None,
                 __props__=None):
        """
        Registering a Data Domain with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_paths: Excluded paths of this data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_paths: Included paths of this data domain.
        :param pulumi.Input[_builtins.str] name: Name of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataDomainOwnerArgs', 'DataDomainOwnerArgsDict']]]] owners: Owners of this policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Data Domain with Formal.

        :param str resource_name: The name of the resource.
        :param DataDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataDomainOwnerArgs', 'DataDomainOwnerArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataDomainArgs.__new__(DataDomainArgs)

            __props__.__dict__["description"] = description
            if excluded_paths is None and not opts.urn:
                raise TypeError("Missing required property 'excluded_paths'")
            __props__.__dict__["excluded_paths"] = excluded_paths
            if included_paths is None and not opts.urn:
                raise TypeError("Missing required property 'included_paths'")
            __props__.__dict__["included_paths"] = included_paths
            __props__.__dict__["name"] = name
            if owners is None and not opts.urn:
                raise TypeError("Missing required property 'owners'")
            __props__.__dict__["owners"] = owners
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(DataDomain, __self__).__init__(
            'formal:index/dataDomain:DataDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owners: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DataDomainOwnerArgs', 'DataDomainOwnerArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'DataDomain':
        """
        Get an existing DataDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: When the policy was created.
        :param pulumi.Input[_builtins.str] description: Description of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] excluded_paths: Excluded paths of this data domain.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_paths: Included paths of this data domain.
        :param pulumi.Input[_builtins.str] name: Name of the data domain.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DataDomainOwnerArgs', 'DataDomainOwnerArgsDict']]]] owners: Owners of this policy.
        :param pulumi.Input[_builtins.str] updated_at: Last update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataDomainState.__new__(_DataDomainState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["excluded_paths"] = excluded_paths
        __props__.__dict__["included_paths"] = included_paths
        __props__.__dict__["name"] = name
        __props__.__dict__["owners"] = owners
        __props__.__dict__["updated_at"] = updated_at
        return DataDomain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        When the policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the data domain.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Excluded paths of this data domain.
        """
        return pulumi.get(self, "excluded_paths")

    @_builtins.property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Included paths of this data domain.
        """
        return pulumi.get(self, "included_paths")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the data domain.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owners(self) -> pulumi.Output[Sequence['outputs.DataDomainOwner']]:
        """
        Owners of this policy.
        """
        return pulumi.get(self, "owners")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update time.
        """
        return pulumi.get(self, "updated_at")

