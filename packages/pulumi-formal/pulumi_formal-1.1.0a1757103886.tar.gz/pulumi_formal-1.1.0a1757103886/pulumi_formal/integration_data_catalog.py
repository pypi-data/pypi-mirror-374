# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationDataCatalogArgs', 'IntegrationDataCatalog']

@pulumi.input_type
class IntegrationDataCatalogArgs:
    def __init__(__self__, *,
                 sync_direction: pulumi.Input[_builtins.str],
                 synced_entities: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 datahub: Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IntegrationDataCatalog resource.
        :param pulumi.Input[_builtins.str] sync_direction: Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] synced_entities: Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        :param pulumi.Input['IntegrationDataCatalogDatahubArgs'] datahub: Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        :param pulumi.Input[_builtins.str] name: Name of the Integration
        """
        pulumi.set(__self__, "sync_direction", sync_direction)
        pulumi.set(__self__, "synced_entities", synced_entities)
        if datahub is not None:
            pulumi.set(__self__, "datahub", datahub)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="syncDirection")
    def sync_direction(self) -> pulumi.Input[_builtins.str]:
        """
        Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        """
        return pulumi.get(self, "sync_direction")

    @sync_direction.setter
    def sync_direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sync_direction", value)

    @_builtins.property
    @pulumi.getter(name="syncedEntities")
    def synced_entities(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        return pulumi.get(self, "synced_entities")

    @synced_entities.setter
    def synced_entities(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "synced_entities", value)

    @_builtins.property
    @pulumi.getter
    def datahub(self) -> Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']]:
        """
        Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        """
        return pulumi.get(self, "datahub")

    @datahub.setter
    def datahub(self, value: Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']]):
        pulumi.set(self, "datahub", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IntegrationDataCatalogState:
    def __init__(__self__, *,
                 datahub: Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 synced_entities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering IntegrationDataCatalog resources.
        :param pulumi.Input['IntegrationDataCatalogDatahubArgs'] datahub: Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        :param pulumi.Input[_builtins.str] name: Name of the Integration
        :param pulumi.Input[_builtins.str] sync_direction: Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] synced_entities: Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        if datahub is not None:
            pulumi.set(__self__, "datahub", datahub)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sync_direction is not None:
            pulumi.set(__self__, "sync_direction", sync_direction)
        if synced_entities is not None:
            pulumi.set(__self__, "synced_entities", synced_entities)

    @_builtins.property
    @pulumi.getter
    def datahub(self) -> Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']]:
        """
        Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        """
        return pulumi.get(self, "datahub")

    @datahub.setter
    def datahub(self, value: Optional[pulumi.Input['IntegrationDataCatalogDatahubArgs']]):
        pulumi.set(self, "datahub", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="syncDirection")
    def sync_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        """
        return pulumi.get(self, "sync_direction")

    @sync_direction.setter
    def sync_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sync_direction", value)

    @_builtins.property
    @pulumi.getter(name="syncedEntities")
    def synced_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        return pulumi.get(self, "synced_entities")

    @synced_entities.setter
    def synced_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "synced_entities", value)


@pulumi.type_token("formal:index/integrationDataCatalog:IntegrationDataCatalog")
class IntegrationDataCatalog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datahub: Optional[pulumi.Input[Union['IntegrationDataCatalogDatahubArgs', 'IntegrationDataCatalogDatahubArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 synced_entities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Registering a Data Catalog integration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationDataCatalogDatahubArgs', 'IntegrationDataCatalogDatahubArgsDict']] datahub: Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        :param pulumi.Input[_builtins.str] name: Name of the Integration
        :param pulumi.Input[_builtins.str] sync_direction: Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] synced_entities: Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationDataCatalogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Data Catalog integration.

        :param str resource_name: The name of the resource.
        :param IntegrationDataCatalogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationDataCatalogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datahub: Optional[pulumi.Input[Union['IntegrationDataCatalogDatahubArgs', 'IntegrationDataCatalogDatahubArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sync_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 synced_entities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationDataCatalogArgs.__new__(IntegrationDataCatalogArgs)

            __props__.__dict__["datahub"] = datahub
            __props__.__dict__["name"] = name
            if sync_direction is None and not opts.urn:
                raise TypeError("Missing required property 'sync_direction'")
            __props__.__dict__["sync_direction"] = sync_direction
            if synced_entities is None and not opts.urn:
                raise TypeError("Missing required property 'synced_entities'")
            __props__.__dict__["synced_entities"] = synced_entities
        super(IntegrationDataCatalog, __self__).__init__(
            'formal:index/integrationDataCatalog:IntegrationDataCatalog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datahub: Optional[pulumi.Input[Union['IntegrationDataCatalogDatahubArgs', 'IntegrationDataCatalogDatahubArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            sync_direction: Optional[pulumi.Input[_builtins.str]] = None,
            synced_entities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'IntegrationDataCatalog':
        """
        Get an existing IntegrationDataCatalog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationDataCatalogDatahubArgs', 'IntegrationDataCatalogDatahubArgsDict']] datahub: Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        :param pulumi.Input[_builtins.str] name: Name of the Integration
        :param pulumi.Input[_builtins.str] sync_direction: Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] synced_entities: Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationDataCatalogState.__new__(_IntegrationDataCatalogState)

        __props__.__dict__["datahub"] = datahub
        __props__.__dict__["name"] = name
        __props__.__dict__["sync_direction"] = sync_direction
        __props__.__dict__["synced_entities"] = synced_entities
        return IntegrationDataCatalog(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def datahub(self) -> pulumi.Output[Optional['outputs.IntegrationDataCatalogDatahub']]:
        """
        Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        """
        return pulumi.get(self, "datahub")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Integration
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="syncDirection")
    def sync_direction(self) -> pulumi.Output[_builtins.str]:
        """
        Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        """
        return pulumi.get(self, "sync_direction")

    @_builtins.property
    @pulumi.getter(name="syncedEntities")
    def synced_entities(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        """
        return pulumi.get(self, "synced_entities")

