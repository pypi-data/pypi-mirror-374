# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationLogArgs', 'IntegrationLog']

@pulumi.input_type
class IntegrationLogArgs:
    def __init__(__self__, *,
                 aws_s3: Optional[pulumi.Input['IntegrationLogAwsS3Args']] = None,
                 datadog: Optional[pulumi.Input['IntegrationLogDatadogArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 splunk: Optional[pulumi.Input['IntegrationLogSplunkArgs']] = None):
        """
        The set of arguments for constructing a IntegrationLog resource.
        :param pulumi.Input['IntegrationLogAwsS3Args'] aws_s3: Configuration block for AWS S3 integration.
        :param pulumi.Input['IntegrationLogDatadogArgs'] datadog: Configuration block for Datadog integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        :param pulumi.Input['IntegrationLogSplunkArgs'] splunk: Configuration block for Splunk integration.
        """
        if aws_s3 is not None:
            pulumi.set(__self__, "aws_s3", aws_s3)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if splunk is not None:
            pulumi.set(__self__, "splunk", splunk)

    @_builtins.property
    @pulumi.getter(name="awsS3")
    def aws_s3(self) -> Optional[pulumi.Input['IntegrationLogAwsS3Args']]:
        """
        Configuration block for AWS S3 integration.
        """
        return pulumi.get(self, "aws_s3")

    @aws_s3.setter
    def aws_s3(self, value: Optional[pulumi.Input['IntegrationLogAwsS3Args']]):
        pulumi.set(self, "aws_s3", value)

    @_builtins.property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['IntegrationLogDatadogArgs']]:
        """
        Configuration block for Datadog integration.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['IntegrationLogDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def splunk(self) -> Optional[pulumi.Input['IntegrationLogSplunkArgs']]:
        """
        Configuration block for Splunk integration.
        """
        return pulumi.get(self, "splunk")

    @splunk.setter
    def splunk(self, value: Optional[pulumi.Input['IntegrationLogSplunkArgs']]):
        pulumi.set(self, "splunk", value)


@pulumi.input_type
class _IntegrationLogState:
    def __init__(__self__, *,
                 aws_s3: Optional[pulumi.Input['IntegrationLogAwsS3Args']] = None,
                 datadog: Optional[pulumi.Input['IntegrationLogDatadogArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 splunk: Optional[pulumi.Input['IntegrationLogSplunkArgs']] = None):
        """
        Input properties used for looking up and filtering IntegrationLog resources.
        :param pulumi.Input['IntegrationLogAwsS3Args'] aws_s3: Configuration block for AWS S3 integration.
        :param pulumi.Input['IntegrationLogDatadogArgs'] datadog: Configuration block for Datadog integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        :param pulumi.Input['IntegrationLogSplunkArgs'] splunk: Configuration block for Splunk integration.
        """
        if aws_s3 is not None:
            pulumi.set(__self__, "aws_s3", aws_s3)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if splunk is not None:
            pulumi.set(__self__, "splunk", splunk)

    @_builtins.property
    @pulumi.getter(name="awsS3")
    def aws_s3(self) -> Optional[pulumi.Input['IntegrationLogAwsS3Args']]:
        """
        Configuration block for AWS S3 integration.
        """
        return pulumi.get(self, "aws_s3")

    @aws_s3.setter
    def aws_s3(self, value: Optional[pulumi.Input['IntegrationLogAwsS3Args']]):
        pulumi.set(self, "aws_s3", value)

    @_builtins.property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['IntegrationLogDatadogArgs']]:
        """
        Configuration block for Datadog integration.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['IntegrationLogDatadogArgs']]):
        pulumi.set(self, "datadog", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def splunk(self) -> Optional[pulumi.Input['IntegrationLogSplunkArgs']]:
        """
        Configuration block for Splunk integration.
        """
        return pulumi.get(self, "splunk")

    @splunk.setter
    def splunk(self, value: Optional[pulumi.Input['IntegrationLogSplunkArgs']]):
        pulumi.set(self, "splunk", value)


@pulumi.type_token("formal:index/integrationLog:IntegrationLog")
class IntegrationLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_s3: Optional[pulumi.Input[Union['IntegrationLogAwsS3Args', 'IntegrationLogAwsS3ArgsDict']]] = None,
                 datadog: Optional[pulumi.Input[Union['IntegrationLogDatadogArgs', 'IntegrationLogDatadogArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 splunk: Optional[pulumi.Input[Union['IntegrationLogSplunkArgs', 'IntegrationLogSplunkArgsDict']]] = None,
                 __props__=None):
        """
        Registering a Integration Logs app.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationLogAwsS3Args', 'IntegrationLogAwsS3ArgsDict']] aws_s3: Configuration block for AWS S3 integration.
        :param pulumi.Input[Union['IntegrationLogDatadogArgs', 'IntegrationLogDatadogArgsDict']] datadog: Configuration block for Datadog integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        :param pulumi.Input[Union['IntegrationLogSplunkArgs', 'IntegrationLogSplunkArgsDict']] splunk: Configuration block for Splunk integration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IntegrationLogArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Integration Logs app.

        :param str resource_name: The name of the resource.
        :param IntegrationLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_s3: Optional[pulumi.Input[Union['IntegrationLogAwsS3Args', 'IntegrationLogAwsS3ArgsDict']]] = None,
                 datadog: Optional[pulumi.Input[Union['IntegrationLogDatadogArgs', 'IntegrationLogDatadogArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 splunk: Optional[pulumi.Input[Union['IntegrationLogSplunkArgs', 'IntegrationLogSplunkArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationLogArgs.__new__(IntegrationLogArgs)

            __props__.__dict__["aws_s3"] = aws_s3
            __props__.__dict__["datadog"] = datadog
            __props__.__dict__["name"] = name
            __props__.__dict__["splunk"] = splunk
        super(IntegrationLog, __self__).__init__(
            'formal:index/integrationLog:IntegrationLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_s3: Optional[pulumi.Input[Union['IntegrationLogAwsS3Args', 'IntegrationLogAwsS3ArgsDict']]] = None,
            datadog: Optional[pulumi.Input[Union['IntegrationLogDatadogArgs', 'IntegrationLogDatadogArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            splunk: Optional[pulumi.Input[Union['IntegrationLogSplunkArgs', 'IntegrationLogSplunkArgsDict']]] = None) -> 'IntegrationLog':
        """
        Get an existing IntegrationLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IntegrationLogAwsS3Args', 'IntegrationLogAwsS3ArgsDict']] aws_s3: Configuration block for AWS S3 integration.
        :param pulumi.Input[Union['IntegrationLogDatadogArgs', 'IntegrationLogDatadogArgsDict']] datadog: Configuration block for Datadog integration.
        :param pulumi.Input[_builtins.str] name: Friendly name for the Integration app.
        :param pulumi.Input[Union['IntegrationLogSplunkArgs', 'IntegrationLogSplunkArgsDict']] splunk: Configuration block for Splunk integration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationLogState.__new__(_IntegrationLogState)

        __props__.__dict__["aws_s3"] = aws_s3
        __props__.__dict__["datadog"] = datadog
        __props__.__dict__["name"] = name
        __props__.__dict__["splunk"] = splunk
        return IntegrationLog(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="awsS3")
    def aws_s3(self) -> pulumi.Output[Optional['outputs.IntegrationLogAwsS3']]:
        """
        Configuration block for AWS S3 integration.
        """
        return pulumi.get(self, "aws_s3")

    @_builtins.property
    @pulumi.getter
    def datadog(self) -> pulumi.Output[Optional['outputs.IntegrationLogDatadog']]:
        """
        Configuration block for Datadog integration.
        """
        return pulumi.get(self, "datadog")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Friendly name for the Integration app.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def splunk(self) -> pulumi.Output[Optional['outputs.IntegrationLogSplunk']]:
        """
        Configuration block for Splunk integration.
        """
        return pulumi.get(self, "splunk")

