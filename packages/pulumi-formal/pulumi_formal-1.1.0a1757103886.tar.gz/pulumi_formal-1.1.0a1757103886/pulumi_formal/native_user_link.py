# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NativeUserLinkArgs', 'NativeUserLink']

@pulumi.input_type
class NativeUserLinkArgs:
    def __init__(__self__, *,
                 formal_identity_id: pulumi.Input[_builtins.str],
                 formal_identity_type: pulumi.Input[_builtins.str],
                 native_user_id: pulumi.Input[_builtins.str],
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a NativeUserLink resource.
        :param pulumi.Input[_builtins.str] formal_identity_id: The Formal ID for the User, Group, or Resource Hostname to be linked.
        :param pulumi.Input[_builtins.str] formal_identity_type: The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        :param pulumi.Input[_builtins.str] native_user_id: The Native User ID of the Native User.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Native User link cannot be deleted.
        """
        pulumi.set(__self__, "formal_identity_id", formal_identity_id)
        pulumi.set(__self__, "formal_identity_type", formal_identity_type)
        pulumi.set(__self__, "native_user_id", native_user_id)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter(name="formalIdentityId")
    def formal_identity_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Formal ID for the User, Group, or Resource Hostname to be linked.
        """
        return pulumi.get(self, "formal_identity_id")

    @formal_identity_id.setter
    def formal_identity_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "formal_identity_id", value)

    @_builtins.property
    @pulumi.getter(name="formalIdentityType")
    def formal_identity_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        """
        return pulumi.get(self, "formal_identity_type")

    @formal_identity_type.setter
    def formal_identity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "formal_identity_type", value)

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Native User ID of the Native User.
        """
        return pulumi.get(self, "native_user_id")

    @native_user_id.setter
    def native_user_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "native_user_id", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Native User link cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _NativeUserLinkState:
    def __init__(__self__, *,
                 formal_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 formal_identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering NativeUserLink resources.
        :param pulumi.Input[_builtins.str] formal_identity_id: The Formal ID for the User, Group, or Resource Hostname to be linked.
        :param pulumi.Input[_builtins.str] formal_identity_type: The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        :param pulumi.Input[_builtins.str] native_user_id: The Native User ID of the Native User.
        :param pulumi.Input[_builtins.str] resource_id: The Resource ID of the Native User.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Native User link cannot be deleted.
        """
        if formal_identity_id is not None:
            pulumi.set(__self__, "formal_identity_id", formal_identity_id)
        if formal_identity_type is not None:
            pulumi.set(__self__, "formal_identity_type", formal_identity_type)
        if native_user_id is not None:
            pulumi.set(__self__, "native_user_id", native_user_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter(name="formalIdentityId")
    def formal_identity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Formal ID for the User, Group, or Resource Hostname to be linked.
        """
        return pulumi.get(self, "formal_identity_id")

    @formal_identity_id.setter
    def formal_identity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "formal_identity_id", value)

    @_builtins.property
    @pulumi.getter(name="formalIdentityType")
    def formal_identity_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        """
        return pulumi.get(self, "formal_identity_type")

    @formal_identity_type.setter
    def formal_identity_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "formal_identity_type", value)

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Native User ID of the Native User.
        """
        return pulumi.get(self, "native_user_id")

    @native_user_id.setter
    def native_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "native_user_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Resource ID of the Native User.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this Native User link cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.type_token("formal:index/nativeUserLink:NativeUserLink")
class NativeUserLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 formal_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 formal_identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        This resource creates assigns a Native User to a Formal Identity.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] formal_identity_id: The Formal ID for the User, Group, or Resource Hostname to be linked.
        :param pulumi.Input[_builtins.str] formal_identity_type: The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        :param pulumi.Input[_builtins.str] native_user_id: The Native User ID of the Native User.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Native User link cannot be deleted.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NativeUserLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource creates assigns a Native User to a Formal Identity.

        :param str resource_name: The name of the resource.
        :param NativeUserLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NativeUserLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 formal_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 formal_identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NativeUserLinkArgs.__new__(NativeUserLinkArgs)

            if formal_identity_id is None and not opts.urn:
                raise TypeError("Missing required property 'formal_identity_id'")
            __props__.__dict__["formal_identity_id"] = formal_identity_id
            if formal_identity_type is None and not opts.urn:
                raise TypeError("Missing required property 'formal_identity_type'")
            __props__.__dict__["formal_identity_type"] = formal_identity_type
            if native_user_id is None and not opts.urn:
                raise TypeError("Missing required property 'native_user_id'")
            __props__.__dict__["native_user_id"] = native_user_id
            __props__.__dict__["termination_protection"] = termination_protection
            __props__.__dict__["resource_id"] = None
        super(NativeUserLink, __self__).__init__(
            'formal:index/nativeUserLink:NativeUserLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            formal_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
            formal_identity_type: Optional[pulumi.Input[_builtins.str]] = None,
            native_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None) -> 'NativeUserLink':
        """
        Get an existing NativeUserLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] formal_identity_id: The Formal ID for the User, Group, or Resource Hostname to be linked.
        :param pulumi.Input[_builtins.str] formal_identity_type: The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        :param pulumi.Input[_builtins.str] native_user_id: The Native User ID of the Native User.
        :param pulumi.Input[_builtins.str] resource_id: The Resource ID of the Native User.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this Native User link cannot be deleted.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NativeUserLinkState.__new__(_NativeUserLinkState)

        __props__.__dict__["formal_identity_id"] = formal_identity_id
        __props__.__dict__["formal_identity_type"] = formal_identity_type
        __props__.__dict__["native_user_id"] = native_user_id
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["termination_protection"] = termination_protection
        return NativeUserLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="formalIdentityId")
    def formal_identity_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Formal ID for the User, Group, or Resource Hostname to be linked.
        """
        return pulumi.get(self, "formal_identity_id")

    @_builtins.property
    @pulumi.getter(name="formalIdentityType")
    def formal_identity_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resource_hostname`.
        """
        return pulumi.get(self, "formal_identity_type")

    @_builtins.property
    @pulumi.getter(name="nativeUserId")
    def native_user_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Native User ID of the Native User.
        """
        return pulumi.get(self, "native_user_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Resource ID of the Native User.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this Native User link cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

