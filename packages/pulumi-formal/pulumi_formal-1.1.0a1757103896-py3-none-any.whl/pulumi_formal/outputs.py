# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'DataDomainOwner',
    'IntegrationBiMetabase',
    'IntegrationCloudAws',
    'IntegrationDataCatalogDatahub',
    'IntegrationLogAwsS3',
    'IntegrationLogDatadog',
    'IntegrationLogSplunk',
    'IntegrationMdmKandji',
    'IntegrationMfaDuo',
    'LogConfigurationRequest',
    'LogConfigurationRequestSql',
    'LogConfigurationResponse',
    'LogConfigurationScope',
    'LogConfigurationStream',
]

@pulumi.output_type
class DataDomainOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataDomainOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataDomainOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataDomainOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: _builtins.str,
                 object_type: _builtins.str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.str:
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class IntegrationBiMetabase(dict):
    def __init__(__self__, *,
                 hostname: _builtins.str,
                 password: _builtins.str,
                 username: _builtins.str):
        """
        :param _builtins.str hostname: Hostname of the Metabase instance.
        :param _builtins.str password: Password for the Metabase instance.
        :param _builtins.str username: Username for the Metabase instance.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname of the Metabase instance.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Password for the Metabase instance.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username for the Metabase instance.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class IntegrationCloudAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateVersion":
            suggest = "template_version"
        elif key == "allowS3Access":
            suggest = "allow_s3_access"
        elif key == "awsCustomerRoleArn":
            suggest = "aws_customer_role_arn"
        elif key == "enableEc2Autodiscovery":
            suggest = "enable_ec2_autodiscovery"
        elif key == "enableEcsAutodiscovery":
            suggest = "enable_ecs_autodiscovery"
        elif key == "enableEksAutodiscovery":
            suggest = "enable_eks_autodiscovery"
        elif key == "enableRdsAutodiscovery":
            suggest = "enable_rds_autodiscovery"
        elif key == "enableRedshiftAutodiscovery":
            suggest = "enable_redshift_autodiscovery"
        elif key == "s3BucketArn":
            suggest = "s3_bucket_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationCloudAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationCloudAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationCloudAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_version: _builtins.str,
                 allow_s3_access: Optional[_builtins.bool] = None,
                 aws_customer_role_arn: Optional[_builtins.str] = None,
                 enable_ec2_autodiscovery: Optional[_builtins.bool] = None,
                 enable_ecs_autodiscovery: Optional[_builtins.bool] = None,
                 enable_eks_autodiscovery: Optional[_builtins.bool] = None,
                 enable_rds_autodiscovery: Optional[_builtins.bool] = None,
                 enable_redshift_autodiscovery: Optional[_builtins.bool] = None,
                 s3_bucket_arn: Optional[_builtins.str] = None):
        """
        :param _builtins.str template_version: The template version of the CloudFormation stack. Use `latest` to stay in sync.
        :param _builtins.bool allow_s3_access: Allows the Cloud Integration to access S3 buckets for Log Integrations.
        :param _builtins.str aws_customer_role_arn: The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
        :param _builtins.bool enable_ec2_autodiscovery: Enables resource autodiscovery for EC2 instances.
        :param _builtins.bool enable_ecs_autodiscovery: Enables resource autodiscovery for ECS clusters.
        :param _builtins.bool enable_eks_autodiscovery: Enables resource autodiscovery for EKS clusters.
        :param _builtins.bool enable_rds_autodiscovery: Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
        :param _builtins.bool enable_redshift_autodiscovery: Enables resource autodiscovery for Redshift clusters.
        :param _builtins.str s3_bucket_arn: The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
        """
        pulumi.set(__self__, "template_version", template_version)
        if allow_s3_access is not None:
            pulumi.set(__self__, "allow_s3_access", allow_s3_access)
        if aws_customer_role_arn is not None:
            pulumi.set(__self__, "aws_customer_role_arn", aws_customer_role_arn)
        if enable_ec2_autodiscovery is not None:
            pulumi.set(__self__, "enable_ec2_autodiscovery", enable_ec2_autodiscovery)
        if enable_ecs_autodiscovery is not None:
            pulumi.set(__self__, "enable_ecs_autodiscovery", enable_ecs_autodiscovery)
        if enable_eks_autodiscovery is not None:
            pulumi.set(__self__, "enable_eks_autodiscovery", enable_eks_autodiscovery)
        if enable_rds_autodiscovery is not None:
            pulumi.set(__self__, "enable_rds_autodiscovery", enable_rds_autodiscovery)
        if enable_redshift_autodiscovery is not None:
            pulumi.set(__self__, "enable_redshift_autodiscovery", enable_redshift_autodiscovery)
        if s3_bucket_arn is not None:
            pulumi.set(__self__, "s3_bucket_arn", s3_bucket_arn)

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> _builtins.str:
        """
        The template version of the CloudFormation stack. Use `latest` to stay in sync.
        """
        return pulumi.get(self, "template_version")

    @_builtins.property
    @pulumi.getter(name="allowS3Access")
    def allow_s3_access(self) -> Optional[_builtins.bool]:
        """
        Allows the Cloud Integration to access S3 buckets for Log Integrations.
        """
        return pulumi.get(self, "allow_s3_access")

    @_builtins.property
    @pulumi.getter(name="awsCustomerRoleArn")
    def aws_customer_role_arn(self) -> Optional[_builtins.str]:
        """
        The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
        """
        return pulumi.get(self, "aws_customer_role_arn")

    @_builtins.property
    @pulumi.getter(name="enableEc2Autodiscovery")
    def enable_ec2_autodiscovery(self) -> Optional[_builtins.bool]:
        """
        Enables resource autodiscovery for EC2 instances.
        """
        return pulumi.get(self, "enable_ec2_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="enableEcsAutodiscovery")
    def enable_ecs_autodiscovery(self) -> Optional[_builtins.bool]:
        """
        Enables resource autodiscovery for ECS clusters.
        """
        return pulumi.get(self, "enable_ecs_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="enableEksAutodiscovery")
    def enable_eks_autodiscovery(self) -> Optional[_builtins.bool]:
        """
        Enables resource autodiscovery for EKS clusters.
        """
        return pulumi.get(self, "enable_eks_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="enableRdsAutodiscovery")
    def enable_rds_autodiscovery(self) -> Optional[_builtins.bool]:
        """
        Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
        """
        return pulumi.get(self, "enable_rds_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="enableRedshiftAutodiscovery")
    def enable_redshift_autodiscovery(self) -> Optional[_builtins.bool]:
        """
        Enables resource autodiscovery for Redshift clusters.
        """
        return pulumi.get(self, "enable_redshift_autodiscovery")

    @_builtins.property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> Optional[_builtins.str]:
        """
        The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
        """
        return pulumi.get(self, "s3_bucket_arn")


@pulumi.output_type
class IntegrationDataCatalogDatahub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "generalizedMetadataServiceUrl":
            suggest = "generalized_metadata_service_url"
        elif key == "webhookSecret":
            suggest = "webhook_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationDataCatalogDatahub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationDataCatalogDatahub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationDataCatalogDatahub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: _builtins.str,
                 generalized_metadata_service_url: _builtins.str,
                 webhook_secret: _builtins.str):
        """
        :param _builtins.str api_key: Api Key for the Datahub instance.
        :param _builtins.str generalized_metadata_service_url: Generalized metadata service url for the Datahub instance.
        :param _builtins.str webhook_secret: Webhook secret of the Datahub instance.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "generalized_metadata_service_url", generalized_metadata_service_url)
        pulumi.set(__self__, "webhook_secret", webhook_secret)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> _builtins.str:
        """
        Api Key for the Datahub instance.
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter(name="generalizedMetadataServiceUrl")
    def generalized_metadata_service_url(self) -> _builtins.str:
        """
        Generalized metadata service url for the Datahub instance.
        """
        return pulumi.get(self, "generalized_metadata_service_url")

    @_builtins.property
    @pulumi.getter(name="webhookSecret")
    def webhook_secret(self) -> _builtins.str:
        """
        Webhook secret of the Datahub instance.
        """
        return pulumi.get(self, "webhook_secret")


@pulumi.output_type
class IntegrationLogAwsS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudIntegrationId":
            suggest = "cloud_integration_id"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationLogAwsS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationLogAwsS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationLogAwsS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_integration_id: _builtins.str,
                 s3_bucket_name: _builtins.str,
                 region: Optional[_builtins.str] = None):
        """
        :param _builtins.str cloud_integration_id: Cloud Integration ID.
        :param _builtins.str s3_bucket_name: AWS S3 Bucket Name.
        :param _builtins.str region: AWS Region.
        """
        pulumi.set(__self__, "cloud_integration_id", cloud_integration_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="cloudIntegrationId")
    def cloud_integration_id(self) -> _builtins.str:
        """
        Cloud Integration ID.
        """
        return pulumi.get(self, "cloud_integration_id")

    @_builtins.property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> _builtins.str:
        """
        AWS S3 Bucket Name.
        """
        return pulumi.get(self, "s3_bucket_name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        AWS Region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class IntegrationLogDatadog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "apiKey":
            suggest = "api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationLogDatadog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationLogDatadog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationLogDatadog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 api_key: _builtins.str,
                 site: _builtins.str):
        """
        :param _builtins.str account_id: Account ID of Datadog.
        :param _builtins.str api_key: API Key of Datadog.
        :param _builtins.str site: URL of your Datadog app.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "site", site)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Account ID of Datadog.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> _builtins.str:
        """
        API Key of Datadog.
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter
    def site(self) -> _builtins.str:
        """
        URL of your Datadog app.
        """
        return pulumi.get(self, "site")


@pulumi.output_type
class IntegrationLogSplunk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationLogSplunk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationLogSplunk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationLogSplunk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: _builtins.str,
                 host: _builtins.str,
                 port: _builtins.int):
        """
        :param _builtins.str access_token: Access Token of Splunk.
        :param _builtins.str host: URL of your Splunk app.
        :param _builtins.int port: Port of your Splunk app.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> _builtins.str:
        """
        Access Token of Splunk.
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        URL of your Splunk app.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port of your Splunk app.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class IntegrationMdmKandji(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "apiUrl":
            suggest = "api_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationMdmKandji. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationMdmKandji.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationMdmKandji.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: _builtins.str,
                 api_url: _builtins.str):
        """
        :param _builtins.str api_key: API Key of your Kandji organization.
        :param _builtins.str api_url: API URL of your Kandji organization.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_url", api_url)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> _builtins.str:
        """
        API Key of your Kandji organization.
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> _builtins.str:
        """
        API URL of your Kandji organization.
        """
        return pulumi.get(self, "api_url")


@pulumi.output_type
class IntegrationMfaDuo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiHostname":
            suggest = "api_hostname"
        elif key == "integrationKey":
            suggest = "integration_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationMfaDuo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationMfaDuo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationMfaDuo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_hostname: _builtins.str,
                 integration_key: _builtins.str,
                 secret_key: _builtins.str):
        """
        :param _builtins.str api_hostname: Duo API Hostname.
        :param _builtins.str integration_key: Duo Integration Key.
        :param _builtins.str secret_key: Duo Secret Key.
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> _builtins.str:
        """
        Duo API Hostname.
        """
        return pulumi.get(self, "api_hostname")

    @_builtins.property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> _builtins.str:
        """
        Duo Integration Key.
        """
        return pulumi.get(self, "integration_key")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Duo Secret Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class LogConfigurationRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPayloadSize":
            suggest = "max_payload_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogConfigurationRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogConfigurationRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogConfigurationRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypt: _builtins.bool,
                 max_payload_size: _builtins.int,
                 sql: Optional['outputs.LogConfigurationRequestSql'] = None):
        """
        :param _builtins.bool encrypt: Whether to encrypt request payloads.
        :param _builtins.int max_payload_size: Maximum size of request payloads to log.
        :param 'LogConfigurationRequestSqlArgs' sql: SQL logging configuration for requests.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_payload_size", max_payload_size)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> _builtins.bool:
        """
        Whether to encrypt request payloads.
        """
        return pulumi.get(self, "encrypt")

    @_builtins.property
    @pulumi.getter(name="maxPayloadSize")
    def max_payload_size(self) -> _builtins.int:
        """
        Maximum size of request payloads to log.
        """
        return pulumi.get(self, "max_payload_size")

    @_builtins.property
    @pulumi.getter
    def sql(self) -> Optional['outputs.LogConfigurationRequestSql']:
        """
        SQL logging configuration for requests.
        """
        return pulumi.get(self, "sql")


@pulumi.output_type
class LogConfigurationRequestSql(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stripValues":
            suggest = "strip_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogConfigurationRequestSql. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogConfigurationRequestSql.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogConfigurationRequestSql.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypt: _builtins.bool,
                 strip_values: _builtins.bool):
        """
        :param _builtins.bool encrypt: Whether to encrypt SQL queries in logs.
        :param _builtins.bool strip_values: Whether to obfuscate SQL queries in logs.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "strip_values", strip_values)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> _builtins.bool:
        """
        Whether to encrypt SQL queries in logs.
        """
        return pulumi.get(self, "encrypt")

    @_builtins.property
    @pulumi.getter(name="stripValues")
    def strip_values(self) -> _builtins.bool:
        """
        Whether to obfuscate SQL queries in logs.
        """
        return pulumi.get(self, "strip_values")


@pulumi.output_type
class LogConfigurationResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPayloadSize":
            suggest = "max_payload_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogConfigurationResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogConfigurationResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogConfigurationResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypt: _builtins.bool,
                 max_payload_size: _builtins.int):
        """
        :param _builtins.bool encrypt: Whether to encrypt response payloads.
        :param _builtins.int max_payload_size: Maximum size of response payloads to log.
        """
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_payload_size", max_payload_size)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> _builtins.bool:
        """
        Whether to encrypt response payloads.
        """
        return pulumi.get(self, "encrypt")

    @_builtins.property
    @pulumi.getter(name="maxPayloadSize")
    def max_payload_size(self) -> _builtins.int:
        """
        Maximum size of response payloads to log.
        """
        return pulumi.get(self, "max_payload_size")


@pulumi.output_type
class LogConfigurationScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorId":
            suggest = "connector_id"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "spaceId":
            suggest = "space_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogConfigurationScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogConfigurationScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogConfigurationScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 connector_id: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 space_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: The type of scope (resource, connector, space, org).
        :param _builtins.str connector_id: The ID of the connector (required when type is connector).
        :param _builtins.str resource_id: The ID of the resource (required when type is resource).
        :param _builtins.str space_id: The ID of the space (required when type is space).
        """
        pulumi.set(__self__, "type", type)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of scope (resource, connector, space, org).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[_builtins.str]:
        """
        The ID of the connector (required when type is connector).
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        """
        The ID of the resource (required when type is resource).
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[_builtins.str]:
        """
        The ID of the space (required when type is space).
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class LogConfigurationStream(dict):
    def __init__(__self__, *,
                 encrypt: _builtins.bool):
        """
        :param _builtins.bool encrypt: Whether to encrypt stream data.
        """
        pulumi.set(__self__, "encrypt", encrypt)

    @_builtins.property
    @pulumi.getter
    def encrypt(self) -> _builtins.bool:
        """
        Whether to encrypt stream data.
        """
        return pulumi.get(self, "encrypt")


