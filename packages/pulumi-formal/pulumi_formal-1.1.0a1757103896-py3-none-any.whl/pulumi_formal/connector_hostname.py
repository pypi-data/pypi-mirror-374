# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConnectorHostnameArgs', 'ConnectorHostname']

@pulumi.input_type
class ConnectorHostnameArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[_builtins.str],
                 hostname: pulumi.Input[_builtins.str],
                 dns_record: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ConnectorHostname resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this hostname is linked to.
        :param pulumi.Input[_builtins.str] hostname: The hostname for this Connector hostname.
        :param pulumi.Input[_builtins.str] dns_record: The DNS record for this hostname.
        :param pulumi.Input[_builtins.bool] managed_tls: Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector hostname cannot be deleted.
        """
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "hostname", hostname)
        if dns_record is not None:
            pulumi.set(__self__, "dns_record", dns_record)
        if managed_tls is not None:
            warnings.warn("""This field is deprecated and has no effect. It will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""managed_tls is deprecated: This field is deprecated and has no effect. It will be removed in a future release.""")
        if managed_tls is not None:
            pulumi.set(__self__, "managed_tls", managed_tls)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Connector this hostname is linked to.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[_builtins.str]:
        """
        The hostname for this Connector hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="dnsRecord")
    def dns_record(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS record for this hostname.
        """
        return pulumi.get(self, "dns_record")

    @dns_record.setter
    def dns_record(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_record", value)

    @_builtins.property
    @pulumi.getter(name="managedTls")
    @_utilities.deprecated("""This field is deprecated and has no effect. It will be removed in a future release.""")
    def managed_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        """
        return pulumi.get(self, "managed_tls")

    @managed_tls.setter
    def managed_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "managed_tls", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this connector hostname cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _ConnectorHostnameState:
    def __init__(__self__, *,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record_status: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 tls_certificate_status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConnectorHostname resources.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this hostname is linked to.
        :param pulumi.Input[_builtins.str] dns_record: The DNS record for this hostname.
        :param pulumi.Input[_builtins.str] dns_record_status: The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        :param pulumi.Input[_builtins.str] hostname: The hostname for this Connector hostname.
        :param pulumi.Input[_builtins.bool] managed_tls: Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector hostname cannot be deleted.
        :param pulumi.Input[_builtins.str] tls_certificate_status: The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        """
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if dns_record is not None:
            pulumi.set(__self__, "dns_record", dns_record)
        if dns_record_status is not None:
            pulumi.set(__self__, "dns_record_status", dns_record_status)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if managed_tls is not None:
            warnings.warn("""This field is deprecated and has no effect. It will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""managed_tls is deprecated: This field is deprecated and has no effect. It will be removed in a future release.""")
        if managed_tls is not None:
            pulumi.set(__self__, "managed_tls", managed_tls)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if tls_certificate_status is not None:
            pulumi.set(__self__, "tls_certificate_status", tls_certificate_status)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Connector this hostname is linked to.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="dnsRecord")
    def dns_record(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DNS record for this hostname.
        """
        return pulumi.get(self, "dns_record")

    @dns_record.setter
    def dns_record(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_record", value)

    @_builtins.property
    @pulumi.getter(name="dnsRecordStatus")
    def dns_record_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        """
        return pulumi.get(self, "dns_record_status")

    @dns_record_status.setter
    def dns_record_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_record_status", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname for this Connector hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="managedTls")
    @_utilities.deprecated("""This field is deprecated and has no effect. It will be removed in a future release.""")
    def managed_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        """
        return pulumi.get(self, "managed_tls")

    @managed_tls.setter
    def managed_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "managed_tls", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this connector hostname cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter(name="tlsCertificateStatus")
    def tls_certificate_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        """
        return pulumi.get(self, "tls_certificate_status")

    @tls_certificate_status.setter
    def tls_certificate_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_certificate_status", value)


@pulumi.type_token("formal:index/connectorHostname:ConnectorHostname")
class ConnectorHostname(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Registering a Connector Hostname with Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this hostname is linked to.
        :param pulumi.Input[_builtins.str] dns_record: The DNS record for this hostname.
        :param pulumi.Input[_builtins.str] hostname: The hostname for this Connector hostname.
        :param pulumi.Input[_builtins.bool] managed_tls: Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector hostname cannot be deleted.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorHostnameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Registering a Connector Hostname with Formal.

        :param str resource_name: The name of the resource.
        :param ConnectorHostnameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorHostnameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorHostnameArgs.__new__(ConnectorHostnameArgs)

            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            __props__.__dict__["dns_record"] = dns_record
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["managed_tls"] = managed_tls
            __props__.__dict__["termination_protection"] = termination_protection
            __props__.__dict__["dns_record_status"] = None
            __props__.__dict__["tls_certificate_status"] = None
        super(ConnectorHostname, __self__).__init__(
            'formal:index/connectorHostname:ConnectorHostname',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_id: Optional[pulumi.Input[_builtins.str]] = None,
            dns_record: Optional[pulumi.Input[_builtins.str]] = None,
            dns_record_status: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            managed_tls: Optional[pulumi.Input[_builtins.bool]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            tls_certificate_status: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConnectorHostname':
        """
        Get an existing ConnectorHostname resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_id: The ID of the Connector this hostname is linked to.
        :param pulumi.Input[_builtins.str] dns_record: The DNS record for this hostname.
        :param pulumi.Input[_builtins.str] dns_record_status: The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        :param pulumi.Input[_builtins.str] hostname: The hostname for this Connector hostname.
        :param pulumi.Input[_builtins.bool] managed_tls: Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this connector hostname cannot be deleted.
        :param pulumi.Input[_builtins.str] tls_certificate_status: The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorHostnameState.__new__(_ConnectorHostnameState)

        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["dns_record"] = dns_record
        __props__.__dict__["dns_record_status"] = dns_record_status
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["managed_tls"] = managed_tls
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["tls_certificate_status"] = tls_certificate_status
        return ConnectorHostname(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Connector this hostname is linked to.
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="dnsRecord")
    def dns_record(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The DNS record for this hostname.
        """
        return pulumi.get(self, "dns_record")

    @_builtins.property
    @pulumi.getter(name="dnsRecordStatus")
    def dns_record_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        """
        return pulumi.get(self, "dns_record_status")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        The hostname for this Connector hostname.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="managedTls")
    @_utilities.deprecated("""This field is deprecated and has no effect. It will be removed in a future release.""")
    def managed_tls(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        """
        return pulumi.get(self, "managed_tls")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this connector hostname cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter(name="tlsCertificateStatus")
    def tls_certificate_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        """
        return pulumi.get(self, "tls_certificate_status")

