# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_at: Optional[pulumi.Input[_builtins.int]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[_builtins.str] type: Either 'human' or 'machine'.
        :param pulumi.Input[_builtins.str] app_type: If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        :param pulumi.Input[_builtins.str] email: For human users, their email.
        :param pulumi.Input[_builtins.int] expire_at: When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        :param pulumi.Input[_builtins.str] first_name: For human users, their first name.
        :param pulumi.Input[_builtins.str] last_name: For human users, their last name.
        :param pulumi.Input[_builtins.str] name: For machine users, the name of the user.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this User cannot be deleted.
        """
        pulumi.set(__self__, "type", type)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire_at is not None:
            pulumi.set(__self__, "expire_at", expire_at)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Either 'human' or 'machine'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="expireAt")
    def expire_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        """
        return pulumi.get(self, "expire_at")

    @expire_at.setter
    def expire_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_at", value)

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their first name.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "first_name", value)

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their last name.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_name", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For machine users, the name of the user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this User cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 db_username: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_at: Optional[pulumi.Input[_builtins.int]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_user_access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[_builtins.str] app_type: If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        :param pulumi.Input[_builtins.str] db_username: The username that the user will use to access the sidecar.
        :param pulumi.Input[_builtins.str] email: For human users, their email.
        :param pulumi.Input[_builtins.int] expire_at: When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        :param pulumi.Input[_builtins.str] first_name: For human users, their first name.
        :param pulumi.Input[_builtins.str] last_name: For human users, their last name.
        :param pulumi.Input[_builtins.str] machine_user_access_token: If the user is of type `machine`, this is the access token (database password) of this user.
        :param pulumi.Input[_builtins.str] name: For machine users, the name of the user.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this User cannot be deleted.
        :param pulumi.Input[_builtins.str] type: Either 'human' or 'machine'.
        """
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if db_username is not None:
            pulumi.set(__self__, "db_username", db_username)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire_at is not None:
            pulumi.set(__self__, "expire_at", expire_at)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if machine_user_access_token is not None:
            pulumi.set(__self__, "machine_user_access_token", machine_user_access_token)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if termination_protection is not None:
            pulumi.set(__self__, "termination_protection", termination_protection)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_type", value)

    @_builtins.property
    @pulumi.getter(name="dbUsername")
    def db_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The username that the user will use to access the sidecar.
        """
        return pulumi.get(self, "db_username")

    @db_username.setter
    def db_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_username", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter(name="expireAt")
    def expire_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        """
        return pulumi.get(self, "expire_at")

    @expire_at.setter
    def expire_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expire_at", value)

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their first name.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "first_name", value)

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For human users, their last name.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_name", value)

    @_builtins.property
    @pulumi.getter(name="machineUserAccessToken")
    def machine_user_access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the user is of type `machine`, this is the access token (database password) of this user.
        """
        return pulumi.get(self, "machine_user_access_token")

    @machine_user_access_token.setter
    def machine_user_access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_user_access_token", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        For machine users, the name of the user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, this User cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @termination_protection.setter
    def termination_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "termination_protection", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Either 'human' or 'machine'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("formal:index/user:User")
class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_at: Optional[pulumi.Input[_builtins.int]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        User in Formal.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_type: If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        :param pulumi.Input[_builtins.str] email: For human users, their email.
        :param pulumi.Input[_builtins.int] expire_at: When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        :param pulumi.Input[_builtins.str] first_name: For human users, their first name.
        :param pulumi.Input[_builtins.str] last_name: For human users, their last name.
        :param pulumi.Input[_builtins.str] name: For machine users, the name of the user.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this User cannot be deleted.
        :param pulumi.Input[_builtins.str] type: Either 'human' or 'machine'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        User in Formal.

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_type: Optional[pulumi.Input[_builtins.str]] = None,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_at: Optional[pulumi.Input[_builtins.int]] = None,
                 first_name: Optional[pulumi.Input[_builtins.str]] = None,
                 last_name: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["app_type"] = app_type
            __props__.__dict__["email"] = email
            __props__.__dict__["expire_at"] = expire_at
            __props__.__dict__["first_name"] = first_name
            __props__.__dict__["last_name"] = last_name
            __props__.__dict__["name"] = name
            __props__.__dict__["termination_protection"] = termination_protection
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["db_username"] = None
            __props__.__dict__["machine_user_access_token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["machineUserAccessToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'formal:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_type: Optional[pulumi.Input[_builtins.str]] = None,
            db_username: Optional[pulumi.Input[_builtins.str]] = None,
            email: Optional[pulumi.Input[_builtins.str]] = None,
            expire_at: Optional[pulumi.Input[_builtins.int]] = None,
            first_name: Optional[pulumi.Input[_builtins.str]] = None,
            last_name: Optional[pulumi.Input[_builtins.str]] = None,
            machine_user_access_token: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            termination_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_type: If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        :param pulumi.Input[_builtins.str] db_username: The username that the user will use to access the sidecar.
        :param pulumi.Input[_builtins.str] email: For human users, their email.
        :param pulumi.Input[_builtins.int] expire_at: When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        :param pulumi.Input[_builtins.str] first_name: For human users, their first name.
        :param pulumi.Input[_builtins.str] last_name: For human users, their last name.
        :param pulumi.Input[_builtins.str] machine_user_access_token: If the user is of type `machine`, this is the access token (database password) of this user.
        :param pulumi.Input[_builtins.str] name: For machine users, the name of the user.
        :param pulumi.Input[_builtins.bool] termination_protection: If set to true, this User cannot be deleted.
        :param pulumi.Input[_builtins.str] type: Either 'human' or 'machine'.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["app_type"] = app_type
        __props__.__dict__["db_username"] = db_username
        __props__.__dict__["email"] = email
        __props__.__dict__["expire_at"] = expire_at
        __props__.__dict__["first_name"] = first_name
        __props__.__dict__["last_name"] = last_name
        __props__.__dict__["machine_user_access_token"] = machine_user_access_token
        __props__.__dict__["name"] = name
        __props__.__dict__["termination_protection"] = termination_protection
        __props__.__dict__["type"] = type
        return User(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="dbUsername")
    def db_username(self) -> pulumi.Output[_builtins.str]:
        """
        The username that the user will use to access the sidecar.
        """
        return pulumi.get(self, "db_username")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        For human users, their email.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="expireAt")
    def expire_at(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
        """
        return pulumi.get(self, "expire_at")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        For human users, their first name.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        For human users, their last name.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="machineUserAccessToken")
    def machine_user_access_token(self) -> pulumi.Output[_builtins.str]:
        """
        If the user is of type `machine`, this is the access token (database password) of this user.
        """
        return pulumi.get(self, "machine_user_access_token")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        For machine users, the name of the user.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="terminationProtection")
    def termination_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, this User cannot be deleted.
        """
        return pulumi.get(self, "termination_protection")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Either 'human' or 'machine'.
        """
        return pulumi.get(self, "type")

