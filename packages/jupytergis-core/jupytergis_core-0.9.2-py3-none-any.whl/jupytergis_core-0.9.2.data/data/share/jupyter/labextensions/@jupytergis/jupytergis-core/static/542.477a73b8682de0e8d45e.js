"use strict";(self.webpackChunk_jupytergis_jupytergis_core=self.webpackChunk_jupytergis_jupytergis_core||[]).push([[542],{5542:(e,t,r)=>{r.r(t),r.d(t,{default:()=>a});var n=r(74660);class a extends n.A{constructor(){if(super(),"undefined"==typeof createImageBitmap)throw new Error("Cannot decode WebImage as `createImageBitmap` is not available");if("undefined"==typeof document&&"undefined"==typeof OffscreenCanvas)throw new Error("Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available")}async decode(e,t){const r=new Blob([t]),n=await createImageBitmap(r);let a;"undefined"!=typeof document?(a=document.createElement("canvas"),a.width=n.width,a.height=n.height):a=new OffscreenCanvas(n.width,n.height);const i=a.getContext("2d");return i.drawImage(n,0,0),i.getImageData(0,0,n.width,n.height).data.buffer}}},74660:(e,t,r)=>{function n(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function a(e,t,r){let n=0,a=e.length;const i=a/r;for(;a>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;a-=t}const o=e.slice();for(let t=0;t<i;++t)for(let n=0;n<r;++n)e[r*t+n]=o[(r-n-1)*i+t]}r.d(t,{A:()=>i});class i{async decode(e,t){const r=await this.decodeBlock(t),i=e.Predictor||1;if(1!==i){const t=!e.StripOffsets;return function(e,t,r,i,o,s){if(!t||1===t)return e;for(let e=0;e<o.length;++e){if(o[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(o[e]!==o[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const c=o[0]/8,d=2===s?1:o.length;for(let s=0;s<i&&!(s*d*r*c>=e.byteLength);++s){let i;if(2===t){switch(o[0]){case 8:i=new Uint8Array(e,s*d*r*c,d*r*c);break;case 16:i=new Uint16Array(e,s*d*r*c,d*r*c/2);break;case 32:i=new Uint32Array(e,s*d*r*c,d*r*c/4);break;default:throw new Error(`Predictor 2 not allowed with ${o[0]} bits per sample.`)}n(i,d)}else 3===t&&(i=new Uint8Array(e,s*d*r*c,d*r*c),a(i,d,c))}return e}(r,i,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}}}]);