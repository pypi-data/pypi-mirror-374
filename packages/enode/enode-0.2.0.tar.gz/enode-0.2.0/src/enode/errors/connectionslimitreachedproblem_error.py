"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.errors import EnodeError
from enode.models import (
    connectionslimitreachedproblem_error as models_connectionslimitreachedproblem_error,
)
from enode.types import BaseModel
import httpx
from typing import List, Optional


class ConnectionsLimitReachedProblemErrorData(BaseModel):
    type: str
    r"""A URI reference that identifies the problem type."""

    title: str
    r"""A short, human-readable summary of the problem type."""

    detail: str
    r"""A human-readable explanation specific to this occurrence of the problem."""

    issues: Optional[
        List[
            models_connectionslimitreachedproblem_error.ConnectionsLimitReachedProblemIssue
        ]
    ] = None
    r"""A list of validation issues which ocurred while validating some component of the network payload."""


class ConnectionsLimitReachedProblemError(EnodeError):
    r"""Connections limit reached"""

    data: ConnectionsLimitReachedProblemErrorData

    def __init__(
        self,
        data: ConnectionsLimitReachedProblemErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
