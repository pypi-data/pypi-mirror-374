"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .inverterstatistics import InverterStatistics, InverterStatisticsTypedDict
from .inverterstatisticsresolutionentry import (
    InverterStatisticsResolutionEntry,
    InverterStatisticsResolutionEntryTypedDict,
)
from datetime import datetime
from enode.types import BaseModel
from enode.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetInverterStatisticsRequestTypedDict(TypedDict):
    inverter_id: str
    year: int
    month: int
    day: NotRequired[int]


class GetInverterStatisticsRequest(BaseModel):
    inverter_id: Annotated[
        str,
        pydantic.Field(alias="inverterId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    year: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    month: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    day: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class NotFoundIssueTypedDict(TypedDict):
    pass


class NotFoundIssue(BaseModel):
    pass


class GetInverterStatisticsBadRequestIssueTypedDict(TypedDict):
    pass


class GetInverterStatisticsBadRequestIssue(BaseModel):
    pass


class GetInverterStatisticsResolutionsTypedDict(TypedDict):
    quarter_hour: NotRequired[InverterStatisticsResolutionEntryTypedDict]
    day: NotRequired[InverterStatisticsResolutionEntryTypedDict]


class GetInverterStatisticsResolutions(BaseModel):
    quarter_hour: Annotated[
        Optional[InverterStatisticsResolutionEntry],
        pydantic.Field(alias="QUARTER_HOUR"),
    ] = None

    day: Annotated[
        Optional[InverterStatisticsResolutionEntry], pydantic.Field(alias="DAY")
    ] = None


class GetInverterStatisticsResponseBodyTypedDict(TypedDict):
    r"""Success. Some of the returned data is likely to change in the future. For example, if you request an interval ending in the future. Persist the data, and retry after the specified time. You'll also receive a webhook `user:inverter:statistics-updated` event when the data changes."""

    timezone: str
    r"""The timezone of the inverter."""
    resolutions: GetInverterStatisticsResolutionsTypedDict
    retry_after: datetime
    r"""Wait until this time or later before retrying the request."""


class GetInverterStatisticsResponseBody(BaseModel):
    r"""Success. Some of the returned data is likely to change in the future. For example, if you request an interval ending in the future. Persist the data, and retry after the specified time. You'll also receive a webhook `user:inverter:statistics-updated` event when the data changes."""

    timezone: str
    r"""The timezone of the inverter."""

    resolutions: GetInverterStatisticsResolutions

    retry_after: Annotated[datetime, pydantic.Field(alias="retryAfter")]
    r"""Wait until this time or later before retrying the request."""


GetInverterStatisticsResponseTypedDict = TypeAliasType(
    "GetInverterStatisticsResponseTypedDict",
    Union[InverterStatisticsTypedDict, GetInverterStatisticsResponseBodyTypedDict],
)


GetInverterStatisticsResponse = TypeAliasType(
    "GetInverterStatisticsResponse",
    Union[InverterStatistics, GetInverterStatisticsResponseBody],
)
