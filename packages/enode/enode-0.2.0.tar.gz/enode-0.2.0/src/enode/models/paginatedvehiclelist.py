"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .paginationcursors import PaginationCursors, PaginationCursorsTypedDict
from .vehiclecapabilities import VehicleCapabilities, VehicleCapabilitiesTypedDict
from .vehiclechargestate import VehicleChargeState, VehicleChargeStateTypedDict
from .vehicleinformation import VehicleInformation, VehicleInformationTypedDict
from .vehicleodometer import VehicleOdometer, VehicleOdometerTypedDict
from .vehiclesmartchargingpolicy import (
    VehicleSmartChargingPolicy,
    VehicleSmartChargingPolicyTypedDict,
)
from .vehiclevendor import VehicleVendor
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class PaginatedVehicleListLocationTypedDict(TypedDict):
    r"""Vehicle's GPS coordinates with timestamp"""

    longitude: Nullable[float]
    r"""Longitude in degrees"""
    latitude: Nullable[float]
    r"""Latitude in degrees"""
    last_updated: Nullable[datetime]
    r"""Time of last received location"""
    id: Nullable[str]
    r"""ID of the location the vehicle is currently positioned at (if any)."""


class PaginatedVehicleListLocation(BaseModel):
    r"""Vehicle's GPS coordinates with timestamp"""

    longitude: Nullable[float]
    r"""Longitude in degrees"""

    latitude: Nullable[float]
    r"""Latitude in degrees"""

    last_updated: Annotated[Nullable[datetime], pydantic.Field(alias="lastUpdated")]
    r"""Time of last received location"""

    id: Nullable[str]
    r"""ID of the location the vehicle is currently positioned at (if any)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["longitude", "latitude", "lastUpdated", "id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PaginatedVehicleListDataTypedDict(TypedDict):
    id: str
    r"""Vehicle ID"""
    user_id: str
    r"""The ID of the user that linked this vehicle."""
    vendor: VehicleVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""
    last_seen: datetime
    r"""The last time Enode received live data or when the vehicle was initially linked."""
    is_reachable: Nullable[bool]
    r"""Indicates whether Enode can currently access live data from the vehicle. If the vehicle is not reachable, data updates will be delayed."""
    information: VehicleInformationTypedDict
    r"""Descriptive information about the Vehicle."""
    charge_state: VehicleChargeStateTypedDict
    r"""Latest information about the electric or hybrid battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""
    smart_charging_policy: VehicleSmartChargingPolicyTypedDict
    r"""[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via [Update Vehicle Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy)."""
    odometer: VehicleOdometerTypedDict
    r"""Vehicle's odometer reading in kilometers with timestamp"""
    capabilities: VehicleCapabilitiesTypedDict
    r"""A collection of descriptors that describe the capabilities of this specific vehicle"""
    scopes: List[str]
    r"""Scopes that the user has granted for this vehicle."""
    location: PaginatedVehicleListLocationTypedDict
    r"""Vehicle's GPS coordinates with timestamp"""


class PaginatedVehicleListData(BaseModel):
    id: str
    r"""Vehicle ID"""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that linked this vehicle."""

    vendor: VehicleVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""

    last_seen: Annotated[datetime, pydantic.Field(alias="lastSeen")]
    r"""The last time Enode received live data or when the vehicle was initially linked."""

    is_reachable: Annotated[Nullable[bool], pydantic.Field(alias="isReachable")]
    r"""Indicates whether Enode can currently access live data from the vehicle. If the vehicle is not reachable, data updates will be delayed."""

    information: VehicleInformation
    r"""Descriptive information about the Vehicle."""

    charge_state: Annotated[VehicleChargeState, pydantic.Field(alias="chargeState")]
    r"""Latest information about the electric or hybrid battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    smart_charging_policy: Annotated[
        VehicleSmartChargingPolicy, pydantic.Field(alias="smartChargingPolicy")
    ]
    r"""[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via [Update Vehicle Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy)."""

    odometer: VehicleOdometer
    r"""Vehicle's odometer reading in kilometers with timestamp"""

    capabilities: VehicleCapabilities
    r"""A collection of descriptors that describe the capabilities of this specific vehicle"""

    scopes: List[str]
    r"""Scopes that the user has granted for this vehicle."""

    location: PaginatedVehicleListLocation
    r"""Vehicle's GPS coordinates with timestamp"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["isReachable"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PaginatedVehicleListTypedDict(TypedDict):
    data: List[PaginatedVehicleListDataTypedDict]
    pagination: PaginationCursorsTypedDict
    r"""Cursors to the pages before and after current page. See the [Pagination](/api/reference#pagination) section for reference."""


class PaginatedVehicleList(BaseModel):
    data: List[PaginatedVehicleListData]

    pagination: PaginationCursors
    r"""Cursors to the pages before and after current page. See the [Pagination](/api/reference#pagination) section for reference."""
