"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel
from enode.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetChargingStatisticsType(str, Enum):
    r"""The device types for which statistics can be obtained."""

    CHARGER = "charger"
    VEHICLE = "vehicle"
    HVAC = "hvac"


class GetChargingStatisticsResolution(str, Enum):
    r"""The unit of time the data will be bucketed into. Each entry in the response array corresponds to aggregated data of the time range specified."""

    QUARTER_HOUR = "QUARTER_HOUR"
    HALF_HOUR = "HALF_HOUR"
    HOUR = "HOUR"
    DAY = "DAY"
    WEEK = "WEEK"
    MONTH = "MONTH"
    YEAR = "YEAR"


class GetChargingStatisticsRequestTypedDict(TypedDict):
    user_id: str
    start_date: datetime
    type: GetChargingStatisticsType
    r"""The device types for which statistics can be obtained."""
    end_date: NotRequired[datetime]
    location_id: NotRequired[str]
    id: NotRequired[str]
    utc_offset: NotRequired[str]
    resolution: NotRequired[GetChargingStatisticsResolution]
    r"""The unit of time the data will be bucketed into. Each entry in the response array corresponds to aggregated data of the time range specified."""


class GetChargingStatisticsRequest(BaseModel):
    user_id: Annotated[
        str,
        pydantic.Field(alias="userId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    start_date: Annotated[
        datetime,
        pydantic.Field(alias="startDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    type: Annotated[
        GetChargingStatisticsType,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The device types for which statistics can be obtained."""

    end_date: Annotated[
        Optional[datetime],
        pydantic.Field(alias="endDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    location_id: Annotated[
        Optional[str],
        pydantic.Field(alias="locationId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    utc_offset: Annotated[
        Optional[str],
        pydantic.Field(alias="utcOffset"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    resolution: Annotated[
        Optional[GetChargingStatisticsResolution],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GetChargingStatisticsResolution.DAY
    r"""The unit of time the data will be bucketed into. Each entry in the response array corresponds to aggregated data of the time range specified."""
