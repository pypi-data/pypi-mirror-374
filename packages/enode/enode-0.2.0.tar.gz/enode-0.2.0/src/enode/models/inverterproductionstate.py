"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class InverterProductionStateTypedDict(TypedDict):
    r"""Latest information about solar production. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    production_rate: Nullable[float]
    r"""The current production rate in kW."""
    is_producing: Nullable[bool]
    r"""Whether the solar inverter is actively producing energy or not."""
    total_lifetime_production: Nullable[float]
    r"""The total lifetime production in kWh."""
    last_updated: Nullable[datetime]
    r"""Time of last received production state update"""


class InverterProductionState(BaseModel):
    r"""Latest information about solar production. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    production_rate: Annotated[Nullable[float], pydantic.Field(alias="productionRate")]
    r"""The current production rate in kW."""

    is_producing: Annotated[Nullable[bool], pydantic.Field(alias="isProducing")]
    r"""Whether the solar inverter is actively producing energy or not."""

    total_lifetime_production: Annotated[
        Nullable[float], pydantic.Field(alias="totalLifetimeProduction")
    ]
    r"""The total lifetime production in kWh."""

    last_updated: Annotated[Nullable[datetime], pydantic.Field(alias="lastUpdated")]
    r"""Time of last received production state update"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "productionRate",
            "isProducing",
            "totalLifetimeProduction",
            "lastUpdated",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
