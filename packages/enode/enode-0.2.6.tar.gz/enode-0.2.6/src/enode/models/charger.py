"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chargercapabilities import ChargerCapabilities, ChargerCapabilitiesTypedDict
from .chargerchargestate import ChargerChargeState, ChargerChargeStateTypedDict
from .chargerinformation import ChargerInformation, ChargerInformationTypedDict
from .chargervendor import ChargerVendor
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class ChargerLocationTypedDict(TypedDict):
    id: Nullable[str]
    r"""ID of the location the charger is currently positioned at (if any)."""
    last_updated: Nullable[datetime]
    r"""Time of last received location state update"""


class ChargerLocation(BaseModel):
    id: Nullable[str]
    r"""ID of the location the charger is currently positioned at (if any)."""

    last_updated: Annotated[Nullable[datetime], pydantic.Field(alias="lastUpdated")]
    r"""Time of last received location state update"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["id", "lastUpdated"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ChargerTypedDict(TypedDict):
    id: str
    r"""Charger ID"""
    user_id: str
    r"""The ID of the user that linked this charger."""
    vendor: ChargerVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""
    last_seen: datetime
    r"""The last time Enode communicated with the charger."""
    is_reachable: bool
    r"""Indicates whether Enode can currently access live data from the charger. If the charger is not reachable, data updates will be delayed."""
    charge_state: ChargerChargeStateTypedDict
    r"""Latest information about the charger. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""
    capabilities: ChargerCapabilitiesTypedDict
    r"""A collection of descriptors that describe the capabilities of this specific charger"""
    scopes: List[str]
    r"""Scopes that the user has granted for this charger."""
    information: ChargerInformationTypedDict
    r"""Descriptive information about the Charger"""
    location: ChargerLocationTypedDict


class Charger(BaseModel):
    id: str
    r"""Charger ID"""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that linked this charger."""

    vendor: ChargerVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""

    last_seen: Annotated[datetime, pydantic.Field(alias="lastSeen")]
    r"""The last time Enode communicated with the charger."""

    is_reachable: Annotated[bool, pydantic.Field(alias="isReachable")]
    r"""Indicates whether Enode can currently access live data from the charger. If the charger is not reachable, data updates will be delayed."""

    charge_state: Annotated[ChargerChargeState, pydantic.Field(alias="chargeState")]
    r"""Latest information about the charger. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    capabilities: ChargerCapabilities
    r"""A collection of descriptors that describe the capabilities of this specific charger"""

    scopes: List[str]
    r"""Scopes that the user has granted for this charger."""

    information: ChargerInformation
    r"""Descriptive information about the Charger"""

    location: ChargerLocation
