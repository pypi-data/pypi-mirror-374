"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class ChargerInformationTypedDict(TypedDict):
    r"""Descriptive information about the Charger"""

    brand: str
    r"""A formatted and properly cased OEM brand name, suitable for reading by humans. May contain special characters."""
    model: str
    r"""Charger model"""
    year: Nullable[float]
    r"""Charger production year"""
    serial_number: str
    r"""Charger serial number. Most chargers have this, but some do not expose it. When missing we default to a vendor provided ID, which may be visible to the end user in their app."""


class ChargerInformation(BaseModel):
    r"""Descriptive information about the Charger"""

    brand: str
    r"""A formatted and properly cased OEM brand name, suitable for reading by humans. May contain special characters."""

    model: str
    r"""Charger model"""

    year: Nullable[float]
    r"""Charger production year"""

    serial_number: Annotated[str, pydantic.Field(alias="serialNumber")]
    r"""Charger serial number. Most chargers have this, but some do not expose it. When missing we default to a vendor provided ID, which may be visible to the end user in their app."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["year"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
