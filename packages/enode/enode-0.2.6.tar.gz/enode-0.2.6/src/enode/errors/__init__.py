"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .enodeerror import EnodeError
from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .cancelbatteryactionop import BatteryError, BatteryErrorData
    from .chargeaction_error import ChargeActionError, ChargeActionErrorData
    from .chargeraction import ChargerAction, ChargerActionUnion
    from .connectionslimitreachedproblem_error import (
        ConnectionsLimitReachedProblemError,
        ConnectionsLimitReachedProblemErrorData,
    )
    from .enodedefaulterror import EnodeDefaultError
    from .getinverterstatisticsop import (
        GetInverterStatisticsBadRequestError,
        GetInverterStatisticsBadRequestErrorData,
        NotFoundError,
        NotFoundErrorData,
    )
    from .hvacaction import HvacAction, HvacActionUnion
    from .hvacactionfollowschedule_error import (
        HvacActionFollowScheduleError,
        HvacActionFollowScheduleErrorData,
    )
    from .hvacactionpermanenthold_error import (
        HvacActionPermanentHoldError,
        HvacActionPermanentHoldErrorData,
    )
    from .maxcurrentaction_error import MaxCurrentActionError, MaxCurrentActionErrorData
    from .no_response_error import NoResponseError
    from .problem_error import ProblemError, ProblemErrorData
    from .responsevalidationerror import ResponseValidationError
    from .updatevehiclesmartchargingpolicyop import (
        UpdateVehicleSmartChargingPolicyBadRequestError,
        UpdateVehicleSmartChargingPolicyBadRequestErrorData,
    )
    from .webhooknotfoundproblem_error import (
        WebhookNotFoundProblemError,
        WebhookNotFoundProblemErrorData,
    )
    from .webhooknotvalidproblem_error import (
        WebhookNotValidProblemError,
        WebhookNotValidProblemErrorData,
    )

__all__ = [
    "BatteryError",
    "BatteryErrorData",
    "ChargeActionError",
    "ChargeActionErrorData",
    "ChargerAction",
    "ChargerActionUnion",
    "ConnectionsLimitReachedProblemError",
    "ConnectionsLimitReachedProblemErrorData",
    "EnodeDefaultError",
    "EnodeError",
    "GetInverterStatisticsBadRequestError",
    "GetInverterStatisticsBadRequestErrorData",
    "HvacAction",
    "HvacActionFollowScheduleError",
    "HvacActionFollowScheduleErrorData",
    "HvacActionPermanentHoldError",
    "HvacActionPermanentHoldErrorData",
    "HvacActionUnion",
    "MaxCurrentActionError",
    "MaxCurrentActionErrorData",
    "NoResponseError",
    "NotFoundError",
    "NotFoundErrorData",
    "ProblemError",
    "ProblemErrorData",
    "ResponseValidationError",
    "UpdateVehicleSmartChargingPolicyBadRequestError",
    "UpdateVehicleSmartChargingPolicyBadRequestErrorData",
    "WebhookNotFoundProblemError",
    "WebhookNotFoundProblemErrorData",
    "WebhookNotValidProblemError",
    "WebhookNotValidProblemErrorData",
]

_dynamic_imports: dict[str, str] = {
    "BatteryError": ".cancelbatteryactionop",
    "BatteryErrorData": ".cancelbatteryactionop",
    "ChargeActionError": ".chargeaction_error",
    "ChargeActionErrorData": ".chargeaction_error",
    "ChargerAction": ".chargeraction",
    "ChargerActionUnion": ".chargeraction",
    "ConnectionsLimitReachedProblemError": ".connectionslimitreachedproblem_error",
    "ConnectionsLimitReachedProblemErrorData": ".connectionslimitreachedproblem_error",
    "EnodeDefaultError": ".enodedefaulterror",
    "GetInverterStatisticsBadRequestError": ".getinverterstatisticsop",
    "GetInverterStatisticsBadRequestErrorData": ".getinverterstatisticsop",
    "NotFoundError": ".getinverterstatisticsop",
    "NotFoundErrorData": ".getinverterstatisticsop",
    "HvacAction": ".hvacaction",
    "HvacActionUnion": ".hvacaction",
    "HvacActionFollowScheduleError": ".hvacactionfollowschedule_error",
    "HvacActionFollowScheduleErrorData": ".hvacactionfollowschedule_error",
    "HvacActionPermanentHoldError": ".hvacactionpermanenthold_error",
    "HvacActionPermanentHoldErrorData": ".hvacactionpermanenthold_error",
    "MaxCurrentActionError": ".maxcurrentaction_error",
    "MaxCurrentActionErrorData": ".maxcurrentaction_error",
    "NoResponseError": ".no_response_error",
    "ProblemError": ".problem_error",
    "ProblemErrorData": ".problem_error",
    "ResponseValidationError": ".responsevalidationerror",
    "UpdateVehicleSmartChargingPolicyBadRequestError": ".updatevehiclesmartchargingpolicyop",
    "UpdateVehicleSmartChargingPolicyBadRequestErrorData": ".updatevehiclesmartchargingpolicyop",
    "WebhookNotFoundProblemError": ".webhooknotfoundproblem_error",
    "WebhookNotFoundProblemErrorData": ".webhooknotfoundproblem_error",
    "WebhookNotValidProblemError": ".webhooknotvalidproblem_error",
    "WebhookNotValidProblemErrorData": ".webhooknotvalidproblem_error",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
