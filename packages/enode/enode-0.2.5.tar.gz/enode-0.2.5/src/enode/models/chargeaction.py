"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actionstate import ActionState
from .chargeablevendortype import ChargeableVendorType
from .chargingaction import ChargingAction
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class ChargeActionType(str, Enum):
    r"""A machine-readable high level error category.

    * `NO_RESPONSE`: The chargeable device did not react to our charge commands within the action's timeout window.
    * `FAILED_PRECONDITION`: The chargeable device did not meet all required preconditions for this action to be executed during the action's timeout window.
    * `UNNECESSARY`: The action was not carried out given that the device was already in the desired state.
    * `CONFLICT`: A newer action for this chargeable has been created. This action is now abandoned.
    * `REQUESTED_CANCELLATION`: This action was cancelled by request of the controlling owner. The controlling owner may refer to another Enode entity which initiated the command, such as a schedule or smart override.
    * `NOT_FOUND`: The chargeable was deleted while the action was `PENDING`.

    """

    NO_RESPONSE = "NO_RESPONSE"
    FAILED_PRECONDITION = "FAILED_PRECONDITION"
    CONFLICT = "CONFLICT"
    NOT_FOUND = "NOT_FOUND"
    UNNECESSARY = "UNNECESSARY"
    REQUESTED_CANCELLATION = "REQUESTED_CANCELLATION"


class ChargeActionFailureReasonTypedDict(TypedDict):
    r"""Information about why was this action not executed successfully."""

    type: ChargeActionType
    r"""A machine-readable high level error category.

    * `NO_RESPONSE`: The chargeable device did not react to our charge commands within the action's timeout window.
    * `FAILED_PRECONDITION`: The chargeable device did not meet all required preconditions for this action to be executed during the action's timeout window.
    * `UNNECESSARY`: The action was not carried out given that the device was already in the desired state.
    * `CONFLICT`: A newer action for this chargeable has been created. This action is now abandoned.
    * `REQUESTED_CANCELLATION`: This action was cancelled by request of the controlling owner. The controlling owner may refer to another Enode entity which initiated the command, such as a schedule or smart override.
    * `NOT_FOUND`: The chargeable was deleted while the action was `PENDING`.

    """
    detail: str
    r"""A human-readable explanation of why the charging action was unsuccessful."""


class ChargeActionFailureReason(BaseModel):
    r"""Information about why was this action not executed successfully."""

    type: ChargeActionType
    r"""A machine-readable high level error category.

    * `NO_RESPONSE`: The chargeable device did not react to our charge commands within the action's timeout window.
    * `FAILED_PRECONDITION`: The chargeable device did not meet all required preconditions for this action to be executed during the action's timeout window.
    * `UNNECESSARY`: The action was not carried out given that the device was already in the desired state.
    * `CONFLICT`: A newer action for this chargeable has been created. This action is now abandoned.
    * `REQUESTED_CANCELLATION`: This action was cancelled by request of the controlling owner. The controlling owner may refer to another Enode entity which initiated the command, such as a schedule or smart override.
    * `NOT_FOUND`: The chargeable was deleted while the action was `PENDING`.

    """

    detail: str
    r"""A human-readable explanation of why the charging action was unsuccessful."""


class ChargeActionTypedDict(TypedDict):
    id: str
    r"""The ID of the action."""
    user_id: str
    r"""The ID of the user that owns the target of this action."""
    created_at: datetime
    r"""Time when this action was created"""
    updated_at: datetime
    r"""Time when this action was last updated"""
    completed_at: Nullable[datetime]
    r"""Time when the action transitioned to a non-pending state."""
    state: ActionState
    r"""The real-time status of an action executed on a target.

    * `PENDING`: The initial state. Enode is actively sending commands and monitoring the target for changes.
    * `CONFIRMED`: Successful transition of the target to the desired state.
    * `FAILED`: The target did not respond to the action before timing out. Enode has ceased sending additional commands.
    * `CANCELLED`: A required precondition was not met during the action's timeout window or another action has been sent to the target, overriding this one.
    """
    target_id: str
    r"""ID of the target which this action is controlling."""
    target_type: ChargeableVendorType
    kind: ChargingAction
    failure_reason: Nullable[ChargeActionFailureReasonTypedDict]


class ChargeAction(BaseModel):
    id: str
    r"""The ID of the action."""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that owns the target of this action."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Time when this action was created"""

    updated_at: Annotated[datetime, pydantic.Field(alias="updatedAt")]
    r"""Time when this action was last updated"""

    completed_at: Annotated[Nullable[datetime], pydantic.Field(alias="completedAt")]
    r"""Time when the action transitioned to a non-pending state."""

    state: ActionState
    r"""The real-time status of an action executed on a target.

    * `PENDING`: The initial state. Enode is actively sending commands and monitoring the target for changes.
    * `CONFIRMED`: Successful transition of the target to the desired state.
    * `FAILED`: The target did not respond to the action before timing out. Enode has ceased sending additional commands.
    * `CANCELLED`: A required precondition was not met during the action's timeout window or another action has been sent to the target, overriding this one.
    """

    target_id: Annotated[str, pydantic.Field(alias="targetId")]
    r"""ID of the target which this action is controlling."""

    target_type: Annotated[ChargeableVendorType, pydantic.Field(alias="targetType")]

    kind: ChargingAction

    failure_reason: Annotated[
        Nullable[ChargeActionFailureReason], pydantic.Field(alias="failureReason")
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["completedAt", "failureReason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
