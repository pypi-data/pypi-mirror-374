"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class BatteryChargeStateStatus(str, Enum):
    r"""The power delivery state of the battery."""

    CHARGING = "CHARGING"
    DISCHARGING = "DISCHARGING"
    IDLE = "IDLE"
    FAULT = "FAULT"
    UNKNOWN = "UNKNOWN"


class BatteryChargeStateTypedDict(TypedDict):
    r"""Latest information about the battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    status: Nullable[BatteryChargeStateStatus]
    r"""The power delivery state of the battery."""
    battery_capacity: Nullable[float]
    r"""Battery capacity in kWh."""
    battery_level: Nullable[float]
    r"""Remaining battery charge level in percent."""
    charge_rate: Nullable[float]
    r"""The current charge rate in kW. A positive value indicates that the battery is charging."""
    discharge_limit: Nullable[float]
    r"""Minimum charge level for a battery, expressed as a percentage. Batteries will not discharge below this user-set reserve level except in emergency power situations."""
    last_updated: Nullable[datetime]
    r"""Time of last received charge state update"""


class BatteryChargeState(BaseModel):
    r"""Latest information about the battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    status: Nullable[BatteryChargeStateStatus]
    r"""The power delivery state of the battery."""

    battery_capacity: Annotated[
        Nullable[float], pydantic.Field(alias="batteryCapacity")
    ]
    r"""Battery capacity in kWh."""

    battery_level: Annotated[Nullable[float], pydantic.Field(alias="batteryLevel")]
    r"""Remaining battery charge level in percent."""

    charge_rate: Annotated[Nullable[float], pydantic.Field(alias="chargeRate")]
    r"""The current charge rate in kW. A positive value indicates that the battery is charging."""

    discharge_limit: Annotated[Nullable[float], pydantic.Field(alias="dischargeLimit")]
    r"""Minimum charge level for a battery, expressed as a percentage. Batteries will not discharge below this user-set reserve level except in emergency power situations."""

    last_updated: Annotated[Nullable[datetime], pydantic.Field(alias="lastUpdated")]
    r"""Time of last received charge state update"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "status",
            "batteryCapacity",
            "batteryLevel",
            "chargeRate",
            "dischargeLimit",
            "lastUpdated",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
