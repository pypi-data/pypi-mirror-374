"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .aggregates import Aggregates, AggregatesTypedDict
from .nullableaggregates import NullableAggregates, NullableAggregatesTypedDict
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class SessionsStatisticsTimeseriesTypedDict(TypedDict):
    kw: AggregatesTypedDict
    kwh_sum: float
    r"""Total power consumption in kWh for the session"""
    price: AggregatesTypedDict
    cost_sum: float
    r"""Total cost for the consumed kWh for this session"""
    id: str
    r"""ID of the asset for this session."""
    location_id: Nullable[str]
    r"""Location ID for this session."""
    from_: datetime
    r"""Start time of the session."""
    to: datetime
    r"""End time of the session."""
    non_smart_price: NullableAggregatesTypedDict
    estimated_savings: Nullable[float]
    r"""Total estimated savings achieved by Smart Charging for this session. If null, no part of this session was impacted by Smart Charging. This is expressed in NOK unless different price data has been provided via the Tariffs endpoints"""


class SessionsStatisticsTimeseries(BaseModel):
    kw: Aggregates

    kwh_sum: Annotated[float, pydantic.Field(alias="kwhSum")]
    r"""Total power consumption in kWh for the session"""

    price: Aggregates

    cost_sum: Annotated[float, pydantic.Field(alias="costSum")]
    r"""Total cost for the consumed kWh for this session"""

    id: str
    r"""ID of the asset for this session."""

    location_id: Annotated[Nullable[str], pydantic.Field(alias="locationId")]
    r"""Location ID for this session."""

    from_: Annotated[datetime, pydantic.Field(alias="from")]
    r"""Start time of the session."""

    to: datetime
    r"""End time of the session."""

    non_smart_price: Annotated[
        NullableAggregates, pydantic.Field(alias="nonSmartPrice")
    ]

    estimated_savings: Annotated[
        Nullable[float], pydantic.Field(alias="estimatedSavings")
    ]
    r"""Total estimated savings achieved by Smart Charging for this session. If null, no part of this session was impacted by Smart Charging. This is expressed in NOK unless different price data has been provided via the Tariffs endpoints"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["locationId", "estimatedSavings"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
