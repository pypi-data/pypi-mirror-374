"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
from pydantic import model_serializer
from typing import List
from typing_extensions import TypedDict


class TestFirehoseWebhookStatus(str, Enum):
    r"""Indicates if the test webhook event was delivered successfully to your configured webhook endpoint."""

    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"


class ResponseTypedDict(TypedDict):
    r"""Null if status is `FAILED`."""

    code: float
    r"""Status code returned by your configured webhook endpoint"""
    body: str
    r"""Body returned by your configured webhook endpoint"""
    headers: Nullable[List[str]]
    r"""Headers returned by your configured webhook endpoint"""


class Response(BaseModel):
    r"""Null if status is `FAILED`."""

    code: float
    r"""Status code returned by your configured webhook endpoint"""

    body: str
    r"""Body returned by your configured webhook endpoint"""

    headers: Nullable[List[str]]
    r"""Headers returned by your configured webhook endpoint"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["headers"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TestFirehoseWebhookTypedDict(TypedDict):
    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    status: TestFirehoseWebhookStatus
    r"""Indicates if the test webhook event was delivered successfully to your configured webhook endpoint."""
    description: str
    r"""Human readable description of the test outcome."""
    response: Nullable[ResponseTypedDict]
    r"""Null if status is `FAILED`."""


class TestFirehoseWebhook(BaseModel):
    __test__ = False

    status: TestFirehoseWebhookStatus
    r"""Indicates if the test webhook event was delivered successfully to your configured webhook endpoint."""

    description: str
    r"""Human readable description of the test outcome."""

    response: Nullable[Response]
    r"""Null if status is `FAILED`."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["response"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
