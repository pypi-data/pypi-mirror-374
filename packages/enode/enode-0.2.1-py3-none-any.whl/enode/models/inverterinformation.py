"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class InverterInformationTypedDict(TypedDict):
    r"""Descriptive information about the solar inverter"""

    id: str
    r"""Solar inverter vendor ID"""
    sn: Nullable[str]
    r"""Solar inverter serial number"""
    brand: str
    r"""A formatted and properly cased OEM brand name, suitable for reading by humans. May contain special characters."""
    model: str
    r"""Solar inverter model"""
    site_name: str
    r"""Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names."""
    installation_date: datetime
    r"""Solar inverter installation date"""


class InverterInformation(BaseModel):
    r"""Descriptive information about the solar inverter"""

    id: str
    r"""Solar inverter vendor ID"""

    sn: Nullable[str]
    r"""Solar inverter serial number"""

    brand: str
    r"""A formatted and properly cased OEM brand name, suitable for reading by humans. May contain special characters."""

    model: str
    r"""Solar inverter model"""

    site_name: Annotated[str, pydantic.Field(alias="siteName")]
    r"""Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names."""

    installation_date: Annotated[datetime, pydantic.Field(alias="installationDate")]
    r"""Solar inverter installation date"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["sn"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
