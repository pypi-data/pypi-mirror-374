"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .metercapabilities import MeterCapabilities, MeterCapabilitiesTypedDict
from .meterenergystate import MeterEnergyState, MeterEnergyStateTypedDict
from .meterinformation import MeterInformation, MeterInformationTypedDict
from .meterlocation import MeterLocation, MeterLocationTypedDict
from .metervendor import MeterVendor
from datetime import datetime
from enode.types import BaseModel
import pydantic
from typing import List
from typing_extensions import Annotated, TypedDict


class MeterTypedDict(TypedDict):
    id: str
    r"""Unique identifier for the meter object"""
    user_id: str
    r"""The ID of the user that linked this meter."""
    vendor: MeterVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""
    last_seen: datetime
    r"""The last time Enode successfully communicated with the vendor or when the meter was initially linked."""
    is_reachable: bool
    r"""Indicates whether Enode can currently access live data from the meter. If the meter is not reachable, data updates will be delayed."""
    information: MeterInformationTypedDict
    r"""Descriptive information about the meter"""
    energy_state: MeterEnergyStateTypedDict
    r"""Latest information about meter load. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""
    location: MeterLocationTypedDict
    r"""Meter's GPS coordinates"""
    capabilities: MeterCapabilitiesTypedDict
    r"""The specific meter's capabilities for recording energy consumption and production data."""
    scopes: List[str]
    r"""Scopes that the user has granted for this meter."""


class Meter(BaseModel):
    id: str
    r"""Unique identifier for the meter object"""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that linked this meter."""

    vendor: MeterVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""

    last_seen: Annotated[datetime, pydantic.Field(alias="lastSeen")]
    r"""The last time Enode successfully communicated with the vendor or when the meter was initially linked."""

    is_reachable: Annotated[bool, pydantic.Field(alias="isReachable")]
    r"""Indicates whether Enode can currently access live data from the meter. If the meter is not reachable, data updates will be delayed."""

    information: MeterInformation
    r"""Descriptive information about the meter"""

    energy_state: Annotated[MeterEnergyState, pydantic.Field(alias="energyState")]
    r"""Latest information about meter load. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    location: MeterLocation
    r"""Meter's GPS coordinates"""

    capabilities: MeterCapabilities
    r"""The specific meter's capabilities for recording energy consumption and production data."""

    scopes: List[str]
    r"""Scopes that the user has granted for this meter."""
