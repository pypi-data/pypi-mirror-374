"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class Unit(str, Enum):
    r"""The unit of measurement for power production data. Always kWh."""

    K_WH = "kWh"


class InverterStatisticsResolutionEntryDataTypedDict(TypedDict):
    date_: datetime
    r"""Time bucket start as a RFC3339 timestamp. Offset may be Z or ±hh:mm. In the unlikely event that an inverter changes timezone, the offset from when the data was retrieved is used, not the inverter's current timezone."""
    value: Nullable[float]
    r"""The energy produced (kWh) in the specified interval. Null if no data is available."""


class InverterStatisticsResolutionEntryData(BaseModel):
    date_: Annotated[datetime, pydantic.Field(alias="date")]
    r"""Time bucket start as a RFC3339 timestamp. Offset may be Z or ±hh:mm. In the unlikely event that an inverter changes timezone, the offset from when the data was retrieved is used, not the inverter's current timezone."""

    value: Nullable[float]
    r"""The energy produced (kWh) in the specified interval. Null if no data is available."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class InverterStatisticsResolutionEntryTypedDict(TypedDict):
    unit: Unit
    r"""The unit of measurement for power production data. Always kWh."""
    data: Nullable[List[InverterStatisticsResolutionEntryDataTypedDict]]
    r"""An array of data points representing the power production statistics."""


class InverterStatisticsResolutionEntry(BaseModel):
    unit: Unit
    r"""The unit of measurement for power production data. Always kWh."""

    data: Nullable[List[InverterStatisticsResolutionEntryData]]
    r"""An array of data points representing the power production statistics."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["data"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
