"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .batteryvendor import BatteryVendor
from .chargervendor import ChargerVendor
from .hvacvendor import HvacVendor
from .invertervendor import InverterVendor
from .metervendor import MeterVendor
from .vehiclevendor import VehicleVendor
from .vendortype import VendorType
from enode.types import BaseModel
import pydantic
from typing import List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


UserResponseVendorTypedDict = TypeAliasType(
    "UserResponseVendorTypedDict",
    Union[
        InverterVendor,
        VehicleVendor,
        HvacVendor,
        ChargerVendor,
        BatteryVendor,
        MeterVendor,
    ],
)
r"""Machine-friendly name of the vendor. Use this in API requests."""


UserResponseVendor = TypeAliasType(
    "UserResponseVendor",
    Union[
        InverterVendor,
        VehicleVendor,
        HvacVendor,
        ChargerVendor,
        BatteryVendor,
        MeterVendor,
    ],
)
r"""Machine-friendly name of the vendor. Use this in API requests."""


class LinkedVendorTypedDict(TypedDict):
    vendor: UserResponseVendorTypedDict
    r"""Machine-friendly name of the vendor. Use this in API requests."""
    vendor_type: VendorType
    is_valid: bool
    r"""Whether the provided credentials are currently valid. A `false` value here indicates that a credential has become invalidated, and [Link User](/api/reference#postUsersUseridLink) should be used to get new credentials from this user."""


class LinkedVendor(BaseModel):
    vendor: UserResponseVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""

    vendor_type: Annotated[VendorType, pydantic.Field(alias="vendorType")]

    is_valid: Annotated[bool, pydantic.Field(alias="isValid")]
    r"""Whether the provided credentials are currently valid. A `false` value here indicates that a credential has become invalidated, and [Link User](/api/reference#postUsersUseridLink) should be used to get new credentials from this user."""


class UserResponseTypedDict(TypedDict):
    id: str
    r"""The user's ID."""
    linked_vendors: List[LinkedVendorTypedDict]


class UserResponse(BaseModel):
    id: str
    r"""The user's ID."""

    linked_vendors: Annotated[List[LinkedVendor], pydantic.Field(alias="linkedVendors")]
