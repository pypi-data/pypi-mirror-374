"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from enode import errors, models, utils
from enode._hooks import HookContext
from enode.types import OptionalNullable, UNSET
from enode.utils import get_security_from_env
from enode.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional


class Statistics(BaseSDK):
    r"""Endpoints returning timeseries data collected from linked devices."""

    def get_charging_sessions(
        self,
        *,
        user_id: str,
        start_date: datetime,
        type_: models.GetChargingSessionsStatisticsType,
        end_date: Optional[datetime] = None,
        location_id: Optional[str] = None,
        id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.SessionsStatisticsTimeseries]:
        r"""Get User Statistics on Charging Sessions

        Returns statistics about power consumption and price, binned by sessions for a single user and device, at a location. A session is defined by consecutive readings from the device showing consumption. It can typically take up to 15 minutes between a session ending in reality, and being reflected by this endpoint.

        Only include sessions intersecting with `[startDate, endDate]`.


        :param user_id:
        :param start_date:
        :param type: The device types for which statistics can be obtained.
        :param end_date:
        :param location_id:
        :param id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChargingSessionsStatisticsRequest(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date,
            location_id=location_id,
            id=id,
            type=type_,
        )

        req = self._build_request(
            method="GET",
            path="/users/{userId}/statistics/charging/sessions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getChargingSessionsStatistics",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.SessionsStatisticsTimeseries], http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(errors.ProblemErrorData, http_res)
            raise errors.ProblemError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.EnodeDefaultError("Unexpected response received", http_res)

    async def get_charging_sessions_async(
        self,
        *,
        user_id: str,
        start_date: datetime,
        type_: models.GetChargingSessionsStatisticsType,
        end_date: Optional[datetime] = None,
        location_id: Optional[str] = None,
        id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.SessionsStatisticsTimeseries]:
        r"""Get User Statistics on Charging Sessions

        Returns statistics about power consumption and price, binned by sessions for a single user and device, at a location. A session is defined by consecutive readings from the device showing consumption. It can typically take up to 15 minutes between a session ending in reality, and being reflected by this endpoint.

        Only include sessions intersecting with `[startDate, endDate]`.


        :param user_id:
        :param start_date:
        :param type: The device types for which statistics can be obtained.
        :param end_date:
        :param location_id:
        :param id:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChargingSessionsStatisticsRequest(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date,
            location_id=location_id,
            id=id,
            type=type_,
        )

        req = self._build_request_async(
            method="GET",
            path="/users/{userId}/statistics/charging/sessions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getChargingSessionsStatistics",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.SessionsStatisticsTimeseries], http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(errors.ProblemErrorData, http_res)
            raise errors.ProblemError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.EnodeDefaultError("Unexpected response received", http_res)

    def get_charging(
        self,
        *,
        user_id: str,
        start_date: datetime,
        type_: models.GetChargingStatisticsType,
        end_date: Optional[datetime] = None,
        location_id: Optional[str] = None,
        id: Optional[str] = None,
        utc_offset: Optional[str] = None,
        resolution: Optional[
            models.GetChargingStatisticsResolution
        ] = models.GetChargingStatisticsResolution.DAY,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.ChargingStatisticsTimeseries]:
        r"""Get User Charging Statistics

        Get statistics about power consumption and price in the form of a time series for a single device.

        If Smart Charging has shifted the consumption, the `nonSmartPrice` fields will show what the consumption would have cost if it had happened at the default time. If Smart Charging has resulted in savings, the value is reported in the `estimatedSavings` field.

        :param user_id:
        :param start_date:
        :param type: The device types for which statistics can be obtained.
        :param end_date:
        :param location_id:
        :param id:
        :param utc_offset:
        :param resolution: The unit of time the data will be bucketed into. Each entry in the response array corresponds to aggregated data of the time range specified.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChargingStatisticsRequest(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date,
            location_id=location_id,
            id=id,
            type=type_,
            utc_offset=utc_offset,
            resolution=resolution,
        )

        req = self._build_request(
            method="GET",
            path="/users/{userId}/statistics/charging",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getChargingStatistics",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.ChargingStatisticsTimeseries], http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(errors.ProblemErrorData, http_res)
            raise errors.ProblemError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.EnodeDefaultError("Unexpected response received", http_res)

    async def get_charging_async(
        self,
        *,
        user_id: str,
        start_date: datetime,
        type_: models.GetChargingStatisticsType,
        end_date: Optional[datetime] = None,
        location_id: Optional[str] = None,
        id: Optional[str] = None,
        utc_offset: Optional[str] = None,
        resolution: Optional[
            models.GetChargingStatisticsResolution
        ] = models.GetChargingStatisticsResolution.DAY,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.ChargingStatisticsTimeseries]:
        r"""Get User Charging Statistics

        Get statistics about power consumption and price in the form of a time series for a single device.

        If Smart Charging has shifted the consumption, the `nonSmartPrice` fields will show what the consumption would have cost if it had happened at the default time. If Smart Charging has resulted in savings, the value is reported in the `estimatedSavings` field.

        :param user_id:
        :param start_date:
        :param type: The device types for which statistics can be obtained.
        :param end_date:
        :param location_id:
        :param id:
        :param utc_offset:
        :param resolution: The unit of time the data will be bucketed into. Each entry in the response array corresponds to aggregated data of the time range specified.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetChargingStatisticsRequest(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date,
            location_id=location_id,
            id=id,
            type=type_,
            utc_offset=utc_offset,
            resolution=resolution,
        )

        req = self._build_request_async(
            method="GET",
            path="/users/{userId}/statistics/charging",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getChargingStatistics",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.ChargingStatisticsTimeseries], http_res
            )
        if utils.match_response(http_res, "404", "application/json"):
            response_data = unmarshal_json_response(errors.ProblemErrorData, http_res)
            raise errors.ProblemError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.EnodeDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.EnodeDefaultError("Unexpected response received", http_res)
