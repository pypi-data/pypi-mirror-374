"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chargeablevendor import ChargeableVendor, ChargeableVendorTypedDict
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enode.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class VehicleCreateSmartOverrideRequestTypedDict(TypedDict):
    vehicle_id: str


class VehicleCreateSmartOverrideRequest(BaseModel):
    vehicle_id: Annotated[
        str,
        pydantic.Field(alias="vehicleId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class VehicleCreateSmartOverrideTargetType(str, Enum):
    VEHICLE = "vehicle"
    CHARGER = "charger"


class VehicleCreateSmartOverrideResponseTypedDict(TypedDict):
    r"""This field populates after using Vehicle [Create Smart Override](/api/reference#vehicleCreateSmartOverride) or Charger [Create Smart Override](/api/reference#chargerCreateSmartOverride). Once populated, the target enters an overridden state, stopping Enode from sending Smart Charging actions. The Smart Override persists until the target ceases charging for any reason or is manually ended via Vehicle [End Smart Override](/api/reference#vehicleEndSmartOverride) or Charger [End Smart Override](/api/reference#chargerEndSmartOverride)."""

    created_at: datetime
    r"""Time at which the smart override was created."""
    ended_at: Nullable[datetime]
    r"""Time at which the smart override was ended. If null, the smart override is still active."""
    target_type: VehicleCreateSmartOverrideTargetType
    target_id: str
    r"""ID of the target which this smart override is affecting."""
    vendor_action_id: Nullable[str]
    r"""The ID of the Action responsible for starting charging on the target. Use the [Get Vehicle Action](/api/reference#getVehiclesAction) or the [Get Charger Action](/api/reference#getChargersAction) endpoints to monitor action results."""
    user_id: str
    r"""ID of the User"""
    vendor: ChargeableVendorTypedDict


class VehicleCreateSmartOverrideResponse(BaseModel):
    r"""This field populates after using Vehicle [Create Smart Override](/api/reference#vehicleCreateSmartOverride) or Charger [Create Smart Override](/api/reference#chargerCreateSmartOverride). Once populated, the target enters an overridden state, stopping Enode from sending Smart Charging actions. The Smart Override persists until the target ceases charging for any reason or is manually ended via Vehicle [End Smart Override](/api/reference#vehicleEndSmartOverride) or Charger [End Smart Override](/api/reference#chargerEndSmartOverride)."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Time at which the smart override was created."""

    ended_at: Annotated[Nullable[datetime], pydantic.Field(alias="endedAt")]
    r"""Time at which the smart override was ended. If null, the smart override is still active."""

    target_type: Annotated[
        VehicleCreateSmartOverrideTargetType, pydantic.Field(alias="targetType")
    ]

    target_id: Annotated[str, pydantic.Field(alias="targetId")]
    r"""ID of the target which this smart override is affecting."""

    vendor_action_id: Annotated[Nullable[str], pydantic.Field(alias="vendorActionId")]
    r"""The ID of the Action responsible for starting charging on the target. Use the [Get Vehicle Action](/api/reference#getVehiclesAction) or the [Get Charger Action](/api/reference#getChargersAction) endpoints to monitor action results."""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""ID of the User"""

    vendor: ChargeableVendor

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["endedAt", "vendorActionId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
