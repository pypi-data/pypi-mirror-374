"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .batterycapabilities import BatteryCapabilities, BatteryCapabilitiesTypedDict
from .batterychargestate import BatteryChargeState, BatteryChargeStateTypedDict
from .batteryconfig import BatteryConfig, BatteryConfigTypedDict
from .batteryinformation import BatteryInformation, BatteryInformationTypedDict
from .batterylocation import BatteryLocation, BatteryLocationTypedDict
from .batteryvendor import BatteryVendor
from datetime import datetime
from enode.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BatteryTypedDict(TypedDict):
    r"""Battery object"""

    id: str
    r"""Unique identifier for the battery object"""
    user_id: str
    r"""The ID of the user that linked this battery."""
    vendor: BatteryVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""
    last_seen: datetime
    r"""The last time Enode successfully communicated with the vendor or when the battery was initially linked."""
    is_reachable: bool
    r"""Indicates whether Enode can currently access live data from the battery. If the battery is not reachable, data updates will be delayed."""
    charge_state: BatteryChargeStateTypedDict
    r"""Latest information about the battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""
    config: BatteryConfigTypedDict
    information: BatteryInformationTypedDict
    r"""Descriptive information about the battery"""
    capabilities: BatteryCapabilitiesTypedDict
    r"""A collection of descriptors that describe the capabilities of this specific battery"""
    scopes: List[str]
    r"""Scopes that the user has granted for this battery."""
    location: BatteryLocationTypedDict
    r"""Battery's GPS coordinates"""
    hem_system_id: NotRequired[str]
    r"""Identifier of the HEM system this battery belongs to"""


class Battery(BaseModel):
    r"""Battery object"""

    id: str
    r"""Unique identifier for the battery object"""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that linked this battery."""

    vendor: BatteryVendor
    r"""Machine-friendly name of the vendor. Use this in API requests."""

    last_seen: Annotated[datetime, pydantic.Field(alias="lastSeen")]
    r"""The last time Enode successfully communicated with the vendor or when the battery was initially linked."""

    is_reachable: Annotated[bool, pydantic.Field(alias="isReachable")]
    r"""Indicates whether Enode can currently access live data from the battery. If the battery is not reachable, data updates will be delayed."""

    charge_state: Annotated[BatteryChargeState, pydantic.Field(alias="chargeState")]
    r"""Latest information about the battery. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    config: BatteryConfig

    information: BatteryInformation
    r"""Descriptive information about the battery"""

    capabilities: BatteryCapabilities
    r"""A collection of descriptors that describe the capabilities of this specific battery"""

    scopes: List[str]
    r"""Scopes that the user has granted for this battery."""

    location: BatteryLocation
    r"""Battery's GPS coordinates"""

    hem_system_id: Annotated[Optional[str], pydantic.Field(alias="hemSystemId")] = None
    r"""Identifier of the HEM system this battery belongs to"""
