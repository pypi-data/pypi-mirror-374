"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .schedulestate import ScheduleState
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class ChargeScheduleStatusScheduleType(str, Enum):
    CHARGE = "CHARGE"


class IsChargingExpectedPartsTypedDict(TypedDict):
    r"""Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value"""

    needs_charge: bool
    is_plugged_in: bool
    should_charge: bool


class IsChargingExpectedParts(BaseModel):
    r"""Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value"""

    needs_charge: Annotated[bool, pydantic.Field(alias="needsCharge")]

    is_plugged_in: Annotated[bool, pydantic.Field(alias="isPluggedIn")]

    should_charge: Annotated[bool, pydantic.Field(alias="shouldCharge")]


class ChargeScheduleStatusUpcomingTransitionTypedDict(TypedDict):
    at: datetime
    r"""ISO8601 UTC timestamp"""
    should_charge: bool


class ChargeScheduleStatusUpcomingTransition(BaseModel):
    at: datetime
    r"""ISO8601 UTC timestamp"""

    should_charge: Annotated[bool, pydantic.Field(alias="shouldCharge")]


class ChargeScheduleStatusTargetType(str, Enum):
    VEHICLE = "vehicle"
    CHARGER = "charger"


class SmartOverrideTypedDict(TypedDict):
    r"""This field populates after using Vehicle [Create Smart Override](/api/reference#vehicleCreateSmartOverride) or Charger [Create Smart Override](/api/reference#chargerCreateSmartOverride). Once populated, the target enters an overridden state, stopping Enode from sending Smart Charging actions. The Smart Override persists until the target ceases charging for any reason or is manually ended via Vehicle [End Smart Override](/api/reference#vehicleEndSmartOverride) or Charger [End Smart Override](/api/reference#chargerEndSmartOverride)."""

    created_at: datetime
    r"""Time at which the smart override was created."""
    ended_at: Nullable[datetime]
    r"""Time at which the smart override was ended. If null, the smart override is still active."""
    target_type: ChargeScheduleStatusTargetType
    target_id: str
    r"""ID of the target which this smart override is affecting."""
    vendor_action_id: Nullable[str]
    r"""The ID of the Action responsible for starting charging on the target. Use the [Get Vehicle Action](/api/reference#getVehiclesAction) or the [Get Charger Action](/api/reference#getChargersAction) endpoints to monitor action results."""


class SmartOverride(BaseModel):
    r"""This field populates after using Vehicle [Create Smart Override](/api/reference#vehicleCreateSmartOverride) or Charger [Create Smart Override](/api/reference#chargerCreateSmartOverride). Once populated, the target enters an overridden state, stopping Enode from sending Smart Charging actions. The Smart Override persists until the target ceases charging for any reason or is manually ended via Vehicle [End Smart Override](/api/reference#vehicleEndSmartOverride) or Charger [End Smart Override](/api/reference#chargerEndSmartOverride)."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Time at which the smart override was created."""

    ended_at: Annotated[Nullable[datetime], pydantic.Field(alias="endedAt")]
    r"""Time at which the smart override was ended. If null, the smart override is still active."""

    target_type: Annotated[
        ChargeScheduleStatusTargetType, pydantic.Field(alias="targetType")
    ]

    target_id: Annotated[str, pydantic.Field(alias="targetId")]
    r"""ID of the target which this smart override is affecting."""

    vendor_action_id: Annotated[Nullable[str], pydantic.Field(alias="vendorActionId")]
    r"""The ID of the Action responsible for starting charging on the target. Use the [Get Vehicle Action](/api/reference#getVehiclesAction) or the [Get Charger Action](/api/reference#getChargersAction) endpoints to monitor action results."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["endedAt", "vendorActionId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ChargeScheduleStatusTypedDict(TypedDict):
    r"""The state of a Charge Schedule at a particular point in time."""

    schedule_id: str
    r"""ID of the schedule."""
    schedule_type: ChargeScheduleStatusScheduleType
    changed_at: datetime
    r"""Time at which any value of the status last changed"""
    state: ScheduleState
    r"""An enum value that describes the current state of the Schedule"""
    is_charging: bool
    r"""Whether the target is currently actually charging"""
    is_charging_expected: bool
    r"""Whether the target is currently expected to be charging"""
    is_charging_expected_parts: IsChargingExpectedPartsTypedDict
    r"""Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value"""
    upcoming_transitions: List[ChargeScheduleStatusUpcomingTransitionTypedDict]
    r"""List of upcoming transitions of the `shouldCharge` or `targetTemperature` value. A maximum of 2 items are returned."""
    smart_override: Nullable[SmartOverrideTypedDict]


class ChargeScheduleStatus(BaseModel):
    r"""The state of a Charge Schedule at a particular point in time."""

    schedule_id: Annotated[str, pydantic.Field(alias="scheduleId")]
    r"""ID of the schedule."""

    schedule_type: Annotated[
        ChargeScheduleStatusScheduleType, pydantic.Field(alias="scheduleType")
    ]

    changed_at: Annotated[datetime, pydantic.Field(alias="changedAt")]
    r"""Time at which any value of the status last changed"""

    state: ScheduleState
    r"""An enum value that describes the current state of the Schedule"""

    is_charging: Annotated[bool, pydantic.Field(alias="isCharging")]
    r"""Whether the target is currently actually charging"""

    is_charging_expected: Annotated[bool, pydantic.Field(alias="isChargingExpected")]
    r"""Whether the target is currently expected to be charging"""

    is_charging_expected_parts: Annotated[
        IsChargingExpectedParts, pydantic.Field(alias="isChargingExpectedParts")
    ]
    r"""Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value"""

    upcoming_transitions: Annotated[
        List[ChargeScheduleStatusUpcomingTransition],
        pydantic.Field(alias="upcomingTransitions"),
    ]
    r"""List of upcoming transitions of the `shouldCharge` or `targetTemperature` value. A maximum of 2 items are returned."""

    smart_override: Annotated[
        Nullable[SmartOverride], pydantic.Field(alias="smartOverride")
    ]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["smartOverride"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
