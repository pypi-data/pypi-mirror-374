"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WebhookResponseAuthenticationTypedDict(TypedDict):
    header_name: str


class WebhookResponseAuthentication(BaseModel):
    header_name: Annotated[str, pydantic.Field(alias="headerName")]


class WebhookResponseTypedDict(TypedDict):
    r"""Webhook entity."""

    id: str
    r"""Unique identifier for the webhook."""
    url: str
    r"""The HTTPS URL that webhook payloads should be sent to."""
    last_success: datetime
    r"""Time when a delivery to this webhook was last successful."""
    is_active: bool
    r"""Indicates whether the webhook is active or not."""
    created_at: datetime
    r"""Time when the webhook was created."""
    api_version: Nullable[str]
    r"""API version of the payload. If null, the default API version of the client will be used when generating webhook payloads."""
    authentication: Nullable[WebhookResponseAuthenticationTypedDict]
    events: NotRequired[List[str]]
    r"""The events which will trigger the webhook."""


class WebhookResponse(BaseModel):
    r"""Webhook entity."""

    id: str
    r"""Unique identifier for the webhook."""

    url: str
    r"""The HTTPS URL that webhook payloads should be sent to."""

    last_success: Annotated[datetime, pydantic.Field(alias="lastSuccess")]
    r"""Time when a delivery to this webhook was last successful."""

    is_active: Annotated[bool, pydantic.Field(alias="isActive")]
    r"""Indicates whether the webhook is active or not."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Time when the webhook was created."""

    api_version: Annotated[Nullable[str], pydantic.Field(alias="apiVersion")]
    r"""API version of the payload. If null, the default API version of the client will be used when generating webhook payloads."""

    authentication: Nullable[WebhookResponseAuthentication]

    events: Optional[List[str]] = None
    r"""The events which will trigger the webhook."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["events"]
        nullable_fields = ["apiVersion", "authentication"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
