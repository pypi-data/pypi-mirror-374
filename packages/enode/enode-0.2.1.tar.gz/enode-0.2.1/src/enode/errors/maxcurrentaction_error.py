"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enode.errors import EnodeError
from enode.models import (
    actionstate as models_actionstate,
    chargeablevendortype as models_chargeablevendortype,
    maxcurrentaction as models_maxcurrentaction,
    targetmaxcurrent as models_targetmaxcurrent,
)
from enode.types import BaseModel, Nullable
import httpx
import pydantic
from typing import Optional
from typing_extensions import Annotated


class MaxCurrentActionErrorData(BaseModel):
    id: str
    r"""The ID of the action."""

    user_id: Annotated[str, pydantic.Field(alias="userId")]
    r"""The ID of the user that owns the target of this action."""

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Time when this action was created"""

    updated_at: Annotated[datetime, pydantic.Field(alias="updatedAt")]
    r"""Time when this action was last updated"""

    completed_at: Annotated[Nullable[datetime], pydantic.Field(alias="completedAt")]
    r"""Time when the action transitioned to a non-pending state."""

    state: models_actionstate.ActionState
    r"""The real-time status of an action executed on a target.

    * `PENDING`: The initial state. Enode is actively sending commands and monitoring the target for changes.
    * `CONFIRMED`: Successful transition of the target to the desired state.
    * `FAILED`: The target did not respond to the action before timing out. Enode has ceased sending additional commands.
    * `CANCELLED`: A required precondition was not met during the action's timeout window or another action has been sent to the target, overriding this one.
    """

    target_id: Annotated[str, pydantic.Field(alias="targetId")]
    r"""ID of the entity which this action is controlling."""

    target_type: Annotated[
        models_chargeablevendortype.ChargeableVendorType,
        pydantic.Field(alias="targetType"),
    ]

    target_state: Annotated[
        models_targetmaxcurrent.TargetMaxCurrent, pydantic.Field(alias="targetState")
    ]
    r"""Target maximum current for entity"""

    failure_reason: Annotated[
        Nullable[models_maxcurrentaction.MaxCurrentActionFailureReason],
        pydantic.Field(alias="failureReason"),
    ]


class MaxCurrentActionError(EnodeError):
    data: MaxCurrentActionErrorData

    def __init__(
        self,
        data: MaxCurrentActionErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
