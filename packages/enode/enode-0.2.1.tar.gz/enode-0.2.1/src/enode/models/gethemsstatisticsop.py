"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enode.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetHemsStatisticsRequestTypedDict(TypedDict):
    hem_system: str
    interval: NotRequired[str]


class GetHemsStatisticsRequest(BaseModel):
    hem_system: Annotated[
        str,
        pydantic.Field(alias="hemSystem"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    interval: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class BatteryLevelDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[float]


class BatteryLevelData(BaseModel):
    t: Optional[str] = None

    v: Optional[float] = None


class BatteryLevelSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class BatteryLevelSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class BatteryLevelTypedDict(TypedDict):
    data: NotRequired[List[BatteryLevelDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[BatteryLevelSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class BatteryLevel(BaseModel):
    data: Optional[List[BatteryLevelData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[BatteryLevelSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class ChargeDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[Nullable[float]]


class ChargeData(BaseModel):
    t: Optional[str] = None

    v: OptionalNullable[float] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["t", "v"]
        nullable_fields = ["v"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ChargeSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class ChargeSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class ChargeTypedDict(TypedDict):
    data: NotRequired[List[ChargeDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[ChargeSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Charge(BaseModel):
    data: Optional[List[ChargeData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[ChargeSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class ConsumptionDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[float]


class ConsumptionData(BaseModel):
    t: Optional[str] = None

    v: Optional[float] = None


class ConsumptionSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class ConsumptionSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class ConsumptionTypedDict(TypedDict):
    data: NotRequired[List[ConsumptionDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[ConsumptionSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Consumption(BaseModel):
    data: Optional[List[ConsumptionData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[ConsumptionSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class DischargeDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[Nullable[float]]


class DischargeData(BaseModel):
    t: Optional[str] = None

    v: OptionalNullable[float] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["t", "v"]
        nullable_fields = ["v"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DischargeSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class DischargeSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class DischargeTypedDict(TypedDict):
    data: NotRequired[List[DischargeDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[DischargeSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Discharge(BaseModel):
    data: Optional[List[DischargeData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[DischargeSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class ExportDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[float]


class ExportData(BaseModel):
    t: Optional[str] = None

    v: Optional[float] = None


class ExportSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class ExportSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class ExportTypedDict(TypedDict):
    data: NotRequired[List[ExportDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[ExportSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Export(BaseModel):
    data: Optional[List[ExportData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[ExportSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class GenerationDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[float]


class GenerationData(BaseModel):
    t: Optional[str] = None

    v: Optional[float] = None


class GenerationSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class GenerationSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class GenerationTypedDict(TypedDict):
    data: NotRequired[List[GenerationDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[GenerationSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Generation(BaseModel):
    data: Optional[List[GenerationData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[GenerationSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class ImportDataTypedDict(TypedDict):
    t: NotRequired[str]
    v: NotRequired[float]


class ImportData(BaseModel):
    t: Optional[str] = None

    v: Optional[float] = None


class ImportSamplingTypedDict(TypedDict):
    mode: NotRequired[str]
    resolution: NotRequired[str]


class ImportSampling(BaseModel):
    mode: Optional[str] = None

    resolution: Optional[str] = None


class ImportTypedDict(TypedDict):
    data: NotRequired[List[ImportDataTypedDict]]
    is_available: NotRequired[bool]
    sampling: NotRequired[ImportSamplingTypedDict]
    timezone: NotRequired[str]
    unit: NotRequired[str]
    unit_type: NotRequired[str]


class Import(BaseModel):
    data: Optional[List[ImportData]] = None

    is_available: Annotated[Optional[bool], pydantic.Field(alias="isAvailable")] = None

    sampling: Optional[ImportSampling] = None

    timezone: Optional[str] = None

    unit: Optional[str] = None

    unit_type: Annotated[Optional[str], pydantic.Field(alias="unitType")] = None


class TimeseriesTypedDict(TypedDict):
    battery_level: NotRequired[BatteryLevelTypedDict]
    charge: NotRequired[ChargeTypedDict]
    consumption: NotRequired[ConsumptionTypedDict]
    discharge: NotRequired[DischargeTypedDict]
    export: NotRequired[ExportTypedDict]
    generation: NotRequired[GenerationTypedDict]
    import_: NotRequired[ImportTypedDict]


class Timeseries(BaseModel):
    battery_level: Annotated[
        Optional[BatteryLevel], pydantic.Field(alias="batteryLevel")
    ] = None

    charge: Optional[Charge] = None

    consumption: Optional[Consumption] = None

    discharge: Optional[Discharge] = None

    export: Optional[Export] = None

    generation: Optional[Generation] = None

    import_: Annotated[Optional[Import], pydantic.Field(alias="import")] = None


class GetHemsStatisticsResponseBodyTypedDict(TypedDict):
    r"""New Request"""

    timeseries: NotRequired[TimeseriesTypedDict]


class GetHemsStatisticsResponseBody(BaseModel):
    r"""New Request"""

    timeseries: Optional[Timeseries] = None


class GetHemsStatisticsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetHemsStatisticsResponseBodyTypedDict


class GetHemsStatisticsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetHemsStatisticsResponseBody
