"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class VehicleSmartChargingPolicyTypedDict(TypedDict):
    r"""[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via [Update Vehicle Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy)."""

    is_enabled: bool
    r"""When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)"""
    deadline: Nullable[str]
    r"""The hour-minute deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. If a timezone is set on the location at which the smart charging occurs, the deadline is interpreted in that timezone, otherwise UTC is used."""
    minimum_charge_limit: float
    r"""Proceed to charge promptly, disregarding energy prices, until the vehicle achieves this preset minimum limit. Please note that this limit cannot exceed the vehicle's maximum charge limit. The default setting is zero. The unit of measure is percentage."""


class VehicleSmartChargingPolicy(BaseModel):
    r"""[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via [Update Vehicle Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy)."""

    is_enabled: Annotated[bool, pydantic.Field(alias="isEnabled")]
    r"""When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)"""

    deadline: Nullable[str]
    r"""The hour-minute deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. If a timezone is set on the location at which the smart charging occurs, the deadline is interpreted in that timezone, otherwise UTC is used."""

    minimum_charge_limit: Annotated[float, pydantic.Field(alias="minimumChargeLimit")]
    r"""Proceed to charge promptly, disregarding energy prices, until the vehicle achieves this preset minimum limit. Please note that this limit cannot exceed the vehicle's maximum charge limit. The default setting is zero. The unit of measure is percentage."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["deadline"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
