"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enode.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WebhookCreatePayloadEvent(str, Enum):
    WILDCARD_ = "*"
    USER_VEHICLE_DISCOVERED = "user:vehicle:discovered"
    USER_VEHICLE_UPDATED = "user:vehicle:updated"
    USER_VEHICLE_DELETED = "user:vehicle:deleted"
    USER_VEHICLE_SMART_CHARGING_STATUS_UPDATED = (
        "user:vehicle:smart-charging-status-updated"
    )
    USER_CHARGE_ACTION_UPDATED = "user:charge-action:updated"
    USER_VENDOR_ACTION_UPDATED = "user:vendor-action:updated"
    USER_SCHEDULE_EXECUTION_UPDATED = "user:schedule:execution-updated"
    USER_CHARGER_DISCOVERED = "user:charger:discovered"
    USER_CHARGER_UPDATED = "user:charger:updated"
    USER_CHARGER_DELETED = "user:charger:deleted"
    USER_HVAC_DISCOVERED = "user:hvac:discovered"
    USER_HVAC_UPDATED = "user:hvac:updated"
    USER_HVAC_DELETED = "user:hvac:deleted"
    USER_INVERTER_DISCOVERED = "user:inverter:discovered"
    USER_INVERTER_UPDATED = "user:inverter:updated"
    USER_INVERTER_DELETED = "user:inverter:deleted"
    USER_INVERTER_STATISTICS_UPDATED = "user:inverter:statistics-updated"
    USER_CREDENTIALS_INVALIDATED = "user:credentials:invalidated"
    USER_BATTERY_DISCOVERED = "user:battery:discovered"
    USER_BATTERY_UPDATED = "user:battery:updated"
    USER_BATTERY_DELETED = "user:battery:deleted"
    ENODE_WEBHOOK_TEST = "enode:webhook:test"
    USER_METER_DISCOVERED = "user:meter:discovered"
    USER_METER_UPDATED = "user:meter:updated"
    USER_METER_DELETED = "user:meter:deleted"


class WebhookCreatePayloadAuthenticationTypedDict(TypedDict):
    r"""If provided, the authentication header will be sent with each webhook request."""

    header_name: str
    r"""Authentication header name."""
    header_value: str
    r"""Authentication header value."""


class WebhookCreatePayloadAuthentication(BaseModel):
    r"""If provided, the authentication header will be sent with each webhook request."""

    header_name: Annotated[str, pydantic.Field(alias="headerName")]
    r"""Authentication header name."""

    header_value: Annotated[str, pydantic.Field(alias="headerValue")]
    r"""Authentication header value."""


class WebhookCreatePayloadTypedDict(TypedDict):
    r"""Fields to update the webhook with."""

    url: str
    r"""The HTTPS URL that webhook payloads should be sent to."""
    secret: str
    r"""A cryptographically secure secret, generated and provided by your client. Refer to [Generating a secret](/docs/webhooks#generating-a-secret) for details on how to do this."""
    events: NotRequired[List[WebhookCreatePayloadEvent]]
    r"""The events which will trigger the webhook. Available events: `*`, `user:vehicle:discovered`, `user:vehicle:updated`, `user:vehicle:deleted`, `user:vehicle:smart-charging-status-updated`, `user:charge-action:updated`, `user:vendor-action:updated`, `user:schedule:execution-updated`, `user:charger:discovered`, `user:charger:updated`, `user:charger:deleted`, `user:hvac:discovered`, `user:hvac:updated`, `user:hvac:deleted`, `user:inverter:discovered`, `user:inverter:updated`, `user:inverter:deleted`, `user:inverter:statistics-updated`, `user:credentials:invalidated`, `user:battery:discovered`, `user:battery:updated`, `user:battery:deleted`, `enode:webhook:test`, `user:meter:discovered`, `user:meter:updated`, `user:meter:deleted`"""
    api_version: NotRequired[Nullable[str]]
    r"""If provided, webhook payloads will be generated for this version. If not provided or `null`, the default API version of the client will be used when generating webhook payloads. Valid versions: `2024-10-01`"""
    authentication: NotRequired[WebhookCreatePayloadAuthenticationTypedDict]
    r"""If provided, the authentication header will be sent with each webhook request."""


class WebhookCreatePayload(BaseModel):
    r"""Fields to update the webhook with."""

    url: str
    r"""The HTTPS URL that webhook payloads should be sent to."""

    secret: str
    r"""A cryptographically secure secret, generated and provided by your client. Refer to [Generating a secret](/docs/webhooks#generating-a-secret) for details on how to do this."""

    events: Optional[List[WebhookCreatePayloadEvent]] = None
    r"""The events which will trigger the webhook. Available events: `*`, `user:vehicle:discovered`, `user:vehicle:updated`, `user:vehicle:deleted`, `user:vehicle:smart-charging-status-updated`, `user:charge-action:updated`, `user:vendor-action:updated`, `user:schedule:execution-updated`, `user:charger:discovered`, `user:charger:updated`, `user:charger:deleted`, `user:hvac:discovered`, `user:hvac:updated`, `user:hvac:deleted`, `user:inverter:discovered`, `user:inverter:updated`, `user:inverter:deleted`, `user:inverter:statistics-updated`, `user:credentials:invalidated`, `user:battery:discovered`, `user:battery:updated`, `user:battery:deleted`, `enode:webhook:test`, `user:meter:discovered`, `user:meter:updated`, `user:meter:deleted`"""

    api_version: Annotated[
        OptionalNullable[str], pydantic.Field(alias="apiVersion")
    ] = UNSET
    r"""If provided, webhook payloads will be generated for this version. If not provided or `null`, the default API version of the client will be used when generating webhook payloads. Valid versions: `2024-10-01`"""

    authentication: Optional[WebhookCreatePayloadAuthentication] = None
    r"""If provided, the authentication header will be sent with each webhook request."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["events", "apiVersion", "authentication"]
        nullable_fields = ["apiVersion"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
