"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chargerpowerdeliverystate import ChargerPowerDeliveryState
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, TypedDict


class ChargerChargeStateTypedDict(TypedDict):
    r"""Latest information about the charger. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    is_plugged_in: Nullable[bool]
    r"""Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)"""
    is_charging: Nullable[bool]
    r"""Indicates whether the charger is currently delivering power to the vehicle and actively charging its battery."""
    charge_rate: Nullable[float]
    r"""The current charge rate in kW.

    This property is only available when the charger is actively charging a vehicle, and is `null` any other time.
    """
    last_updated: Nullable[datetime]
    r"""Time of latest charge state update"""
    max_current: Nullable[float]
    r"""Desired max current in amperes, if set"""
    power_delivery_state: ChargerPowerDeliveryState
    r"""The current state of power delivery between the vehicle and charger.

    * `UNKNOWN`: The state of power delivery is currently unknown.
    * `UNPLUGGED`: The vehicle is not connected to the charger.
    * `PLUGGED_IN:INITIALIZING`: The charging station is preparing to deliver power to the vehicle. It is expected for this state to shortly transition into PLUGGED_IN:CHARGING.
    * `PLUGGED_IN:CHARGING`: The charger is actively delivering power to the vehicle, causing the battery level to increase.
    * `PLUGGED_IN:STOPPED`: The vehicle is plugged in, but the charger has been stopped. It is possible to transition into a charging state by sending a start command.
    * `PLUGGED_IN:NO_POWER`: The charger attempted to initialize charging, however no external power was accepted by the vehicle. It is not possible to transition into a charging state with a remote command until there is some user intervention to resolve the issue.
    * `PLUGGED_IN:FAULT`: A malfunction in the charging process is preventing power from being delivered. Possible causes include a charging cable not being properly locked, extreme temperatures, or malfunctions in either the charging station or the vehicle's internal system. It is not possible to transition into a charging state with a remote command until there is some user intervention to resolve the issue.
    * `PLUGGED_IN:DISCHARGING`: The charger is actively discharging by giving power to the home/grid, causing the battery level to decrease.
    """


class ChargerChargeState(BaseModel):
    r"""Latest information about the charger. `null` values indicate we are unable to determine a value for the field based on the information coming from the vendor."""

    is_plugged_in: Annotated[Nullable[bool], pydantic.Field(alias="isPluggedIn")]
    r"""Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)"""

    is_charging: Annotated[Nullable[bool], pydantic.Field(alias="isCharging")]
    r"""Indicates whether the charger is currently delivering power to the vehicle and actively charging its battery."""

    charge_rate: Annotated[Nullable[float], pydantic.Field(alias="chargeRate")]
    r"""The current charge rate in kW.

    This property is only available when the charger is actively charging a vehicle, and is `null` any other time.
    """

    last_updated: Annotated[Nullable[datetime], pydantic.Field(alias="lastUpdated")]
    r"""Time of latest charge state update"""

    max_current: Annotated[Nullable[float], pydantic.Field(alias="maxCurrent")]
    r"""Desired max current in amperes, if set"""

    power_delivery_state: Annotated[
        ChargerPowerDeliveryState, pydantic.Field(alias="powerDeliveryState")
    ]
    r"""The current state of power delivery between the vehicle and charger.

    * `UNKNOWN`: The state of power delivery is currently unknown.
    * `UNPLUGGED`: The vehicle is not connected to the charger.
    * `PLUGGED_IN:INITIALIZING`: The charging station is preparing to deliver power to the vehicle. It is expected for this state to shortly transition into PLUGGED_IN:CHARGING.
    * `PLUGGED_IN:CHARGING`: The charger is actively delivering power to the vehicle, causing the battery level to increase.
    * `PLUGGED_IN:STOPPED`: The vehicle is plugged in, but the charger has been stopped. It is possible to transition into a charging state by sending a start command.
    * `PLUGGED_IN:NO_POWER`: The charger attempted to initialize charging, however no external power was accepted by the vehicle. It is not possible to transition into a charging state with a remote command until there is some user intervention to resolve the issue.
    * `PLUGGED_IN:FAULT`: A malfunction in the charging process is preventing power from being delivered. Possible causes include a charging cable not being properly locked, extreme temperatures, or malfunctions in either the charging station or the vehicle's internal system. It is not possible to transition into a charging state with a remote command until there is some user intervention to resolve the issue.
    * `PLUGGED_IN:DISCHARGING`: The charger is actively discharging by giving power to the home/grid, causing the battery level to decrease.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = [
            "isPluggedIn",
            "isCharging",
            "chargeRate",
            "lastUpdated",
            "maxCurrent",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
