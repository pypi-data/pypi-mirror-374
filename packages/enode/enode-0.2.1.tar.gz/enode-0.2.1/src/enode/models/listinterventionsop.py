"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .batteryvendor import BatteryVendor
from .chargervendor import ChargerVendor
from .hvacvendor import HvacVendor
from .invertervendor import InverterVendor
from .metervendor import MeterVendor
from .vehiclevendor import VehicleVendor
from .vendortype import VendorType
from enode.types import BaseModel
from enode.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListInterventionsLanguage(str, Enum):
    r"""Preferred BCP47 language code - Request translation for the specified language. Falls back to `en-US` if not provided or provided language code is unsupported."""

    EN_US = "en-US"
    EN_GB = "en-GB"
    DE_DE = "de-DE"
    FR_FR = "fr-FR"
    ES_ES = "es-ES"
    JA_JP = "ja-JP"
    PT_PT = "pt-PT"
    LV_LV = "lv-LV"
    LT_LT = "lt-LT"
    NL_NL = "nl-NL"
    NL_BE = "nl-BE"
    NB_NO = "nb-NO"
    PL_PL = "pl-PL"
    SV_SE = "sv-SE"
    DA_DK = "da-DK"
    FI_FI = "fi-FI"
    RO_RO = "ro-RO"


ListInterventionsVendorTypedDict = TypeAliasType(
    "ListInterventionsVendorTypedDict",
    Union[
        InverterVendor,
        VehicleVendor,
        HvacVendor,
        ChargerVendor,
        BatteryVendor,
        MeterVendor,
    ],
)
r"""Only return interventions for the specified vendor."""


ListInterventionsVendor = TypeAliasType(
    "ListInterventionsVendor",
    Union[
        InverterVendor,
        VehicleVendor,
        HvacVendor,
        ChargerVendor,
        BatteryVendor,
        MeterVendor,
    ],
)
r"""Only return interventions for the specified vendor."""


class ListInterventionsRequestTypedDict(TypedDict):
    language: NotRequired[ListInterventionsLanguage]
    r"""Preferred BCP47 language code - Request translation for the specified language. Falls back to `en-US` if not provided or provided language code is unsupported."""
    vendor_type: NotRequired[VendorType]
    r"""Only return interventions for the specified vendor type."""
    vendor: NotRequired[ListInterventionsVendorTypedDict]
    r"""Only return interventions for the specified vendor."""


class ListInterventionsRequest(BaseModel):
    language: Annotated[
        Optional[ListInterventionsLanguage],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Preferred BCP47 language code - Request translation for the specified language. Falls back to `en-US` if not provided or provided language code is unsupported."""

    vendor_type: Annotated[
        Optional[VendorType],
        pydantic.Field(alias="vendorType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Only return interventions for the specified vendor type."""

    vendor: Annotated[
        Optional[ListInterventionsVendor],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Only return interventions for the specified vendor."""
