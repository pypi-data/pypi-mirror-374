"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .nullabletemperaturetargetstate import (
    NullableTemperatureTargetState,
    NullableTemperatureTargetStateTypedDict,
)
from .schedulestate import ScheduleState
from .temperaturetargetstate import (
    TemperatureTargetState,
    TemperatureTargetStateTypedDict,
)
from datetime import datetime
from enode.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, TypedDict


class TemperatureScheduleStatusScheduleType(str, Enum):
    TEMPERATURE = "TEMPERATURE"


class TemperatureScheduleStatusUpcomingTransitionTypedDict(TypedDict):
    at: datetime
    r"""ISO8601 UTC timestamp"""
    target: TemperatureTargetStateTypedDict


class TemperatureScheduleStatusUpcomingTransition(BaseModel):
    at: datetime
    r"""ISO8601 UTC timestamp"""

    target: TemperatureTargetState


class TemperatureScheduleStatusTypedDict(TypedDict):
    r"""The state of a Temperature Schedule at a particular point in time."""

    schedule_id: str
    schedule_type: TemperatureScheduleStatusScheduleType
    changed_at: datetime
    r"""Time at which any value of the status last changed"""
    state: ScheduleState
    r"""An enum value that describes the current state of the Schedule"""
    current: Nullable[NullableTemperatureTargetStateTypedDict]
    expected: TemperatureTargetStateTypedDict
    upcoming_transitions: List[TemperatureScheduleStatusUpcomingTransitionTypedDict]
    r"""List of upcoming transitions. A maximum of 2 items are returned."""


class TemperatureScheduleStatus(BaseModel):
    r"""The state of a Temperature Schedule at a particular point in time."""

    schedule_id: Annotated[str, pydantic.Field(alias="scheduleId")]

    schedule_type: Annotated[
        TemperatureScheduleStatusScheduleType, pydantic.Field(alias="scheduleType")
    ]

    changed_at: Annotated[datetime, pydantic.Field(alias="changedAt")]
    r"""Time at which any value of the status last changed"""

    state: ScheduleState
    r"""An enum value that describes the current state of the Schedule"""

    current: Nullable[NullableTemperatureTargetState]

    expected: TemperatureTargetState

    upcoming_transitions: Annotated[
        List[TemperatureScheduleStatusUpcomingTransition],
        pydantic.Field(alias="upcomingTransitions"),
    ]
    r"""List of upcoming transitions. A maximum of 2 items are returned."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["current"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
