id: "software-workflow-template"
name: "software-workflow"
friendly_name: "Software Development Workflow"
description: "Complete software development workflow from planning to deployment"
template_type: "workflow"
version: "1.0.0"
author: "Lackey System"
created: "2025-08-07T02:00:00Z"
updated: "2025-08-07T02:00:00Z"
tags:
  - "workflow"
  - "software"
  - "development"
  - "agile"

variables:
  - name: "project_name"
    type: "string"
    description: "Name of the software project"
    required: true
    validation_pattern: "^[a-zA-Z0-9\\s\\-_]+$"

  - name: "technology_stack"
    type: "string"
    description: "Primary technology stack"
    default: "Python/React"
    required: false

  - name: "development_methodology"
    type: "choice"
    description: "Development methodology to follow"
    choices: ["agile", "scrum", "kanban", "waterfall"]
    default: "agile"
    required: false

  - name: "team_lead"
    type: "string"
    description: "Technical lead for the project"
    required: false

  - name: "sprint_duration"
    type: "choice"
    description: "Sprint duration in weeks"
    choices: ["1", "2", "3", "4"]
    default: "2"
    required: false

  - name: "deployment_environment"
    type: "choice"
    description: "Target deployment environment"
    choices: ["cloud", "on-premise", "hybrid"]
    default: "cloud"
    required: false

content:
  project:
    friendly_name: "{{project_name}} Development"
    description: "Software development project for {{project_name}} using {{technology_stack}} with {{development_methodology}} methodology"
    objectives:
      - "Complete requirements analysis and design"
      - "Implement core application features"
      - "Ensure quality through testing and reviews"
      - "Deploy to {{deployment_environment}} environment"
    tags:
      - "software-development"
      - "{{development_methodology}}"
      - "{{deployment_environment}}"
    metadata:
      technology_stack: "{{technology_stack}}"
      methodology: "{{development_methodology}}"
      sprint_duration: "{{sprint_duration}}"
      deployment_target: "{{deployment_environment}}"

  tasks:
    - title: "Requirements Analysis and Planning"
      objective: "Gather and analyze requirements, create project plan"
      steps:
        - "Conduct stakeholder interviews"
        - "Document functional requirements"
        - "Define non-functional requirements"
        - "Create user stories and acceptance criteria"
        - "Estimate effort and create backlog"
        - "Plan initial sprints and releases"
      success_criteria:
        - "Requirements documented and approved"
        - "User stories created with acceptance criteria"
        - "Project backlog prioritized"
        - "Sprint plan created"
        - "Stakeholder sign-off obtained"
      complexity: "medium"
      assigned_to: "{{team_lead}}"
      tags: ["requirements", "planning", "analysis"]

    - title: "System Architecture and Design"
      objective: "Design system architecture and technical specifications"
      steps:
        - "Design system architecture"
        - "Create database schema design"
        - "Define API specifications"
        - "Design user interface mockups"
        - "Plan security and performance considerations"
        - "Document technical decisions"
      success_criteria:
        - "Architecture design completed"
        - "Database schema finalized"
        - "API specifications documented"
        - "UI/UX designs approved"
        - "Security plan established"
        - "Technical documentation created"
      complexity: "high"
      dependencies: ["requirements-analysis-and-planning"]
      assigned_to: "{{team_lead}}"
      tags: ["architecture", "design", "technical"]

    - title: "Development Environment Setup"
      objective: "Set up development infrastructure and tools"
      steps:
        - "Set up version control repository"
        - "Configure development environments"
        - "Set up CI/CD pipeline"
        - "Install and configure development tools"
        - "Set up testing frameworks"
        - "Configure code quality tools"
      success_criteria:
        - "Repository created and configured"
        - "Development environments ready"
        - "CI/CD pipeline operational"
        - "Development tools installed"
        - "Testing framework configured"
        - "Code quality checks active"
      complexity: "medium"
      dependencies: ["system-architecture-and-design"]
      tags: ["setup", "infrastructure", "tools"]

    - title: "Sprint 1: Core Foundation"
      objective: "Implement core application foundation and basic features"
      steps:
        - "Set up project structure and frameworks"
        - "Implement basic authentication system"
        - "Create core data models"
        - "Implement basic CRUD operations"
        - "Set up logging and error handling"
        - "Create initial test suite"
      success_criteria:
        - "Project structure established"
        - "Authentication working"
        - "Data models implemented"
        - "Basic operations functional"
        - "Error handling in place"
        - "Tests passing"
      complexity: "high"
      dependencies: ["development-environment-setup"]
      tags: ["sprint1", "foundation", "core"]

    - title: "Sprint 2: Feature Development"
      objective: "Implement primary application features"
      steps:
        - "Implement main business logic"
        - "Create user interface components"
        - "Add data validation and processing"
        - "Implement search and filtering"
        - "Add notification system"
        - "Expand test coverage"
      success_criteria:
        - "Core features implemented"
        - "UI components functional"
        - "Data validation working"
        - "Search functionality active"
        - "Notifications operational"
        - "Test coverage >70%"
      complexity: "high"
      dependencies: ["sprint-1-core-foundation"]
      tags: ["sprint2", "features", "ui"]

    - title: "Sprint 3: Integration and Polish"
      objective: "Integrate components and polish the application"
      steps:
        - "Integrate all application components"
        - "Implement advanced features"
        - "Optimize performance"
        - "Enhance user experience"
        - "Complete security hardening"
        - "Finalize documentation"
      success_criteria:
        - "All components integrated"
        - "Advanced features working"
        - "Performance optimized"
        - "UX polished and intuitive"
        - "Security measures implemented"
        - "Documentation complete"
      complexity: "medium"
      dependencies: ["sprint-2-feature-development"]
      tags: ["sprint3", "integration", "polish"]

    - title: "Testing and Quality Assurance"
      objective: "Comprehensive testing and quality validation"
      steps:
        - "Execute comprehensive test suite"
        - "Perform integration testing"
        - "Conduct user acceptance testing"
        - "Run security vulnerability scans"
        - "Perform load and performance testing"
        - "Complete code review process"
      success_criteria:
        - "All tests passing"
        - "Integration tests successful"
        - "UAT completed and approved"
        - "Security vulnerabilities addressed"
        - "Performance requirements met"
        - "Code review completed"
      complexity: "medium"
      dependencies: ["sprint-3-integration-and-polish"]
      tags: ["testing", "qa", "validation"]

    - title: "Deployment and Go-Live"
      objective: "Deploy application to production environment"
      steps:
        - "Prepare production environment"
        - "Execute deployment procedures"
        - "Perform smoke testing in production"
        - "Configure monitoring and alerting"
        - "Train end users"
        - "Go-live and support handover"
      success_criteria:
        - "Production environment ready"
        - "Application successfully deployed"
        - "Smoke tests passed"
        - "Monitoring systems active"
        - "Users trained"
        - "Support procedures established"
      complexity: "medium"
      dependencies: ["testing-and-quality-assurance"]
      tags: ["deployment", "production", "go-live"]

files:
  "project-overview.md": |
    # {{project_name}} - Software Development Project

    ## Project Details

    - **Technology Stack**: {{technology_stack}}
    - **Methodology**: {{development_methodology}}
    - **Sprint Duration**: {{sprint_duration}} weeks
    - **Deployment**: {{deployment_environment}}
    - **Technical Lead**: {{team_lead}}

    ## Development Approach

    This project follows {{development_methodology}} methodology with {{sprint_duration}}-week sprints.

    ## Sprint Plan

    1. **Sprint 1**: Core Foundation - Authentication, data models, basic operations
    2. **Sprint 2**: Feature Development - Main features, UI components, business logic
    3. **Sprint 3**: Integration and Polish - Component integration, optimization, UX

    ## Quality Standards

    - Minimum 80% test coverage
    - Code review for all changes
    - Security vulnerability scanning
    - Performance testing and optimization

    ## Deployment Strategy

    Target deployment to {{deployment_environment}} environment with:
    - Automated CI/CD pipeline
    - Staging environment for testing
    - Production monitoring and alerting
    - Rollback procedures

  "development-standards.md": |
    # Development Standards for {{project_name}}

    ## Code Quality

    - Follow language-specific style guides
    - Maintain consistent formatting
    - Write self-documenting code
    - Include comprehensive comments

    ## Testing Requirements

    - Unit tests for all business logic
    - Integration tests for API endpoints
    - End-to-end tests for user workflows
    - Performance tests for critical paths

    ## Security Guidelines

    - Input validation and sanitization
    - Secure authentication and authorization
    - Data encryption at rest and in transit
    - Regular security vulnerability scans

    ## Performance Standards

    - Page load times under 2 seconds
    - API response times under 500ms
    - Database query optimization
    - Efficient resource utilization

    ## Documentation Requirements

    - API documentation with examples
    - User guides and tutorials
    - Technical architecture documentation
    - Deployment and maintenance guides

  "sprint-template.md": |
    # Sprint Template for {{project_name}}

    ## Sprint Planning

    - **Duration**: {{sprint_duration}} weeks
    - **Methodology**: {{development_methodology}}
    - **Team Lead**: {{team_lead}}

    ## Sprint Goals

    Define specific, measurable goals for each sprint:

    ### Sprint 1 Goals
    - [ ] Set up project foundation
    - [ ] Implement authentication
    - [ ] Create core data models

    ### Sprint 2 Goals
    - [ ] Implement main features
    - [ ] Create UI components
    - [ ] Add business logic

    ### Sprint 3 Goals
    - [ ] Integrate components
    - [ ] Optimize performance
    - [ ] Polish user experience

    ## Definition of Done

    - [ ] Code implemented and tested
    - [ ] Code review completed
    - [ ] Documentation updated
    - [ ] Acceptance criteria met
    - [ ] No critical bugs

    ## Sprint Retrospective

    After each sprint, conduct retrospective to identify:
    - What went well
    - What could be improved
    - Action items for next sprint

metadata:
  category: "workflow"
  difficulty: "advanced"
  estimated_duration: "8-12 weeks"
  suitable_for: ["web applications", "mobile apps", "APIs", "microservices"]
  methodology_support: ["agile", "scrum", "kanban", "waterfall"]
