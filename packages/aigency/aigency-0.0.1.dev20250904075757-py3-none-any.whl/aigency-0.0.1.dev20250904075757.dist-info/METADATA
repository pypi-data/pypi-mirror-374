Metadata-Version: 2.4
Name: aigency
Version: 0.0.1.dev20250904075757
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: google-adk>=1.11.0
Requires-Dist: a2a-sdk==0.3.0
Requires-Dist: litellm<1.73.0,>=1.72.6
Requires-Dist: pyyaml==6.0.2
Requires-Dist: PyJWT==2.10.1

# aigency-lib

Una librer√≠a para crear y gestionar agentes de IA.

## Inicio r√°pido

Para probar un agente simple:

```bash
cd examples/simple_agents/hello_world_agent
docker compose up
```

## üîß Gesti√≥n de versiones

Este proyecto incluye un sistema automatizado para gestionar versiones tanto en desarrollo como en producci√≥n.

### Version Manager

El script `scripts/version_manager.py` te ayuda a gestionar las versiones de tu paquete de forma local.

#### Comandos disponibles

##### 1. Ver informaci√≥n actual
```bash
python scripts/version_manager.py show
```
**Qu√© hace:**
- Muestra la versi√≥n actual en `pyproject.toml`
- Muestra la rama git actual
- Muestra el commit actual
- Si no est√°s en `main`, sugiere una versi√≥n de desarrollo

**Ejemplo de salida:**
```
Versi√≥n actual: 0.0.1
Rama: feature/new-agent
Commit: a1b2c3d
Versi√≥n dev sugerida: 0.0.1.dev20250409143022+feature/new-agent.a1b2c3d
```

##### 2. Crear versi√≥n de desarrollo
```bash
python scripts/version_manager.py dev
```
**Qu√© hace:**
- Toma la versi√≥n actual y crea una versi√≥n de desarrollo
- Formato: `version.devYYYYMMDDHHMMSS+branch.commit`
- Actualiza autom√°ticamente el `pyproject.toml`

**Ejemplo:**
```bash
# Si est√°s en rama "feature/auth" con commit "abc123"
python scripts/version_manager.py dev
# Resultado: 0.0.1.dev20250409143022
```

##### 3. Establecer versi√≥n espec√≠fica
```bash
python scripts/version_manager.py set --version "0.1.0"
```
**Qu√© hace:**
- Cambia la versi√≥n a la que especifiques
- √ötil para releases o para corregir versiones

**Ejemplos:**
```bash
# Versi√≥n de release
python scripts/version_manager.py set --version "1.0.0"

# Versi√≥n beta
python scripts/version_manager.py set --version "1.0.0b1"

# Versi√≥n alpha
python scripts/version_manager.py set --version "1.0.0a1"
```

##### 4. Crear versi√≥n Release Candidate
```bash
python scripts/version_manager.py rc --version "1.0.1"
```
**Qu√© hace:**
- Crea una versi√≥n RC con el formato `version-rc<commit>`
- √ötil para preparar releases en ramas `release/*`

##### 5. Validar versi√≥n actual
```bash
python scripts/version_manager.py validate
```
**Qu√© hace:**
- Valida que la versi√≥n actual sea apropiada para la rama
- Verifica formato sem√°ntico en `main` y ramas `release/*`

##### 6. Crear dev con versi√≥n base personalizada
```bash
python scripts/version_manager.py dev --base-version "0.2.0"
```
**Qu√© hace:**
- Usa una versi√≥n base diferente a la actual
- √ötil cuando quieres preparar una dev version para la pr√≥xima release

### üöÄ Flujo de trabajo recomendado

#### Para desarrollo diario:
```bash
# 1. Ver estado actual
python scripts/version_manager.py show

# 2. Si est√°s en una rama feature, crear versi√≥n dev
python scripts/version_manager.py dev

# 3. Hacer tus cambios y commits
git add .
git commit -m "feat: nueva funcionalidad"

# 4. Si necesitas actualizar la versi√≥n dev (opcional)
python scripts/version_manager.py dev
```

#### Para releases:
```bash
# 1. En rama main, establecer versi√≥n de release
python scripts/version_manager.py set --version "1.0.0"

# 2. Commit de la versi√≥n
git add pyproject.toml
git commit -m "bump: version 1.0.0"

# 3. Usar el workflow de GitHub para publicar
```

#### Para testing:
```bash
# Crear versi√≥n de test espec√≠fica
python scripts/version_manager.py set --version "1.0.0rc1"
```

### ‚ö†Ô∏è Limitaciones de PyPI

PyPI no permite "local versions" (versiones con `+` y identificadores locales). Por eso, hemos adaptado el formato:

- ‚ùå No permitido: `1.0.0.dev20250409+feature.abc123`
- ‚úÖ Permitido: `1.0.0.dev20250409`

**Soluci√≥n para Release Candidates:**
- Convertimos el hash del commit (hexadecimal) a decimal
- Ejemplo: commit `abc123` ‚Üí `11256099` ‚Üí versi√≥n `1.0.1rc11256099`
- Esto mantiene la unicidad del commit en un formato compatible con PyPI

**Resultado:**
- Las versiones dev incluyen timestamp √∫nico
- Las versiones RC incluyen el hash del commit (en decimal)
- Mantenemos trazabilidad sin usar local versions

### üìã Casos de uso pr√°cticos

**Escenario 1: Trabajando en una feature**
```bash
git checkout -b feature/new-auth
python scripts/version_manager.py dev
# Ahora tienes: 0.0.1.dev20250409143022
```

**Escenario 2: Preparando release**
```bash
git checkout main
python scripts/version_manager.py set --version "1.0.0"
git add pyproject.toml
git commit -m "release: v1.0.0"
```

**Escenario 3: Preparando Release Candidate**
```bash
git checkout -b release/1.0.1
python scripts/version_manager.py rc --version "1.0.1"
# Resultado: 1.0.1rc12345678 (donde 12345678 es el hash del commit en decimal)
```

**Escenario 4: Hotfix urgente**
```bash
git checkout -b hotfix/critical-bug
python scripts/version_manager.py dev --base-version "1.0.1"
# Resultado: 1.0.1.dev20250409143022
```

## üîÑ Workflow de CI/CD Inteligente

El proyecto incluye un √∫nico workflow inteligente (`python-publish.yml`) que maneja autom√°ticamente diferentes tipos de versiones seg√∫n la rama:

### Comportamiento autom√°tico por rama:

#### üöÄ Rama `main` - Versiones de Producci√≥n
- **Trigger**: Push a `main` o ejecuci√≥n manual
- **Versi√≥n**: Usa exactamente la versi√≥n del `pyproject.toml`
- **Validaciones**:
  - ‚úÖ Verifica que sea una versi√≥n sem√°ntica v√°lida (ej: `1.0.0`)
  - ‚úÖ Verifica que no exista ya en PyPI
  - ‚ùå Falla si contiene sufijos de desarrollo (`dev`, `rc`, `alpha`, `beta`)
- **Destino**: PyPI producci√≥n

#### üéØ Ramas `release/*` - Release Candidates
- **Trigger**: Push a rama `release/X.Y.Z` o ejecuci√≥n manual
- **Versi√≥n**: `X.Y.ZrcN` donde N es el hash del commit en decimal (ej: `1.0.1rc12345678`)
- **Validaciones**:
  - ‚úÖ Verifica que `X.Y.Z` sea una versi√≥n sem√°ntica v√°lida
  - ‚úÖ Extrae la versi√≥n del nombre de la rama
  - ‚úÖ Usa hash del commit como identificador √∫nico
  - ‚úÖ Formato compatible con PyPI
- **Destino**: PyPI producci√≥n
- **Ejemplo**: Rama `release/1.0.1` + commit `abc123` ‚Üí Versi√≥n `1.0.1rc11256099`

#### üîß Otras ramas - Versiones de Desarrollo
- **Trigger**: Push a cualquier otra rama o ejecuci√≥n manual
- **Versi√≥n**: `current.devYYYYMMDDHHMMSS` (ej: `0.0.1.dev20250409143022`)
- **Destino**: PyPI producci√≥n
- **Nota**: Sin local versions para compatibilidad con PyPI

### Flujo de trabajo recomendado:

```bash
# 1. Desarrollo en feature branch
git checkout -b feature/new-functionality
# Versi√≥n autom√°tica: 0.0.1.dev20250409143022+feature-new-functionality.abc123

# 2. Preparar release
git checkout -b release/1.0.0
git push origin release/1.0.0
# Versi√≥n autom√°tica: 1.0.0rc12345678

# 3. Release final
git checkout main
python scripts/version_manager.py set --version "1.0.0"
git add pyproject.toml
git commit -m "release: v1.0.0"
git push origin main
# Versi√≥n: 1.0.0 (con validaciones)
```

## üì¶ Instalaci√≥n

```bash
pip install aigency
```

## üõ†Ô∏è Desarrollo

1. Clona el repositorio
2. Instala las dependencias de desarrollo
3. Usa el version manager para gestionar versiones durante el desarrollo

```bash
git clone <repo-url>
cd aigency-lib
pip install -e .
```
