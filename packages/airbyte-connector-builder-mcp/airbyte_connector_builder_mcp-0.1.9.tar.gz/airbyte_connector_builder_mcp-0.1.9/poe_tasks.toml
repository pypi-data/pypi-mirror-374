[tool.poe.tasks]
# Development tasks
build = { cmd = "bin/build_connector_feature_index.py", help = "Build connector feature index from Airbyte manifests" }
install = { cmd = "uv sync --all-extras", help = "Install and sync project dependencies." }
sync = { cmd = "uv sync --all-extras", help = "Sync project dependencies. (Alias for install.)" }
format = { cmd = "uv run ruff format .", help = "Format code with ruff" }
lint = { cmd = "uv run ruff check .", help = "Lint code with ruff" }
lint-fix = { cmd = "uv run ruff check --fix .", help = "Lint and fix code with ruff" }
lock = { cmd = "uv lock", help = "Lock dependencies." }
typecheck = { cmd = "uv run mypy connector_builder_mcp", help = "Type check code with mypy" }
test = { cmd = "uv run pytest tests/ -v", help = "Run tests with verbose output" }
test-fast = { cmd = "uv run pytest --exitfirst tests", help = "Run tests, stop on first failure" }

# MCP server tasks
server = { cmd = "uv run connector-builder-mcp", help = "Start the MCP server" }
mcp-serve-local = { cmd = "uv run connector-builder-mcp", help = "Start the MCP server with STDIO transport" }
mcp-serve-http = { cmd = "uv run python -c \"from connector_builder_mcp.server import app; app.run(transport='http', host='127.0.0.1', port=8000)\"", help = "Start the MCP server with HTTP transport" }
mcp-serve-sse = { cmd = "uv run python -c \"from connector_builder_mcp.server import app; app.run(transport='sse', host='127.0.0.1', port=8000)\"", help = "Start the MCP server with SSE transport" }
inspect = { cmd = "uv run fastmcp inspect connector_builder_mcp/server.py:app", help = "Inspect MCP tools and resources (supports --tools, --health, etc.)" }
test-tool = { cmd = "uv run python bin/test_mcp_tool.py", help = "Test MCP tools directly with JSON arguments: poe test-tool <tool_name> '<json_args>'" }

# Documentation tasks
docs-generate = { cmd = "uv run pdoc connector_builder_mcp --output-dir docs/generated", help = "Generate API documentation" }

# Combined tasks
check = { sequence = ["lint", "typecheck", "test"], help = "Run all checks" }

# Run MCP agent with a prompt string
run_mcp_prompt = { cmd = "uv run --project=examples examples/run_mcp_use_demo.py \"${prompt}\"", help = "Run MCP agent with a prompt string.", args = ["prompt"] }

# Auto-pilot and AI agents
codex.cmd = "npx @openai/codex --sandbox=workspace-write"
codex.cwd = "./ai-generated-files"
codex.help = "Run Codex AI agent with a prompt string."
build-connector.shell = """
(cat prompts/root-prompt.md; echo "$prompt") | codex exec \
    --sandbox=workspace-write \
    --cd=ai-generated-files \
    -
"""
build-connector.args = ["prompt"]
