image: python:latest

stages:
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python --version ; pip --version
  - curl -LsSf https://astral.sh/uv/install.sh | sh
  - export PATH="$HOME/.local/bin:$PATH"
  - uv venv
  - source .venv/bin/activate

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH         # run on any branch
    - if: $CI_COMMIT_TAG            # run on tags

# ---- Test job ----
test:
  stage: test
  script:
    - uv sync --dev
    - uv run pytest --maxfail=1 --disable-warnings -q
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# ---- Build job ----
build:
  stage: build
  script:
    - uv add --dev build
    # Adjust version if NOT a tag (for TestPyPI builds)
    # - uv run python -m build
    - uv build
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1h
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "ci"'   # run build on every push to ci
    - when: manual  # allow manual build anytime

# ---- Deploy to TestPyPI (manual) ----
deploy_test_pypi:
  stage: deploy
  dependencies: [build]
  id_tokens:
    TEST_PYPI_ID_TOKEN:
      aud: testpypi
  script:
    - uv add twine
    - echo "Deploying to TestPyPI..."
    - uv run twine check dist/*
    - if [ -n "$TEST_PYPI_ID_TOKEN" ]; then echo "OIDC token is set"; else echo "OIDC token is EMPTY"; fi
    - TWINE_USERNAME=__token__ TWINE_PASSWORD="$TEST_PYPI_ID_TOKEN" uv run python -m twine upload --verbose --repository testpypi dist/*

  rules:
    #- if: '$CI_COMMIT_BRANCH == "ci"'   # run build on every push to ci
    - when: manual
  environment:
    name: test-pypi
    url: https://test.pypi.org/project/${CI_PROJECT_NAME}/

# ---- Deploy to real PyPI (only tags on main) ----
deploy_pypi:
  stage: deploy
  dependencies: [build]
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  script:
    - uv add twine
    - echo "Deploying version $CI_COMMIT_TAG to PyPI"
    - uv run twine check dist/*
    #- TWINE_USERNAME=__token__ TWINE_PASSWORD="$PYPI_ID_TOKEN" uv run twine upload --repository pypi dist/*
    - uv publish --token $PYPI_ID_TOKEN
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_BRANCH == "main"
  environment:
    name: pypi
    url: https://pypi.org/project/tpgUtils/


deploy_test_pypi_debug:
  stage: deploy
  dependencies: [build]
  id_tokens:
    TEST_PYPI_ID_TOKEN:
      aud: test-pypi
  script:
    # Install twine inside uv venv (optional, you can also use system python)
    - uv add twine
    - echo "Deploying to TestPyPI (debug version)..."

    # Check the built packages
    - uv run twine check dist/*

    # Upload using a static TestPyPI API token stored in GitLab CI/CD
    - if [ -n "$TEST_PYPI_ID_TOKEN" ]; then echo "OIDC token is set"; else echo "OIDC token is EMPTY"; fi

    - uv publish --token $TEST_PYPI_ID_TOKEN --publish-url https://test.pypi.org/legacy/

    #- TWINE_USERNAME=__token__ TWINE_PASSWORD="$TEST_PYPI_ID_TOKEN" uv run python -m twine upload --verbose --repository testpypi dist/*

  rules:
    - if: '$CI_COMMIT_BRANCH == "ci"'   # run on every push to ci branch
  environment:
    name: test-pypi
    url: https://test.pypi.org/project/${CI_PROJECT_NAME}/