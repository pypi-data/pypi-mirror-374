Metadata-Version: 2.4
Name: universal-mcp-outlook
Version: 0.1.14
Summary: A Universal MCP Application: universal_mcp_outlook
Project-URL: Homepage, https://github.com/universal-mcp/outlook
Project-URL: Repository, https://github.com/universal-mcp/outlook
Author-email: Manoj Bajaj <manoj@agentr.dev>
License: MIT
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.11
Requires-Dist: httpx-aiohttp>=0.1.8
Requires-Dist: langchain-openai>=0.3.28
Requires-Dist: langgraph>=0.5.4
Requires-Dist: universal-mcp==0.1.23
Provides-Extra: dev
Requires-Dist: pre-commit; extra == 'dev'
Requires-Dist: ruff; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest-cov; extra == 'test'
Requires-Dist: pytest<9.0.0,>=7.0.0; extra == 'test'
Description-Content-Type: text/markdown

# Outlook Universal MCP Server

This repository contains an implementation of an Outlook Universal MCP (Model Context Protocol) server. It provides a standardized interface for interacting with Outlook's tools and services through a unified API.

The server is built using the Universal MCP framework.

This implementation follows the MCP specification, ensuring compatibility with other MCP-compliant services and tools.

## Usage

You can start using Outlook directly from [agentr.dev](https://agentr.dev). Visit [agentr.dev/apps](https://agentr.dev/apps) and enable Outlook.

If you have not used universal mcp before follow the setup instructions at [agentr.dev/quickstart](https://agentr.dev/quickstart)

## Available Tools

The full list of available tools is at [./src/universal_mcp_outlook/README.md](./src/universal_mcp_outlook/README.md)

## Local Development

### 📋 Prerequisites

Ensure you have the following before you begin:

- **Python 3.11+** (recommended)
- **[uv](https://github.com/astral-sh/uv)** (install globally with `pip install uv`)

### 🛠️ Setup Instructions

Follow the steps below to set up your development environment:

1. **Sync Project Dependencies**

   ```bash
   uv sync
   ```

   This installs all dependencies from `pyproject.toml` into a local virtual environment (`.venv`).

2. **Activate the Virtual Environment**

   For Linux/macOS:

   ```bash
   source .venv/bin/activate
   ```

   For Windows (PowerShell):

   ```powershell
   .venv\Scripts\Activate
   ```

3. **Start the MCP Inspector**

   ```bash
   mcp dev src/universal_mcp_outlook/server.py
   ```

   This will start the MCP inspector. Make note of the address and port shown in the console output.

4. **Install the Application**
   ```bash
   mcp install src/universal_mcp_outlook/server.py
   ```

## 📁 Project Structure

```text
.
├── src/
│   └── universal_mcp_outlook/
│       ├── __init__.py       # Package initializer
│       ├── server.py         # Server entry point
│       ├── app.py            # Application tools
│       └── README.md         # List of application tools
├── tests/                    # Test suite
├── .env                      # Environment variables for local development
├── pyproject.toml            # Project configuration
└── README.md                 # This file
```

## 📄 License

This project is licensed under the [MIT License](LICENSE).

---

_Generated with **MCP CLI** — Happy coding! 🚀_
