[project]
name = "openfiles-ai"
version = "0.1.8"
description = "OpenFiles SDK - AI-native file storage for your AI agents"
authors = [{name = "OpenFiles AI"}]
readme = "README.md"
license = {text = "MIT"}
keywords = ["openfiles", "file-storage", "ai", "sdk", "s3-style", "version-control"]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "openai>=1.101.0",
    "pydantic-settings (>=2.10.1,<3.0.0)"
]

[project.urls]
Homepage = "https://github.com/openfiles-ai/openfiles"
Repository = "https://github.com/openfiles-ai/openfiles"
Issues = "https://github.com/openfiles-ai/openfiles/issues"
Documentation = "https://github.com/openfiles-ai/openfiles/tree/main/sdks/python"

[tool.poetry]
packages = [{include = "openfiles_ai"}]

[tool.poetry.dependencies]
python = "^3.9"
httpx = ">=0.27.0"
pydantic = ">=2.0.0"
pydantic-settings = "^2.10.1"
typing-extensions = ">=4.0.0"
openai = ">=1.101.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.10.0"
mypy = "^1.0.0"
ruff = "^0.1.0"
black = "^23.0.0"
datamodel-code-generator = "^0.25.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py38"
select = ["E", "F", "UP", "B", "SIM", "I"]
ignore = ["E501"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["openfiles_ai"]
omit = ["*/tests/*", "*/generated/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]