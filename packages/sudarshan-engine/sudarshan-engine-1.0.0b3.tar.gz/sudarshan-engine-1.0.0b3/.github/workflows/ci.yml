name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full security audit weekly
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.8'
  POETRY_VERSION: '1.1.13'

jobs:
  # Security and Quality Gates
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit (Python security linter)
      run: |
        bandit -r sudarshan/ security/ -f json -o bandit-report.json || true
        bandit -r sudarshan/ security/ --exit-zero

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --output json > safety-report.json || true
        safety check --exit-code 0

    - name: Run Semgrep (semantic code analysis)
      run: |
        semgrep --config auto --json > semgrep-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

    - name: Security gate
      run: |
        # Check for critical vulnerabilities
        if grep -q '"issue_severity": "CRITICAL"' semgrep-report.json; then
          echo "‚ùå Critical security issues found!"
          exit 1
        fi

        # Check for high-severity issues
        high_count=$(grep -c '"issue_severity": "HIGH"' semgrep-report.json || echo "0")
        if [ "$high_count" -gt 5 ]; then
          echo "‚ùå Too many high-severity security issues ($high_count > 5)!"
          exit 1
        fi

        echo "‚úÖ Security scan passed"

  # Code Quality Checks
  quality-check:
    name: üßπ Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        pip install black isort flake8 mypy pytest-cov

    - name: Check code formatting (Black)
      run: |
        black --check --diff sudarshan/ security/ tests/

    - name: Check import sorting (isort)
      run: |
        isort --check-only --diff sudarshan/ security/ tests/

    - name: Lint code (flake8)
      run: |
        flake8 sudarshan/ security/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Type check (mypy)
      run: |
        mypy sudarshan/ security/ --ignore-missing-imports

  # Unit Tests
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y cmake gcc ninja-build libssl-dev python3-dev

    - name: Build and install liboqs
      run: |
        git clone --depth=1 https://github.com/open-quantum-safe/liboqs.git
        cd liboqs
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=sudarshan --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-unit-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  # Integration Tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y cmake gcc ninja-build libssl-dev python3-dev

    - name: Build and install liboqs
      run: |
        git clone --depth=1 https://github.com/open-quantum-safe/liboqs.git
        cd liboqs
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=sudarshan --cov-report=xml --cov-append

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-integration
        path: coverage.xml

  # Security Tests
  security-tests:
    name: üõ°Ô∏è Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y cmake gcc ninja-build libssl-dev python3-dev

    - name: Build and install liboqs
      run: |
        git clone --depth=1 https://github.com/open-quantum-safe/liboqs.git
        cd liboqs
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Run security tests
      run: |
        pytest tests/security/ -v -k "not penetration" --tb=short

    - name: Run penetration tests (limited)
      run: |
        pytest tests/security/test_penetration.py::TestFuzzingEngine -v --tb=short

  # Performance Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: security-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y cmake gcc ninja-build libssl-dev python3-dev

    - name: Build and install liboqs
      run: |
        git clone --depth=1 https://github.com/open-quantum-safe/liboqs.git
        cd liboqs
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  # Build and Package
  build-package:
    name: üì¶ Build Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        pip install setuptools wheel twine build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sudarshan-package
        path: |
          dist/*.whl
          dist/*.tar.gz

  # Multi-platform Build
  multi-platform:
    name: üåê Multi-Platform Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y cmake gcc ninja-build libssl-dev python3-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja openssl@3

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake ninja openssl python3

    - name: Build and install liboqs
      run: |
        git clone --depth=1 https://github.com/open-quantum-safe/liboqs.git
        cd liboqs
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --parallel 4
        sudo cmake --install .  # Linux/macOS
        # cmake --install .     # Windows (if admin)

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Run basic tests
      run: |
        python -c "import sudarshan; print('‚úÖ Import successful')"
        python -c "from sudarshan.crypto import QuantumSafeCrypto; print('‚úÖ Crypto import successful')"

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          *.log
          test-results.xml

  # Coverage Report
  coverage-report:
    name: üìä Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-unit-3.8

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage combine
        coverage report --show-missing
        coverage html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/

    - name: Coverage gate
      run: |
        COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "‚ùå Coverage too low: $COVERAGE% (required: 85%)"
          exit 1
        fi
        echo "‚úÖ Coverage acceptable: $COVERAGE%"

  # Final Quality Gate
  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check, unit-tests, integration-tests, security-tests, performance-tests, build-package, multi-platform, coverage-report]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "‚ùå Security scan failed"
          exit 1
        fi

        if [[ "${{ needs.quality-check.result }}" != "success" ]]; then
          echo "‚ùå Quality check failed"
          exit 1
        fi

        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi

        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "‚ùå Integration tests failed"
          exit 1
        fi

        if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "‚ùå Security tests failed"
          exit 1
        fi

        if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
          echo "‚ùå Performance tests failed"
          exit 1
        fi

        if [[ "${{ needs.build-package.result }}" != "success" ]]; then
          echo "‚ùå Package build failed"
          exit 1
        fi

        if [[ "${{ needs.multi-platform.result }}" != "success" ]]; then
          echo "‚ùå Multi-platform build failed"
          exit 1
        fi

        if [[ "${{ needs.coverage-report.result }}" != "success" ]]; then
          echo "‚ùå Coverage report failed"
          exit 1
        fi

        echo "üéâ All quality gates passed!"

  # Deploy to Test PyPI (on main branch)
  deploy-test:
    name: üöÄ Deploy to Test PyPI
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download package
      uses: actions/download-artifact@v3
      with:
        name: sudarshan-package

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  # Deploy to Production PyPI (on release)
  deploy-production:
    name: üöÄ Deploy to Production PyPI
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download package
      uses: actions/download-artifact@v3
      with:
        name: sudarshan-package

    - name: Publish to Production PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}