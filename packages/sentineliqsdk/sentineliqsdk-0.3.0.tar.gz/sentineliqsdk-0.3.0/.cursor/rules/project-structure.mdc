---
alwaysApply: true
description: SentinelIQ SDK project structure and file organization
---

# SentinelIQ SDK Project Structure

This project follows strict file organization patterns for analyzers, responders, and detectors.

## File Layout Requirements

### Analyzers
- **Code**: `src/sentineliqsdk/analyzers/<name>.py`
- **Example**: `examples/analyzers/<name>_example.py`
- **Tests**: `tests/analyzers/test_<name>.py`
- **Class naming**: `<Name>Analyzer` extending `sentineliqsdk.analyzers.Analyzer`

### Responders
- **Code**: `src/sentineliqsdk/responders/<name>.py`
- **Example**: `examples/responders/<name>_example.py`
- **Tests**: `tests/responders/test_<name>.py`
- **Class naming**: `<Name>Responder` extending `sentineliqsdk.responders.Responder`

### Detectors
- **Core**: `src/sentineliqsdk/extractors/detectors.py` (preferred for official types)
- **Custom**: `src/sentineliqsdk/extractors/custom/<name>_detector.py`
- **Example**: `examples/detectors/<name>_example.py`
- **Tests**: `tests/extractors/test_<name>_detector.py`

## Key Directories
- `src/sentineliqsdk/` - Main SDK code
- `examples/` - Runnable examples for all modules
- `tests/` - Test files organized by module type
- `docs/` - Documentation (Guides, Tutorials, Examples, Reference)
- `docs/modulos/` - Programmatic usage pages for each module

## Internal Layout (for maintainers)
- `src/sentineliqsdk/core/worker.py` - Worker implementation
- `src/sentineliqsdk/analyzers/base.py` - Analyzer base class
- `src/sentineliqsdk/responders/base.py` - Responder base class
- `src/sentineliqsdk/extractors/regex.py` - Extractor implementation
- `src/sentineliqsdk/core/config/` - Configuration modules

## Requirements
- Python 3.13
- Absolute imports only
- 4-space indentation
- Line length 100 characters
- Always use `from __future__ import annotations` first