---
globs: src/sentineliqsdk/extractors/custom/*.py,examples/detectors/*.py,tests/extractors/*.py
description: Detector development patterns and requirements
---

# Detector Development Rules

## Custom Detector Structure
```python
from __future__ import annotations
from dataclasses import dataclass

@dataclass
class MyDetector:
    name: str = "my_type"

    def matches(self, value: str) -> bool:
        return value.startswith("MY:")
```

## Key Requirements
- **Protocol**: Must have `name: str` attribute and `matches(value: str) -> bool` method
- **Registration**: Register via `Extractor.register_detector(MyDetector(), before="hash")`
- **File location**: `src/sentineliqsdk/extractors/custom/<name>_detector.py`
- **Imports**: Absolute imports only, `from __future__ import annotations` first

## Core Detector Integration (Official Types)
To include in core (official type):
1. Add the literal to `sentineliqsdk.models.DataType`
2. Import/add the detector in the precedence list in `Extractor` (`extractors/regex.py`)
3. Consider normalization/flags exposed by `DetectionContext` when relevant

## Precedence Order
First match wins: ip → cidr → url → domain → hash → user-agent → uri_path → registry → mail → mac → asn → cve → ip_port → fqdn

## Registration Examples
```python
# Register before existing detector
Extractor.register_detector(MyDetector(), before="hash")

# Register after existing detector  
Extractor.register_detector(MyDetector(), after="ip")

# Register at specific position
Extractor.register_detector(MyDetector(), before="url", after="ip")
```

## Common Data Types
- `ip` (IPv4 and IPv6)
- `cidr`
- `url`
- `domain`
- `fqdn`
- `hash` (MD5/SHA1/SHA256)
- `mail`
- `user-agent`
- `uri_path`
- `registry`
- `mac`
- `asn`
- `cve`
- `ip_port`

## Example Usage in Analyzer
```python
from sentineliqsdk.extractors import Extractor

# Register custom detector
Extractor.register_detector(MyDetector(), before="hash")

# Use in analyzer
extractor = Extractor(ignore=self.get_data())
results = extractor.check_iterable(some_data)
```

## Testing Requirements
- Tests must cover positives and negatives
- Avoid obvious false positives
- Test edge cases and boundary conditions
- Example in `examples/detectors/` demonstrating `Extractor.check_string/iterable`