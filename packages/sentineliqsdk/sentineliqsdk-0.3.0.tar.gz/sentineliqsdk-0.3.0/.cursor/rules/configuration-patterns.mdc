---
globs: src/sentineliqsdk/**/*.py,examples/**/*.py
description: Configuration patterns and requirements for all modules
---

# Configuration Patterns

## Configuration Rules (MANDATORY)

### PROHIBITED Practices
- **NEVER** use `os.environ` directly in modules
- **NEVER** hardcode credentials in source code
- **NEVER** use environment variables for module-specific configuration

### REQUIRED Practices
- **ALWAYS** use `WorkerConfig.secrets` for credentials (API keys, passwords, tokens)
- **ALWAYS** use `WorkerConfig` for module-specific settings
- **ALWAYS** use `get_secret()` and `get_config()` methods

## Configuration Access Methods

### For Credentials (Secrets)
```python
# CORRECT: Use get_secret() for credentials
api_key = self.get_secret("my_module.api_key", message="API key required")
username = self.get_secret("my_module.username")
password = self.get_secret("my_module.password")

# INCORRECT: Direct os.environ usage (PROHIBITED)
import os
api_key = os.environ["API_KEY"]  # DON'T DO THIS
```

### For Settings (Configuration)
```python
# CORRECT: Use get_config() for settings
timeout = self.get_config("my_module.timeout", 30)
max_retries = self.get_config("my_module.max_retries", 3)
debug_mode = self.get_config("my_module.debug", False)

# INCORRECT: Direct os.environ usage (PROHIBITED)
import os
timeout = int(os.environ.get("TIMEOUT", "30"))  # DON'T DO THIS
```

## WorkerConfig Structure

### Secrets Configuration
```python
from sentineliqsdk import WorkerInput, WorkerConfig

secrets = {
    "my_module": {
        "api_key": "secret_key",
        "username": "user",
        "password": "pass",
        "webhook_url": "https://webhook.example.com"
    },
    "another_module": {
        "token": "another_token"
    }
}

input_data = WorkerInput(
    data_type="ip",
    data="1.2.3.4",
    config=WorkerConfig(secrets=secrets)
)
```

### Configuration Parameters
```python
# Module-specific configuration
config = WorkerConfig(
    check_tlp=True,
    max_tlp=2,
    check_pap=True,
    max_pap=2,
    auto_extract=True,
    # Custom module parameters
    my_module_timeout=30,
    my_module_max_retries=3,
    my_module_debug=False
)
```

## Module Implementation Patterns

### Analyzer Configuration
```python
class MyAnalyzer(Analyzer):
    def __init__(self, input_data, secret_phrases=None):
        super().__init__(input_data, secret_phrases)
        
        # Get credentials from WorkerConfig.secrets
        self.api_key = self.get_secret("my_analyzer.api_key", message="API key required")
        self.username = self.get_secret("my_analyzer.username")
        self.password = self.get_secret("my_analyzer.password")
        
        # Get configuration from WorkerConfig
        self.timeout = self.get_config("my_analyzer.timeout", 30)
        self.max_retries = self.get_config("my_analyzer.max_retries", 3)
```

### Responder Configuration
```python
class MyResponder(Responder):
    def __init__(self, input_data, secret_phrases=None):
        super().__init__(input_data, secret_phrases)
        
        # Get credentials from WorkerConfig.secrets
        self.webhook_url = self.get_secret("my_responder.webhook_url", message="Webhook URL required")
        self.api_token = self.get_secret("my_responder.api_token")
        
        # Get configuration from WorkerConfig
        self.timeout = self.get_config("my_responder.timeout", 30)
        self.retry_count = self.get_config("my_responder.retry_count", 3)
```

## Example Configuration

### Complete Example
```python
from sentineliqsdk import WorkerInput, WorkerConfig
from sentineliqsdk.analyzers.my_analyzer import MyAnalyzer

# Configure secrets and settings
secrets = {
    "my_analyzer": {
        "api_key": "your_api_key_here",
        "username": "your_username",
        "password": "your_password"
    }
}

config = WorkerConfig(
    check_tlp=True,
    max_tlp=2,
    check_pap=True,
    max_pap=2,
    auto_extract=True,
    # Module-specific settings
    my_analyzer_timeout=60,
    my_analyzer_max_retries=5,
    my_analyzer_debug=True,
    secrets=secrets
)

# Create input with configuration
input_data = WorkerInput(
    data_type="ip",
    data="1.2.3.4",
    tlp=2,
    pap=2,
    config=config
)

# Run analyzer
analyzer = MyAnalyzer(input_data)
report = analyzer.execute()
```

## Error Handling

### Missing Credentials
```python
# get_secret() will call self.error() if required credential is missing
api_key = self.get_secret("my_module.api_key", message="API key required")
# If missing, this will print error JSON and exit with code 1
```

### Missing Configuration
```python
# get_config() returns default value if configuration is missing
timeout = self.get_config("my_module.timeout", 30)  # Returns 30 if not set
debug = self.get_config("my_module.debug", False)   # Returns False if not set
```

## Security Considerations

### Sensitive Data Handling
- Credentials in `WorkerConfig.secrets` are automatically sanitized in error messages
- Keys containing `key`, `password`, `secret`, `token` are replaced with `"REMOVED"`
- Use `get_secret()` for all sensitive configuration

### Environment Variables (Limited Use)
- Only use `get_env()` for system-level configuration (proxies, etc.)
- Never use `os.environ` directly in modules
- Prefer `WorkerConfig` for all module-specific settings

## Migration from os.environ

### Before (INCORRECT)
```python
import os

class MyAnalyzer(Analyzer):
    def __init__(self, input_data, secret_phrases=None):
        super().__init__(input_data, secret_phrases)
        self.api_key = os.environ["API_KEY"]
        self.timeout = int(os.environ.get("TIMEOUT", "30"))
```

### After (CORRECT)
```python
class MyAnalyzer(Analyzer):
    def __init__(self, input_data, secret_phrases=None):
        super().__init__(input_data, secret_phrases)
        self.api_key = self.get_secret("my_analyzer.api_key", message="API key required")
        self.timeout = self.get_config("my_analyzer.timeout", 30)
```

## Checklist for Configuration

- [ ] **NO** direct `os.environ` usage in modules
- [ ] **USE** `get_secret()` for all credentials
- [ ] **USE** `get_config()` for all settings
- [ ] **CONFIGURE** `WorkerConfig.secrets` in examples
- [ ] **DOCUMENT** configuration requirements
- [ ] **TEST** with proper configuration
- [ ] **HANDLE** missing credentials gracefully