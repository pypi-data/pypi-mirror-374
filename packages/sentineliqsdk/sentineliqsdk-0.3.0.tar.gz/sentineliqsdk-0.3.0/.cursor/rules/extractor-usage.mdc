---
globs: src/sentineliqsdk/extractors/*.py,examples/**/*.py
description: Extractor usage patterns and IOC detection
---

# Extractor Usage Patterns

## IOC Extractor Overview
The `Extractor` uses Python stdlib helpers (e.g., `ipaddress`, `urllib.parse`, `email.utils`) instead of complex regexes.

## Supported Data Types
- `ip` (IPv4 and IPv6)
- `cidr`
- `url`
- `domain`
- `fqdn`
- `hash` (MD5/SHA1/SHA256)
- `mail`
- `user-agent`
- `uri_path`
- `registry`
- `mac`
- `asn`
- `cve`
- `ip_port`

## Basic Usage
```python
from sentineliqsdk.extractors import Extractor

# Create extractor
extractor = Extractor(
    ignore=None,  # String to ignore during extraction
    strict_dns=False,
    normalize_domains=False,
    normalize_urls=False,
    support_mailto=False,
    max_string_length=10000,
    max_iterable_depth=100
)

# Check single string
data_type = extractor.check_string("1.2.3.4")  # Returns "ip" or empty string

# Check iterable (list, dict, str, tuple, set)
results = extractor.check_iterable(some_data)  # Returns list[ExtractorResult]
```

## Precedence Order
First match wins: ip → cidr → url → domain → hash → user-agent → uri_path → registry → mail → mac → asn → cve → ip_port → fqdn

## Custom Detector Registration
```python
# Register before existing detector
Extractor.register_detector(MyDetector(), before="hash")

# Register after existing detector
Extractor.register_detector(MyDetector(), after="ip")

# Register at specific position
Extractor.register_detector(MyDetector(), before="url", after="ip")
```

## Auto-extraction in Analyzers
When `auto_extract` is enabled (default):
```python
class MyAnalyzer(Analyzer):
    def artifacts(self, raw) -> list[Artifact]:
        # Uses Extractor(ignore=self.get_data()) automatically
        # Returns list[Artifact] dataclass collection
        # Excludes the original observable value
        return super().artifacts(raw)
```

## Manual Extraction
```python
# In analyzer or responder
extractor = Extractor(ignore=self.get_data())
results = extractor.check_iterable(report_data)

# Convert to artifacts
artifacts = []
for result in results:
    artifact = self.build_artifact(
        data_type=result.data_type,
        data=result.data,
        tlp=result.tlp,
        extra=result.extra
    )
    artifacts.append(artifact)
```

## Detection Context
When creating custom detectors, consider normalization and flags exposed by `DetectionContext`:
- `strict_dns`: Strict DNS validation
- `normalize_domains`: Domain normalization
- `normalize_urls`: URL normalization
- `support_mailto`: Support mailto: URLs
- `max_string_length`: Maximum string length to process
- `max_iterable_depth`: Maximum depth for nested structures

## Example Integration
```python
# In analyzer
def execute(self) -> AnalyzerReport:
    observable = self.get_data()
    
    # Manual extraction from some data
    extractor = Extractor(ignore=observable)
    results = extractor.check_iterable(some_data)
    
    # Build artifacts
    artifacts = []
    for result in results:
        artifacts.append(self.build_artifact(
            data_type=result.data_type,
            data=result.data
        ))
    
    full = {
        "observable": observable,
        "extracted_artifacts": len(artifacts),
        "metadata": self.METADATA.to_dict()
    }
    
    return self.report(full)
```