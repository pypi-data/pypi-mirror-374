---
globs: src/sentineliqsdk/core/**/*.py,src/sentineliqsdk/analyzers/base.py,src/sentineliqsdk/responders/base.py
description: Core worker concepts and base class patterns
---

# Worker Core Concepts

## Worker Base Class
Signature: `Worker(input_data: WorkerInput, secret_phrases: tuple[str, ...] | None)`

### Key Methods
- `get_param(name, default=None, message=None)`: Not used in this repository (dataclasses only)
- `get_env(key, default=None, message=None)`: Read environment variables (use sparingly)
- `get_secret(key, default=None, message=None)`: Read secrets from WorkerConfig.secrets
- `get_config(key, default=None, message=None)`: Read configuration from WorkerConfig
- `get_data() -> Any`: Returns the observable value (overridden in subclasses)
- `build_operation(op_type: str, **parameters) -> Operation`: Describe follow-up operations
- `operations(raw) -> list[Operation]`: Hook for follow-up work; default `[]`
- `summary(raw) -> dict`: Short summary; default `{}`
- `artifacts(raw) -> list[Artifact]`: Analyzer override performs auto-extraction when enabled
- `report(output: dict) -> dict | AnalyzerReport | ResponderReport`: Returns result in memory
- `error(message: str, ensure_ascii: bool = False) -> NoReturn`: Print error JSON and exit(1)
- `run() -> None`: Main logic (override in subclasses)

## Analyzer Extensions
`Analyzer` extends `Worker` with analyzer-specific behavior:

### Key Differences
- `get_data()`: Returns `filename` when `data_type == "file"`, otherwise the `data` field
- `auto_extract`: Enabled by default unless `config.auto_extract` is `False`
- `artifacts(raw)`: When enabled, uses `Extractor(ignore=self.get_data())` and returns `list[Artifact]`
- `build_taxonomy(level, namespace, predicate, value) -> TaxonomyEntry`: Helper for taxonomy entries
- `build_artifact(data_type, data, **kwargs) -> Artifact`: Build an artifact dataclass
- `report(full_report: dict) -> AnalyzerReport`: Returns envelope with `success/summary/artifacts/operations/full_report`

### Taxonomy Levels
- `info`: Informational
- `safe`: Safe/clean
- `suspicious`: Suspicious but not malicious
- `malicious`: Confirmed malicious

## Responder Extensions
`Responder` mirrors `Analyzer` with a simpler envelope:

### Key Differences
- `get_data()`: Returns the `data` field
- `report(full_report) -> ResponderReport`: Returns envelope with `success/full_report/operations`

## Operations and Artifacts

### Operations
Use `build_operation("<type>", **params)` and return a list from `operations(full_report)`:
```python
def operations(self, raw) -> list[Operation]:
    return [
        self.build_operation("hunt", target=self.get_data(), priority="high"),
        self.build_operation("notify", message="Analysis complete")
    ]
```

### Artifacts
Build artifacts in analyzers:
```python
# File artifact
artifact = self.build_artifact("file", "/path/to/file")

# Non-file artifact
artifact = self.build_artifact("ip", "8.8.8.8", tlp=2)
```

## TLP/PAP Enforcement
- Enable with `config.check_tlp`/`config.check_pap`
- Set `config.max_tlp`/`config.max_pap`
- If exceeded, worker calls `error("TLP is higher than allowed.")`
- Checks run automatically in `Worker.__init__`

## Environment and Configuration

### Configuration Access (REQUIRED)
- **`get_secret(key, default=None, message=None)`**: Read secrets from `WorkerConfig.secrets` (PREFERRED)
- **`get_config(key, default=None, message=None)`**: Read configuration from `WorkerConfig`
- **`get_env(key, default=None, message=None)`**: Read environment variables (use sparingly)

### Configuration Rules
- **PROHIBITED**: Direct use of `os.environ` in modules
- **REQUIRED**: Use `WorkerConfig.secrets` for API keys, passwords, tokens
- **REQUIRED**: Use `WorkerConfig` for all module configuration
- **ALLOWED**: `get_env()` only for system-level configuration (proxies, etc.)

### Configuration Examples
```python
# CORRECT: Use WorkerConfig.secrets for credentials
secrets = {
    "my_module": {
        "api_key": "secret_key",
        "username": "user",
        "password": "pass"
    }
}
input_data = WorkerInput(..., config=WorkerConfig(secrets=secrets))

# In module:
api_key = self.get_secret("my_module.api_key")

# CORRECT: Use WorkerConfig for settings
config = WorkerConfig(
    check_tlp=True,
    max_tlp=2,
    proxy=ProxyConfig(http="http://proxy:8080")
)

# In module:
max_retries = self.get_config("my_module.max_retries", 3)

# INCORRECT: Direct os.environ usage
import os
api_key = os.environ["API_KEY"]  # PROHIBITED
```

### Proxy Configuration
- Via `WorkerInput.config.proxy` (PREFERRED)
- Via environment variables `http_proxy`/`https_proxy` (ALLOWED)
- Secret phrases for sensitive data handling

## Error Handling
```python
# Print error and exit
self.error("Something went wrong")

# With ASCII encoding control
self.error("Error with special chars: caf√©", ensure_ascii=True)
```

## Legacy API Removal
- Legacy helpers like `getData`/`checkTlp` are removed
- Use the modern API only
- TLP/PAP checks run automatically in `Worker.__init__`

## Internal Layout
- `src/sentineliqsdk/core/worker.py`: Worker implementation
- `src/sentineliqsdk/analyzers/base.py`: Analyzer base class
- `src/sentineliqsdk/responders/base.py`: Responder base class
- `src/sentineliqsdk/core/config/proxy.py`: Environment proxy configuration
- `src/sentineliqsdk/core/config/secrets.py`: Error payload config sanitization