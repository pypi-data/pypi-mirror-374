#!/usr/bin/env python3
"""CIRCL Vulnerability Lookup Analyzer Example.

This example demonstrates how to use the CIRCL Vulnerability Lookup Analyzer
to analyze CVE identifiers and get vulnerability information.
"""

from __future__ import annotations

import argparse
import json
import sys

from sentineliqsdk import WorkerConfig, WorkerInput
from sentineliqsdk.analyzers.circl_vulnerability_lookup import CIRCLVulnerabilityLookupAnalyzer


def main():
    """Run the CIRCL Vulnerability Lookup Analyzer example."""
    parser = argparse.ArgumentParser(description="CIRCL Vulnerability Lookup Analyzer Example")
    parser.add_argument(
        "--cve", default="CVE-2021-44228", help="CVE to analyze (default: CVE-2021-44228)"
    )
    parser.add_argument(
        "--execute", action="store_true", help="Execute real API calls (default: dry-run)"
    )
    parser.add_argument(
        "--include-dangerous", action="store_true", help="Include dangerous operations"
    )
    parser.add_argument("--url", default="https://vulnerability.circl.lu/", help="CIRCL API URL")
    parser.add_argument("--token", help="CIRCL API token (required for real calls)")

    args = parser.parse_args()

    # Configuration for CIRCL Vulnerability Lookup
    secrets: dict[str, dict[str, str]] = {}
    if args.token:
        secrets["circl_vulnerability_lookup"] = {"token": args.token}
    elif args.execute:
        print("Error: --token is required when using --execute", file=sys.stderr)
        sys.exit(1)

    config = WorkerConfig(
        check_tlp=True, max_tlp=2, check_pap=True, max_pap=2, auto_extract=True, secrets=secrets
    )

    # Create input data
    input_data = WorkerInput(data_type="cve", data=args.cve, tlp=2, pap=2, config=config)

    try:
        # Create and run analyzer
        analyzer = CIRCLVulnerabilityLookupAnalyzer(input_data)

        if not args.execute:
            print("Running in dry-run mode. Use --execute to make real API calls.")
            print("Note: This analyzer requires the pyvulnerabilitylookup library.")
            print("Install it with: pip install pyvulnerabilitylookup")
            print()

        report = analyzer.execute()

        # Print compact result
        print(json.dumps(report.full_report, ensure_ascii=False, indent=2))

    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
