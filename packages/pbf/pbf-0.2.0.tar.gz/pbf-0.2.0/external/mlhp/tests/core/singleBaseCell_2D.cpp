// This file is part of the mlhp project. License: See LICENSE

#include "mlhp/core/alias.hpp"
#include "mlhp/core/multilevelhpcore.hpp"

#include "tests/core/singleBaseCell_2D.hpp"

#include <array>
#include <vector>

namespace mlhp::singlebasecell2d
{

size_t numberOfElements = 45;
size_t numberOfLeafElements = 34;

std::vector<RefinementLevel> levels
{ 
    0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
};
    
std::vector<CellIndex> parents
{
    NoCell, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4,  
    4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 10, 10, 10, 
    10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13
};

decltype( children ) children
{{
    std::array<CellIndex, 4>{  1,  2,  3,  4 }, // 0
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell }, // 1
    std::array<CellIndex, 4>{  5,  6,  7,  8 }, // 2
    std::array<CellIndex, 4>{  9, 10, 11, 12 }, // 3
    std::array<CellIndex, 4>{ 13, 14, 15, 16 }, // 4
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell }, // 5
    std::array<CellIndex, 4>{ 17, 18, 19, 20 }, // 6
    std::array<CellIndex, 4>{ 21, 22, 23, 24 }, // 7
    std::array<CellIndex, 4>{ 25, 26, 27, 28 }, // 8
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell }, // 9
    std::array<CellIndex, 4>{ 29, 30, 31, 32 }, // 10
    std::array<CellIndex, 4>{ 33, 34, 35, 36 }, // 11
    std::array<CellIndex, 4>{ 37, 38, 39, 40 }, // 12
    std::array<CellIndex, 4>{ 41, 42, 43, 44 }, // 13
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell },
    std::array<CellIndex, 4>{ NoCell, NoCell, NoCell, NoCell }
}};
    
std::vector<bool> isLeaf
{ 
    false, true, false, false, false, true, false, false, false, true, false, 
    false, false, false, true, true, true, true, true, true, true, true, 
    true, true, true, true, true, true, true, true, true, true, true, true, 
    true, true, true, true, true, true, true, true, true, true, true, 
};

std::vector<PositionInParent<2>> positionsInParent
{
    { NoLocalPosition, NoLocalPosition },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 },
    { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }
};

std::vector<std::array<CellIndex, 4>> neighboursData
{
    { { NoCell, NoCell, NoCell, NoCell } }, //  0 _____
    { { NoCell,      3, NoCell,      2 } }, //  1
    { { NoCell,      4,      1, NoCell } }, //  2
    { {      1, NoCell, NoCell,      4 } }, //  3
    { {      2, NoCell,      3, NoCell } }, //  4 _____
    { { NoCell,      7,      1,      6 } }, //  5
    { { NoCell,      8,      5, NoCell } }, //  6
    { {      5,     13,      1,      8 } }, //  7
    { {      6,     14,      7, NoCell } }, //  8
    { {      1,     11, NoCell,     10 } }, //  9
    { {      1,     12,      9,     13 } }, // 10
    { {      9, NoCell, NoCell,     12 } }, // 11
    { {     10, NoCell,     11,     15 } }, // 12
    { {      7,     15,     10,     14 } }, // 13
    { {      8,     16,     13, NoCell } }, // 14
    { {     13, NoCell,     12,     16 } }, // 15
    { {     14, NoCell,     15, NoCell } }, // 16 _____
    { { NoCell,     19,      5,     18 } }, // 17
    { { NoCell,     20,     17, NoCell } }, // 18
    { {     17,     25,      5,     20 } }, // 19
    { {     18,     26,     19, NoCell } }, // 20
    { {      5,     23,      1,     22 } }, // 21
    { {      5,     24,     21,     25 } }, // 22
    { {     21,     41,      1,     24 } }, // 23
    { {     22,     42,     23,     27 } }, // 24
    { {     19,     27,     22,     26 } }, // 25
    { {     20,     28,     25, NoCell } }, // 26
    { {     25,     14,     24,     28 } }, // 27
    { {     26,     14,     27, NoCell } }, // 28
    { {      1,     31,      9,     30 } }, // 29
    { {      1,     32,     29,     41 } }, // 30
    { {     29,     37,      9,     32 } }, // 11
    { {     30,     38,     31,     43 } }, // 32
    { {      9,     35, NoCell,     34 } }, // 33
    { {      9,     36,     33,     37 } }, // 34
    { {     33, NoCell, NoCell,     36 } }, // 35
    { {     34, NoCell,     35,     39 } }, // 36
    { {     31,     39,     34,     38 } }, // 37
    { {     32,     40,     37,     15 } }, // 38
    { {     37, NoCell,     36,     40 } }, // 39
    { {     38, NoCell,     39,     15 } }, // 40
    { {     23,     43,     30,     42 } }, // 41
    { {     24,     44,     41,     14 } }, // 42
    { {     41,     15,     32,     44 } }, // 43
    { {     42,     15,     43,     14 } }  // 44
};

NCubeNeighboursVector<2> neighbours( )
{
    NCubeNeighboursVector<2> result( numberOfElements );

    for( size_t i = 0; i < numberOfElements; ++i )
    {
        result[i]( 0, 0 ) = neighboursData[i][0];
        result[i]( 0, 1 ) = neighboursData[i][1];
        result[i]( 1, 0 ) = neighboursData[i][2];
        result[i]( 1, 1 ) = neighboursData[i][3];
    }

    return result;
}

std::vector<std::pair<CellIndex, size_t>> boundaries( )
{
    return std::vector<std::pair<CellIndex, size_t>>
    {
        { 0, 0 }, { 0, 2 }, { 1, 0 }, { 2, 2 }, { 3, 3 }, { 4, 1 }, { 5, 1 }, 
        { 5, 3 }, { 6, 0 }, { 7, 0 }, { 7, 3 }, { 9, 3 }, { 15, 3 }, { 17, 3 }, 
        { 22, 2 }, { 24, 1 }, { 24, 2 }, { 25, 1 }, { 28, 1 }, { 29, 1 }
    };
}

std::vector<std::array<size_t, 2>> inhomogeneousDegrees
{
    { 2, 3 }, // 0 (1)
    { 4, 4 }, // 1 (5)
    { 3, 4 }, // 2 (9)
    { 1, 1 }, // 3 (14)
    { 1, 3 }, // 4 (15)
    { 2, 4 }, // 5 (16)

    { 4, 2 }, // 6 (17)
    { 2, 3 }, // 7 (18)
    { 1, 3 }, // 8 (19)
    { 3, 2 }, // 9 (20)

    { 2, 3 }, // 10 (21)
    { 3, 2 }, // 11 (22)
    { 2, 2 }, // 12 (23)
    { 4, 1 }, // 13 (24)

    { 4, 3 }, // 14 (25)
    { 1, 1 }, // 15 (26)
    { 3, 3 }, // 16 (27)
    { 2, 4 }, // 17 (28)

    { 1, 1 }, // 18 (29)
    { 3, 2 }, // 19 (30)
    { 1, 2 }, // 20 (31)
    { 3, 3 }, // 21 (32)

    { 1, 1 }, // 22 (33)
    { 3, 4 }, // 23 (34)
    { 4, 3 }, // 24 (35)
    { 2, 2 }, // 25 (36)

    { 2, 3 }, // 26 (37)
    { 4, 1 }, // 27 (38)
    { 4, 1 }, // 28 (39)
    { 3, 2 }, // 29 (40)

    { 2, 3 }, // 30 (41)
    { 3, 3 }, // 31 (42)
    { 4, 1 }, // 32 (43)
    { 2, 3 }  // 33 (44)
};

LinearizedTensorProductIndices<2> homogeneousTensorProductIndices34
{ 
    {
        // Cell 0:

        // Cell 1:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 2:
        { 0, 0 }, { 1, 0 }, { 2, 0 }, { 3, 0 },

        // Cell 3:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 },

        // Cell 4:
        { 0, 0 },

        // Cell 5:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 6:
        { 0, 0 }, { 1, 0 }, { 2, 0 }, { 3, 0 },

        // Cell 7:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 },

        // Cell 8:
        { 0, 0 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 },

        // Cell 9:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 10:
        { 1, 0 }, { 1, 1 }, { 2, 0 }, { 3, 0 },

        // Cell 11:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 },

        // Cell 12:
        { 0, 0 }, { 0, 1 }, { 1, 1 }, { 2, 1 }, { 3, 1 },

        // Cell 13:
        { 0, 1 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 1 }, { 3, 1 },

        // Cell 14:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 15:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 16:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 17:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 18:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 19:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 20:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 21:
        { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 22:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 23:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 24:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, 
        { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 25:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 26:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 27:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 28:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 29:
        { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 30:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 31:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 32:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, 
        { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 33:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 34:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 35:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 36:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 37:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 38:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 0 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 39:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 40:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 0 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 41:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 42:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 0 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 43:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 44:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 2, 0 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, 
        { 3, 0 }, { 3, 2 }, { 3, 3 }, { 3, 4 },
    },
    { 
        0, 0, 20, 24, 29, 30, 46, 50, 55, 61, 76, 80, 85, 90, 98, 118, 138, 158, 174, 
        194, 210, 230, 242, 257, 273, 292, 311, 331, 346, 361, 373, 388, 404, 423, 438, 
        453, 473, 493, 512, 528, 548, 564, 583, 599, 614, 626,
    }
};

LinearizedTensorProductIndices<2> inhomogeneousTensorProductIndices
{
    {
        // Cell 0:

        // Cell 1:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 },

        // Cell 2:
        { 0, 0 }, { 1, 0 }, { 2, 0 },

        // Cell 3:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 },

        // Cell 4:
        { 0, 0 },

        // Cell 5:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 }, 
        { 4, 1 }, { 4, 2 }, { 4, 3 }, { 4, 4 },

        // Cell 6:
        { 0, 0 }, { 1, 0 }, { 2, 0 }, { 3, 0 }, { 4, 0 },

        // Cell 7:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 1 },

        // Cell 8:
        { 0, 0 }, { 1, 0 }, { 1, 1 },

        // Cell 9:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 10:
        { 1, 0 }, { 1, 1 }, { 2, 0 }, { 3, 0 },

        // Cell 11:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 },

        // Cell 12:
        { 0, 0 }, { 0, 1 }, { 1, 1 },

        // Cell 13:
        { 0, 1 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 },

        // Cell 14:
        { 0, 0 }, { 0, 1 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 },

        // Cell 15:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 2, 1 },

        // Cell 16:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 2, 4 },

        // Cell 17:
        { 0, 1 }, { 0, 2 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 2, 2 }, { 3, 1 }, 
        { 3, 2 }, { 4, 1 }, { 4, 2 },

        // Cell 18:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 4, 0 },

        // Cell 19:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 3, 1 },

        // Cell 20:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 2, 0 }, 
        { 2, 1 }, { 2, 2 }, { 3, 0 }, { 3, 1 }, { 3, 2 },

        // Cell 21:
        { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 1 },

        // Cell 22:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 3, 0 }, { 3, 1 }, 
        { 3, 2 }, { 4, 1 },

        // Cell 23:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 2, 2 }, 
        { 3, 1 }, { 4, 1 },

        // Cell 24:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, { 2, 1 }, 
        { 3, 0 }, { 3, 1 }, { 4, 0 }, { 4, 1 },

        // Cell 25:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 4, 0 }, 
        { 4, 1 }, { 4, 2 }, { 4, 3 },

        // Cell 26:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, 
        { 2, 0 }, { 3, 0 }, { 4, 0 },

        // Cell 27:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, 
        { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 4, 0 },

        // Cell 28:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 },

        // Cell 29:
        { 1, 1 }, { 1, 2 }, { 2, 1 }, { 3, 1 },

        // Cell 30:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, { 3, 0 }, 
        { 3, 1 }, { 3, 2 },

        // Cell 31:
        { 0, 1 }, { 0, 2 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 3, 1 },

        // Cell 32:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 4, 1 },

        // Cell 33:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 1 }, { 3, 1 },

        // Cell 34:
        { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 1, 4 }, { 2, 0 }, { 2, 1 }, { 2, 2 }, 
        { 2, 3 }, { 2, 4 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, { 3, 4 },

        // Cell 35:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, 
        { 2, 0 }, { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 3, 1 }, { 3, 2 }, { 3, 3 }, 
        { 4, 0 }, { 4, 1 }, { 4, 2 }, { 4, 3 },

        // Cell 36:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 0, 4 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, 
        { 2, 0 }, { 2, 1 }, { 2, 2 }, { 3, 0 }, { 3, 1 }, { 4, 0 }, { 4, 1 },

        // Cell 37:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 3, 1 }, { 4, 1 },

        // Cell 38:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 2 }, { 2, 0 }, { 3, 0 }, { 4, 0 },

        // Cell 39:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 2, 0 }, { 2, 1 }, 
        { 3, 0 }, { 3, 1 }, { 4, 0 }, { 4, 1 },

        // Cell 40:
        { 0, 0 }, { 0, 2 }, { 1, 0 }, { 1, 2 }, { 2, 0 }, { 2, 2 }, { 3, 0 }, { 3, 2 }, 
        { 4, 0 },

        // Cell 41:
        { 0, 1 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 1 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, 
        { 2, 1 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 3, 1 },

        // Cell 42:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 1, 0 }, { 1, 2 }, { 1, 3 }, { 2, 0 }, { 2, 2 }, 
        { 2, 3 }, { 3, 0 }, { 3, 2 }, { 3, 3 },

        // Cell 43:
        { 0, 0 }, { 0, 1 }, { 0, 2 }, { 0, 3 }, { 2, 0 }, { 2, 1 }, { 3, 0 }, { 3, 1 }, 
        { 4, 0 }, { 4, 1 },

        // Cell 44:
        { 0, 0 }, { 0, 2 }, { 0, 3 }, { 2, 0 }, { 2, 2 }, { 2, 3 }, { 3, 0 }, { 4, 0 },
    },
    {
        0, 0, 12, 15, 19, 20, 40, 45, 50, 53, 68, 72, 77, 80, 85, 92, 101, 116, 127, 
        141, 149, 162, 169, 179, 189, 201, 220, 231, 244, 255, 259, 269, 276, 292, 298, 
        313, 333, 348, 362, 370, 382, 391, 404, 416, 426, 434,
    }
};

// All cells (including non-leaves) without parent contributions
std::vector<std::vector<std::vector<size_t>>> faceDofs
{ 
    { { }, { }, { }, { } },                                                       // 0  
    { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 0, 4, 8 }, { 1, 5, 9 } },                 // 1  
    { { 0 }, { 1 }, { 0, 1, 2 }, { } },                                           // 2  
    { { 0, 1, 2, 3 }, { }, { 0 }, { 1 } },                                        // 3  
    { { 0 }, { }, { 0 }, { } },                                                   // 4  
    { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { }, { 0, 4, 8, 12, 16 } },                 // 5  
    { { 0 }, { 1 }, { 0, 1, 2, 3, 4 }, { } },                                     // 6  
    { { 0, 1, 2, 3 }, { 4 }, { }, { 0, 4 } },                                     // 7  
    { { 0 }, { 1, 2 }, { 0, 1 }, { 2 } },                                         // 8  
    { { }, { 0, 1, 2, 3, 4 }, { 0, 5, 10 }, { 1, 6, 11 } },                       // 9  
    { { }, { 0, 1 }, { 0, 2, 3 }, { 1 } },                                        // 10 
    { { 0, 1, 2, 3, 4 }, { }, { 0 }, { 1 } },                                     // 11 
    { { 0, 1 }, { 2 }, { 0 }, { 1, 2 } },                                         // 12 
    { { 0 }, { 1, 2, 3, 4 }, { 1 }, { 0, 2 } },                                   // 13 
    { { 0, 1 }, { 2, 3, 4, 5, 6 }, { 0, 2 }, { 1, 3 } },                          // 14 
    { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 0, 4 }, { 1, 5, 8 } },                    // 15 
    { { 0, 1, 2, 3, 4 }, { 5, 6, 7, 8, 9 }, { 0, 5, 10 }, { 1, 6, 11 } },         // 16 
    { { 0, 1 }, { 2, 3, 4 }, { }, { 0, 2, 5, 7, 9 } },                            // 17 
    { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 0, 4, 8, 12, 13 }, { 1, 5, 9 } },         // 18 
    { { 0, 1, 2 }, { 3, 4, 5 }, { }, { 0, 3, 6, 7 } },                            // 19 
    { { 0, 1, 2, 3 }, { 4, 5, 6 }, { 0, 4, 7, 10 }, { 1, 5, 8, 11 } },            // 20 
    { { }, { 0, 1, 2 }, { }, { 0, 3, 6 } },                                       // 21 
    { { }, { 0, 1, 2 }, { 0, 3, 6 }, { 1, 4, 7, 9 } },                            // 22 
    { { 0, 1, 2 }, { 3, 4, 5 }, { }, { 0, 3, 6, 8, 9 } },                         // 23 
    { { 0, 1, 2 }, { 3, 4, 5 }, { 0, 3, 6, 8, 10 }, { 1, 7, 9, 11 } },            // 24 
    { { 0, 1, 2 }, { 3, 4, 5, 6 }, { 3, 7, 11, 15 }, { 0, 4, 8, 12, 16 } },       // 25 
    { { 0, 1, 2 }, { 3, 4, 5, 6, 7 }, { 0, 3, 8, 9, 10 }, { 1, 4 } },             // 26 
    { { 0, 1, 2, 3 }, { }, { 0, 4, 8, 12 }, { 1, 5, 9 } },                        // 27 
    { { 0, 1, 2, 3, 4 }, { }, { 0, 5, 10 }, { 1, 6 } },                           // 28 
    { { }, { 0, 1 }, { }, { 0, 2, 3 } },                                          // 29 
    { { }, { 0, 1, 2, 3 }, { 0, 4, 7 }, { 1, 5, 8 } },                            // 30 
    { { 0, 1 }, { 2, 3, 4 }, { }, { 0, 2, 5, 6 } },                               // 31 
    { { 0, 1, 2, 3 }, { 4, 5, 6 }, { 0, 4, 7, 11 }, { 1, 8, 12, 15 } },           // 32 
    { { }, { 0, 1, 2, 3 }, { 0 }, { 1, 4, 5 } },                                  // 33 
    { { }, { 0, 1, 2, 3, 4 }, { 0, 5, 10 }, { 1, 6, 11 } },                       // 34 
    { { 0, 1, 2, 3 }, { 4, 5, 6, 7 }, { 0, 4, 8, 12, 16 }, { 1, 5, 9, 13, 17 } }, // 35 
    { { 0, 1, 2, 3, 4 }, { 5, 6, 7 }, { 0, 5, 8, 11, 13 }, { 1, 6, 9, 12, 14 } }, // 36 
    { { 0, 1, 2 }, { 3, 4, 5, 6 }, { 3, 7, 11 }, { 0, 4, 8, 12, 13 } },           // 37 
    { { 0, 1, 2 }, { 3, 4 }, { 0, 3, 5, 6, 7 }, { } },                            // 38 
    { { 0, 1, 2, 3 }, { 4, 5 }, { 0, 4, 6, 8, 10 }, { 1, 5, 7, 9, 11 } },         // 39 
    { { 0, 1 }, { 2, 3 }, { 0, 2, 4, 6, 8 }, { } },                               // 40 
    { { 0, 1, 2 }, { 3, 4, 5, 6 }, { 3, 7, 11 }, { 0, 4, 8, 12 } },               // 41 
    { { 0, 1, 2 }, { 3, 4, 5 }, { 0, 3, 6, 9 }, { } },                            // 42 
    { { 0, 1, 2, 3 }, { }, { 0, 4, 6, 8 }, { 1, 5, 7, 9 } },                      // 43 
    { { 0, 1, 2 }, { }, { 0, 3, 6, 7 }, { } },                                    // 44 
};

//template<std::integral... I>
//void concatenate( std:: )

// Leaf cell faces dofs including parent contributions
std::vector<std::vector<std::vector<size_t>>> elementFaceDofs( )
{
    auto dofs = faceDofs;

    auto appendToChild = [&]( size_t parent, size_t child, size_t edge )
    { 
        // Number of dofs of child
        size_t offset = inhomogeneousTensorProductIndices.second[child + 1] -
                        inhomogeneousTensorProductIndices.second[child];

        auto predicate = [=]( auto index ) { return index + offset; };

        // Add boundary dofs of parent to given edge
        std::transform( dofs[parent][edge].begin( ), dofs[parent][edge].end( ), 
                        std::back_inserter( dofs[child][edge] ), predicate );

        size_t internal = 0;

        // Add internal dofs of all parents to other edge
        for( auto index = parent; index != NoCell; index = parents[index] )
        {
            internal += static_cast<size_t>( inhomogeneousTensorProductIndices.second[index + 1] -
                                             inhomogeneousTensorProductIndices.second[index] );
        }

        size_t otherEdge = edge % 2 ? edge - 1 : edge + 1;

        for( size_t index = offset; index < offset + internal; ++index )
        {
            dofs[child][otherEdge].push_back( index );
        }
    };

    auto appendToChildren = [&]( size_t parent, size_t firstChild )
    {
        // Bottom left child
        appendToChild( parent, firstChild + 0, 0 ); // left edge
        appendToChild( parent, firstChild + 0, 2 ); // bottom edge

        // Top left child
        appendToChild( parent, firstChild + 1, 0 ); // left edge
        appendToChild( parent, firstChild + 1, 3 ); // top edge

        // Bottom right child
        appendToChild( parent, firstChild + 2, 1 ); // right edge
        appendToChild( parent, firstChild + 2, 2 ); // bottom edge

        // Top right child
        appendToChild( parent, firstChild + 3, 1 ); // right edge
        appendToChild( parent, firstChild + 3, 3 ); // top edge
    };

    // Level 1 to level 2
    appendToChildren( 2, 5 );
    appendToChildren( 3, 9 );
    appendToChildren( 4, 13 );

    // Level 2 to level 3
    appendToChildren( 6, 17 );
    appendToChildren( 7, 21 );
    appendToChildren( 8, 25 );
    appendToChildren( 10, 29 );
    appendToChildren( 11, 33 );
    appendToChildren( 12, 37 );
    appendToChildren( 13, 41 );
    
    // Filter non-leaves
    decltype( dofs ) leaves;

    for( size_t icell = 0; icell < dofs.size( ); ++icell )
    {
        if( isLeaf[icell] )
        {
            leaves.push_back( dofs[icell] );
        }
    }

    return leaves;
}

} // mlhp::singlebasecell2d
