.idea/
dist/
test_files
ragaai_catalyst.egg-info/
.DS_Store 
test_files/
__pycache__/
*/model_costs.json
.vscode

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

LOAD_TEST_README.md
RAG_LOAD_TEST_README.md
"Screenshot 2025-07-17 at 2.05.09\342\200\257PM.png"
"Screenshot 2025-07-17 at 2.10.25\342\200\257PM.png"
"Screenshot 2025-07-17 at 2.37.17\342\200\257PM.png"
advanced_agent.py
ai_document_061023_2.pdf
app.py
azure_openai_usecase.py
azureopanai_implementation_code.py
bHEHrbvdic.json
catalyst_v2.ipynb
chroma_db/
clean_multi_dataset_example.py
custom_cost_bug.ipynb
custom_cost_bug.py
data/
deephealth_sample_50_data.csv
dh_full_test.ipynb
dh_full_test.py
diagnosis_agent.py
direct_anthropic.json
direct_llm_call_test.py
direct_llm_examples.py
direct_opanai.json
docker_gt_dataset1.csv
ex_google_adk.py
fastapi_requirements.txt
fastapi_server.py
fastapi_server_simple.py
final_dataset_routing_demo.py
gemini_ex.py
google_adk_agent_ex.py
google_adk_agent_user_data.py
google_adk_storyflow_agent.py
langchain_rag.py
langchain_sample_trace.json
legal_rag.py
llamaindex_rag.py
load_test_streaming.py
load_test_v1.py
load_test_v2.py
load_testing_scripts.zip
load_testing_scripts_qa_agentic/
locust_feedback_requirements.txt
locust_langchain_rag.py
locust_langchain_rag_copy.py
locust_reportbuild.py
locustfile.py
locustfile_fixed.py
locustfile_generate_impression.py
locustfile_generate_report.py
locustfile_mini.py
locustfile_nano.py
locustfile_rag.py
masking_example.py
mcp_final.zip
minio-file.json
model_gemini_15_flash_002_w_stream.json
model_gemini_15_flash_002_wo_stream.json
model_gpt_41_w_stream.json
model_gpt_41_wo_stream.json
model_gpt_4o_mini_w_stream.json
model_gpt_4o_mini_wo_stream.json
model_prices_and_context_window_backup.json
multi_llm_test.py
multi_tool_agent/
multi_tracer_test.py
new_feature_test.ipynb
pydantic_test.ipynb
rag_agent_traces.json
rag_agent_traces_adk_agent.json
rag_agent_traces_ex.json
rag_agent_traces_with_streaming.json
rag_agent_traces_wo_streaming.json
rag_extraction_logic_final.py
ragaai_catalyst/tracers/processors/
research_assistant.py
research_assistant_shashank.py
run_rag_load_test.py
sample-local-pdf.pdf
sample.pdf
save_json_here/
sci_fi_story.md
scifi_writer.py
set_dataset_name_test.py
set_feedback.py
set_feedback_load.py
simple_rag_app.py
stress_test_langchain.py
test.ipynb
test_2.py
test_context_isolation.py
test_dataset_routing.py
test_fastapi.py
test_simple_langchain.py
test_token_refresh.py
trace_upload_analysis.md
updated_pydantic_test.py
uplaod_numerical_col_csv.py