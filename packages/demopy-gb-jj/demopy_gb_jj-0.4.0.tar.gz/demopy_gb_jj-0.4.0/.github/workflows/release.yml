name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.4.0)'
        required: true
        type: string

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build wheels
      run: maturin build --release --out dist --find-interpreter
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  build-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build sdist
      run: maturin sdist --out dist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  publish:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing to PyPI
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-artifacts
    
    - name: Flatten artifacts
      run: |
        mkdir -p dist
        find dist-artifacts -name "*.whl" -exec cp {} dist/ \;
        find dist-artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        # Use API token if provided, otherwise use trusted publishing
        password: ${{ secrets.PYPI_API_TOKEN || '' }}

  create-release:
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > changelog.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          echo "First release of demopy_gb_jj with Rust extensions" >> changelog.md
        fi

        {
          echo "changelog<<EOF"
          cat changelog.md
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.changelog.outputs.tag_name }}
        name: Release ${{ steps.changelog.outputs.tag_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
