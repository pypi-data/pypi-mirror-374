name: Build

on: [push, pull_request]

jobs:
         
  test-linux:
    name: "Run tests on Linux"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: ["3.13", "3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      
      - name: Run Tests (Linux)
        run: |
          python -m pip install --upgrade pip setuptools wheel meson ninja meson-python numpy scipy pybind11
          python -m pip install --no-build-isolation --editable '.[test]'
          pytest --cov --cov-report html --cov-report xml --cov-report annotate -sx --ignore-glob="*bmodes*.py"
          
      - uses: codecov/codecov-action@v2
        with:
          verbose: true # optional (default = false)
          
  build_wheels_ubuntu:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

        
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        # env:
        #   CIBW_SKIP: "pp* *-musllinux*" # TODO: Temporary

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_wheels_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13   # Intel → x86_64 wheel
            cibw_arch: x86_64
          - os: macos-14   # Apple-Silicon → arm64 wheel
            cibw_arch: arm64

    steps:
      - uses: actions/checkout@v4

      # ---------- 1 · compiler + single OpenMP runtime ---------- #
      - name: Install LLVM + libomp
        run: |
          brew install llvm libomp          # unversioned, current LLVM 18.x
          LLVM_PREFIX="$(brew --prefix llvm)"

          # put clang/clang++ first in PATH
          echo "PATH=${LLVM_PREFIX}/bin:$PATH" >> "$GITHUB_ENV"
          echo "CC=${LLVM_PREFIX}/bin/clang"   >> "$GITHUB_ENV"
          echo "CXX=${LLVM_PREFIX}/bin/clang++" >> "$GITHUB_ENV"

          # headers & linker path for the system libomp
          echo "CPPFLAGS=-I${LLVM_PREFIX}/include" >> "$GITHUB_ENV"
          echo "LDFLAGS=-L${LLVM_PREFIX}/lib -lomp \
                       -Wl,-rpath,@loader_path \
                       -Wl,-rpath,${LLVM_PREFIX}/lib" >> "$GITHUB_ENV"

      # ---------- 2 · build wheel & leave libomp OUT ---------- #
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          # CIBW_SKIP: "pp*" # TODO: Temporary

          # compile with OpenMP flags
          CIBW_ENVIRONMENT_MACOS: |
            CFLAGS="-O3 -fopenmp"
            CXXFLAGS="-O3 -fopenmp"
            FFLAGS="-O3 -fopenmp=libomp"
            LDFLAGS="${LDFLAGS}"

          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            delocate-wheel -w {dest_dir}
            -e libomp.dylib
            --require-archs x86_64,arm64
            {wheel}


          MACOSX_DEPLOYMENT_TARGET: "13.0"

        with:
          output-dir: wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_arch }}
          path: wheelhouse/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install numpy pybind11 scipy
          python -m pip install build
          python -m build . --sdist


      - name: Extract version from sdist filename
        id: get_version
        run: |
          FILE=$(ls dist/pywiggle-*.tar.gz | head -n1)
          VERSION=$(basename "$FILE" | sed -E 's/^pywiggle-([0-9a-zA-Z\.\-]+)\.tar\.gz$/\1/')
          echo "version=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT          

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels_ubuntu, build_sdist, build_wheels_macos]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "cibw-*"
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # To test: repository_url: https://test.pypi.org/legacy/


  test-wheel:
    needs: [upload_pypi, build_sdist]
    name: "Run tests on ${{ matrix.os }} with uploaded wheels"
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    
    env:
      VERSION: ${{ needs.build_sdist.outputs.version }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
        python: ["3.13", "3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install test dependencies and wheel from PyPI
        run: |
          python -m pip install --upgrade pip setuptools wheel pytest ducc0 threadpoolctl scipy numpy pixell matplotlib
          echo "Installing pywiggle==$VERSION"

          MAX_WAIT=300   # seconds (5 minutes)
          INTERVAL=15    # seconds between retries
          ELAPSED=0

          until python -m pip install --only-binary :all: --no-cache-dir "pywiggle==${VERSION}"; do
          echo "Wheel not yet available. Retrying in $INTERVAL seconds..."
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
          if [ "$ELAPSED" -ge "$MAX_WAIT" ]; then
          echo "Timed out waiting for pywiggle==$VERSION to become available on PyPI."
          exit 1
          fi
          done
          
          
      - name: Run Tests
        run: |
          cd ~
          pytest --pyargs pywiggle.tests --ignore-glob="*bmodes*.py"
