name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=py_autotask --cov-report=term-missing \
                 -m "not integration and not performance"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run linting
        run: |
          black --check py_autotask tests
          isort --check-only py_autotask tests
          flake8 py_autotask tests

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools_scm
          fetch-tags: true  # Ensure tags are fetched
          ref: ${{ github.ref }}  # Checkout the exact tag ref
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel setuptools_scm
      
      - name: Debug version detection
        run: |
          echo "Git describe: $(git describe --tags)"
          echo "Current ref: ${{ github.ref }}"
          echo "Detected version: $(python -m setuptools_scm)"
      
      - name: Build package
        run: python -m build
      
      - name: Check distribution
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Extract changelog
        id: changelog
        run: |
          # Extract changelog section for this version
          VERSION="${{ steps.tag.outputs.tag }}"
          # Remove 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}
          
          # Try to extract changelog section
          if grep -q "## \[${VERSION_NUMBER}\]" CHANGELOG.md; then
            # Extract section between this version and next version/unreleased
            awk "/## \[${VERSION_NUMBER}\]/,/## \[/{if(/## \[/ && !/## \[${VERSION_NUMBER}\]/) exit; print}" CHANGELOG.md > release_notes.md
            # Remove the version header line
            tail -n +2 release_notes.md > temp_notes.md && mv temp_notes.md release_notes.md
          else
            echo "## Changes" > release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for detailed changes." >> release_notes.md
          fi
          
          # Set output for use in release
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: ${{ steps.changelog.outputs.notes_file }}
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, 'rc') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    environment: pypi
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Using trusted publishing - no API token needed
          # Repository must be configured in PyPI with GitHub OIDC
          print-hash: true
          verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha')
    environment: test-pypi
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true
          verbose: true

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Extract version info
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version references
        run: |
          # Update any version references in documentation or other files
          echo "Release ${{ steps.version.outputs.version }} published successfully!"
          echo "PyPI: https://pypi.org/project/py-autotask/${{ steps.version.outputs.version }}/"
          echo "GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
      
      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.version.outputs.tag }}'
            });
            
            const issueBody = `## ðŸŽ‰ Release ${{ steps.version.outputs.tag }} Published!
            
            **Release Information:**
            - **Version:** ${{ steps.version.outputs.version }}
            - **GitHub Release:** ${release.html_url}
            - **PyPI Package:** https://pypi.org/project/py-autotask/${{ steps.version.outputs.version }}/
            
            **Next Steps:**
            - [ ] Update documentation if needed
            - [ ] Announce release on relevant channels
            - [ ] Monitor for any issues or feedback
            - [ ] Plan next release cycle
            
            **Installation:**
            \`\`\`bash
            pip install py-autotask==${{ steps.version.outputs.version }}
            \`\`\`
            
            This issue was automatically created by the release workflow.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ“¦ Post-Release: ${{ steps.version.outputs.tag }}`,
              body: issueBody,
              labels: ['release', 'automation']
            }); 