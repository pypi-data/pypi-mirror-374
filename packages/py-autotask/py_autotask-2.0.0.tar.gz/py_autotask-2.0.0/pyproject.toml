[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "py-autotask"
dynamic = ["version"]
description = "Python library for Autotask PSA REST API integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Aaron Sachs", email = "dev@sachshaus.net"}
]
maintainers = [
    {name = "Aaron Sachs", email = "dev@sachshaus.net"}
]
keywords = ["autotask", "psa", "api", "rest", "integration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "tenacity>=8.0.0",
    "httpx>=0.24.0",
    "typing-extensions>=4.0.0",
    "aiohttp>=3.8.0",
    "redis>=4.5.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "pyarrow>=12.0.0",
    "tqdm>=4.65.0",
    "rich>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-mock>=3.0",
    "pytest-asyncio>=0.15",
    "pytest-benchmark>=3.4",
    "responses>=0.18",
    "psutil>=5.8.0",
    "black>=22.0",
    "isort>=5.10",
    "flake8>=4.0",
    "mypy>=0.950",
    "bandit>=1.7",
    "safety>=2.0",
    "pre-commit>=2.15",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17",
    "sphinx-autodoc-typehints>=1.12",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.10",
    "pytest-mock>=3.0",
    "pytest-asyncio>=0.15",
    "pytest-benchmark>=3.4",
    "responses>=0.18",
    "psutil>=5.8.0",
]

[project.urls]
Homepage = "https://github.com/asachs01/py-autotask"
Documentation = "https://py-autotask.readthedocs.io/"
Repository = "https://github.com/asachs01/py-autotask.git"
Issues = "https://github.com/asachs01/py-autotask/issues"
Changelog = "https://github.com/asachs01/py-autotask/blob/main/CHANGELOG.md"

[project.scripts]
py-autotask = "py_autotask.cli:main"

[tool.setuptools]
packages = ["py_autotask"]

# Dynamic version is handled by setuptools_scm, not by attribute

[tool.setuptools_scm]
write_to = "py_autotask/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"
fallback_version = "1.0.2"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["py_autotask"]
known_third_party = ["requests", "pydantic", "click", "rich"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip = ["py_autotask/_version.py"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=py_autotask",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring API credentials",
    "performance: Performance benchmark tests",
    "slow: Slow running tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["py_autotask"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "click.*",
    "rich.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
# See setup.cfg for flake8 configuration 