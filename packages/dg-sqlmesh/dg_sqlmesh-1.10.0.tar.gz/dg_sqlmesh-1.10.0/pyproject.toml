[project]
name = "dg-sqlmesh"
requires-python = ">=3.11,<3.13"
version = "1.10.0"
description = "Seamless integration between Dagster and SQLMesh for modern data engineering workflows"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Thomas Trividic", email = "thomastrividic@gmail.com"}
]
keywords = ["dagster", "sqlmesh", "data-engineering", "etl", "data-pipeline"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "dagster>=1.11.8",
    "pandas>=2.2.1",
    "sqlmesh[postgres,web]>=0.213.1",
    "anyio>=4.9.0",
    "vulture>=2.14",
    "jinja2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "dagster-webserver>=1.11.8",
    "dagster-dg-cli>=1.11.8",
    "pytest>=8.4.1"
]

[project.urls]
Homepage = "https://github.com/fosk06/dagster-sqlmesh"
Repository = "https://github.com/fosk06/dagster-sqlmesh"
Documentation = "https://github.com/fosk06/dagster-sqlmesh#readme"
Issues = "https://github.com/fosk06/dagster-sqlmesh/issues"

[project.entry-points]
"dagster_dg_cli.registry_modules" = { "dg_sqlmesh" = "dg_sqlmesh" }

[dependency-groups]
dev = [
    "dagster-webserver>=1.11.8",
    "dagster-dg-cli>=1.11.8",
    "pytest>=8.4.1",
    "sqlmesh[web]>=0.213.1",
    "duckdb>=1.3.2",
    "ruff>=0.12.10",
    "coverage[toml]>=7.0.0",
    "pip-audit>=2.9.0",
    "safety>=3.6.0",
    "pip-licenses>=5.0.0",
    "dg-sqlmesh",
    "mkdocs-material>=9.6.18",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-minify-plugin>=0.8.0",
]

[tool.uv.sources]
dg-sqlmesh = { workspace = true }

[tool.coverage.run]
source = ["src/dg_sqlmesh"]
branch = true
omit = [
    "tests/*",
    "examples/*",
    "src/dg_sqlmesh/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"
