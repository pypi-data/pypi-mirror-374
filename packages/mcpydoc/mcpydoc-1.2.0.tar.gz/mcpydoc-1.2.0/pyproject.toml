[project]
name = "mcpydoc"
version = "1.2.0"
description = "Model Context Protocol (MCP) server providing documentation and code analysis for Python packages"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = [
    "mcp", 
    "model-context-protocol", 
    "documentation", 
    "introspection", 
    "python-packages",
    "code-analysis", 
    "api-documentation",
    "docstring-parsing",
    "package-analysis",
    "ai-agent",
    "cline",
    "github-copilot"
]
authors = [
    { name = "Amit Ronen" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: System :: Software Distribution",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Environment :: Console",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "aiohttp>=3.8.0",
    "importlib-metadata>=4.0.0",
    "docstring-parser>=0.15",
]

[project.scripts]
mcpydoc = "mcpydoc.__main__:cli_main"

[project.urls]
Homepage = "https://github.com/amit608/MCPyDoc"
Repository = "https://github.com/amit608/MCPyDoc"
Issues = "https://github.com/amit608/MCPyDoc/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "mypy>=1.0.0",
    "isort>=5.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
minversion = "7.0"
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcpydoc"]
known_third_party = ["pytest", "pydantic", "docstring_parser"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Allow missing arguments for Pydantic models with defaults
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = "docstring_parser.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["mcpydoc"]
omit = ["tests/*", "mcpydoc/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
