# Generated by Django 5.2.3 on 2025-06-16 16:07

import django.db.models.functions.text
from django.conf import settings
from django.db import migrations, models
from django.db.models import Count
from django.db.models.functions import Lower


def rename_duplicated_association_names(apps, schema_editor):
    Association = apps.get_model("associations", "Association")

    duplicated = (
        Association.objects
        .annotate(name_lower=Lower("name"))
        .values("name_lower")
        .order_by()
        .annotate(id_count=Count("id"))
        .filter(id_count__gt=1)
    )

    for values in duplicated:
        associations = (
            Association.objects
            .annotate(name_lower=Lower("name"))
            .filter(name_lower=values["name_lower"])
            .order_by("pk")
        )[1:]

        for index, association in enumerate(associations):
            association.name += " (%d)" % (index + 1)
            association.save()


def rename_duplicated_association_data_names(apps, schema_editor):
    for model_name in (
        "AssociationBenevaloLevel",
        "AssociationBenevaloCategory",
        "AssociationProject",
        "AssociationRole",
    ):
        Model = apps.get_model("associations", model_name)

        duplicated = (
            Model.objects
            .annotate(name_lower=Lower("name"))
            .values("association_id", "name_lower")
            .order_by()
            .annotate(id_count=Count("id"))
            .filter(id_count__gt=1)
        )

        for values in duplicated:
            objs = (
                Model.objects
                .annotate(name_lower=Lower("name"))
                .filter(
                    association_id=values["association_id"],
                    name_lower=values["name_lower"],
                )
                .order_by("pk")
            )[1:]

            for index, obj in enumerate(objs):
                obj.name += " (%d)" % (index + 1)
                obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('associations', '0002_create_default_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(rename_duplicated_association_names),
        migrations.RunPython(rename_duplicated_association_data_names),
        migrations.RemoveConstraint(
            model_name='associationrole',
            name='unique_association_default',
        ),
        migrations.AddConstraint(
            model_name='activityfield',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('activity_field_group'), name='unique_activity_field_name', violation_error_code='unique_name', violation_error_message="Un champ d'activité avec ce nom existe déjà dans ce groupe."),
        ),
        migrations.AddConstraint(
            model_name='activityfieldgroup',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_activity_field_group_name', violation_error_code='unique_name', violation_error_message="Un groupe de champs d'activité avec ce nom existe déjà."),
        ),
        migrations.AddConstraint(
            model_name='association',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_association_name', violation_error_code='unique_name', violation_error_message='Une association avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='associationbenevalocategory',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('association'), name='unique_association_benevalo_category_name', violation_error_code='unique_name', violation_error_message='Une catégorie de bénévolat avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='associationbenevalolevel',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('association'), name='unique_association_benevalo_level_name', violation_error_code='unique_name', violation_error_message='Un niveau de bénévolat avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='associationproject',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('association'), name='unique_association_project_name', violation_error_code='unique_name', violation_error_message='Un projet avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='associationrole',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), models.F('association'), name='unique_association_role_name', violation_error_code='unique_name', violation_error_message='Un rôle avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='associationrole',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('association',), name='unique_association_role_default', violation_error_code='unique_default', violation_error_message="Il ne peut y avoir qu'un rôle par défaut pour l'association."),
        ),
        migrations.AddConstraint(
            model_name='defaultbenevalocategory',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_default_benevalo_category_name', violation_error_code='unique_name', violation_error_message='Une catégorie de bénévolat avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='defaultbenevalolevel',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_default_benevalo_level_name', violation_error_code='unique_name', violation_error_message='Un niveau de bénévolat avec ce nom existe déjà.'),
        ),
        migrations.AddConstraint(
            model_name='defaultrole',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_default_role_name', violation_error_code='unique_name', violation_error_message='Un rôle avec ce nom existe déjà.'),
        ),
    ]
