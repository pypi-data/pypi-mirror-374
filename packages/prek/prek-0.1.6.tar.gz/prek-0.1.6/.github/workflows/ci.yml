name: CI

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  # UV_VERSION should not greater than MAX_UV_VERSION in `languages/python/uv`.
  # Otherwise, tests jobs will install their own uv, and now it has concurrent issue.
  UV_VERSION: '0.8.6'
  NODE_VERSION: '19.9.0'
  GO_VERSION: '1.24.5'
  PYTHON_VERSION: '3.12.11'

jobs:
  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: crate-ci/typos@master

  lint:
    name: "lint"
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: "Install Rustfmt"
        run: rustup component add rustfmt
      - name: "rustfmt"
        run: cargo fmt --all --check

  cargo-clippy-linux:
    name: "cargo clippy | ubuntu"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: rui314/setup-mold@v1
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup component add clippy
      - name: "Clippy"
        run: cargo clippy --workspace --all-targets --all-features --locked -- -D warnings

  cargo-clippy-windows:
    timeout-minutes: 15
    runs-on: windows-latest
    name: "cargo clippy | windows"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Create Dev Drive
        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup component add clippy

      - name: "Clippy"
        run: cargo clippy --workspace --all-targets --all-features --locked -- -D warnings

  cargo-shear:
    name: "cargo shear"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: cargo-bins/cargo-binstall@main
      - run: cargo binstall --no-confirm cargo-shear
      - run: cargo shear

  cargo-test-linux:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    name: "cargo test | ubuntu"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: rui314/setup-mold@v1
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup show

      - name: "Install cargo nextest"
        uses: taiki-e/install-action@14083e64ac8cf1f5e54356df00b9779b23e192a1 # v2.58.29
        with:
          tool: cargo-nextest

      - name: "Install uv"
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          version: ${{ env.UV_VERSION }}

      - name: "Install Python"
        run: uv python install --no-bin ${{ env.PYTHON_VERSION }}

      - name: "Install Node.js"
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Install Go"
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cargo test"
        run: |
          cargo nextest show-config test-groups
          cargo nextest run \
            --workspace \
            --status-level skip --failure-output immediate --no-fail-fast -j 8 --final-status-level slow

  cargo-test-macos:
    timeout-minutes: 10
    runs-on: macos-latest
    name: "cargo test | macos"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - uses: rui314/setup-mold@v1

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup show

      - name: "Install cargo nextest"
        uses: taiki-e/install-action@14083e64ac8cf1f5e54356df00b9779b23e192a1 # v2.58.29
        with:
          tool: cargo-nextest

      - name: "Install uv"
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          version: ${{ env.UV_VERSION }}

      - name: "Install Python"
        run: uv python install --no-bin ${{ env.PYTHON_VERSION }}

      - name: "Install Node.js"
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Install Go"
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cargo test"
        run: |
          cargo nextest show-config test-groups
          cargo nextest run \
            --workspace \
            --status-level skip --failure-output immediate --no-fail-fast -j 8 --final-status-level slow


  cargo-test-windows:
    timeout-minutes: 15
    runs-on: windows-latest
    name: "cargo test | windows"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Create Dev Drive
        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup show

      - name: "Install cargo nextest"
        uses: taiki-e/install-action@14083e64ac8cf1f5e54356df00b9779b23e192a1 # v2.58.29
        with:
          tool: cargo-nextest

      - name: "Install uv"
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          version: ${{ env.UV_VERSION }}
          cache-local-path: ${{ env.DEV_DRIVE }}/uv-cache

      - name: "Install Python"
        run: uv python install --no-bin ${{ env.PYTHON_VERSION }}

      - name: "Install Node.js"
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Install Go"
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Find node and npm versions"
        run: |
          Get-Command node -All
          Get-Command npm -All
        shell: pwsh

      - name: "Cargo test"
        run: |
          cargo nextest show-config test-groups
          cargo nextest run --workspace --status-level skip --failure-output immediate --no-fail-fast -j 8 --final-status-level slow


  test-python-setup-linux:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    name: "test python setup | linux"
    strategy:
      matrix:
        uv-source: ["github", "pypi", "default"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: rui314/setup-mold@v1
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      - name: "Install Rust toolchain"
        run: rustup show
      - name: "Build prek with GitHub source"
        if: matrix.uv-source == 'github'
        run: cargo build --features uv-source-github
      - name: "Build prek with PyPI source"
        if: matrix.uv-source == 'pypi'
        run: cargo build --features uv-source-pypi
      - name: "Build prek with default source"
        if: matrix.uv-source == 'default'
        run: cargo build
      - name: "Run test"
        run: |
          cd /tmp
          mkdir python-setup-${{ matrix.uv-source }}
          cd python-setup-${{ matrix.uv-source }}
          git init
          git config user.name "Test User"
          git config user.email "test@example.com"
          echo "print('Hello from Python!')" > test.py
          cat > .pre-commit-config.yaml << 'EOF'
          repos:
            - repo: 'https://github.com/pre-commit/pre-commit-hooks'
              rev: v5.0.0
              hooks:
                - id: trailing-whitespace
                - id: end-of-file-fixer
                - id: check-yaml
                - id: check-added-large-files
          EOF
          git add .
          git commit -m "Initial commit"
          echo "Testing with uv source: ${{ matrix.uv-source }}"
          ${{ github.workspace }}/target/debug/prek run --files test.py -vvv

  test-python-setup-windows:
    timeout-minutes: 15
    runs-on: windows-latest
    name: "test python setup | windows"
    strategy:
      matrix:
        uv-source: ["github", "pypi", "default"]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Create Dev Drive
        run: ${{ github.workspace }}/.github/workflows/setup-dev-drive.ps1

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: "Install Rust toolchain"
        run: rustup show

      - name: "Build prek with GitHub source"
        if: matrix.uv-source == 'github'
        run: cargo build --features uv-source-github

      - name: "Build prek with PyPI source"
        if: matrix.uv-source == 'pypi'
        run: cargo build --features uv-source-pypi

      - name: "Build prek with default source"
        if: matrix.uv-source == 'default'
        run: cargo build

      - name: "Run test"
        run: |
          cd $env:TEMP
          mkdir python-setup-${{ matrix.uv-source }}
          cd python-setup-${{ matrix.uv-source }}
          git init
          git config user.name "Test User"
          git config user.email "test@example.com"
          echo "print('Hello from Python!')" > test.py
          @"
          repos:
            - repo: 'https://github.com/pre-commit/pre-commit-hooks'
              rev: v5.0.0
              hooks:
                - id: trailing-whitespace
                - id: end-of-file-fixer
                - id: check-yaml
                - id: check-added-large-files
          "@ > .pre-commit-config.yaml
          git add .
          git commit -m "Initial commit"
          echo "Testing with uv source: ${{ matrix.uv-source }}"
          & "${{ github.workspace }}/target/debug/prek" run --files test.py -vvv
