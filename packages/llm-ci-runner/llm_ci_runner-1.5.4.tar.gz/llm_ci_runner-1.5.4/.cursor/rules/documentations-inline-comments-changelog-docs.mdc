---
description: Rules for maintaining comprehensive documentation across the project, including inline comments and system architecture documentation, you will use this everytime there's updating, creating, editing, modifying, deleting, changing.
globs: 
alwaysApply: false
---
# Documentation Standards and Best Practices Guide

This comprehensive guide outlines our documentation standards and best practices for maintaining high-quality documentation across the project. These standards apply to all documentation updates, creation, editing, modifications, and deletions.

## Core Documentation Principles

1. **Automated Documentation Management**

   - Must always include descriptive inline comments in every files and don't remove them, remove if it's not necessary or 
     not used anymore
   - Use Google Style Python Docstrings
   - All documentation must be quantum-detailed, providing deep insights into why this code is needed and what its purpose is given the bigger picture
   - Documentation should be context-aware, explaining how components fit into the larger system
   - Cross-referencing between related documentation is required
   - Real-time updates must be maintained as code changes
   - Documentation maintenance should be automated where possible

2. **Documentation Categories**

   A. **Inline Code Documentation**
   Every code block must include:
   - Quantum documentation maintained by AI
   - Feature context explaining the component's role
   - Dependency listings that auto-update
   - Usage examples that stay current
   - Performance considerations
   - Security implications

   B. **Feature Documentation**
   Each feature requires:
   - AI-generated feature overview
   - Detailed implementation explanations
   - Comprehensive dependency mapping
   - Current usage examples
   - Security consideration notes

3. **Project Documentation Structure**

   Root Level Documentation:
   - README.md: Main project overview
   - ARCHITECTURE.md: System design documentation
   - CHANGELOG.md: Automatically updated changes with versioning

5. **Quality Standards**

   Completeness:
   - Full coverage of all features
   - Comprehensive depth
   - Clear context
   - Practical examples

   Accuracy:
   - Technical verification
   - Real-time updates
   - Consistency maintenance
   - High relevance

   Accessibility:
   - Clear readability
   - Logical structure
   - Intuitive navigation
   - Efficient searchability

6. **Update Protocol**

   Documentation updates are triggered by:
   - Code changes
   - Feature additions
   - Security patches
   - Performance changes

   Required Actions:
   - Update inline documentation
   - Regenerate README files, but be aware of current content, don't delete it if usefull
   - Refresh architecture diagrams if needed
   - Sync code examples
   - Validate documentation

   Verification Steps:
   - Check completeness
   - Verify accuracy
   - Ensure freshness
   - Maintain consistency

## Important Notes:
- Existing inline comments should only be removed if wrong, not helpful or outdated 
- The @docs/ and @.cursor/ directory serves as the source of truth
- Each subdirectory in @/docs must maintain its own specific documentation
- All documentation changes must follow these standards without exception
