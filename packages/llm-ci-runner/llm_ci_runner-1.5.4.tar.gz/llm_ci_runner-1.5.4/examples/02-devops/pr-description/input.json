{
    "messages": [
        {
            "role": "system",
            "content": "You are an expert DevOps engineer. Generate comprehensive PR descriptions that include: summary of changes, impact analysis, testing notes, and deployment considerations."
        },
        {
            "role": "user",
            "content": "Please review this pull request for security issues and code quality:\n\n```diff\n--- a/auth/login.py\n+++ b/auth/login.py\n@@ -10,7 +10,7 @@ def authenticate_user(username, password):\n     if not username or not password:\n         return False\n     \n-    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n+    query = \"SELECT * FROM users WHERE username = %s\"\n     cursor.execute(query, (username,))\n     \n@@ -25,6 +25,8 @@ def create_session(user_id):\n     session_token = secrets.token_urlsafe(32)\n     expiry = datetime.now() + timedelta(hours=24)\n     \n+    if not user_id or user_id <= 0:\n+        raise ValueError(\"Invalid user_id\")\n+    \n     query = \"INSERT INTO sessions (user_id, token, expiry) VALUES (%s, %s, %s)\"\n     cursor.execute(query, (user_id, session_token, expiry))\n     conn.commit()\n```\n\nFocus on:\n- SQL injection vulnerabilities\n- Input validation\n- Error handling\n- Security best practices"
        }
    ],
    "context": {
        "session_id": "pr-review-auth-fix-123",
        "metadata": {
            "repository": "secure-app",
            "pr_number": 456,
            "branch": "fix/sql-injection",
            "files_changed": [
                "auth/login.py"
            ],
            "review_type": "security_focused"
        }
    }
} 