name: Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv with caching
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies with locked versions
        run: |
          uv sync --frozen --group dev

      - name: Run unit tests with coverage
        id: run_tests
        continue-on-error: true
        run: |
          mkdir -p test-results
          uv run pytest tests/ -v --junitxml=test-results/junit.xml --tb=short

      - name: Set test status
        id: test_status
        run: |
          echo "passed=${{ steps.run_tests.outcome == 'success' }}" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: always()  # Always upload test results, even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/
          retention-days: 30

      - name: Coverage comment and badge
        if: always()  # Run even if tests fail to show coverage
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 85
          MINIMUM_ORANGE: 70
          ANNOTATE_MISSING_LINES: false

      - name: Report Test Results
        if: always()
        run: |
          echo "::notice title=Unit Test Results::Test run completed with status: ${{ steps.run_tests.outcome }}"
          if [ -f "test-results/junit.xml" ]; then
            echo "::group::Test Summary"
            cat test-results/junit.xml | grep -E "tests=|failures=|errors=|skipped=" || true
            echo "::endgroup::"
          fi
          
          if [ -f "coverage.xml" ]; then
            echo "::group::Coverage Summary"
            uv run coverage report --show-missing || true
            echo "::endgroup::"
          fi

      - name: Check test status
        if: steps.test_status.outputs.passed != 'true'
        run: exit 1 