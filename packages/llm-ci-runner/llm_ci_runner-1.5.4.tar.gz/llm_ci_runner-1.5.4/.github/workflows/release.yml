name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        type: boolean
        default: true
      dry_run:
        description: 'Dry run (skip actual release)'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.12"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Display parameters
        shell: bash
        run: |
          cat << 'EOF' > "$GITHUB_STEP_SUMMARY"
          <h1>Parameters</h1>
          <p>{
            "dry_run": "${{ github.event.inputs.dry_run }}",
            "publish_to_pypi": "${{ github.event.inputs.publish_to_pypi }}",
            "release_notes": "${{ github.event.inputs.release_notes }}",
            "version": "${{ github.event.inputs.version }}"
          }</p>
          EOF

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up uv with caching
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --frozen --group dev

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Check semantic versioning format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "❌ Invalid version format. Must follow semantic versioning (e.g., 1.0.0, 1.0.0-alpha.1)"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "❌ Tag v$VERSION already exists"
            exit 1
          fi
          
          echo "✅ Version validation passed"

      - name: Run tests
        run: |
          uv run pytest tests/unit/ -v

      - name: Run linting
        run: |
          uv run ruff check llm_ci_runner/
          uv run ruff format --check llm_ci_runner/
          uv run mypy llm_ci_runner/

      - name: Check for security vulnerabilities
        run: |
          uv run pip-audit

      - name: Validate package metadata
        run: |
          # Check if pyproject.toml is valid
          uv run python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"
          echo "✅ pyproject.toml is valid"

  generate-release-notes:
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.dry_run != 'true' }}
    # Only allow maintainers to trigger LLM calls
    environment: release
    permissions:
      contents: read      # Read repository for git history
    outputs:
      release_notes: ${{ steps.generate_notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up uv with caching
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --frozen --group dev

      - name: Generate template variables
        id: template_vars
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MANUAL_INSTRUCTIONS="${{ github.event.inputs.release_notes || '' }}"
          
          # Generate template variables from git history
          uv run python scripts/generate-release-notes.py "$VERSION" "$MANUAL_INSTRUCTIONS"
          
          # Read the generated template variables
          if [ -f "template-vars.yaml" ]; then
            echo "✅ Template variables generated successfully"
          else
            echo "❌ Failed to generate template variables"
            exit 1
          fi

      - name: Generate release notes
        id: generate_notes
        run: |
          # Generate release notes using our template
          uv run llm-ci-runner \
            --template-file examples/05-templates/release-notes/template.hbs \
            --template-vars template-vars.yaml \
            --output-file release-notes.md
          
          # Extract the generated notes from the output
          if [ -f "release-notes.md" ]; then
            # Read the markdown output directly
            NOTES=$(cat release-notes.md)
            
            # Set the output
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "✅ Release notes generated successfully"
          else
            echo "❌ Failed to generate release notes"
            exit 1
          fi
        env:
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_MODEL: ${{ secrets.AZURE_OPENAI_MODEL }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}

  release:
    needs: [validate, generate-release-notes]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.dry_run != 'true' }}
    # Required permissions for release operations
    permissions:
      contents: write      # Push commits and tags to main branch
      packages: write      # Publish to GitHub Packages (if needed)
      id-token: write      # OIDC for PyPI authentication
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN_WRITE }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up uv with caching
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --frozen --group dev

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Use Python to update version more precisely - only target the project version
          uv run python -c "
          import re
          import sys
          
          # Get version from command line argument
          version = '${{ github.event.inputs.version }}'
          
          with open('pyproject.toml', 'r') as f:
              content = f.read()
          
          # More precise approach: find the [project] section and update version there
          # This ensures we only update the project version, not dependency versions
          
          # Split content into lines for easier processing
          lines = content.split('\n')
          updated_lines = []
          in_project_section = False
          version_updated = False
          
          for line in lines:
              # Check if we're entering the [project] section
              if line.strip() == '[project]':
                  in_project_section = True
                  updated_lines.append(line)
              # Check if we're leaving the [project] section
              elif line.strip().startswith('[') and line.strip() != '[project]':
                  in_project_section = False
                  updated_lines.append(line)
              # If we're in the [project] section and this is the version line
              elif in_project_section and line.strip().startswith('version ='):
                  # Update the version
                  updated_lines.append(f'version = \"{version}\"')
                  version_updated = True
                  print(f'Found and updated version line: {line.strip()} -> version = \"{version}\"')
              else:
                  updated_lines.append(line)
          
          if not version_updated:
              print('Error: Project version line not found in [project] section')
              sys.exit(1)
          
          # Write the updated content back
          updated_content = '\n'.join(updated_lines)
          
          with open('pyproject.toml', 'w') as f:
              f.write(updated_content)
          
          print(f'Successfully updated project version to {version}')
          "

      - name: Commit version change
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Add the version change
          git add pyproject.toml
          git commit -m "chore: bump version to $VERSION [skip ci]"
          git push origin main
          
          echo "Committed version change to $VERSION"

      - name: Build package
        run: |
          uv run python -m build

      - name: Verify package
        run: |
          # Test that the package can be built and installed
          uv run python -c "
          import subprocess
          import sys
          from pathlib import Path
          
          # Find the wheel file
          dist_dir = Path('dist')
          wheel_files = list(dist_dir.glob('*.whl'))
          
          if not wheel_files:
              print('No wheel files found in dist/')
              sys.exit(1)
          
          wheel_file = wheel_files[0]
          print(f'Testing installation of {wheel_file}')
          
          # Test installation
          result = subprocess.run([
              'uv', 'run', 'pip', 'install', str(wheel_file), '--force-reinstall'
          ], capture_output=True, text=True)
          
          if result.returncode != 0:
              print(f'Installation failed: {result.stderr}')
              sys.exit(1)
          
          print('Package installation test passed')
          "

      - name: Write release notes to file
        if: ${{ needs.generate-release-notes.outputs.release_notes != '' }}
        shell: bash
        run: |
          cat > release-notes.txt << 'EOF'
          ${{ needs.generate-release-notes.outputs.release_notes }}
          EOF

      - name: Create GitHub Release with generated notes (also creates Git tag)
        if: ${{ needs.generate-release-notes.outputs.release_notes != '' }}
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # This command creates both the GitHub release and the Git tag "v$VERSION"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release-notes.txt \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_WRITE }}
          
      - name: Create GitHub Release with default notes (also creates Git tag)
        if: ${{ needs.generate-release-notes.outputs.release_notes == '' }}
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # This command creates both the GitHub release and the Git tag "v$VERSION"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Release v$VERSION" \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_WRITE }}

      # Note: No need for a separate tag step, as gh release create automatically creates a tag

      - name: Publish to PyPI
        if: ${{ github.event.inputs.publish_to_pypi }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Upload to PyPI
          uv run twine upload dist/*
          
          echo "✅ Published to PyPI successfully"

      - name: Verify PyPI installation - Step 1 (Wait)
        if: ${{ github.event.inputs.publish_to_pypi }}
        shell: bash
        run: |
          # Wait for PyPI to process the upload
          echo "Waiting for PyPI to process the upload (60s)..."
          sleep 60
          
      - name: Verify PyPI installation - Step 2 (Try Install)
        if: ${{ github.event.inputs.publish_to_pypi }}
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Testing installation of llm-ci-runner==${VERSION} from PyPI..."
          
          # Try up to 3 times with increasing delays
          for attempt in {1..3}; do
            echo "Installation attempt ${attempt}/3"
            
            # Try to install the package
            if uv run pip install llm-ci-runner==${VERSION} --index-url https://pypi.org/simple/ --no-cache-dir; then
              echo "✅ Package installed successfully"
              break
            else
              if [ $attempt -lt 3 ]; then
                wait_time=$((attempt * 30))
                echo "Package not yet available on PyPI. Waiting ${wait_time}s before retry..."
                sleep $wait_time
              else
                echo "❌ PyPI installation failed after 3 attempts"
                exit 1
              fi
            fi
          done
          
      - name: Verify PyPI installation - Step 3 (Test Command)
        if: ${{ github.event.inputs.publish_to_pypi }}
        shell: bash
        run: |
          # Test that the command works
          if uv run llm-ci-runner --help; then
            echo "✅ Command test passed"
          else
            echo "❌ Command test failed"
            exit 1
          fi
          
          echo "✅ PyPI installation and verification completed successfully"
  
      - name: Cleanup and summary
        if: always()
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          echo "🎉 Release workflow completed!"
          echo "📋 Summary:"
          echo "- Version: v$VERSION"
          echo "- Tag: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo "- Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          
          if [[ "${{ github.event.inputs.publish_to_pypi }}" == "true" ]]; then
            echo "- PyPI: https://pypi.org/project/llm-ci-runner/$VERSION/"
          fi
          
          echo ""
          echo "✅ Release v$VERSION is now available!"
