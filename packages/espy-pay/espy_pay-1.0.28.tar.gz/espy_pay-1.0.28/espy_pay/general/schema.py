"""Copyright 2024 Everlasting Systems and Solutions LLC (www.myeverlasting.net).
All Rights Reserved.

No part of this software or any of its contents may be reproduced, copied, modified or adapted, without the prior written consent of the author, unless otherwise indicated for stand-alone materials.

For permission requests, write to the publisher at the email address below:
office@myeverlasting.net

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"""

from espy_contact.schema.campus import UserResponse
from pydantic import (
    BaseModel,
    EmailStr,
    Field,
    field_validator,
    model_validator,
    AnyHttpUrl,
)
from typing_extensions import Self
from espy_pay.general.enums import TranxEnum, ISPEnum, TranxType
from typing import Optional, Union
from datetime import datetime
import re


class TranxCreate(BaseModel):
    amount: int = Field(description="Amount must be greater than 2000 if NGN 25 if USD")
    description: str | None = None
    currency: str = "NGN"
    payee_id: int  # Appuser ID field
    first_name: str | None = None
    last_name: str | None = None
    email: EmailStr | None = None
    phone: Optional[str] = None
    detail: Union[dict, str] | None = None  # Can be dict or string for flexibility
    tranx_type: TranxType = TranxType.OTHERS
    receipt: str | None = None

    @model_validator(mode="after")
    def check_email_or_phone(self):
        payee_id = self.payee_id
        first_name = self.first_name
        last_name = self.last_name
        email = self.email
        if not payee_id:
            if not all([first_name, last_name, email]):
                raise ValueError(
                    "if payee_id is not provided, first_name, last_name and email must be provided"
                )
        return self


class TranxPay(BaseModel):
    txn_ref: int
    payee_id: int
    payee_email: EmailStr


class TranxItemBase(BaseModel):
    tranx_ref: int
    item_name: str
    item_description: str | None = None
    item_amount: int
    item_currency: str

    class Config:
        from_attributes = True


class PaystackInit(BaseModel):
    amount: int
    email: EmailStr
    reference: str
    txnref: str
    callback_url: AnyHttpUrl | None = None

    class Config:
        from_attributes = True


class TranxDto(TranxCreate):
    ref: int | None = None  # ref is generated by backend
    isp: ISPEnum | None = None
    stripe_payment_method: str | None = None
    status: TranxEnum = TranxEnum.PENDING
    createdOn: Optional[datetime] = None
    modifiedOn: Optional[datetime] = None
    callback_url: AnyHttpUrl | None = None
    stripeId: str | None = None
    payee: UserResponse | None = None
    tranx_items: list[TranxItemBase] | None = None

    @model_validator(mode="after")
    def validate_stripe_payment_amount(self) -> Self:
        isp = self.isp
        method = self.stripe_payment_method
        if isp == ISPEnum.STRIPE and method is None:
            raise ValueError(
                "stripe_payment_method must be provided when isp is 'STRIPE'"
            )
        return self

    class Config:
        from_attributes = True


class ClientTranx(BaseModel):
    amount: int = Field(description="Amount must be greater than 2000 if NGN 25 if USD")
    description: str | None = None
    currency: str = "NGN"
    detail: Union[dict, str] | None = None  # Can be dict or string for flexibility
    tranx_type: TranxType = TranxType.OTHERS
    status: TranxEnum = TranxEnum.PENDING
    createdOn: datetime | None = None
    modifiedOn: datetime | None = None
    callback_url: AnyHttpUrl | None = None
    payee_email: str
    payee_phone: str
    payee_fullname: str

    class Config:
        from_attributes = True


class TranxResponse(BaseModel):
    tid: int
    email: EmailStr
    pay: dict


class TranxIntent(BaseModel):
    id: str
    payment_method: str
    return_url: str


class TranxItemUpdate(TranxItemBase):
    id: int
    createdOn: datetime
    modifiedOn: Optional[datetime] = None


def strip_prefix(email: str) -> str:
    """
    Strips the prefix from an email address.

    Args:
        email (str): The email address to strip.

    Returns:
        str: The email address without the prefix.
    """
    match = re.match(r"secondary-\d+\+(.+)", email)
    if match:
        return match.group(1)
    return email


class Debtor(BaseModel):
    id: int
    email: EmailStr
    first_name: str | None = None
    last_name: str | None = None
    total_fees: int
    total_paid: int
    balance: int
    currency: str

    @field_validator("email", mode="before")
    def extract_email(cls, email) -> str:
        return strip_prefix(email)

    class Config:
        from_attributes = True
