"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .event import Event, EventTypedDict
from datetime import datetime
from enum import Enum
from outpost_sdk.types import BaseModel
from outpost_sdk.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListTenantEventsByDestinationGlobalsTypedDict(TypedDict):
    tenant_id: NotRequired[str]


class ListTenantEventsByDestinationGlobals(BaseModel):
    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None


class ListTenantEventsByDestinationStatus(str, Enum):
    r"""Filter events by delivery status."""

    SUCCESS = "success"
    FAILED = "failed"


class ListTenantEventsByDestinationRequestTypedDict(TypedDict):
    destination_id: str
    r"""The ID of the destination."""
    tenant_id: NotRequired[str]
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""
    status: NotRequired[ListTenantEventsByDestinationStatus]
    r"""Filter events by delivery status."""
    next: NotRequired[str]
    r"""Cursor for next page of results"""
    prev: NotRequired[str]
    r"""Cursor for previous page of results"""
    limit: NotRequired[int]
    r"""Number of items per page (default 100, max 1000)"""
    start: NotRequired[datetime]
    r"""Start time filter (RFC3339 format)"""
    end: NotRequired[datetime]
    r"""End time filter (RFC3339 format)"""


class ListTenantEventsByDestinationRequest(BaseModel):
    destination_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the destination."""

    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""

    status: Annotated[
        Optional[ListTenantEventsByDestinationStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter events by delivery status."""

    next: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor for next page of results"""

    prev: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor for previous page of results"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100
    r"""Number of items per page (default 100, max 1000)"""

    start: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start time filter (RFC3339 format)"""

    end: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End time filter (RFC3339 format)"""


class ListTenantEventsByDestinationResponseBodyTypedDict(TypedDict):
    r"""A paginated list of events for the destination."""

    count: int
    r"""Total number of items across all pages"""
    data: List[EventTypedDict]
    next_cursor: str
    r"""Cursor for next page (empty string if no next page)"""
    prev_cursor: str
    r"""Cursor for previous page (empty string if no previous page)"""


class ListTenantEventsByDestinationResponseBody(BaseModel):
    r"""A paginated list of events for the destination."""

    count: int
    r"""Total number of items across all pages"""

    data: List[Event]

    next_cursor: Annotated[str, pydantic.Field(alias="next")]
    r"""Cursor for next page (empty string if no next page)"""

    prev_cursor: Annotated[str, pydantic.Field(alias="prev")]
    r"""Cursor for previous page (empty string if no previous page)"""


class ListTenantEventsByDestinationResponseTypedDict(TypedDict):
    result: ListTenantEventsByDestinationResponseBodyTypedDict


class ListTenantEventsByDestinationResponse(BaseModel):
    next: Callable[[], Optional[ListTenantEventsByDestinationResponse]]

    result: ListTenantEventsByDestinationResponseBody
