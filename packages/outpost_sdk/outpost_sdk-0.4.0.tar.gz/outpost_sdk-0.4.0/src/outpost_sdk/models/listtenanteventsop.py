"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .event import Event, EventTypedDict
from datetime import datetime
from enum import Enum
from outpost_sdk.types import BaseModel
from outpost_sdk.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListTenantEventsGlobalsTypedDict(TypedDict):
    tenant_id: NotRequired[str]


class ListTenantEventsGlobals(BaseModel):
    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None


DestinationIDTypedDict = TypeAliasType("DestinationIDTypedDict", Union[str, List[str]])
r"""Filter events by destination ID(s)."""


DestinationID = TypeAliasType("DestinationID", Union[str, List[str]])
r"""Filter events by destination ID(s)."""


class ListTenantEventsStatus(str, Enum):
    r"""Filter events by delivery status."""

    SUCCESS = "success"
    FAILED = "failed"


class ListTenantEventsRequestTypedDict(TypedDict):
    tenant_id: NotRequired[str]
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""
    destination_id: NotRequired[DestinationIDTypedDict]
    r"""Filter events by destination ID(s)."""
    status: NotRequired[ListTenantEventsStatus]
    r"""Filter events by delivery status."""
    next: NotRequired[str]
    r"""Cursor for next page of results"""
    prev: NotRequired[str]
    r"""Cursor for previous page of results"""
    limit: NotRequired[int]
    r"""Number of items per page (default 100, max 1000)"""
    start: NotRequired[datetime]
    r"""Start time filter (RFC3339 format)"""
    end: NotRequired[datetime]
    r"""End time filter (RFC3339 format)"""


class ListTenantEventsRequest(BaseModel):
    tenant_id: Annotated[
        Optional[str],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None
    r"""The ID of the tenant. Required when using AdminApiKey authentication."""

    destination_id: Annotated[
        Optional[DestinationID],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter events by destination ID(s)."""

    status: Annotated[
        Optional[ListTenantEventsStatus],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter events by delivery status."""

    next: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor for next page of results"""

    prev: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Cursor for previous page of results"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100
    r"""Number of items per page (default 100, max 1000)"""

    start: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start time filter (RFC3339 format)"""

    end: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End time filter (RFC3339 format)"""


class ListTenantEventsResponseBodyTypedDict(TypedDict):
    r"""A paginated list of events."""

    count: int
    r"""Total number of items across all pages"""
    data: List[EventTypedDict]
    next_cursor: str
    r"""Cursor for next page (empty string if no next page)"""
    prev_cursor: str
    r"""Cursor for previous page (empty string if no previous page)"""


class ListTenantEventsResponseBody(BaseModel):
    r"""A paginated list of events."""

    count: int
    r"""Total number of items across all pages"""

    data: List[Event]

    next_cursor: Annotated[str, pydantic.Field(alias="next")]
    r"""Cursor for next page (empty string if no next page)"""

    prev_cursor: Annotated[str, pydantic.Field(alias="prev")]
    r"""Cursor for previous page (empty string if no previous page)"""


class ListTenantEventsResponseTypedDict(TypedDict):
    result: ListTenantEventsResponseBodyTypedDict


class ListTenantEventsResponse(BaseModel):
    next: Callable[[], Optional[ListTenantEventsResponse]]

    result: ListTenantEventsResponseBody
