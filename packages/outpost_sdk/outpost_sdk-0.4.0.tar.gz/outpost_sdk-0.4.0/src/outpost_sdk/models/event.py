"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from outpost_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import NotRequired, TypedDict


class EventTypedDict(TypedDict):
    id: NotRequired[str]
    destination_id: NotRequired[str]
    topic: NotRequired[str]
    time: NotRequired[datetime]
    r"""Time the event was received/processed."""
    successful_at: NotRequired[Nullable[datetime]]
    r"""Time the event was successfully delivered."""
    metadata: NotRequired[Dict[str, str]]
    r"""Key-value string pairs of metadata associated with the event."""
    data: NotRequired[Dict[str, Any]]
    r"""Freeform JSON data of the event."""


class Event(BaseModel):
    id: Optional[str] = None

    destination_id: Optional[str] = None

    topic: Optional[str] = None

    time: Optional[datetime] = None
    r"""Time the event was received/processed."""

    successful_at: OptionalNullable[datetime] = UNSET
    r"""Time the event was successfully delivered."""

    metadata: Optional[Dict[str, str]] = None
    r"""Key-value string pairs of metadata associated with the event."""

    data: Optional[Dict[str, Any]] = None
    r"""Freeform JSON data of the event."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "destination_id",
            "topic",
            "time",
            "successful_at",
            "metadata",
            "data",
        ]
        nullable_fields = ["successful_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
