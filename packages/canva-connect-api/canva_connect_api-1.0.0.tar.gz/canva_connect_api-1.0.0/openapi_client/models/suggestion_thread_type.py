# coding: utf-8

"""
    Canva Connect API

    API for building integrations with Canva via a REST api

    The version of the OpenAPI document: 2024-06-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.suggested_edit import SuggestedEdit
from openapi_client.models.suggestion_status import SuggestionStatus
from typing import Optional, Set
from typing_extensions import Self

class SuggestionThreadType(BaseModel):
    """
    A suggestion thread.
    """ # noqa: E501
    type: StrictStr
    suggested_edits: Annotated[List[SuggestedEdit], Field(min_length=1)]
    status: SuggestionStatus
    __properties: ClassVar[List[str]] = ["type", "suggested_edits", "status"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['suggestion']):
            raise ValueError("must be one of enum values ('suggestion')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuggestionThreadType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in suggested_edits (list)
        _items = []
        if self.suggested_edits:
            for _item_suggested_edits in self.suggested_edits:
                if _item_suggested_edits:
                    _items.append(_item_suggested_edits.to_dict())
            _dict['suggested_edits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuggestionThreadType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "suggested_edits": [SuggestedEdit.from_dict(_item) for _item in obj["suggested_edits"]] if obj.get("suggested_edits") is not None else None,
            "status": obj.get("status")
        })
        return _obj


