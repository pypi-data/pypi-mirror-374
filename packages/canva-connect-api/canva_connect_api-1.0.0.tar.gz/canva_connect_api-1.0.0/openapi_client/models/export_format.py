# coding: utf-8

"""
    Canva Connect API

    API for building integrations with Canva via a REST api

    The version of the OpenAPI document: 2024-06-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.gif_export_format import GifExportFormat
from openapi_client.models.jpg_export_format import JpgExportFormat
from openapi_client.models.mp4_export_format import Mp4ExportFormat
from openapi_client.models.pdf_export_format import PdfExportFormat
from openapi_client.models.png_export_format import PngExportFormat
from openapi_client.models.pptx_export_format import PptxExportFormat
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EXPORTFORMAT_ONE_OF_SCHEMAS = ["GifExportFormat", "JpgExportFormat", "Mp4ExportFormat", "PdfExportFormat", "PngExportFormat", "PptxExportFormat"]

class ExportFormat(BaseModel):
    """
    Details about the desired export format.
    """
    # data type: PdfExportFormat
    oneof_schema_1_validator: Optional[PdfExportFormat] = None
    # data type: JpgExportFormat
    oneof_schema_2_validator: Optional[JpgExportFormat] = None
    # data type: PngExportFormat
    oneof_schema_3_validator: Optional[PngExportFormat] = None
    # data type: PptxExportFormat
    oneof_schema_4_validator: Optional[PptxExportFormat] = None
    # data type: GifExportFormat
    oneof_schema_5_validator: Optional[GifExportFormat] = None
    # data type: Mp4ExportFormat
    oneof_schema_6_validator: Optional[Mp4ExportFormat] = None
    actual_instance: Optional[Union[GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat]] = None
    one_of_schemas: Set[str] = { "GifExportFormat", "JpgExportFormat", "Mp4ExportFormat", "PdfExportFormat", "PngExportFormat", "PptxExportFormat" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ExportFormat.model_construct()
        error_messages = []
        match = 0
        # validate data type: PdfExportFormat
        if not isinstance(v, PdfExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PdfExportFormat`")
        else:
            match += 1
        # validate data type: JpgExportFormat
        if not isinstance(v, JpgExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JpgExportFormat`")
        else:
            match += 1
        # validate data type: PngExportFormat
        if not isinstance(v, PngExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PngExportFormat`")
        else:
            match += 1
        # validate data type: PptxExportFormat
        if not isinstance(v, PptxExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PptxExportFormat`")
        else:
            match += 1
        # validate data type: GifExportFormat
        if not isinstance(v, GifExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GifExportFormat`")
        else:
            match += 1
        # validate data type: Mp4ExportFormat
        if not isinstance(v, Mp4ExportFormat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Mp4ExportFormat`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ExportFormat with oneOf schemas: GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ExportFormat with oneOf schemas: GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PdfExportFormat
        try:
            instance.actual_instance = PdfExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JpgExportFormat
        try:
            instance.actual_instance = JpgExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PngExportFormat
        try:
            instance.actual_instance = PngExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PptxExportFormat
        try:
            instance.actual_instance = PptxExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GifExportFormat
        try:
            instance.actual_instance = GifExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Mp4ExportFormat
        try:
            instance.actual_instance = Mp4ExportFormat.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ExportFormat with oneOf schemas: GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ExportFormat with oneOf schemas: GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GifExportFormat, JpgExportFormat, Mp4ExportFormat, PdfExportFormat, PngExportFormat, PptxExportFormat]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


