# coding: utf-8

"""
    Canva Connect API

    API for building integrations with Canva via a REST api

    The version of the OpenAPI document: 2024-06-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.design_comment_object import DesignCommentObject
from openapi_client.models.team_user import TeamUser
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class ParentComment(BaseModel):
    """
    Data about the comment, including the message, author, and the object (such as a design) the comment is attached to.
    """ # noqa: E501
    type: StrictStr
    id: StrictStr = Field(description="The ID of the comment.  You can use this ID to create replies to the comment using the [Create reply API](https://www.canva.dev/docs/connect/api-reference/comments/create-reply/).")
    attached_to: Optional[DesignCommentObject] = None
    message: StrictStr = Field(description="The comment message. This is the comment body shown in the Canva UI. User mentions are shown here in the format `[user_id:team_id]`.")
    author: User
    created_at: Optional[StrictInt] = Field(default=None, description="When the comment or reply was created, as a Unix timestamp (in seconds since the Unix Epoch).")
    updated_at: Optional[StrictInt] = Field(default=None, description="When the comment or reply was last updated, as a Unix timestamp (in seconds since the Unix Epoch).")
    mentions: Dict[str, TeamUser] = Field(description="The Canva users mentioned in the comment.")
    assignee: Optional[User] = None
    resolver: Optional[User] = None
    __properties: ClassVar[List[str]] = ["type", "id", "attached_to", "message", "author", "created_at", "updated_at", "mentions", "assignee", "resolver"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['parent']):
            raise ValueError("must be one of enum values ('parent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParentComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attached_to
        if self.attached_to:
            _dict['attached_to'] = self.attached_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in mentions (dict)
        _field_dict = {}
        if self.mentions:
            for _key_mentions in self.mentions:
                if self.mentions[_key_mentions]:
                    _field_dict[_key_mentions] = self.mentions[_key_mentions].to_dict()
            _dict['mentions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolver
        if self.resolver:
            _dict['resolver'] = self.resolver.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParentComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "id": obj.get("id"),
            "attached_to": DesignCommentObject.from_dict(obj["attached_to"]) if obj.get("attached_to") is not None else None,
            "message": obj.get("message"),
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "mentions": dict(
                (_k, TeamUser.from_dict(_v))
                for _k, _v in obj["mentions"].items()
            )
            if obj.get("mentions") is not None
            else None,
            "assignee": User.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "resolver": User.from_dict(obj["resolver"]) if obj.get("resolver") is not None else None
        })
        return _obj


