# coding: utf-8

"""
    Canva Connect API

    API for building integrations with Canva via a REST api

    The version of the OpenAPI document: 2024-06-18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.design_links import DesignLinks
from openapi_client.models.team_user_summary import TeamUserSummary
from openapi_client.models.thumbnail import Thumbnail
from typing import Optional, Set
from typing_extensions import Self

class Design(BaseModel):
    """
    The design object, which contains metadata about the design.
    """ # noqa: E501
    id: StrictStr = Field(description="The design ID.")
    title: Optional[StrictStr] = Field(default=None, description="The design title.")
    owner: TeamUserSummary
    thumbnail: Optional[Thumbnail] = None
    urls: DesignLinks
    created_at: StrictInt = Field(description="When the design was created in Canva, as a Unix timestamp (in seconds since the Unix Epoch).")
    updated_at: StrictInt = Field(description="When the design was last updated in Canva, as a Unix timestamp (in seconds since the Unix Epoch).")
    page_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The total number of pages in the design. Some design types don't have pages (for example, Canva docs).")
    __properties: ClassVar[List[str]] = ["id", "title", "owner", "thumbnail", "urls", "created_at", "updated_at", "page_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Design from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Design from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "owner": TeamUserSummary.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "thumbnail": Thumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "urls": DesignLinks.from_dict(obj["urls"]) if obj.get("urls") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "page_count": obj.get("page_count")
        })
        return _obj


