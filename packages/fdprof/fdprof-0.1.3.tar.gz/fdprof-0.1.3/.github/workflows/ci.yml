name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --extra dev --extra test

    - name: Run all tests
      run: uv run pytest tests/ -v --timeout=60

    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest'
      run: uv run pytest tests/ -v --cov=src/fdprof --cov-report=xml --cov-report=term

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Test CLI functionality (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        # Test basic help
        uv run fdprof --help
        # Test demo (basic smoke test)
        timeout 10s uv run fdprof echo "CI test" || true
        # Test save functionality
        uv run fdprof --save test_plot.png echo "CI plot test" || true
        ls -la test_plot.png || echo "Plot not generated (expected in CI)"

    - name: Test CLI functionality (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Test basic help
        uv run fdprof --help
        # Test demo (basic smoke test) - no timeout on Windows
        uv run fdprof echo "CI test"
        # Test save functionality
        uv run fdprof --save test_plot.png echo "CI plot test"
        if (Test-Path test_plot.png) { Get-Item test_plot.png } else { Write-Output "Plot not generated (expected in CI)" }

    - name: Clean up artifacts (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        rm -f fdprof.jsonl test_plot.png

    - name: Clean up artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Remove-Item -Path "fdprof.jsonl" -ErrorAction SilentlyContinue
        Remove-Item -Path "test_plot.png" -ErrorAction SilentlyContinue
