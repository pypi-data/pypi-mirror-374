.PHONY: build run test clean deps fmt lint docker-build docker-run

# 构建二进制文件
build:
	go build -o bin/{{project_name}} cmd/api/main.go

# 运行服务
run:
	go run cmd/api/main.go

# 运行测试
test:
	go test ./...

# 清理构建文件
clean:
	rm -rf bin/

# 安装依赖
deps:
	go mod tidy
	go mod download

# 格式化代码
fmt:
	gofmt -s -w .

# 代码检查
lint:
	golangci-lint run

# 构建Docker镜像
docker-build:
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs); \
		echo "Building Docker image with $$APP_NAME:$$APP_VERSION"; \
		docker build -t $$APP_NAME:$$APP_VERSION .; \
	else \
		echo "Building Docker image with {{project_name}}:latest"; \
		docker build -t {{project_name}}:latest .; \
	fi

# 运行Docker容器
docker-run:
	docker-compose up --build -d

# 停止Docker容器
docker-stop:
	docker-compose down

# 查看Docker容器日志
docker-logs:
	docker-compose logs -f

# 重启Docker容器
docker-restart:
	docker-compose restart

# 启动NATS服务器
nats-up:
	docker run -d --name nats-server -p 4222:4222 -p 8222:8222 nats:latest --http_port 8222 --js

# 停止NATS服务器
nats-down:
	docker stop nats-server && docker rm nats-server

# 查看NATS服务器状态
nats-status:
	@docker ps --filter name=nats-server --format "table {{ '{{' }}.Names{{ '}}' }}	{{ '{{' }}.Status{{ '}}' }}	{{ '{{' }}.Ports{{ '}}' }}"

# 初始化事件系统
init-events:
	@echo "Initializing event system..."
	@go run cmd/event-init/main.go

# 清理事件数据
clean-events:
	@echo "Cleaning event data..."
	@docker stop nats-server && docker rm nats-server || true
	@docker volume prune -f

# 初始化GIT
git:
  git init
	git add .
	git commit -m "Initial commit"
	git branch -M main
	# git remote add origin {{git_repo}}
	# git push -u origin main

# 开发环境运行
dev:
	go run cmd/api/main.go