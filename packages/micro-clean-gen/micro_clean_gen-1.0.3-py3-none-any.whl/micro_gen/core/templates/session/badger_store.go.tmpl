package session

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
  "{{project_name}}/internal/entity"
	"github.com/dgraph-io/badger/v4"
)

// BadgerStore Badger存储实现
type BadgerStore struct {
	db     *badger.DB
	prefix string
}

// NewBadgerStore 创建Badger存储
func NewBadgerStore(dbPath string, prefix string) (*BadgerStore, error) {
	opts := badger.DefaultOptions(dbPath)
	opts.Logger = nil // 禁用日志输出
	
	db, err := badger.Open(opts)
	if err != nil {
		return nil, fmt.Errorf("failed to open badger db: %w", err)
	}

	store := &BadgerStore{
		db:     db,
		prefix: prefix,
	}

	// 启动后台清理过期会话
	go store.cleanupExpiredSessions()

	return store, nil
}

// buildKey 构建存储键
func (b *BadgerStore) buildKey(id string) []byte {
	return []byte(fmt.Sprintf("%s:%s", b.prefix, id))
}

// Create 创建会话
func (b *BadgerStore) Create(ctx context.Context, session *entity.SessionData) error {
	if session == nil {
		return fmt.Errorf("session cannot be nil")
	}

	data, err := json.Marshal(session)
	if err != nil {
		return fmt.Errorf("failed to marshal session: %w", err)
	}

	ttl := time.Until(session.ExpiresAt)
	if ttl <= 0 {
		return fmt.Errorf("session already expired")
	}

	return b.db.Update(func(txn *badger.Txn) error {
		e := badger.NewEntry(b.buildKey(session.ID), data).WithTTL(ttl)
		return txn.SetEntry(e)
	})
}

// Get 获取会话
func (b *BadgerStore) Get(ctx context.Context, id string) (*entity.SessionData, error) {
	var session entity.SessionData
	
	err := b.db.View(func(txn *badger.Txn) error {
		item, err := txn.Get(b.buildKey(id))
		if err != nil {
			if err == badger.ErrKeyNotFound {
				return fmt.Errorf("session not found")
			}
			return err
		}

		return item.Value(func(val []byte) error {
			return json.Unmarshal(val, &session)
		})
	})

	if err != nil {
		return nil, err
	}

	// 检查是否过期
	if session.IsExpired() {
		// 异步删除过期会话
		go b.Delete(ctx, id)
		return nil, fmt.Errorf("session expired")
	}

	return &session, nil
}

// Update 更新会话
func (b *BadgerStore) Update(ctx context.Context, session *entity.SessionData) error {
	if session == nil {
		return fmt.Errorf("session cannot be nil")
	}

	data, err := json.Marshal(session)
	if err != nil {
		return fmt.Errorf("failed to marshal session: %w", err)
	}

	ttl := time.Until(session.ExpiresAt)
	if ttl <= 0 {
		return fmt.Errorf("session already expired")
	}

	return b.db.Update(func(txn *badger.Txn) error {
		// 先检查会话是否存在
		_, err := txn.Get(b.buildKey(session.ID))
		if err != nil {
			if err == badger.ErrKeyNotFound {
				return fmt.Errorf("session not found")
			}
			return err
		}

		e := badger.NewEntry(b.buildKey(session.ID), data).WithTTL(ttl)
		return txn.SetEntry(e)
	})
}

// Delete 删除会话
func (b *BadgerStore) Delete(ctx context.Context, id string) error {
	return b.db.Update(func(txn *badger.Txn) error {
		return txn.Delete(b.buildKey(id))
	})
}

// cleanupExpiredSessions 清理过期会话
func (b *BadgerStore) cleanupExpiredSessions() {
	ticker := time.NewTicker(1 * time.Hour)
	defer ticker.Stop()

	for range ticker.C {
		b.db.RunValueLogGC(0.5) // 运行垃圾回收
	}
}

// Close 关闭存储
func (b *BadgerStore) Close() error {
	return b.db.Close()
}

// Stats 获取存储统计信息
func (b *BadgerStore) Stats() map[string]interface{} {
	lsm, vlog := b.db.Size()
	levels := b.db.Levels()
	tables := b.db.Tables()
	
	return map[string]interface{}{
		"lsm_size":  lsm,
		"vlog_size": vlog,
		"levels":    levels,
		"tables":    tables,
	}
}