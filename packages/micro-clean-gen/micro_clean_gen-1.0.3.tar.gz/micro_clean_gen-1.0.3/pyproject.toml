[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "micro-clean-gen"
dynamic = ["version"]
description = "基于整洁架构的事件驱动微服务代码生成器"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Ray", email = "ray@rayainfo.cn" }]
maintainers = [{ name = "Ray", email = "ray@rayainfo.cn" }]
keywords = [
    "microservice",
    "clean-architecture",
    "code-generator",
    "event-sourcing",
    "cqrs",
    "saga",
    "curd",
    "event-driven",
    "ddd",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dependencies = [
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "click>=8.0.0",
    "colorama>=0.4.4",
    "jsonschema>=4.0.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
]

[project.urls]
Homepage = "https://github.com/DotNetAge/micro-gen"
Documentation = "https://micro-gen.readthedocs.io/"
Repository = "https://github.com/DotNetAge/micro-gen"
"Bug Tracker" = "https://github.com/DotNetAge/micro-gen/issues"

[project.scripts]
micro-gen = "micro_gen.cli:main"

[tool.setuptools]
packages = ["micro_gen"]
include-package-data = true

[tool.setuptools.package-data]
micro_gen = [
    "templates/*.tmpl",
    "templates/**/*.tmpl",
    "core/templates/*.tmpl",
    "core/templates/**/*.tmpl",
    "examples/*.yaml",
    "examples/*.yml",
]

[tool.setuptools.dynamic]
version = { file = "VERSION" }

[tool.setuptools_scm]
write_to = "micro_gen/_version.py"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["micro_gen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
