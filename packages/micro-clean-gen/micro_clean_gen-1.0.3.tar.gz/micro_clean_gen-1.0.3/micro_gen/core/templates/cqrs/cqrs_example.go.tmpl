package main

import (
	"context"
	"fmt"
	"log"

	"{{.ModuleName}}/internal/entity"
	"{{.ModuleName}}/internal/infrastructure"
	"{{.ModuleName}}/internal/projection"
)

// CQRS使用示例
type CQRSExample struct {
	eventBus    entity.EventBus
	repository  entity.AggregateRepository
	projection  projection.ReadModelRepository
}

func NewCQRSExample() *CQRSExample {
	// 初始化基础设施
	eventBus := infrastructure.NewInMemoryEventBus()
	repository := infrastructure.NewInMemoryRepository()
	projection := infrastructure.NewMemoryReadModelRepository()
	
	return &CQRSExample{
		eventBus:   eventBus,
		repository: repository,
		projection: projection,
	}
}

func (e *CQRSExample) Run() error {
	ctx := context.Background()
	
	// 示例：注册用户聚合
	fmt.Println("=== CQRS 示例开始 ===")
	
	// 1. 创建命令
	createCmd := &CreateUserCommand{
		Username: "john_doe",
		Email:    "john@example.com",
	}
	
	// 2. 处理命令
	handler := NewCreateUserHandler(e.repository, e.eventBus)
	if err := handler.Handle(ctx, createCmd); err != nil {
		return fmt.Errorf("处理创建用户命令失败: %w", err)
	}
	
	// 3. 查询读模型
	query := projection.NewQuery().WithFilter("username", "john_doe")
	users, err := e.projection.FindByQuery(ctx, query)
	if err != nil {
		return fmt.Errorf("查询用户失败: %w", err)
	}
	
	fmt.Printf("找到 %d 个用户\n", len(users))
	for _, user := range users {
		fmt.Printf("用户: %+v\n", user)
	}
	
	fmt.Println("=== CQRS 示例完成 ===")
	return nil
}

func main() {
	example := NewCQRSExample()
	if err := example.Run(); err != nil {
		log.Fatal(err)
	}
}