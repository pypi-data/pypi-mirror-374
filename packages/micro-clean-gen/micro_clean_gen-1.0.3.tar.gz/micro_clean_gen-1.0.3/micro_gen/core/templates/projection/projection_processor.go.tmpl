package projection

import (
	"context"

	"{{.ModuleName}}/internal/entity"
	"{{.ModuleName}}/internal/usecase/projection"
)

// {{.AggregateName}}ProjectionProcessor {{.AggregateName}}投影事件处理器（适配器层）
type {{.AggregateName}}ProjectionProcessor struct {
	service *projection.{{.AggregateName}}ProjectionService
}

// New{{.AggregateName}}ProjectionProcessor 创建投影处理器
func New{{.AggregateName}}ProjectionProcessor(service *projection.{{.AggregateName}}ProjectionService) *{{.AggregateName}}ProjectionProcessor {
	return &{{.AggregateName}}ProjectionProcessor{
		service: service,
	}
}

// SupportedEventTypes 返回支持的事件类型
func (p *{{.AggregateName}}ProjectionProcessor) SupportedEventTypes() []string {
	return []string{
		"{{.AggregateName}}Created",
		"{{.AggregateName}}Updated",
		"{{.AggregateName}}Deleted",
	}
}

// ProcessEvent 处理领域事件
func (p *{{.AggregateName}}ProjectionProcessor) ProcessEvent(ctx context.Context, event entity.DomainEvent) error {
	return p.service.HandleEvent(ctx, event)
}