"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from mollie.models import ClientError
from mollie.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from mollie.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ListClientsRequestTypedDict(TypedDict):
    embed: NotRequired[Nullable[str]]
    r"""This endpoint allows embedding related API items by appending the
    following values via the `embed` query string parameter.

    * `organization`: Include the organization of the client. Available for `signuplink` partners, or for `oauth`
    partners with the `organizations.read` scope.
    * `onboarding`: Include the onboarding status of the client. Available for `signuplink` partners, or for `oauth`
    partners with the `onboarding.read` scope.
    * `capabilities`: Include the [capabilities](list-capabilities) of the client organization.
    Available for *oauth* partners with the `onboarding.read` scope.
    """
    from_: NotRequired[str]
    r"""Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
    result set.
    """
    limit: NotRequired[Nullable[int]]
    r"""The maximum number of items to return. Defaults to 50 items."""


class ListClientsRequest(BaseModel):
    embed: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""This endpoint allows embedding related API items by appending the
    following values via the `embed` query string parameter.

    * `organization`: Include the organization of the client. Available for `signuplink` partners, or for `oauth`
    partners with the `organizations.read` scope.
    * `onboarding`: Include the onboarding status of the client. Available for `signuplink` partners, or for `oauth`
    partners with the `onboarding.read` scope.
    * `capabilities`: Include the [capabilities](list-capabilities) of the client organization.
    Available for *oauth* partners with the `onboarding.read` scope.
    """

    from_: Annotated[
        Optional[str],
        pydantic.Field(alias="from"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the
    result set.
    """

    limit: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""The maximum number of items to return. Defaults to 50 items."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["embed", "from", "limit"]
        nullable_fields = ["embed", "limit"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListClientsNotFoundDocumentationTypedDict(TypedDict):
    r"""The URL to the generic Mollie API error handling guide."""

    href: str
    type: str


class ListClientsNotFoundDocumentation(BaseModel):
    r"""The URL to the generic Mollie API error handling guide."""

    href: str

    type: str


class ListClientsNotFoundLinksTypedDict(TypedDict):
    documentation: ListClientsNotFoundDocumentationTypedDict
    r"""The URL to the generic Mollie API error handling guide."""


class ListClientsNotFoundLinks(BaseModel):
    documentation: ListClientsNotFoundDocumentation
    r"""The URL to the generic Mollie API error handling guide."""


class ListClientsNotFoundHalJSONErrorData(BaseModel):
    status: int
    r"""The status code of the error message. This is always the same code as the status code of the HTTP message itself."""

    title: str
    r"""The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`."""

    detail: str
    r"""A detailed human-readable description of the error that occurred."""

    links: Annotated[ListClientsNotFoundLinks, pydantic.Field(alias="_links")]

    field: Optional[str] = None
    r"""If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
    of the field that caused the issue.
    """


class ListClientsNotFoundHalJSONError(ClientError):
    r"""An error response object."""

    data: ListClientsNotFoundHalJSONErrorData

    def __init__(
        self,
        data: ListClientsNotFoundHalJSONErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class ListClientsBadRequestDocumentationTypedDict(TypedDict):
    r"""The URL to the generic Mollie API error handling guide."""

    href: str
    type: str


class ListClientsBadRequestDocumentation(BaseModel):
    r"""The URL to the generic Mollie API error handling guide."""

    href: str

    type: str


class ListClientsBadRequestLinksTypedDict(TypedDict):
    documentation: ListClientsBadRequestDocumentationTypedDict
    r"""The URL to the generic Mollie API error handling guide."""


class ListClientsBadRequestLinks(BaseModel):
    documentation: ListClientsBadRequestDocumentation
    r"""The URL to the generic Mollie API error handling guide."""


class ListClientsBadRequestHalJSONErrorData(BaseModel):
    status: int
    r"""The status code of the error message. This is always the same code as the status code of the HTTP message itself."""

    title: str
    r"""The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`."""

    detail: str
    r"""A detailed human-readable description of the error that occurred."""

    links: Annotated[ListClientsBadRequestLinks, pydantic.Field(alias="_links")]

    field: Optional[str] = None
    r"""If the error was caused by a value provided by you in a specific field, the `field` property will contain the name
    of the field that caused the issue.
    """


class ListClientsBadRequestHalJSONError(ClientError):
    r"""An error response object."""

    data: ListClientsBadRequestHalJSONErrorData

    def __init__(
        self,
        data: ListClientsBadRequestHalJSONErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class ListClientsCommissionTypedDict(TypedDict):
    r"""The commission object."""

    count: NotRequired[int]
    r"""The commission count."""


class ListClientsCommission(BaseModel):
    r"""The commission object."""

    count: Optional[int] = None
    r"""The commission count."""


class ClientSelfTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientSelf(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsLinksOrganizationTypedDict(TypedDict):
    r"""The API resource URL of the client's organization."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsLinksOrganization(BaseModel):
    r"""The API resource URL of the client's organization."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsLinksOnboardingTypedDict(TypedDict):
    r"""The API resource URL of the client's onboarding status."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsLinksOnboarding(BaseModel):
    r"""The API resource URL of the client's onboarding status."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientDocumentationTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientDocumentation(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsClientLinksTypedDict(TypedDict):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: NotRequired[ClientSelfTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""
    organization: NotRequired[ListClientsLinksOrganizationTypedDict]
    r"""The API resource URL of the client's organization."""
    onboarding: NotRequired[ListClientsLinksOnboardingTypedDict]
    r"""The API resource URL of the client's onboarding status."""
    documentation: NotRequired[ClientDocumentationTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ListClientsClientLinks(BaseModel):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: Annotated[Optional[ClientSelf], pydantic.Field(alias="self")] = None
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    organization: Optional[ListClientsLinksOrganization] = None
    r"""The API resource URL of the client's organization."""

    onboarding: Optional[ListClientsLinksOnboarding] = None
    r"""The API resource URL of the client's onboarding status."""

    documentation: Optional[ClientDocumentation] = None
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ListClientsLocale(str, Enum):
    r"""The preferred locale of the merchant, as set in their Mollie dashboard."""

    EN_US = "en_US"
    EN_GB = "en_GB"
    NL_NL = "nl_NL"
    NL_BE = "nl_BE"
    DE_DE = "de_DE"
    DE_AT = "de_AT"
    DE_CH = "de_CH"
    FR_FR = "fr_FR"
    FR_BE = "fr_BE"
    ES_ES = "es_ES"
    CA_ES = "ca_ES"
    PT_PT = "pt_PT"
    IT_IT = "it_IT"
    NB_NO = "nb_NO"
    SV_SE = "sv_SE"
    FI_FI = "fi_FI"
    DA_DK = "da_DK"
    IS_IS = "is_IS"
    HU_HU = "hu_HU"
    PL_PL = "pl_PL"
    LV_LV = "lv_LV"
    LT_LT = "lt_LT"


class ListClientsAddressTypedDict(TypedDict):
    r"""The address of the organization."""

    street_and_number: NotRequired[str]
    r"""A street and street number."""
    postal_code: NotRequired[str]
    r"""A postal code. This field may be required if the provided country has a postal code system."""
    city: NotRequired[str]
    country: NotRequired[str]
    r"""A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format."""


class ListClientsAddress(BaseModel):
    r"""The address of the organization."""

    street_and_number: Annotated[
        Optional[str], pydantic.Field(alias="streetAndNumber")
    ] = None
    r"""A street and street number."""

    postal_code: Annotated[Optional[str], pydantic.Field(alias="postalCode")] = None
    r"""A postal code. This field may be required if the provided country has a postal code system."""

    city: Optional[str] = None

    country: Optional[str] = None
    r"""A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format."""


class ListClientsVatRegulation(str, Enum):
    r"""Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
    Kingdom, and shifted VAT for merchants in the European Union.

    The field is not present for merchants residing in other countries.
    """

    DUTCH = "dutch"
    BRITISH = "british"
    SHIFTED = "shifted"


class ClientOrganizationSelfTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOrganizationSelf(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOrganizationDashboardTypedDict(TypedDict):
    r"""Direct link to the organization's Mollie dashboard."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOrganizationDashboard(BaseModel):
    r"""Direct link to the organization's Mollie dashboard."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOrganizationDocumentationTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOrganizationDocumentation(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOrganizationLinksTypedDict(TypedDict):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: NotRequired[ClientOrganizationSelfTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""
    dashboard: NotRequired[ListClientsOrganizationDashboardTypedDict]
    r"""Direct link to the organization's Mollie dashboard."""
    documentation: NotRequired[ClientOrganizationDocumentationTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ClientOrganizationLinks(BaseModel):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: Annotated[Optional[ClientOrganizationSelf], pydantic.Field(alias="self")] = (
        None
    )
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    dashboard: Optional[ListClientsOrganizationDashboard] = None
    r"""Direct link to the organization's Mollie dashboard."""

    documentation: Optional[ClientOrganizationDocumentation] = None
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ListClientsOrganizationTypedDict(TypedDict):
    resource: NotRequired[str]
    r"""Indicates the response contains an organization object. Will always contain the string `organization` for this
    resource type.
    """
    id: NotRequired[str]
    r"""The identifier uniquely referring to this organization. Example: `org_12345678`."""
    name: NotRequired[str]
    r"""The name of the organization."""
    email: NotRequired[str]
    r"""The email address associated with the organization."""
    locale: NotRequired[ListClientsLocale]
    r"""The preferred locale of the merchant, as set in their Mollie dashboard."""
    address: NotRequired[ListClientsAddressTypedDict]
    r"""The address of the organization."""
    registration_number: NotRequired[str]
    r"""The registration number of the organization at their local chamber of commerce."""
    vat_number: NotRequired[Nullable[str]]
    r"""The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
    verified against the international registry *VIES*.

    The field is not present for merchants residing in other countries.
    """
    vat_regulation: NotRequired[Nullable[ListClientsVatRegulation]]
    r"""Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
    Kingdom, and shifted VAT for merchants in the European Union.

    The field is not present for merchants residing in other countries.
    """
    links: NotRequired[ClientOrganizationLinksTypedDict]
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""


class ListClientsOrganization(BaseModel):
    resource: Optional[str] = None
    r"""Indicates the response contains an organization object. Will always contain the string `organization` for this
    resource type.
    """

    id: Optional[str] = None
    r"""The identifier uniquely referring to this organization. Example: `org_12345678`."""

    name: Optional[str] = None
    r"""The name of the organization."""

    email: Optional[str] = None
    r"""The email address associated with the organization."""

    locale: Optional[ListClientsLocale] = None
    r"""The preferred locale of the merchant, as set in their Mollie dashboard."""

    address: Optional[ListClientsAddress] = None
    r"""The address of the organization."""

    registration_number: Annotated[
        Optional[str], pydantic.Field(alias="registrationNumber")
    ] = None
    r"""The registration number of the organization at their local chamber of commerce."""

    vat_number: Annotated[OptionalNullable[str], pydantic.Field(alias="vatNumber")] = (
        UNSET
    )
    r"""The VAT number of the organization, if based in the European Union or in The United Kingdom. VAT numbers are
    verified against the international registry *VIES*.

    The field is not present for merchants residing in other countries.
    """

    vat_regulation: Annotated[
        OptionalNullable[ListClientsVatRegulation],
        pydantic.Field(alias="vatRegulation"),
    ] = UNSET
    r"""Mollie applies Dutch VAT for merchants based in The Netherlands, British VAT for merchants based in The United
    Kingdom, and shifted VAT for merchants in the European Union.

    The field is not present for merchants residing in other countries.
    """

    links: Annotated[
        Optional[ClientOrganizationLinks], pydantic.Field(alias="_links")
    ] = None
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "resource",
            "id",
            "name",
            "email",
            "locale",
            "address",
            "registrationNumber",
            "vatNumber",
            "vatRegulation",
            "_links",
        ]
        nullable_fields = ["vatNumber", "vatRegulation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListClientsOnboardingStatus(str, Enum):
    r"""The current status of the organization's onboarding process.

    * `needs-data` — The merchant needs to provide additional information
    * `in-review` — The merchant provided all information, awaiting review from Mollie
    * `completed` — The onboarding is completed
    """

    NEEDS_DATA = "needs-data"
    IN_REVIEW = "in-review"
    COMPLETED = "completed"


class ClientOnboardingSelfTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOnboardingSelf(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOnboardingDashboardTypedDict(TypedDict):
    r"""Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
    complete their onboarding.
    """

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOnboardingDashboard(BaseModel):
    r"""Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
    complete their onboarding.
    """

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOnboardingOrganizationTypedDict(TypedDict):
    r"""The API resource URL of the organization."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsOnboardingOrganization(BaseModel):
    r"""The API resource URL of the organization."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOnboardingDocumentationTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOnboardingDocumentation(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ClientOnboardingLinksTypedDict(TypedDict):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: NotRequired[ClientOnboardingSelfTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""
    dashboard: NotRequired[ListClientsOnboardingDashboardTypedDict]
    r"""Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
    complete their onboarding.
    """
    organization: NotRequired[ListClientsOnboardingOrganizationTypedDict]
    r"""The API resource URL of the organization."""
    documentation: NotRequired[ClientOnboardingDocumentationTypedDict]
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ClientOnboardingLinks(BaseModel):
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    self_: Annotated[Optional[ClientOnboardingSelf], pydantic.Field(alias="self")] = (
        None
    )
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    dashboard: Optional[ListClientsOnboardingDashboard] = None
    r"""Direct link to the onboarding process in the Mollie dashboard. The merchant can be redirected to this page to
    complete their onboarding.
    """

    organization: Optional[ListClientsOnboardingOrganization] = None
    r"""The API resource URL of the organization."""

    documentation: Optional[ClientOnboardingDocumentation] = None
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ListClientsOnboardingTypedDict(TypedDict):
    resource: NotRequired[str]
    r"""Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
    resource type.
    """
    name: NotRequired[str]
    r"""The name of the organization."""
    status: NotRequired[ListClientsOnboardingStatus]
    r"""The current status of the organization's onboarding process.

    * `needs-data` — The merchant needs to provide additional information
    * `in-review` — The merchant provided all information, awaiting review from Mollie
    * `completed` — The onboarding is completed
    """
    can_receive_payments: NotRequired[bool]
    r"""Whether the organization can receive payments."""
    can_receive_settlements: NotRequired[bool]
    r"""Whether the organization can receive settlements to their external bank account."""
    signed_up_at: NotRequired[str]
    r"""The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""
    links: NotRequired[ClientOnboardingLinksTypedDict]
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""


class ListClientsOnboarding(BaseModel):
    resource: Optional[str] = None
    r"""Indicates the response contains an onboarding status object. Will always contain the string `onboarding` for this
    resource type.
    """

    name: Optional[str] = None
    r"""The name of the organization."""

    status: Optional[ListClientsOnboardingStatus] = None
    r"""The current status of the organization's onboarding process.

    * `needs-data` — The merchant needs to provide additional information
    * `in-review` — The merchant provided all information, awaiting review from Mollie
    * `completed` — The onboarding is completed
    """

    can_receive_payments: Annotated[
        Optional[bool], pydantic.Field(alias="canReceivePayments")
    ] = None
    r"""Whether the organization can receive payments."""

    can_receive_settlements: Annotated[
        Optional[bool], pydantic.Field(alias="canReceiveSettlements")
    ] = None
    r"""Whether the organization can receive settlements to their external bank account."""

    signed_up_at: Annotated[Optional[str], pydantic.Field(alias="signedUpAt")] = None
    r"""The sign up date time of the organization in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""

    links: Annotated[
        Optional[ClientOnboardingLinks], pydantic.Field(alias="_links")
    ] = None
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""


class ListClientsCapabilitiesStatus(str, Enum):
    UNREQUESTED = "unrequested"
    ENABLED = "enabled"
    DISABLED = "disabled"
    PENDING = "pending"


class ListClientsStatusReason(str, Enum):
    REQUIREMENT_PAST_DUE = "requirement-past-due"
    ONBOARDING_INFORMATION_NEEDED = "onboarding-information-needed"


class ListClientsRequirementStatus(str, Enum):
    r"""The status of the requirement depends on its due date.
    If no due date is given, the status will be `requested`.
    """

    CURRENTLY_DUE = "currently-due"
    PAST_DUE = "past-due"
    REQUESTED = "requested"


class ListClientsCapabilitiesDashboardTypedDict(TypedDict):
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """

    href: NotRequired[str]
    r"""The actual URL string."""
    type: NotRequired[str]
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsCapabilitiesDashboard(BaseModel):
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """

    href: Optional[str] = None
    r"""The actual URL string."""

    type: Optional[str] = None
    r"""The content type of the page or endpoint the URL points to."""


class ClientRequirementLinksTypedDict(TypedDict):
    dashboard: NotRequired[ListClientsCapabilitiesDashboardTypedDict]
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """


class ClientRequirementLinks(BaseModel):
    dashboard: Optional[ListClientsCapabilitiesDashboard] = None
    r"""If known, a deep link to the Mollie dashboard of the client, where the requirement can be fulfilled.
    For example, where necessary documents are to be uploaded.
    """


class ListClientsRequirementTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The name of this requirement, referring to the task to be fulfilled by the organization
    to enable or re-enable the capability. The name is unique among other requirements
    of the same capability.
    """
    status: NotRequired[ListClientsRequirementStatus]
    r"""The status of the requirement depends on its due date.
    If no due date is given, the status will be `requested`.
    """
    due_date: NotRequired[Nullable[str]]
    r"""Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format."""
    links: NotRequired[ClientRequirementLinksTypedDict]


class ListClientsRequirement(BaseModel):
    id: Optional[str] = None
    r"""The name of this requirement, referring to the task to be fulfilled by the organization
    to enable or re-enable the capability. The name is unique among other requirements
    of the same capability.
    """

    status: Optional[ListClientsRequirementStatus] = None
    r"""The status of the requirement depends on its due date.
    If no due date is given, the status will be `requested`.
    """

    due_date: Annotated[OptionalNullable[str], pydantic.Field(alias="dueDate")] = UNSET
    r"""Due date until the requirement must be fulfilled, if any. The date is shown in ISO-8601 format."""

    links: Annotated[
        Optional[ClientRequirementLinks], pydantic.Field(alias="_links")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id", "status", "dueDate", "_links"]
        nullable_fields = ["dueDate"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListClientsCapabilitiesTypedDict(TypedDict):
    resource: NotRequired[str]
    r"""Always the word `capability` for this resource type."""
    name: NotRequired[str]
    r"""A unique name for this capability like `payments` / `settlements`."""
    status: NotRequired[ListClientsCapabilitiesStatus]
    status_reason: NotRequired[Nullable[ListClientsStatusReason]]
    requirements: NotRequired[List[ListClientsRequirementTypedDict]]


class ListClientsCapabilities(BaseModel):
    resource: Optional[str] = None
    r"""Always the word `capability` for this resource type."""

    name: Optional[str] = None
    r"""A unique name for this capability like `payments` / `settlements`."""

    status: Optional[ListClientsCapabilitiesStatus] = None

    status_reason: Annotated[
        OptionalNullable[ListClientsStatusReason], pydantic.Field(alias="statusReason")
    ] = UNSET

    requirements: Optional[List[ListClientsRequirement]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["resource", "name", "status", "statusReason", "requirements"]
        nullable_fields = ["statusReason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ClientEmbeddedTypedDict(TypedDict):
    organization: NotRequired[ListClientsOrganizationTypedDict]
    onboarding: NotRequired[ListClientsOnboardingTypedDict]
    capabilities: NotRequired[ListClientsCapabilitiesTypedDict]


class ClientEmbedded(BaseModel):
    organization: Optional[ListClientsOrganization] = None

    onboarding: Optional[ListClientsOnboarding] = None

    capabilities: Optional[ListClientsCapabilities] = None


class ListClientsClientTypedDict(TypedDict):
    resource: NotRequired[str]
    r"""Indicates the response contains a client object. Will always contain the string `client` for this resource type."""
    id: NotRequired[str]
    r"""The identifier uniquely referring to this client. Example: `org_12345678`."""
    commission: NotRequired[Nullable[ListClientsCommissionTypedDict]]
    r"""The commission object."""
    organization_created_at: NotRequired[str]
    r"""The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
    format.
    """
    links: NotRequired[ListClientsClientLinksTypedDict]
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""
    embedded: NotRequired[ClientEmbeddedTypedDict]


class ListClientsClient(BaseModel):
    resource: Optional[str] = None
    r"""Indicates the response contains a client object. Will always contain the string `client` for this resource type."""

    id: Optional[str] = None
    r"""The identifier uniquely referring to this client. Example: `org_12345678`."""

    commission: OptionalNullable[ListClientsCommission] = UNSET
    r"""The commission object."""

    organization_created_at: Annotated[
        Optional[str], pydantic.Field(alias="organizationCreatedAt")
    ] = None
    r"""The date and time the client organization was created, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
    format.
    """

    links: Annotated[
        Optional[ListClientsClientLinks], pydantic.Field(alias="_links")
    ] = None
    r"""An object with several relevant URLs. Every URL object will contain an `href` and a `type` field."""

    embedded: Annotated[Optional[ClientEmbedded], pydantic.Field(alias="_embedded")] = (
        None
    )

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "resource",
            "id",
            "commission",
            "organizationCreatedAt",
            "_links",
            "_embedded",
        ]
        nullable_fields = ["commission"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListClientsEmbeddedTypedDict(TypedDict):
    clients: NotRequired[List[ListClientsClientTypedDict]]
    r"""An array of client objects. For a complete reference of the client object, refer to the
    [Get client endpoint](get-client) documentation.
    """


class ListClientsEmbedded(BaseModel):
    clients: Optional[List[ListClientsClient]] = None
    r"""An array of client objects. For a complete reference of the client object, refer to the
    [Get client endpoint](get-client) documentation.
    """


class ListClientsSelfTypedDict(TypedDict):
    r"""The URL to the current set of items."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsSelf(BaseModel):
    r"""The URL to the current set of items."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsPreviousTypedDict(TypedDict):
    r"""The previous set of items, if available."""

    href: NotRequired[str]
    r"""The actual URL string."""
    type: NotRequired[str]
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsPrevious(BaseModel):
    r"""The previous set of items, if available."""

    href: Optional[str] = None
    r"""The actual URL string."""

    type: Optional[str] = None
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsNextTypedDict(TypedDict):
    r"""The next set of items, if available."""

    href: NotRequired[str]
    r"""The actual URL string."""
    type: NotRequired[str]
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsNext(BaseModel):
    r"""The next set of items, if available."""

    href: Optional[str] = None
    r"""The actual URL string."""

    type: Optional[str] = None
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsDocumentationTypedDict(TypedDict):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""
    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsDocumentation(BaseModel):
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    href: str
    r"""The actual URL string."""

    type: str
    r"""The content type of the page or endpoint the URL points to."""


class ListClientsLinksTypedDict(TypedDict):
    r"""Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field."""

    self_: ListClientsSelfTypedDict
    r"""The URL to the current set of items."""
    previous: Nullable[ListClientsPreviousTypedDict]
    r"""The previous set of items, if available."""
    next: Nullable[ListClientsNextTypedDict]
    r"""The next set of items, if available."""
    documentation: ListClientsDocumentationTypedDict
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""


class ListClientsLinks(BaseModel):
    r"""Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field."""

    self_: Annotated[ListClientsSelf, pydantic.Field(alias="self")]
    r"""The URL to the current set of items."""

    previous: Nullable[ListClientsPrevious]
    r"""The previous set of items, if available."""

    next: Nullable[ListClientsNext]
    r"""The next set of items, if available."""

    documentation: ListClientsDocumentation
    r"""In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["previous", "next"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListClientsResponseTypedDict(TypedDict):
    r"""A list of client objects. For a complete reference of the client object, refer to the
    [Get client endpoint](get-client) documentation.
    """

    count: NotRequired[int]
    r"""The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
    as well.

    The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
    limit is 50 items.
    """
    embedded: NotRequired[ListClientsEmbeddedTypedDict]
    links: NotRequired[ListClientsLinksTypedDict]
    r"""Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field."""


class ListClientsResponse(BaseModel):
    r"""A list of client objects. For a complete reference of the client object, refer to the
    [Get client endpoint](get-client) documentation.
    """

    count: Optional[int] = None
    r"""The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result
    as well.

    The maximum number of items per result set is controlled by the `limit` property provided in the request. The default
    limit is 50 items.
    """

    embedded: Annotated[
        Optional[ListClientsEmbedded], pydantic.Field(alias="_embedded")
    ] = None

    links: Annotated[Optional[ListClientsLinks], pydantic.Field(alias="_links")] = None
    r"""Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field."""
