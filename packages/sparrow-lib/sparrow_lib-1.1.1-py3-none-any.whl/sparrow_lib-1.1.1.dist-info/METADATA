Metadata-Version: 2.2
Name: sparrow-lib
Version: 1.1.1
Summary: A library to augment LLMs with dynamic, trainable routers for efficient fine-tuning.
Home-page: 
Author: AmirReza
Author-email: amirrezaahali@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.9.0
Requires-Dist: transformers>=4.10.0
Requires-Dist: pandas
Requires-Dist: scikit-learn
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Sparrow üê¶: Dynamic Routers for Efficient LLM Fine-Tuning

[![PyPI version](https://badge.fury.io/py/sparrow-lib.svg)](https://badge.fury.io/py/sparrow-lib)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**[English](#english) | [ŸÅÿßÿ±ÿ≥€å](#ŸÅÿßÿ±ÿ≥€å)**

---

## English

Sparrow is a lightweight Python library that seamlessly integrates with Hugging Face `transformers` to make your Large Language Models (LLMs) smarter and more efficient. It augments pre-trained models with **dynamic, trainable routers** that learn to create sparse computational paths through the network.

This allows for highly parameter-efficient fine-tuning (PEFT) where you freeze the original model's weights and only train the tiny routers, saving immense computational resources and preventing catastrophic forgetting.

### Key Features
- **Plug-and-Play**: Convert a standard Hugging Face model into a dynamic, sparse model with a single line of code.
- **Parameter-Efficient**: Fine-tune only a tiny fraction of the total parameters (often < 0.1%).
- **Autonomous Routing**: Routers learn automatically how many and which neurons to activate, guided by a sparsity-regularized loss.
- **Deep Integration**: Comes with a custom `SparrowTrainer` for seamless integration with the Hugging Face ecosystem.
- **Insightful Reporting**: Includes utilities to generate reports on neuron activation and model sparsity.

### Installation
```bash
pip install sparrow-lib
```

### Quickstart

Here's how to fine-tune a BERT model by only training the routers:
```python
from transformers import BertForSequenceClassification, AutoTokenizer, TrainingArguments
from sparrow import SparrowConfig, add_routers_to_model, SparrowTrainer, get_sparsity_report

# 1. Define your Sparrow configuration
sparrow_config = SparrowConfig(sparsity_lambda=0.01)

# 2. Load a pre-trained model and augment it with routers
model = BertForSequenceClassification.from_pretrained('bert-base-uncased')
model = add_routers_to_model(model, config=sparrow_config)

# 3. Freeze original model weights (only routers will be trainable)
for name, param in model.named_parameters():
    if 'router' not in name:
        param.requires_grad = False

# ... Load your dataset ...

# 4. Use the custom SparrowTrainer which handles the sparsity loss
training_args = TrainingArguments(output_dir="test_trainer", num_train_epochs=1)

trainer = SparrowTrainer(
    model=model,
    args=training_args,
    sparrow_config=sparrow_config,
    train_dataset=your_train_dataset,
    eval_dataset=your_eval_dataset
)

# 5. Start training!
trainer.train()

# 6. Get a report on how sparse your model became
trainer.evaluate()
report = get_sparsity_report(model)
print("\n--- Sparsity Report ---")
print(report)
```

---

## ŸÅÿßÿ±ÿ≥€å

`Sparrow` üê¶ €å⁄© ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá ÿ≥ÿ®⁄© Ÿæÿß€åÿ™ŸàŸÜ ÿßÿ≥ÿ™ ⁄©Ÿá ÿ®Ÿá ÿ±ÿßÿ≠ÿ™€å ÿ®ÿß `transformers` Ÿáÿß⁄Ø€åŸÜ⁄Ø ŸÅ€åÿ≥ ÿßÿØÿ∫ÿßŸÖ ŸÖ€å‚Äåÿ¥ŸàÿØ ÿ™ÿß ŸÖÿØŸÑ‚ÄåŸáÿß€å ÿ≤ÿ®ÿßŸÜ ÿ®ÿ≤ÿ±⁄Ø (LLM) ÿ¥ŸÖÿß ÿ±ÿß ŸáŸàÿ¥ŸÖŸÜÿØÿ™ÿ± Ÿà ⁄©ÿßÿ±ÿ¢ŸÖÿØÿ™ÿ± ⁄©ŸÜÿØ. ÿß€åŸÜ ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá ŸÖÿØŸÑ‚ÄåŸáÿß€å ÿßÿ≤ Ÿæ€åÿ¥ ÿ¢ŸÖŸàÿ≤ÿ¥‚ÄåÿØ€åÿØŸá ÿ±ÿß ÿ®ÿß **ŸÖÿ≥€åÿ±€åÿßÿ®‚ÄåŸáÿß€å ÿØ€åŸÜÿßŸÖ€å⁄© Ÿà ŸÇÿßÿ®ŸÑ ÿ¢ŸÖŸàÿ≤ÿ¥** ÿ™ŸÇŸà€åÿ™ ŸÖ€å‚Äå⁄©ŸÜÿØ ⁄©Ÿá €åÿßÿØ ŸÖ€å‚Äå⁄Ø€åÿ±ŸÜÿØ ŸÖÿ≥€åÿ±Ÿáÿß€å ŸÖÿ≠ÿßÿ≥ÿ®ÿßÿ™€å Ÿæÿ±ÿß⁄©ŸÜÿØŸá (sparse) ÿØÿ± ÿ¥ÿ®⁄©Ÿá ÿß€åÿ¨ÿßÿØ ⁄©ŸÜŸÜÿØ.

ÿß€åŸÜ ÿ±Ÿàÿ¥ ÿßŸÖ⁄©ÿßŸÜ ÿ™ŸÜÿ∏€åŸÖ ÿØŸÇ€åŸÇ ÿ®Ÿá€åŸÜŸá ÿßÿ≤ ŸÜÿ∏ÿ± Ÿæÿßÿ±ÿßŸÖÿ™ÿ± (PEFT) ÿ±ÿß ŸÅÿ±ÿßŸáŸÖ ŸÖ€å‚Äå⁄©ŸÜÿØÿå ÿ®Ÿá ÿ∑Ÿàÿ±€å ⁄©Ÿá ÿ¥ŸÖÿß Ÿàÿ≤ŸÜ‚ÄåŸáÿß€å ŸÖÿØŸÑ ÿßÿµŸÑ€å ÿ±ÿß ŸÖŸÜÿ¨ŸÖÿØ ⁄©ÿ±ÿØŸá Ÿà ŸÅŸÇÿ∑ ŸÖÿ≥€åÿ±€åÿßÿ®‚ÄåŸáÿß€å ⁄©Ÿà⁄Ü⁄© ÿ±ÿß ÿ¢ŸÖŸàÿ≤ÿ¥ ŸÖ€å‚ÄåÿØŸá€åÿØ. ÿß€åŸÜ ⁄©ÿßÿ± ÿ®ÿßÿπÿ´ ÿµÿ±ŸÅŸá‚Äåÿ¨Ÿà€å€å ÿπÿ∏€åŸÖ ÿØÿ± ŸÖŸÜÿßÿ®ÿπ ŸÖÿ≠ÿßÿ≥ÿ®ÿßÿ™€å ÿ¥ÿØŸá Ÿà ÿßÿ≤ ŸÅÿ±ÿßŸÖŸàÿ¥€å ŸÅÿßÿ¨ÿπŸá‚Äåÿ®ÿßÿ± (catastrophic forgetting) ÿ¨ŸÑŸà⁄Ø€åÿ±€å ŸÖ€å‚Äå⁄©ŸÜÿØ.

### ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ⁄©ŸÑ€åÿØ€å
- **ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¢ÿ≥ÿßŸÜ**: €å⁄© ŸÖÿØŸÑ ÿßÿ≥ÿ™ÿßŸÜÿØÿßÿ±ÿØ Ÿáÿß⁄Ø€åŸÜ⁄Ø ŸÅ€åÿ≥ ÿ±ÿß ÿ®ÿß €å⁄© ÿÆÿ∑ ⁄©ÿØ ÿ®Ÿá €å⁄© ŸÖÿØŸÑ ÿØ€åŸÜÿßŸÖ€å⁄© Ÿà Ÿæÿ±ÿß⁄©ŸÜÿØŸá ÿ™ÿ®ÿØ€åŸÑ ⁄©ŸÜ€åÿØ.
- **ÿ®Ÿá€åŸÜŸá ÿßÿ≤ ŸÜÿ∏ÿ± Ÿæÿßÿ±ÿßŸÖÿ™ÿ±**: ŸÅŸÇÿ∑ ÿ®ÿÆÿ¥ ÿ®ÿ≥€åÿßÿ± ⁄©Ÿà⁄Ü⁄©€å ÿßÿ≤ Ÿæÿßÿ±ÿßŸÖÿ™ÿ±Ÿáÿß€å ⁄©ŸÑ ŸÖÿØŸÑ (ŸÖÿπŸÖŸàŸÑÿßŸã ⁄©ŸÖÿ™ÿ± ÿßÿ≤ €∞.€±Ÿ™) ÿ±ÿß ÿ¢ŸÖŸàÿ≤ÿ¥ ÿØŸá€åÿØ.
- **ŸÖÿ≥€åÿ±€åÿßÿ®€å ÿÆŸàÿØ⁄©ÿßÿ±**: ŸÖÿ≥€åÿ±€åÿßÿ®‚ÄåŸáÿß ÿ®Ÿá ÿ∑Ÿàÿ± ÿÆŸàÿØ⁄©ÿßÿ± Ÿà ÿ®ÿß ŸáÿØÿß€åÿ™ €å⁄© ÿ™ÿßÿ®ÿπ ÿ≤€åÿßŸÜ ŸÖÿ®ÿ™ŸÜ€å ÿ®ÿ± Ÿæÿ±ÿß⁄©ŸÜÿØ⁄Ø€åÿå €åÿßÿØ ŸÖ€å‚Äå⁄Ø€åÿ±ŸÜÿØ ⁄©Ÿá ⁄ÜŸá ÿ™ÿπÿØÿßÿØ Ÿà ⁄©ÿØÿßŸÖ ŸÜŸàÿ±ŸàŸÜ‚ÄåŸáÿß ÿ±ÿß ŸÅÿπÿßŸÑ ⁄©ŸÜŸÜÿØ.
- **ÿßÿØÿ∫ÿßŸÖ ÿπŸÖ€åŸÇ**: ÿ¥ÿßŸÖŸÑ €å⁄© `SparrowTrainer` ÿ≥ŸÅÿßÿ±ÿ¥€å ÿ®ÿ±ÿß€å ÿßÿØÿ∫ÿßŸÖ ⁄©ÿßŸÖŸÑ ÿ®ÿß ÿß⁄©Ÿàÿ≥€åÿ≥ÿ™ŸÖ Ÿáÿß⁄Ø€åŸÜ⁄Ø ŸÅ€åÿ≥.
- **⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å ÿØŸÇ€åŸÇ**: ÿ¥ÿßŸÖŸÑ ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å€å ÿ®ÿ±ÿß€å ÿ™ŸàŸÑ€åÿØ ⁄Øÿ≤ÿßÿ±ÿ¥ ÿßÿ≤ ŸÖ€åÿ≤ÿßŸÜ ŸÅÿπÿßŸÑ€åÿ™ ŸÜŸàÿ±ŸàŸÜ‚ÄåŸáÿß Ÿà Ÿæÿ±ÿß⁄©ŸÜÿØ⁄Ø€å ŸÖÿØŸÑ.

### ŸÜÿµÿ®
```bash
pip install sparrow-lib
```
### ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±€åÿπ
ŸÖÿ´ÿßŸÑ ÿ®ÿßŸÑÿß ŸÜÿ≠ŸàŸá ÿ™ŸÜÿ∏€åŸÖ ÿØŸÇ€åŸÇ ŸÖÿØŸÑ BERT ÿ±ÿß ŸÅŸÇÿ∑ ÿ®ÿß ÿ¢ŸÖŸàÿ≤ÿ¥ ŸÖÿ≥€åÿ±€åÿßÿ®‚ÄåŸáÿß ŸÜÿ¥ÿßŸÜ ŸÖ€å‚ÄåÿØŸáÿØ.
