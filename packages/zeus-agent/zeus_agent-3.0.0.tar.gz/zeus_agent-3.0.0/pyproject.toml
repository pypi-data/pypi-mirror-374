[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "build",
]
build-backend = "setuptools.build_meta"

[project]
name = "zeus-agent"
version = "3.0.0"
authors = [
    {name = "Agent Development Center Team", email = "support@zeus-ai.com"},
]
description = "Zeus AI Platform - Next-generation AI Agent Development Platform"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Framework :: AsyncIO",
]
keywords = [
    "ai", "agent", "artificial-intelligence", "machine-learning", 
    "nlp", "chatbot", "automation", "framework", "platform",
    "fpga", "hardware", "digital-design", "verification",
    "autogen", "langchain", "crewai", "multi-agent"
]
dependencies = [
    "PyYAML>=6.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.21.0",
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "scikit-learn>=1.1.0",
    "chromadb>=0.4.0",
    "openai>=1.0.0",
    "nltk>=3.7",
    "spacy>=3.4.0",
    "cryptography>=3.4.8",
    "pydantic>=2.0.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "sqlalchemy>=1.4.0",
    "aiosqlite>=0.17.0",
    "python-docx>=0.8.11",
    "PyPDF2>=3.0.0",
    "markdown>=3.4.0",
    "loguru>=0.6.0",
    "prometheus-client>=0.14.0",
    "httpx>=0.24.0",
    "requests>=2.28.0",
    "python-dotenv>=1.0.0",
    "python-dateutil>=2.8.0",
    "jsonschema>=4.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pytest-cov>=4.0.0",
]
gui = [
    "PyQt6>=6.0.0",
    "customtkinter>=5.0.0",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]
vector = [
    "faiss-cpu>=1.7.0",
    "hnswlib>=0.7.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pytest-cov>=4.0.0",
    "PyQt6>=6.0.0",
    "customtkinter>=5.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "faiss-cpu>=1.7.0",
    "hnswlib>=0.7.0",
]

[project.urls]
Homepage = "https://github.com/fpga1988/zeus"
Repository = "https://github.com/fpga1988/zeus"
Documentation = "https://github.com/fpga1988/zeus/docs"
"Bug Tracker" = "https://github.com/fpga1988/zeus/issues"
"Gitee Mirror" = "https://gitee.com/fpga1988/zeus"

[project.scripts]
zeus = "zeus.cli:main"
zeus-agent = "zeus.cli:agent_cmd"
zeus-dev = "zeus.cli:dev_cmd"

[tool.setuptools.packages.find]
include = ["layers*", "lib*", "zeus*"]
exclude = ["tests*", "examples*", "docs*", "workspace*"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
zeus = [
    "config/*.yaml",
    "config/templates/*.yaml", 
    "config/schemas/*.json",
    "cfg/templates/*.yaml",
    "cfg/examples/*.yaml",
    "data/*.json",
    "lib/**/*.py",
    "lib/**/*.yaml",
    "lib/**/*.json",
    "workspace/agents/*/config/*.yaml",
    "workspace/agents/*/knowledge/*.json",
    "workspace/agents/*/knowledge/*.md",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
  | temp
  | htmlcov
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["zeus", "layers"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["layers", "lib"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/temp/*",
    "*/htmlcov/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
