//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/liblinear/lpsolve.imp
// Implementation of LP solver
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "lpsolve.h"

namespace Gambit::linalg {

template <class T> Array<int> MakeArtificials(const Vector<T> &b)
{
  Array<int> ret;
  for (int i = b.front_index(); i <= b.back_index(); i++) {
    if (b[i] < static_cast<T>(0)) {
      ret.push_back(i);
    }
  }
  return ret;
}

template <class T>
LPSolve<T>::LPSolve(const Matrix<T> &A, const Vector<T> &b, const Vector<T> &c, int nequals)
  : nvars(c.size()), neqns(b.size()), nequals(nequals), total_cost(0), tmin(0),
    tab(A, MakeArtificials(b), b), UB(nvars + neqns), LB(nvars + neqns), ub(nvars + neqns),
    lb(nvars + neqns), xx(nvars + neqns), cost(nvars + neqns), y(b.size()), x(b.size()),
    d(b.size())
{
  // These are the values recommended by Murtagh (1981) for 15 digit
  // accuracy in LP problems
  Gambit::linalg::epsilon(eps1, 5);
  Gambit::linalg::epsilon(eps2, 8);
  Gambit::linalg::epsilon(eps3, 6);

  // Check dimensions
  if (A.NumRows() != b.size() || A.NumColumns() != c.size()) {
    well_formed = false;
    return;
  }

  // initialize data
  int xlab;
  const int num_inequals = A.NumRows() - nequals;
  const int num_artific = MakeArtificials(b).size();
  nvars += num_artific;

  std::fill(UB.begin(), UB.end(), false);
  std::fill(LB.begin(), LB.end(), false);
  std::fill(ub.begin(), ub.end(), static_cast<T>(0));
  std::fill(lb.begin(), lb.end(), static_cast<T>(0));

  // Define Phase I upper and lower bounds
  for (int i = 1; i <= nvars; i++) {
    LB[i] = true; // original and artificial variables have lower bounds of 0
  }
  // for slack variables
  for (int i = 1; i <= neqns; i++) {
    if (b[i] >= (T)0) {
      LB[nvars + i] = true;
    }
    else {
      UB[nvars + i] = true;
    }
  }
  // define Phase 1 unit cost vector
  cost = static_cast<T>(0);
  for (int i = 1; i <= neqns; i++) {
    cost[nvars + i] = static_cast<T>(0);
    if (UB[nvars + i]) {
      cost[nvars + i] = static_cast<T>(1);
    }
    else if (i > num_inequals) {
      cost[nvars + i] = static_cast<T>(-1);
    }
  }

  // Initialize the tableau
  tab.SetCost(cost);

  // set xx to be initial feasible solution to phase II
  for (size_t i = 1; i <= xx.size(); i++) {
    if (LB[i]) {
      xx[i] = lb[i];
    }
    else if (UB[i]) {
      xx[i] = ub[i];
    }
    else {
      xx[i] = static_cast<T>(0);
    }
  }
  tab.BasisVector(x);
  for (size_t i = 1; i <= x.size(); i++) {
    xlab = tab.Label(i);
    if (xlab < 0) {
      xlab = nvars - xlab;
    }
    xx[xlab] = x[i];
  }

  Solve(1);

  total_cost = tab.TotalCost();

  // which eps should be used here?
  if (total_cost < -eps1) {
    feasible = false;
    return;
  }

  // Define Phase II upper and lower bounds for slack variables

  for (int i = num_inequals + 1; i <= neqns; i++) {
    UB[nvars + i] = true;
  }
  for (int i = 1; i <= neqns; i++) {
    if (b[i] < (T)0) {
      LB[nvars + i] = true;
    }
  }

  // install Phase II unit cost vector
  cost = static_cast<T>(0);
  std::copy(c.begin(), c.end(), cost.begin());

  tab.SetCost(cost);
  Solve(2);

  total_cost = tab.TotalCost();
  y = tab.GetDualVector();
  opt_bfs = tab.GetBFS();
  dual_bfs = tab.DualBFS();

  for (int i = 1; i <= neqns; i++) {
    if (dual_bfs.count(-i)) {
      opt_bfs.insert(-i, dual_bfs[-i]);
    }
  }
}

template <class T> void LPSolve<T>::Solve(int phase)
{
  int in, xlab;
  int outlab = 0;
  int out = 0;
  const Vector<T> a(neqns);

  do {
    // step 1: Solve y B = c_B
    do {
      in = Enter(); // step 2: Choose entering variable
      if (in) {
        tab.SolveColumn(in, d); // step 3: Solve B d = a, where a col #in of A
        out = Exit(in);         // step 4: Choose leaving variable
        if (out == 0) {
          bounded = false;
          return;
        }
        else if (out < 0) {
          outlab = in;
        }
        else {
          outlab = tab.Label(out);
        }
        // update xx
        for (size_t i = 1; i <= x.size(); i++) {
          xlab = tab.Label(i);
          if (xlab < 0) {
            xlab = nvars - xlab;
          }
          xx[xlab] = xx[xlab] + (T)flag * tmin * d[i];
        }
        if (in > 0) {
          xx[in] -= (T)flag * tmin;
        }
        if (in < 0) {
          xx[nvars - in] -= (T)flag * tmin;
        }
      }
    } while (outlab == in && outlab != 0);
    if (in) {
      tab.Pivot(out, in);
      tab.BasisVector(x);
      if (phase == 1 && tab.TotalCost() >= -eps1) {
        return;
      }
    }
  } while (in);
}

template <class T> int LPSolve<T>::Enter()
{
  int in = 0;
  T test = static_cast<T>(0);
  for (int i = 1; i <= nvars + neqns; i++) {
    int lab = i;
    if (i > nvars) {
      lab = nvars - i;
    }
    if (!tab.Member(lab)) {
      T rc = tab.RelativeCost(lab);
      if (rc > test + eps1) {
        if (!UB[i] || (UB[i] && xx[i] - ub[i] < -eps1)) {
          test = rc;
          in = lab;
          flag = -1;
        }
      }
      if (-rc > test + eps1) {
        if (!LB[i] || (LB[i] && xx[i] - lb[i] > eps1)) {
          test = -rc;
          in = lab;
          flag = 1;
        }
      }
    }
  }
  return in;
}

template <class T> int LPSolve<T>::Exit(int in)
{
  int j, out, lab, col;
  T t;

  out = 0;
  tmin = (T)100000000;
  for (j = 1; j <= neqns; j++) {
    lab = tab.Label(j);
    col = lab;
    if (lab < 0) {
      col = nvars - lab;
    }
    if (flag == -1) {
      t = (T)1000000000;
      if (d[j] > eps2 && LB[col]) {
        t = (xx[col] - lb[col]) / d[j];
      }
      if (d[j] < -eps2 && UB[col]) {
        t = (xx[col] - ub[col]) / d[j];
      }
      if (t >= -eps2 && t < tmin - eps2) {
        tmin = t;
        out = j;
      }
    }
    if (flag == 1) {
      t = (T)1000000000;
      if (d[j] > eps2 && UB[col]) {
        t = (ub[col] - xx[col]) / d[j];
      }
      if (d[j] < -eps2 && LB[col]) {
        t = (lb[col] - xx[col]) / d[j];
      }
      if (t >= -eps2 && t < tmin - eps2) {
        tmin = t;
        out = j;
      }
    }
  }
  col = in;
  if (in < 0) {
    col = nvars - in;
  }
  t = (T)1000000000;
  if (flag == -1 && UB[col]) {
    t = ub[col] - xx[col];
  }
  if (flag == 1 && LB[col]) {
    t = xx[col] - lb[col];
  }
  if (t > eps2 && t < tmin - eps2) {
    tmin = t;
    out = -1;
  }

  return out;
}

} // end namespace Gambit::linalg
