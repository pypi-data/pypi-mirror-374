//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/tools/lcp/lhtab.imp
// Tableau class for Lemke-Howson algorithm
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "lhtab.h"
#include "gambit.h"

namespace Gambit::linalg {

//---------------------------------------------------------------------------
//                     LHTableau<T>: General information
//---------------------------------------------------------------------------

template <class T> int LHTableau<T>::Label(int i) const
{
  if (T1.RowIndex(i)) {
    return T1.Label(i);
  }
  if (T2.RowIndex(i)) {
    return T2.Label(i);
  }
  return 0;
}

template <class T> int LHTableau<T>::Find(int i) const
{
  if (T1.ValidIndex(i)) {
    return T1.Find(i);
  }
  if (T2.ValidIndex(i)) {
    return T2.Find(i);
  }
  return 0;
}

//---------------------------------------------------------------------------
//                     LHTableau<T>: Pivoting operations
//---------------------------------------------------------------------------

template <class T> void LHTableau<T>::Pivot(int outrow, int inlabel)
{
  if (!this->RowIndex(outrow)) {
    throw typename LemkeTableau<T>::BadPivot();
  }
  if (T1.RowIndex(outrow)) {
    T1.Pivot(outrow, inlabel);
  }
  if (T2.RowIndex(outrow)) {
    T2.Pivot(outrow, inlabel);
  }
}

//---------------------------------------------------------------------------
//                   LHTableau<T>: Miscellaneous functions
//---------------------------------------------------------------------------

template <class T> Gambit::linalg::BFS<T> LHTableau<T>::GetBFS()
{
  T1.BasisVector(tmp1);
  T2.BasisVector(tmp2);
  for (int i = tmp1.front_index(); i <= tmp1.back_index(); i++) {
    solution[i] = tmp1[i];
  }
  for (int i = tmp2.front_index(); i <= tmp2.back_index(); i++) {
    solution[i] = tmp2[i];
  }
  BFS<T> cbfs;
  for (int i = MinCol(); i <= MaxCol(); i++) {
    if (Member(i)) {
      cbfs.insert(i, solution[Find(i)]);
    }
  }
  return cbfs;
}

template <class T> int LHTableau<T>::PivotIn(int inlabel)
{
  const int outindex = ExitIndex(inlabel);
  const int outlabel = Label(outindex);
  if (outlabel == 0) {
    return 0;
  }
  Pivot(outindex, inlabel);
  return outlabel;
}

// ExitIndex determines, for the current tableau and variable
// to be added to the basis, which element should leave the basis.
// The choice is the one specified by Eaves, which is guaranteed
// to not cycle, even if the problem is degenerate.
template <class T> int LHTableau<T>::ExitIndex(int inlabel)
{
  if (T1.ValidIndex(inlabel)) {
    return T1.ExitIndex(inlabel);
  }
  if (T2.ValidIndex(inlabel)) {
    return T2.ExitIndex(inlabel);
  }
  return 0;
}

template <class T> int LHTableau<T>::LemkePath(int dup)
{
  int enter, exit;
  enter = dup;
  if (Member(dup)) {
    enter = -dup;
  }
  // Central loop - pivot until another CBFS is found
  do {
    exit = PivotIn(enter);
    enter = -exit;
  } while ((exit != dup) && (exit != -dup));
  return 1;
}

} // end namespace Gambit::linalg
