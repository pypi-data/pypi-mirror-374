//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/tools/enummixed/vertenum.imp
// Implementation of vertex enumerator
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "vertenum.h"

namespace Gambit::linalg {

template <class T>
VertexEnumerator<T>::VertexEnumerator(const Matrix<T> &A, const Vector<T> &b)
  : mult_opt(std::any_of(b.begin(), b.end(), [](const T &v) { return v == static_cast<T>(0); })),
    A(A), b(b), btemp(b)
{
  btemp = static_cast<T>(-1); // NOLINT(cppcoreguidelines-prefer-member-initializer)
  LPTableau<T> tab(A, b);
  Vector<T> c(A.MinCol(), A.MaxCol());
  c = static_cast<T>(1);
  tab.SetCost(c);

  DualSearch(tab);
}

template <class T> void VertexEnumerator<T>::Deeper()
{
  depth++;
  if (visits.size() < depth) {
    visits.push_back(0);
    branches.push_back(0);
  }
  visits[depth] += 1;
}

template <class T> void VertexEnumerator<T>::Search(LPTableau<T> &tab)
{
  Deeper();
  if (tab.IsLexMin()) {
    m_list.push_back(tab.GetBFS1());
    m_duallist.push_back(tab.DualBFS());
  }
  auto pivot_list = tab.ReversePivots();
  if (!pivot_list.empty()) {
    branches[depth] += pivot_list.size();
    LPTableau<T> tab2(tab);
    for (auto pivot : pivot_list) {
      tab2 = tab;
      tab2.Pivot(pivot[1], pivot[2]);
      Search(tab2);
    }
  }
  depth--;
}

template <class T> void VertexEnumerator<T>::DualSearch(LPTableau<T> &tab)
{
  Deeper();
  branches[depth] += 1;

  if (mult_opt) {
    tab.SetConst(btemp); // install artificial constraint vector
    LPTableau<T> tab2(tab);
    for (int i = b.front_index(); i <= b.back_index(); i++) {
      if (b[i] == static_cast<T>(0)) {
        for (int j = -b.back_index(); j <= A.MaxCol(); j++) {
          if (j && !tab.Member(j)) {
            if (tab.IsDualReversePivot(i, j)) {
              branches[depth] += 1;
              tab2 = tab;
              tab2.Pivot(i, j);
              DualSearch(tab2);
            }
          }
        }
      }
    }
  }
  tab.SetConst(b); // install original constraint vector
  Search(tab);     // do primal search
  depth--;
}

template <class T> std::list<Vector<T>> VertexEnumerator<T>::GetVertices() const
{
  std::list<Vector<T>> verts;
  for (int i = 1; i <= m_list.size(); i++) {
    Vector<T> vert(A.NumColumns());
    vert = static_cast<T>(0);
    for (int j = 1; j <= vert.size(); j++) {
      if (m_list[i].IsDefined(j)) {
        vert[j] = -m_list[i](j);
      }
    }
    verts.push_back(vert);
  }
  return verts;
}

} // end namespace Gambit::linalg
