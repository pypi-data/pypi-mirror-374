//
// This file is part of Gambit
// Copyright (c) 1994-2025, The Gambit Project (https://www.gambit-project.org)
//
// FILE: src/liblinear/lptab.imp
// Implementation of LP tableaus
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "lptab.h"

namespace Gambit::linalg {

// ---------------------------------------------------------------------------
//                   LPTableau member definitions
// ---------------------------------------------------------------------------

template <class T>
LPTableau<T>::LPTableau(const Matrix<T> &A, const Vector<T> &b)
  : Tableau<T>(A, b), dual(A.MinRow(), A.MaxRow()), unitcost(A.MinRow(), A.MaxRow()),
    cost(A.MinCol(), A.MaxCol())
{
}

template <class T>
LPTableau<T>::LPTableau(const Matrix<T> &A, const Array<int> &art, const Vector<T> &b)
  : Tableau<T>(A, art, b), dual(A.MinRow(), A.MaxRow()), unitcost(A.MinRow(), A.MaxRow()),
    cost(A.MinCol(), A.MaxCol() + art.size())
{
}

// cost-based functions

template <> void LPTableau<Rational>::SetCost(const Vector<Rational> &c)
{
  if (cost.front_index() == c.front_index() && cost.back_index() == c.back_index()) {
    cost = c;
    cost *= Rational(Tableau<Rational>::TotDenom());
    for (int i = unitcost.front_index(); i <= unitcost.back_index(); i++) {
      unitcost[i] = Rational(0);
    }
    Refactor();
    SolveDual();
    return;
  }
  for (int i = c.front_index(); i <= cost.back_index(); i++) {
    cost[i] = c[i] * Rational(Tableau<Rational>::TotDenom());
  }
  for (int i = unitcost.front_index(); i <= unitcost.back_index(); i++) {
    unitcost[i] = c[cost.size() + i - unitcost.front_index() + 1];
  }
  Refactor();
  SolveDual();
}

template <> void LPTableau<double>::SetCost(const Vector<double> &c)
{
  if (cost.front_index() == c.front_index() && cost.back_index() == c.back_index()) {
    cost = c;
    unitcost = 0.0;
    Refactor();
    SolveDual();
    return;
  }
  if (c.front_index() != cost.front_index()) {
    throw DimensionException();
  }
  if (c.back_index() != static_cast<int>(cost.back_index() + unitcost.size())) {
    throw DimensionException();
  }
  for (int i = c.front_index(); i <= cost.back_index(); i++) {
    cost[i] = c[i];
  }
  for (int i = unitcost.front_index(); i <= unitcost.back_index(); i++) {
    unitcost[i] = c[cost.size() + i - unitcost.front_index() + 1];
  }
  Refactor();
  SolveDual();
}

template <> double LPTableau<double>::TotalCost() const
{
  Vector<double> tmpcol(MinRow(), MaxRow());
  BasisSelect(unitcost, cost, tmpcol);
  return tmpcol * solution;
}

template <> Rational LPTableau<Rational>::TotalCost() const
{
  Vector<Rational> tmpcol(MinRow(), MaxRow());
  Vector<Rational> sol(MinRow(), MaxRow());
  BasisSelect(unitcost, cost, tmpcol);
  BasisVector(sol);
  for (int i = tmpcol.front_index(); i <= tmpcol.back_index(); i++) {
    if (Label(i) > 0) {
      tmpcol[i] /= (Rational)Tableau<Rational>::TotDenom();
    }
  }

  return tmpcol * sol;
}

template <class T> T LPTableau<T>::RelativeCost(int col) const
{
  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  if (col < 0) {
    return unitcost[-col] - dual[-col];
  }
  else {
    this->GetColumn(col, (Vector<T> &)tmpcol);
    return cost[col] - dual * tmpcol;
  }
}

template <class T> void LPTableau<T>::SolveDual()
{
  Vector<T> tmpcol1(this->MinRow(), this->MaxRow());
  BasisSelect(unitcost, cost, tmpcol1);
  this->SolveT(tmpcol1, dual);
}

template <class T> void LPTableau<T>::Refactor()
{
  Tableau<T>::Refactor();
  SolveDual();
}

template <class T> void LPTableau<T>::Pivot(int outrow, int col)
{
  Tableau<T>::Pivot(outrow, col);
  SolveDual();
}

template <class T> std::list<Array<int>> LPTableau<T>::ReversePivots()
{
  std::list<Array<int>> pivot_list;

  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  bool flag;
  int k, enter;
  T ratio, a_ij, a_ik, b_i, b_k, c_j, c_k, c_jo, x;
  Vector<T> tmpdual(this->MinRow(), this->MaxRow());

  Vector<T> solution(tmpcol);
  this->BasisVector(solution);

  for (int j = -this->MaxRow(); j <= this->MaxCol(); j++) {
    if (j && !this->Member(j)) {
      this->SolveColumn(j, tmpcol);
      // find all i where prior tableau is primal feasible
      Array<int> best_set;
      for (int i = this->MinRow(); i <= this->MaxRow(); i++) {
        if (this->GtZero(tmpcol[i])) {
          best_set.push_back(i);
        }
      }
      if (!best_set.empty()) {
        ratio = solution[best_set[1]] / tmpcol[best_set[1]];
        // find max ratio
        for (size_t i = 2; i <= best_set.size(); i++) {
          x = solution[best_set[i]] / tmpcol[best_set[i]];
          if (this->GtZero(x - ratio)) {
            ratio = x;
          }
        }
        // eliminate nonmaximizers
        for (int i = best_set.size(); i >= 1; i--) {
          x = solution[best_set[i]] / tmpcol[best_set[i]];
          if (this->LtZero(x - ratio)) {
            erase_atindex(best_set, i);
          }
        }

        // check that j would be the row to exit in prior tableau

        // first check that prior pivot entry > 0
        for (int i = best_set.size(); i >= 1; i--) {
          a_ij = static_cast<T>(1) / tmpcol[best_set[i]];
          if (this->LeZero(a_ij)) {
            erase_atindex(best_set, i);
          }
          else {
            // next check that prior pivot entry attains max ratio
            b_i = solution[best_set[i]] / tmpcol[best_set[i]];
            ratio = b_i / a_ij;

            flag = false;
            for (k = tmpcol.front_index(); k <= tmpcol.back_index() && !flag; k++) {
              if (k != best_set[i]) {
                a_ik = -a_ij * tmpcol[k];
                b_k = solution[k] - b_i * tmpcol[k];
                if (this->GtZero(a_ik) && this->GtZero(b_k / a_ik - ratio)) {
                  erase_atindex(best_set, i);
                  flag = true;
                }
                else if (this->GtZero(a_ik) && this->EqZero(b_k / a_ik - ratio) &&
                         this->Label(k) < j) {
                  erase_atindex(best_set, i);
                  flag = true;
                }
              }
            }
          }
        }
      }

      // check that i would be the column to enter in prior tableau
      for (int i = best_set.size(); i >= 1; i--) {
        enter = this->Label(best_set[i]);
        tmpcol = static_cast<T>(0);
        tmpcol[best_set[i]] = static_cast<T>(1);
        this->SolveT(tmpcol, tmpdual);
        this->GetColumn(j, tmpcol);
        a_ij = tmpdual * tmpcol;
        c_j = RelativeCost(j);
        if (this->EqZero(a_ij)) {
          erase_atindex(best_set, i);
        }
        else {
          ratio = c_j / a_ij;
          if (enter < 0) {
            a_ik = tmpdual[-enter];
          }
          else {
            this->GetColumn(enter, tmpcol);
            a_ik = tmpdual * tmpcol;
          }
          c_k = RelativeCost(enter);
          c_jo = c_k - a_ik * ratio;
          if (this->GeZero(c_jo)) {
            erase_atindex(best_set, i);
          }
          else {
            flag = false;
            for (k = -this->b.back_index(); k < enter && !flag; k++) {
              if (k != 0) {
                if (k < 0) {
                  a_ik = tmpdual[-k];
                }
                else {
                  this->GetColumn(k, tmpcol);
                  a_ik = tmpdual * tmpcol;
                }
                c_k = RelativeCost(k);
                c_jo = c_k - a_ik * ratio;

                if (this->LtZero(c_jo)) {
                  erase_atindex(best_set, i);
                  flag = true;
                }
              }
            }
          }
        }
      }

      for (const auto &idx : best_set) {
        Array<int> pivot(2);
        pivot[1] = idx;
        pivot[2] = j;
        pivot_list.push_back(pivot);
      }
    }
  }
  return pivot_list;
}

template <class T> bool LPTableau<T>::IsDualReversePivot(int i, int j)
{
  // first check that pivot preserves dual feasibility
  Vector<T> tmpcol(this->MinRow(), this->MaxRow());
  Vector<T> tmpdual(this->MinRow(), this->MaxRow());
  tmpcol = static_cast<T>(0);
  tmpcol[i] = static_cast<T>(1);
  this->SolveT(tmpcol, tmpdual);

  Vector<T> solution(tmpcol);
  this->BasisVector(solution);

  T a_ij, a_ik, c_j, c_k, ratio;
  this->GetColumn(j, tmpcol);

  a_ij = tmpdual * tmpcol;
  c_j = RelativeCost(j);
  if (this->GeZero(a_ij)) {
    return false;
  }
  ratio = c_j / a_ij;

  for (int k = -this->b.back_index(); k <= cost.back_index(); k++) {
    if (k != 0) {
      if (k < 0) {
        a_ik = tmpdual[-k];
      }
      else {
        this->GetColumn(k, tmpcol);
        a_ik = tmpdual * tmpcol;
      }
      c_k = RelativeCost(k);

      if (this->LtZero(a_ik) && this->GtZero(c_k / a_ik - ratio)) {
        return false;
      }
    }
  }

  // check that i would be the column to enter in prior tableau

  const int enter = this->Label(i);
  if (enter < 0) {
    a_ik = tmpdual[-enter];
  }
  else {
    this->GetColumn(enter, tmpcol);
    a_ik = tmpdual * tmpcol;
  }
  a_ik = a_ik / a_ij;
  c_k = RelativeCost(enter);
  c_k -= a_ik * c_j;

  if (this->GeZero(a_ik)) {
    return false;
  }
  ratio = c_k / a_ik;

  for (int k = -this->b.back_index(); k <= cost.back_index(); k++) {
    if (k != 0) {
      if (k < 0) {
        a_ik = tmpdual[-k];
      }
      else {
        this->GetColumn(k, tmpcol);
        a_ik = tmpdual * tmpcol;
      }
      a_ik = a_ik / a_ij;
      c_k = RelativeCost(k);
      c_k -= a_ik * c_j;

      if (this->LtZero(a_ik) && this->GtZero(c_k / a_ik - ratio)) {
        return false;
      }
      if (k < enter && this->LtZero(a_ik) && this->EqZero(c_k / a_ik - ratio)) {
        return false;
      }
    }
  }

  // check that j would be the row to exit in prior tableau
  this->SolveColumn(j, tmpcol);

  T b_k, b_i;
  b_i = solution[i] / tmpcol[i];
  if (this->LeZero(b_i)) {
    return false;
  }

  for (int k = this->b.front_index(); k <= this->b.back_index(); k++) {
    if (k != i) {
      b_k = solution[k] - b_i * tmpcol[k];
      if (this->GtZero(b_k) && this->Label(k) < j) {
        return false;
      }
    }
  }
  return true;
}

template <class T> BFS<T> LPTableau<T>::DualBFS() const
{
  BFS<T> cbfs;

  for (int i = this->MinRow(); i <= this->MaxRow(); i++) {
    if (!this->Member(-i)) {
      cbfs.insert(-i, dual[i]);
    }
  }
  return cbfs;
}

template <class T>
void LPTableau<T>::BasisSelect(const Vector<T> &unitv, const Vector<T> &rowv,
                               Vector<T> &colv) const
{
  for (int i = this->basis.First(); i <= this->basis.Last(); i++) {
    if (this->basis.Label(i) < 0) {
      colv[i] = unitv[-this->basis.Label(i)];
    }
    else {
      colv[i] = rowv[this->basis.Label(i)];
    }
  }
}

} // end namespace Gambit::linalg
