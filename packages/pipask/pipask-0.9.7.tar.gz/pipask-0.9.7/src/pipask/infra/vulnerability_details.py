import logging
from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from typing import Optional

import httpx
from cvss import CVSS2, CVSS3, CVSS4
from pydantic import BaseModel

from pipask.checks.types import CheckResultType
from pipask.infra.pypi import VulnerabilityPypi
from pipask.utils import simple_get_request

logger = logging.getLogger(__name__)


class VulnerabilitySeverity(str, Enum):
    # MUST be ordered from most severe to least severe
    CRITICAL = ("CRITICAL", CheckResultType.FAILURE)
    HIGH = ("HIGH", CheckResultType.FAILURE)
    MEDIUM = ("Medium", CheckResultType.WARNING)
    LOW = ("Low", CheckResultType.NEUTRAL)
    NONE = ("None", CheckResultType.NEUTRAL)

    result_type: CheckResultType

    def __new__(cls, value: str, result_type: CheckResultType):
        obj = str.__new__(cls, [value])
        obj._value_ = value
        obj.result_type = result_type
        return obj

    @staticmethod
    def get_worst(*results: Optional["VulnerabilitySeverity"]) -> Optional["VulnerabilitySeverity"]:
        for severity in VulnerabilitySeverity:
            if any(result is severity for result in results):
                return severity
        return None

    @staticmethod
    def from_cvss(cvss: CVSS2 | CVSS3 | CVSS4) -> Optional["VulnerabilitySeverity"]:
        cvss_severities: tuple[str | None] = cvss.severities()
        base_severity = cvss_severities[0]
        if base_severity is None:
            return None
        for severity in VulnerabilitySeverity:
            if severity.value.lower() == base_severity.lower():
                return severity
        return None


@dataclass
class VulnerabilityDetails:
    id: str | None
    severity: VulnerabilitySeverity | None
    link: str | None = None


class VulnerabilityDetailsService(ABC):
    @abstractmethod
    async def get_details(self, vulnerability: VulnerabilityPypi) -> VulnerabilityDetails:
        pass


class DummyVulnerabilityDetailsService(VulnerabilityDetailsService):
    async def get_details(self, vulnerability: VulnerabilityPypi) -> VulnerabilityDetails:
        return VulnerabilityDetails(id=vulnerability.id, severity=None, link=vulnerability.link)


class _OsvSeverity(BaseModel):
    type: str
    score: str


class _OsvVulnerabilityResponse(BaseModel):
    severity: list[_OsvSeverity] | None = None


class OsvVulnerabilityDetailsService(VulnerabilityDetailsService):
    def __init__(self, async_client: None | httpx.AsyncClient = None):
        self.client = async_client or httpx.AsyncClient(follow_redirects=True)

    async def get_details(self, vulnerability: VulnerabilityPypi) -> VulnerabilityDetails:
        # See https://google.github.io/osv.dev/get-v1-vulns/ for OSV API docs
        prefixes_with_severity = ["CVE-", "GHSA-"]
        all_ids = {vulnerability.id, *vulnerability.aliases}
        for prefix in prefixes_with_severity:
            id = next((alias for alias in all_ids if alias.startswith(prefix)), None)
            if id:
                url = f"https://api.osv.dev/v1/vulns/{id}"
                response = await simple_get_request(url, self.client, _OsvVulnerabilityResponse)
                if response and response.severity is not None:
                    return VulnerabilityDetails(
                        id=id, severity=_parse_severity(response.severity), link=f"https://osv.dev/vulnerability/{id}"
                    )
        return VulnerabilityDetails(id=vulnerability.id, severity=None, link=vulnerability.link)

    async def aclose(self) -> None:
        await self.client.aclose()


def _parse_severity(severity: list[_OsvSeverity] | None) -> VulnerabilitySeverity | None:
    if severity is None:
        return None
    # Use the newest CVSS version possible; this actually makes difference in some cases (e.g., GHSA-f96h-pmfr-66vw)
    if (cvss_v4 := next((s for s in severity if s.type == "CVSS_V4"), None)) is not None:
        return VulnerabilitySeverity.from_cvss(CVSS4(cvss_v4.score))
    if (cvss_v3 := next((s for s in severity if s.type == "CVSS_V3"), None)) is not None:
        return VulnerabilitySeverity.from_cvss(CVSS3(cvss_v3.score))
    if (cvss_v2 := next((s for s in severity if s.type == "CVSS_V2"), None)) is not None:
        return VulnerabilitySeverity.from_cvss(CVSS2(cvss_v2.score))
    return None  # No severity identified
