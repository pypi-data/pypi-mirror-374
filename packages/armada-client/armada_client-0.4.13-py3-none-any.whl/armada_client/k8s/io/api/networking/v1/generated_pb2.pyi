"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
This file was autogenerated by go-to-protobuf. Do not edit it manually!"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import armada_client.k8s.io.api.core.v1.generated_pb2
import armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2
import armada_client.k8s.io.apimachinery.pkg.util.intstr.generated_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class HTTPIngressPath(google.protobuf.message.Message):
    """HTTPIngressPath associates a path with a backend. Incoming urls matching the
    path are forwarded to the backend.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    PATHTYPE_FIELD_NUMBER: builtins.int
    BACKEND_FIELD_NUMBER: builtins.int
    path: builtins.str
    """path is matched against the path of an incoming request. Currently it can
    contain characters disallowed from the conventional "path" part of a URL
    as defined by RFC 3986. Paths must begin with a '/' and must be present
    when using PathType with value "Exact" or "Prefix".
    +optional
    """
    pathType: builtins.str
    """pathType determines the interpretation of the path matching. PathType can
    be one of the following values:
    * Exact: Matches the URL path exactly.
    * Prefix: Matches based on a URL path prefix split by '/'. Matching is
      done on a path element by element basis. A path element refers is the
      list of labels in the path split by the '/' separator. A request is a
      match for path p if every p is an element-wise prefix of p of the
      request path. Note that if the last element of the path is a substring
      of the last element in request path, it is not a match (e.g. /foo/bar
      matches /foo/bar/baz, but does not match /foo/barbaz).
    * ImplementationSpecific: Interpretation of the Path matching is up to
      the IngressClass. Implementations can treat this as a separate PathType
      or treat it identically to Prefix or Exact path types.
    Implementations are required to support all path types.
    """
    @property
    def backend(self) -> global___IngressBackend:
        """backend defines the referenced service endpoint to which the traffic
        will be forwarded to.
        """

    def __init__(
        self,
        *,
        path: builtins.str | None = ...,
        pathType: builtins.str | None = ...,
        backend: global___IngressBackend | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["backend", b"backend", "path", b"path", "pathType", b"pathType"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["backend", b"backend", "path", b"path", "pathType", b"pathType"]) -> None: ...

global___HTTPIngressPath = HTTPIngressPath

@typing.final
class HTTPIngressRuleValue(google.protobuf.message.Message):
    """HTTPIngressRuleValue is a list of http selectors pointing to backends.
    In the example: http://<host>/<path>?<searchpart> -> backend where
    where parts of the url correspond to RFC 3986, this resource will be used
    to match against everything after the last '/' and before the first '?'
    or '#'.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATHS_FIELD_NUMBER: builtins.int
    @property
    def paths(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___HTTPIngressPath]:
        """paths is a collection of paths that map requests to backends.
        +listType=atomic
        """

    def __init__(
        self,
        *,
        paths: collections.abc.Iterable[global___HTTPIngressPath] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["paths", b"paths"]) -> None: ...

global___HTTPIngressRuleValue = HTTPIngressRuleValue

@typing.final
class IPBlock(google.protobuf.message.Message):
    """IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed
    to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs
    that should not be included within this rule.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CIDR_FIELD_NUMBER: builtins.int
    EXCEPT_FIELD_NUMBER: builtins.int
    cidr: builtins.str
    """cidr is a string representing the IPBlock
    Valid examples are "192.168.1.0/24" or "2001:db8::/64"
    """
    def __init__(
        self,
        *,
        cidr: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cidr", b"cidr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cidr", b"cidr", "except", b"except"]) -> None: ...

global___IPBlock = IPBlock

@typing.final
class Ingress(google.protobuf.message.Message):
    """Ingress is a collection of rules that allow inbound connections to reach the
    endpoints defined by a backend. An Ingress can be configured to give services
    externally-reachable urls, load balance traffic, terminate SSL, offer name
    based virtual hosting etc.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta:
        """Standard object's metadata.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        +optional
        """

    @property
    def spec(self) -> global___IngressSpec:
        """spec is the desired state of the Ingress.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        +optional
        """

    @property
    def status(self) -> global___IngressStatus:
        """status is the current state of the Ingress.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        +optional
        """

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta | None = ...,
        spec: global___IngressSpec | None = ...,
        status: global___IngressStatus | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec", "status", b"status"]) -> None: ...

global___Ingress = Ingress

@typing.final
class IngressBackend(google.protobuf.message.Message):
    """IngressBackend describes all endpoints for a given service and port."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERVICE_FIELD_NUMBER: builtins.int
    RESOURCE_FIELD_NUMBER: builtins.int
    @property
    def service(self) -> global___IngressServiceBackend:
        """service references a service as a backend.
        This is a mutually exclusive setting with "Resource".
        +optional
        """

    @property
    def resource(self) -> armada_client.k8s.io.api.core.v1.generated_pb2.TypedLocalObjectReference:
        """resource is an ObjectRef to another Kubernetes resource in the namespace
        of the Ingress object. If resource is specified, a service.Name and
        service.Port must not be specified.
        This is a mutually exclusive setting with "Service".
        +optional
        """

    def __init__(
        self,
        *,
        service: global___IngressServiceBackend | None = ...,
        resource: armada_client.k8s.io.api.core.v1.generated_pb2.TypedLocalObjectReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["resource", b"resource", "service", b"service"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["resource", b"resource", "service", b"service"]) -> None: ...

global___IngressBackend = IngressBackend

@typing.final
class IngressClass(google.protobuf.message.Message):
    """IngressClass represents the class of the Ingress, referenced by the Ingress
    Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be
    used to indicate that an IngressClass should be considered default. When a
    single IngressClass resource has this annotation set to true, new Ingress
    resources without a class specified will be assigned this default class.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta:
        """Standard object's metadata.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        +optional
        """

    @property
    def spec(self) -> global___IngressClassSpec:
        """spec is the desired state of the IngressClass.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        +optional
        """

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta | None = ...,
        spec: global___IngressClassSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec"]) -> None: ...

global___IngressClass = IngressClass

@typing.final
class IngressClassList(google.protobuf.message.Message):
    """IngressClassList is a collection of IngressClasses."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta:
        """Standard list metadata.
        +optional
        """

    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IngressClass]:
        """items is the list of IngressClasses."""

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta | None = ...,
        items: collections.abc.Iterable[global___IngressClass] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "metadata", b"metadata"]) -> None: ...

global___IngressClassList = IngressClassList

@typing.final
class IngressClassParametersReference(google.protobuf.message.Message):
    """IngressClassParametersReference identifies an API object. This can be used
    to specify a cluster or namespace-scoped resource.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    APIGROUP_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SCOPE_FIELD_NUMBER: builtins.int
    NAMESPACE_FIELD_NUMBER: builtins.int
    aPIGroup: builtins.str
    """apiGroup is the group for the resource being referenced. If APIGroup is
    not specified, the specified Kind must be in the core API group. For any
    other third-party types, APIGroup is required.
    +optional
    """
    kind: builtins.str
    """kind is the type of resource being referenced."""
    name: builtins.str
    """name is the name of resource being referenced."""
    scope: builtins.str
    """scope represents if this refers to a cluster or namespace scoped resource.
    This may be set to "Cluster" (default) or "Namespace".
    +optional
    """
    namespace: builtins.str
    """namespace is the namespace of the resource being referenced. This field is
    required when scope is set to "Namespace" and must be unset when scope is set to
    "Cluster".
    +optional
    """
    def __init__(
        self,
        *,
        aPIGroup: builtins.str | None = ...,
        kind: builtins.str | None = ...,
        name: builtins.str | None = ...,
        scope: builtins.str | None = ...,
        namespace: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["aPIGroup", b"aPIGroup", "kind", b"kind", "name", b"name", "namespace", b"namespace", "scope", b"scope"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aPIGroup", b"aPIGroup", "kind", b"kind", "name", b"name", "namespace", b"namespace", "scope", b"scope"]) -> None: ...

global___IngressClassParametersReference = IngressClassParametersReference

@typing.final
class IngressClassSpec(google.protobuf.message.Message):
    """IngressClassSpec provides information about the class of an Ingress."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTROLLER_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    controller: builtins.str
    """controller refers to the name of the controller that should handle this
    class. This allows for different "flavors" that are controlled by the
    same controller. For example, you may have different parameters for the
    same implementing controller. This should be specified as a
    domain-prefixed path no more than 250 characters in length, e.g.
    "acme.io/ingress-controller". This field is immutable.
    """
    @property
    def parameters(self) -> global___IngressClassParametersReference:
        """parameters is a link to a custom resource containing additional
        configuration for the controller. This is optional if the controller does
        not require extra parameters.
        +optional
        """

    def __init__(
        self,
        *,
        controller: builtins.str | None = ...,
        parameters: global___IngressClassParametersReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["controller", b"controller", "parameters", b"parameters"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["controller", b"controller", "parameters", b"parameters"]) -> None: ...

global___IngressClassSpec = IngressClassSpec

@typing.final
class IngressList(google.protobuf.message.Message):
    """IngressList is a collection of Ingress."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta:
        """Standard object's metadata.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        +optional
        """

    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Ingress]:
        """items is the list of Ingress."""

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta | None = ...,
        items: collections.abc.Iterable[global___Ingress] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "metadata", b"metadata"]) -> None: ...

global___IngressList = IngressList

@typing.final
class IngressLoadBalancerIngress(google.protobuf.message.Message):
    """IngressLoadBalancerIngress represents the status of a load-balancer ingress point."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IP_FIELD_NUMBER: builtins.int
    HOSTNAME_FIELD_NUMBER: builtins.int
    PORTS_FIELD_NUMBER: builtins.int
    ip: builtins.str
    """ip is set for load-balancer ingress points that are IP based.
    +optional
    """
    hostname: builtins.str
    """hostname is set for load-balancer ingress points that are DNS based.
    +optional
    """
    @property
    def ports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IngressPortStatus]:
        """ports provides information about the ports exposed by this LoadBalancer.
        +listType=atomic
        +optional
        """

    def __init__(
        self,
        *,
        ip: builtins.str | None = ...,
        hostname: builtins.str | None = ...,
        ports: collections.abc.Iterable[global___IngressPortStatus] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["hostname", b"hostname", "ip", b"ip"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["hostname", b"hostname", "ip", b"ip", "ports", b"ports"]) -> None: ...

global___IngressLoadBalancerIngress = IngressLoadBalancerIngress

@typing.final
class IngressLoadBalancerStatus(google.protobuf.message.Message):
    """IngressLoadBalancerStatus represents the status of a load-balancer."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INGRESS_FIELD_NUMBER: builtins.int
    @property
    def ingress(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IngressLoadBalancerIngress]:
        """ingress is a list containing ingress points for the load-balancer.
        +optional
        """

    def __init__(
        self,
        *,
        ingress: collections.abc.Iterable[global___IngressLoadBalancerIngress] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ingress", b"ingress"]) -> None: ...

global___IngressLoadBalancerStatus = IngressLoadBalancerStatus

@typing.final
class IngressPortStatus(google.protobuf.message.Message):
    """IngressPortStatus represents the error condition of a service port"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PORT_FIELD_NUMBER: builtins.int
    PROTOCOL_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    port: builtins.int
    """port is the port number of the ingress port."""
    protocol: builtins.str
    """protocol is the protocol of the ingress port.
    The supported values are: "TCP", "UDP", "SCTP"
    """
    error: builtins.str
    """error is to record the problem with the service port
    The format of the error shall comply with the following rules:
    - built-in error values shall be specified in this file and those shall use
      CamelCase names
    - cloud provider specific error values must have names that comply with the
      format foo.example.com/CamelCase.
    ---
    The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    +optional
    +kubebuilder:validation:Required
    +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`
    +kubebuilder:validation:MaxLength=316
    """
    def __init__(
        self,
        *,
        port: builtins.int | None = ...,
        protocol: builtins.str | None = ...,
        error: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "port", b"port", "protocol", b"protocol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "port", b"port", "protocol", b"protocol"]) -> None: ...

global___IngressPortStatus = IngressPortStatus

@typing.final
class IngressRule(google.protobuf.message.Message):
    """IngressRule represents the rules mapping the paths under a specified host to
    the related backend services. Incoming requests are first evaluated for a host
    match, then routed to the backend associated with the matching IngressRuleValue.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOST_FIELD_NUMBER: builtins.int
    INGRESSRULEVALUE_FIELD_NUMBER: builtins.int
    host: builtins.str
    """host is the fully qualified domain name of a network host, as defined by RFC 3986.
    Note the following deviations from the "host" part of the
    URI as defined in RFC 3986:
    1. IPs are not allowed. Currently an IngressRuleValue can only apply to
       the IP in the Spec of the parent Ingress.
    2. The `:` delimiter is not respected because ports are not allowed.
    	  Currently the port of an Ingress is implicitly :80 for http and
    	  :443 for https.
    Both these may change in the future.
    Incoming requests are matched against the host before the
    IngressRuleValue. If the host is unspecified, the Ingress routes all
    traffic based on the specified IngressRuleValue.

    host can be "precise" which is a domain name without the terminating dot of
    a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name
    prefixed with a single wildcard label (e.g. "*.foo.com").
    The wildcard character '*' must appear by itself as the first DNS label and
    matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*").
    Requests will be matched against the Host field in the following way:
    1. If host is precise, the request matches this rule if the http host header is equal to Host.
    2. If host is a wildcard, then the request matches this rule if the http host header
    is to equal to the suffix (removing the first label) of the wildcard rule.
    +optional
    """
    @property
    def ingressRuleValue(self) -> global___IngressRuleValue:
        """IngressRuleValue represents a rule to route requests for this IngressRule.
        If unspecified, the rule defaults to a http catch-all. Whether that sends
        just traffic matching the host to the default backend or all traffic to the
        default backend, is left to the controller fulfilling the Ingress. Http is
        currently the only supported IngressRuleValue.
        +optional
        """

    def __init__(
        self,
        *,
        host: builtins.str | None = ...,
        ingressRuleValue: global___IngressRuleValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["host", b"host", "ingressRuleValue", b"ingressRuleValue"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["host", b"host", "ingressRuleValue", b"ingressRuleValue"]) -> None: ...

global___IngressRule = IngressRule

@typing.final
class IngressRuleValue(google.protobuf.message.Message):
    """IngressRuleValue represents a rule to apply against incoming requests. If the
    rule is satisfied, the request is routed to the specified backend. Currently
    mixing different types of rules in a single Ingress is disallowed, so exactly
    one of the following must be set.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HTTP_FIELD_NUMBER: builtins.int
    @property
    def http(self) -> global___HTTPIngressRuleValue:
        """+optional"""

    def __init__(
        self,
        *,
        http: global___HTTPIngressRuleValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["http", b"http"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["http", b"http"]) -> None: ...

global___IngressRuleValue = IngressRuleValue

@typing.final
class IngressServiceBackend(google.protobuf.message.Message):
    """IngressServiceBackend references a Kubernetes Service as a Backend."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PORT_FIELD_NUMBER: builtins.int
    name: builtins.str
    """name is the referenced service. The service must exist in
    the same namespace as the Ingress object.
    """
    @property
    def port(self) -> global___ServiceBackendPort:
        """port of the referenced service. A port name or port number
        is required for a IngressServiceBackend.
        """

    def __init__(
        self,
        *,
        name: builtins.str | None = ...,
        port: global___ServiceBackendPort | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "port", b"port"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "port", b"port"]) -> None: ...

global___IngressServiceBackend = IngressServiceBackend

@typing.final
class IngressSpec(google.protobuf.message.Message):
    """IngressSpec describes the Ingress the user wishes to exist."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INGRESSCLASSNAME_FIELD_NUMBER: builtins.int
    DEFAULTBACKEND_FIELD_NUMBER: builtins.int
    TLS_FIELD_NUMBER: builtins.int
    RULES_FIELD_NUMBER: builtins.int
    ingressClassName: builtins.str
    """ingressClassName is the name of an IngressClass cluster resource. Ingress
    controller implementations use this field to know whether they should be
    serving this Ingress resource, by a transitive connection
    (controller -> IngressClass -> Ingress resource). Although the
    `kubernetes.io/ingress.class` annotation (simple constant name) was never
    formally defined, it was widely supported by Ingress controllers to create
    a direct binding between Ingress controller and Ingress resources. Newly
    created Ingress resources should prefer using the field. However, even
    though the annotation is officially deprecated, for backwards compatibility
    reasons, ingress controllers should still honor that annotation if present.
    +optional
    """
    @property
    def defaultBackend(self) -> global___IngressBackend:
        """defaultBackend is the backend that should handle requests that don't
        match any rule. If Rules are not specified, DefaultBackend must be specified.
        If DefaultBackend is not set, the handling of requests that do not match any
        of the rules will be up to the Ingress controller.
        +optional
        """

    @property
    def tls(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IngressTLS]:
        """tls represents the TLS configuration. Currently the Ingress only supports a
        single TLS port, 443. If multiple members of this list specify different hosts,
        they will be multiplexed on the same port according to the hostname specified
        through the SNI TLS extension, if the ingress controller fulfilling the
        ingress supports SNI.
        +listType=atomic
        +optional
        """

    @property
    def rules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___IngressRule]:
        """rules is a list of host rules used to configure the Ingress. If unspecified,
        or no rule matches, all traffic is sent to the default backend.
        +listType=atomic
        +optional
        """

    def __init__(
        self,
        *,
        ingressClassName: builtins.str | None = ...,
        defaultBackend: global___IngressBackend | None = ...,
        tls: collections.abc.Iterable[global___IngressTLS] | None = ...,
        rules: collections.abc.Iterable[global___IngressRule] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["defaultBackend", b"defaultBackend", "ingressClassName", b"ingressClassName"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["defaultBackend", b"defaultBackend", "ingressClassName", b"ingressClassName", "rules", b"rules", "tls", b"tls"]) -> None: ...

global___IngressSpec = IngressSpec

@typing.final
class IngressStatus(google.protobuf.message.Message):
    """IngressStatus describe the current state of the Ingress."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOADBALANCER_FIELD_NUMBER: builtins.int
    @property
    def loadBalancer(self) -> global___IngressLoadBalancerStatus:
        """loadBalancer contains the current status of the load-balancer.
        +optional
        """

    def __init__(
        self,
        *,
        loadBalancer: global___IngressLoadBalancerStatus | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["loadBalancer", b"loadBalancer"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["loadBalancer", b"loadBalancer"]) -> None: ...

global___IngressStatus = IngressStatus

@typing.final
class IngressTLS(google.protobuf.message.Message):
    """IngressTLS describes the transport layer security associated with an ingress."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOSTS_FIELD_NUMBER: builtins.int
    SECRETNAME_FIELD_NUMBER: builtins.int
    secretName: builtins.str
    """secretName is the name of the secret used to terminate TLS traffic on
    port 443. Field is left optional to allow TLS routing based on SNI
    hostname alone. If the SNI host in a listener conflicts with the "Host"
    header field used by an IngressRule, the SNI host is used for termination
    and value of the "Host" header is used for routing.
    +optional
    """
    @property
    def hosts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """hosts is a list of hosts included in the TLS certificate. The values in
        this list must match the name/s used in the tlsSecret. Defaults to the
        wildcard host setting for the loadbalancer controller fulfilling this
        Ingress, if left unspecified.
        +listType=atomic
        +optional
        """

    def __init__(
        self,
        *,
        hosts: collections.abc.Iterable[builtins.str] | None = ...,
        secretName: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["secretName", b"secretName"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["hosts", b"hosts", "secretName", b"secretName"]) -> None: ...

global___IngressTLS = IngressTLS

@typing.final
class NetworkPolicy(google.protobuf.message.Message):
    """NetworkPolicy describes what network traffic is allowed for a set of Pods"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta:
        """Standard object's metadata.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        +optional
        """

    @property
    def spec(self) -> global___NetworkPolicySpec:
        """spec represents the specification of the desired behavior for this NetworkPolicy.
        +optional
        """

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ObjectMeta | None = ...,
        spec: global___NetworkPolicySpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata", b"metadata", "spec", b"spec"]) -> None: ...

global___NetworkPolicy = NetworkPolicy

@typing.final
class NetworkPolicyEgressRule(google.protobuf.message.Message):
    """NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods
    matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to.
    This type is beta-level in 1.8
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PORTS_FIELD_NUMBER: builtins.int
    TO_FIELD_NUMBER: builtins.int
    @property
    def ports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicyPort]:
        """ports is a list of destination ports for outgoing traffic.
        Each item in this list is combined using a logical OR. If this field is
        empty or missing, this rule matches all ports (traffic not restricted by port).
        If this field is present and contains at least one item, then this rule allows
        traffic only if the traffic matches at least one port in the list.
        +optional
        """

    @property
    def to(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicyPeer]:
        """to is a list of destinations for outgoing traffic of pods selected for this rule.
        Items in this list are combined using a logical OR operation. If this field is
        empty or missing, this rule matches all destinations (traffic not restricted by
        destination). If this field is present and contains at least one item, this rule
        allows traffic only if the traffic matches at least one item in the to list.
        +optional
        """

    def __init__(
        self,
        *,
        ports: collections.abc.Iterable[global___NetworkPolicyPort] | None = ...,
        to: collections.abc.Iterable[global___NetworkPolicyPeer] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ports", b"ports", "to", b"to"]) -> None: ...

global___NetworkPolicyEgressRule = NetworkPolicyEgressRule

@typing.final
class NetworkPolicyIngressRule(google.protobuf.message.Message):
    """NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods
    matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PORTS_FIELD_NUMBER: builtins.int
    FROM_FIELD_NUMBER: builtins.int
    @property
    def ports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicyPort]:
        """ports is a list of ports which should be made accessible on the pods selected for
        this rule. Each item in this list is combined using a logical OR. If this field is
        empty or missing, this rule matches all ports (traffic not restricted by port).
        If this field is present and contains at least one item, then this rule allows
        traffic only if the traffic matches at least one port in the list.
        +optional
        """

    def __init__(
        self,
        *,
        ports: collections.abc.Iterable[global___NetworkPolicyPort] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["from", b"from", "ports", b"ports"]) -> None: ...

global___NetworkPolicyIngressRule = NetworkPolicyIngressRule

@typing.final
class NetworkPolicyList(google.protobuf.message.Message):
    """NetworkPolicyList is a list of NetworkPolicy objects."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta:
        """Standard list metadata.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        +optional
        """

    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicy]:
        """items is a list of schema objects."""

    def __init__(
        self,
        *,
        metadata: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.ListMeta | None = ...,
        items: collections.abc.Iterable[global___NetworkPolicy] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata", b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "metadata", b"metadata"]) -> None: ...

global___NetworkPolicyList = NetworkPolicyList

@typing.final
class NetworkPolicyPeer(google.protobuf.message.Message):
    """NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
    fields are allowed
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PODSELECTOR_FIELD_NUMBER: builtins.int
    NAMESPACESELECTOR_FIELD_NUMBER: builtins.int
    IPBLOCK_FIELD_NUMBER: builtins.int
    @property
    def podSelector(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector:
        """podSelector is a label selector which selects pods. This field follows standard label
        selector semantics; if present but empty, it selects all pods.

        If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
        the pods matching podSelector in the Namespaces selected by NamespaceSelector.
        Otherwise it selects the pods matching podSelector in the policy's own namespace.
        +optional
        """

    @property
    def namespaceSelector(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector:
        """namespaceSelector selects namespaces using cluster-scoped labels. This field follows
        standard label selector semantics; if present but empty, it selects all namespaces.

        If podSelector is also set, then the NetworkPolicyPeer as a whole selects
        the pods matching podSelector in the namespaces selected by namespaceSelector.
        Otherwise it selects all pods in the namespaces selected by namespaceSelector.
        +optional
        """

    @property
    def ipBlock(self) -> global___IPBlock:
        """ipBlock defines policy on a particular IPBlock. If this field is set then
        neither of the other fields can be.
        +optional
        """

    def __init__(
        self,
        *,
        podSelector: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector | None = ...,
        namespaceSelector: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector | None = ...,
        ipBlock: global___IPBlock | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ipBlock", b"ipBlock", "namespaceSelector", b"namespaceSelector", "podSelector", b"podSelector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ipBlock", b"ipBlock", "namespaceSelector", b"namespaceSelector", "podSelector", b"podSelector"]) -> None: ...

global___NetworkPolicyPeer = NetworkPolicyPeer

@typing.final
class NetworkPolicyPort(google.protobuf.message.Message):
    """NetworkPolicyPort describes a port to allow traffic on"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROTOCOL_FIELD_NUMBER: builtins.int
    PORT_FIELD_NUMBER: builtins.int
    ENDPORT_FIELD_NUMBER: builtins.int
    protocol: builtins.str
    """protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match.
    If not specified, this field defaults to TCP.
    +optional
    """
    endPort: builtins.int
    """endPort indicates that the range of ports from port to endPort if set, inclusive,
    should be allowed by the policy. This field cannot be defined if the port field
    is not defined or if the port field is defined as a named (string) port.
    The endPort must be equal or greater than port.
    +optional
    """
    @property
    def port(self) -> armada_client.k8s.io.apimachinery.pkg.util.intstr.generated_pb2.IntOrString:
        """port represents the port on the given protocol. This can either be a numerical or named
        port on a pod. If this field is not provided, this matches all port names and
        numbers.
        If present, only traffic on the specified protocol AND port will be matched.
        +optional
        """

    def __init__(
        self,
        *,
        protocol: builtins.str | None = ...,
        port: armada_client.k8s.io.apimachinery.pkg.util.intstr.generated_pb2.IntOrString | None = ...,
        endPort: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["endPort", b"endPort", "port", b"port", "protocol", b"protocol"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["endPort", b"endPort", "port", b"port", "protocol", b"protocol"]) -> None: ...

global___NetworkPolicyPort = NetworkPolicyPort

@typing.final
class NetworkPolicySpec(google.protobuf.message.Message):
    """NetworkPolicySpec provides the specification of a NetworkPolicy"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PODSELECTOR_FIELD_NUMBER: builtins.int
    INGRESS_FIELD_NUMBER: builtins.int
    EGRESS_FIELD_NUMBER: builtins.int
    POLICYTYPES_FIELD_NUMBER: builtins.int
    @property
    def podSelector(self) -> armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector:
        """podSelector selects the pods to which this NetworkPolicy object applies.
        The array of ingress rules is applied to any pods selected by this field.
        Multiple network policies can select the same set of pods. In this case,
        the ingress rules for each are combined additively.
        This field is NOT optional and follows standard label selector semantics.
        An empty podSelector matches all pods in this namespace.
        """

    @property
    def ingress(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicyIngressRule]:
        """ingress is a list of ingress rules to be applied to the selected pods.
        Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod
        (and cluster policy otherwise allows the traffic), OR if the traffic source is
        the pod's local node, OR if the traffic matches at least one ingress rule
        across all of the NetworkPolicy objects whose podSelector matches the pod. If
        this field is empty then this NetworkPolicy does not allow any traffic (and serves
        solely to ensure that the pods it selects are isolated by default)
        +optional
        """

    @property
    def egress(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NetworkPolicyEgressRule]:
        """egress is a list of egress rules to be applied to the selected pods. Outgoing traffic
        is allowed if there are no NetworkPolicies selecting the pod (and cluster policy
        otherwise allows the traffic), OR if the traffic matches at least one egress rule
        across all of the NetworkPolicy objects whose podSelector matches the pod. If
        this field is empty then this NetworkPolicy limits all outgoing traffic (and serves
        solely to ensure that the pods it selects are isolated by default).
        This field is beta-level in 1.8
        +optional
        """

    @property
    def policyTypes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """policyTypes is a list of rule types that the NetworkPolicy relates to.
        Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"].
        If this field is not specified, it will default based on the existence of ingress or egress rules;
        policies that contain an egress section are assumed to affect egress, and all policies
        (whether or not they contain an ingress section) are assumed to affect ingress.
        If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ].
        Likewise, if you want to write a policy that specifies that no egress is allowed,
        you must specify a policyTypes value that include "Egress" (since such a policy would not include
        an egress section and would otherwise default to just [ "Ingress" ]).
        This field is beta-level in 1.8
        +optional
        """

    def __init__(
        self,
        *,
        podSelector: armada_client.k8s.io.apimachinery.pkg.apis.meta.v1.generated_pb2.LabelSelector | None = ...,
        ingress: collections.abc.Iterable[global___NetworkPolicyIngressRule] | None = ...,
        egress: collections.abc.Iterable[global___NetworkPolicyEgressRule] | None = ...,
        policyTypes: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["podSelector", b"podSelector"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["egress", b"egress", "ingress", b"ingress", "podSelector", b"podSelector", "policyTypes", b"policyTypes"]) -> None: ...

global___NetworkPolicySpec = NetworkPolicySpec

@typing.final
class ServiceBackendPort(google.protobuf.message.Message):
    """ServiceBackendPort is the service port being referenced."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    NUMBER_FIELD_NUMBER: builtins.int
    name: builtins.str
    """name is the name of the port on the Service.
    This is a mutually exclusive setting with "Number".
    +optional
    """
    number: builtins.int
    """number is the numerical port number (e.g. 80) on the Service.
    This is a mutually exclusive setting with "Name".
    +optional
    """
    def __init__(
        self,
        *,
        name: builtins.str | None = ...,
        number: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "number", b"number"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "number", b"number"]) -> None: ...

global___ServiceBackendPort = ServiceBackendPort
