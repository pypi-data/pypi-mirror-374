"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
This file was autogenerated by go-to-protobuf. Do not edit it manually!"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class RawExtension(google.protobuf.message.Message):
    """RawExtension is used to hold extensions in external versions.

    To use this, make a field which has RawExtension as its type in your external, versioned
    struct, and Object in your internal struct. You also need to register your
    various plugin types.

    // Internal package:

    	type MyAPIObject struct {
    		runtime.TypeMeta `json:",inline"`
    		MyPlugin runtime.Object `json:"myPlugin"`
    	}

    	type PluginA struct {
    		AOption string `json:"aOption"`
    	}

    // External package:

    	type MyAPIObject struct {
    		runtime.TypeMeta `json:",inline"`
    		MyPlugin runtime.RawExtension `json:"myPlugin"`
    	}

    	type PluginA struct {
    		AOption string `json:"aOption"`
    	}

    // On the wire, the JSON will look something like this:

    	{
    		"kind":"MyAPIObject",
    		"apiVersion":"v1",
    		"myPlugin": {
    			"kind":"PluginA",
    			"aOption":"foo",
    		},
    	}

    So what happens? Decode first uses json or yaml to unmarshal the serialized data into
    your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.
    The next step is to copy (using pkg/conversion) into the internal struct. The runtime
    package's DefaultScheme has conversion functions installed which will unpack the
    JSON stored in RawExtension, turning it into the correct object type, and storing it
    in the Object. (TODO: In the case where the object is of an unknown type, a
    runtime.Unknown object will be created and stored.)

    +k8s:deepcopy-gen=true
    +protobuf=true
    +k8s:openapi-gen=true
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RAW_FIELD_NUMBER: builtins.int
    raw: builtins.bytes
    """Raw is the underlying serialization of this object.

    TODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.
    """
    def __init__(
        self,
        *,
        raw: builtins.bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["raw", b"raw"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["raw", b"raw"]) -> None: ...

global___RawExtension = RawExtension

@typing.final
class TypeMeta(google.protobuf.message.Message):
    """TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type,
    like this:

    	type MyAwesomeAPIObject struct {
    	     runtime.TypeMeta    `json:",inline"`
    	     ... // other fields
    	}

    func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind

    TypeMeta is provided here for convenience. You may use it directly from this package or define
    your own with the same fields.

    +k8s:deepcopy-gen=false
    +protobuf=true
    +k8s:openapi-gen=true
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    APIVERSION_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    apiVersion: builtins.str
    """+optional"""
    kind: builtins.str
    """+optional"""
    def __init__(
        self,
        *,
        apiVersion: builtins.str | None = ...,
        kind: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["apiVersion", b"apiVersion", "kind", b"kind"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["apiVersion", b"apiVersion", "kind", b"kind"]) -> None: ...

global___TypeMeta = TypeMeta

@typing.final
class Unknown(google.protobuf.message.Message):
    """Unknown allows api objects with unknown types to be passed-through. This can be used
    to deal with the API objects from a plug-in. Unknown objects still have functioning
    TypeMeta features-- kind, version, etc.
    TODO: Make this object have easy access to field based accessors and settors for
    metadata and field mutatation.

    +k8s:deepcopy-gen=true
    +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
    +protobuf=true
    +k8s:openapi-gen=true
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPEMETA_FIELD_NUMBER: builtins.int
    RAW_FIELD_NUMBER: builtins.int
    CONTENTENCODING_FIELD_NUMBER: builtins.int
    CONTENTTYPE_FIELD_NUMBER: builtins.int
    raw: builtins.bytes
    """Raw will hold the complete serialized object which couldn't be matched
    with a registered type. Most likely, nothing should be done with this
    except for passing it through the system.
    """
    contentEncoding: builtins.str
    """ContentEncoding is encoding used to encode 'Raw' data.
    Unspecified means no encoding.
    """
    contentType: builtins.str
    """ContentType  is serialization method used to serialize 'Raw'.
    Unspecified means ContentTypeJSON.
    """
    @property
    def typeMeta(self) -> global___TypeMeta: ...
    def __init__(
        self,
        *,
        typeMeta: global___TypeMeta | None = ...,
        raw: builtins.bytes | None = ...,
        contentEncoding: builtins.str | None = ...,
        contentType: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["contentEncoding", b"contentEncoding", "contentType", b"contentType", "raw", b"raw", "typeMeta", b"typeMeta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["contentEncoding", b"contentEncoding", "contentType", b"contentType", "raw", b"raw", "typeMeta", b"typeMeta"]) -> None: ...

global___Unknown = Unknown
