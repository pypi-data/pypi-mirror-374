"""Module with MDTF bindings"""

import logging
from pathlib import Path

import yaml

from esnb.core.util import missing_dict_keys, write_dict

logger = logging.getLogger(__name__)


def gen_mdtf_settings_file_stub():
    """
    Generate a stub dictionary for MDTF settings file.

    This function returns a dictionary containing the default structure and
    placeholder values for an MDTF (Model Diagnostics Task Force) settings file.
    The returned dictionary includes keys for pod lists, case lists, data
    catalogs, directory paths, and various configuration options, all set to
    default or None values.

    Returns
    -------
    dict
        A dictionary with the default structure and placeholder values for an
        MDTF settings file.
    """
    return {
        "pod_list": [],
        "case_list": {
            "casename": {
                "model": None,
                "convention": None,
                "startdate": "YYYYMMDD000000",
                "enddate": "YYYYMMDD000000",
            }
        },
        "DATA_CATALOG": None,
        "OBS_DATA_ROOT": None,
        "WORK_DIR": None,
        "OUTPUT_DIR": None,
        "conda_root": None,
        "conda_env_root": None,
        "micromamba_exe": None,
        "large_file": None,
        "save_ps": None,
        "save_pp_data": None,
        "translate_data": None,
        "make_variab_tar": None,
        "overwrite": None,
        "make_multicase_figure_html": None,
        "run_pp": None,
        "user_pp_scripts": None,
    }


def standardize_mdtf_case_settings(settings):
    """
    Standardizes MDTF case settings by filling in missing keys with defaults.

    Given a dictionary of settings, this function creates a new dictionary
    based on a template generated by `gen_mdtf_settings_file_stub()`. It
    copies values from the input `settings` for any keys present in both
    the template and the input. Keys not present in `settings` retain their
    default values from the template.

    Parameters
    ----------
    settings : dict
        Dictionary containing MDTF case settings to standardize.

    Returns
    -------
    dict
        A new dictionary with all required MDTF settings, using values from
        `settings` where provided and defaults elsewhere.
    """
    target = gen_mdtf_settings_file_stub()
    for k in target.keys():
        if k in settings.keys():
            target[k] = settings[k]
    return target


def ingest_mdtf_settings_dict(caseobj, settings_dict):
    caseobj.source = "Settings Dictionary"
    _settings = settings_dict
    missing_keys = missing_dict_keys(_settings, ["DATA_CATALOG", "case_list"])
    if len(missing_keys) > 0:
        raise ValueError(
            f"Encountered missing fields {missing_keys} in MDTF settings file {caseobj.source}"
        )
    # set special attribute
    caseobj.catalog = _settings["DATA_CATALOG"]
    caseobj.mdtf_settings = _settings
    assert len(caseobj.catalog) > 0, (
        f"`DATA_CATALOG` is empty in MDTF settings file {caseobj.source}"
    )


class MDTFCaseSettings:
    """
    Class for handling MDTF case settings, including loading from and writing to
    settings files.

    Methods
    -------
    load_mdtf_settings(settings_file)
        Loads MDTF settings from a YAML file, validates required fields, and
        sets internal attributes, or optionally, pass a dict with settings

    write_mdtf_settings_file(filename='case_settings.yml', fmt='yaml')
        Writes the current MDTF settings to a file in the specified format.
    """

    def load_mdtf_settings(self, settings_file):
        if isinstance(settings_file, dict):
            _settings = settings_file
        else:
            settings_file = Path(settings_file)
            if not settings_file.exists():
                raise FileNotFoundError(
                    f"MDTF settings file does not exist: {settings_file}"
                )
            with open(settings_file, "r") as f:
                _settings = yaml.safe_load(f)
        ingest_mdtf_settings_dict(self, _settings)
        self.source = str(settings_file)

    def load_mdtf_settings_dict(self, settings_dict):
        ingest_mdtf_settings_dict(self, settings_dict)

    def write_mdtf_settings_file(self, filename="case_settings.yml", fmt="yaml"):
        _settings = getattr(self, "mdtf_settings", None)
        _settings = gen_mdtf_settings_file_stub() if _settings is None else _settings
        _settings = standardize_mdtf_case_settings(_settings)
        write_dict(_settings, filename, fmt)
        # set special attribute
        self.catalog = _settings["DATA_CATALOG"]
        self.mdtf_settings = _settings

        assert len(self.catalog) > 0, (
            f"`DATA_CATALOG` is empty in MDTF settings file {self.source}"
        )
