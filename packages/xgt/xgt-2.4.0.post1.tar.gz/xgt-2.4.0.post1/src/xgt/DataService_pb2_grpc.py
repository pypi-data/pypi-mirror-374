# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DataService_pb2 as DataService__pb2


class DataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadData = channel.stream_unary(
                '/xgtproto.DataService/UploadData',
                request_serializer=DataService__pb2.UploadDataRequest.SerializeToString,
                response_deserializer=DataService__pb2.UploadDataResponse.FromString,
                _registered_method=True)
        self.DownloadData = channel.unary_stream(
                '/xgtproto.DataService/DownloadData',
                request_serializer=DataService__pb2.DownloadDataRequest.SerializeToString,
                response_deserializer=DataService__pb2.DownloadDataResponse.FromString,
                _registered_method=True)
        self.IngestUri = channel.stream_unary(
                '/xgtproto.DataService/IngestUri',
                request_serializer=DataService__pb2.IngestUriRequest.SerializeToString,
                response_deserializer=DataService__pb2.IngestUriResponse.FromString,
                _registered_method=True)
        self.EgestUri = channel.unary_unary(
                '/xgtproto.DataService/EgestUri',
                request_serializer=DataService__pb2.EgestUriRequest.SerializeToString,
                response_deserializer=DataService__pb2.EgestUriResponse.FromString,
                _registered_method=True)
        self.InferSchema = channel.unary_unary(
                '/xgtproto.DataService/InferSchema',
                request_serializer=DataService__pb2.InferSchemaRequest.SerializeToString,
                response_deserializer=DataService__pb2.InferSchemaResponse.FromString,
                _registered_method=True)
        self.TransferFrameArrowClient = channel.unary_unary(
                '/xgtproto.DataService/TransferFrameArrowClient',
                request_serializer=DataService__pb2.TransferFrameArrowClientRequest.SerializeToString,
                response_deserializer=DataService__pb2.TransferFrameArrowClientResponse.FromString,
                _registered_method=True)
        self.UploadCSVMultiData = channel.stream_unary(
                '/xgtproto.DataService/UploadCSVMultiData',
                request_serializer=DataService__pb2.UploadCSVMultiDataRequest.SerializeToString,
                response_deserializer=DataService__pb2.UploadCSVMultiDataResponse.FromString,
                _registered_method=True)
        self.UploadArrowMultiData = channel.stream_unary(
                '/xgtproto.DataService/UploadArrowMultiData',
                request_serializer=DataService__pb2.UploadArrowMultiDataRequest.SerializeToString,
                response_deserializer=DataService__pb2.UploadArrowMultiDataResponse.FromString,
                _registered_method=True)


class DataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestUri(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EgestUri(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InferSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferFrameArrowClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadCSVMultiData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadArrowMultiData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadData': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadData,
                    request_deserializer=DataService__pb2.UploadDataRequest.FromString,
                    response_serializer=DataService__pb2.UploadDataResponse.SerializeToString,
            ),
            'DownloadData': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadData,
                    request_deserializer=DataService__pb2.DownloadDataRequest.FromString,
                    response_serializer=DataService__pb2.DownloadDataResponse.SerializeToString,
            ),
            'IngestUri': grpc.stream_unary_rpc_method_handler(
                    servicer.IngestUri,
                    request_deserializer=DataService__pb2.IngestUriRequest.FromString,
                    response_serializer=DataService__pb2.IngestUriResponse.SerializeToString,
            ),
            'EgestUri': grpc.unary_unary_rpc_method_handler(
                    servicer.EgestUri,
                    request_deserializer=DataService__pb2.EgestUriRequest.FromString,
                    response_serializer=DataService__pb2.EgestUriResponse.SerializeToString,
            ),
            'InferSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.InferSchema,
                    request_deserializer=DataService__pb2.InferSchemaRequest.FromString,
                    response_serializer=DataService__pb2.InferSchemaResponse.SerializeToString,
            ),
            'TransferFrameArrowClient': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferFrameArrowClient,
                    request_deserializer=DataService__pb2.TransferFrameArrowClientRequest.FromString,
                    response_serializer=DataService__pb2.TransferFrameArrowClientResponse.SerializeToString,
            ),
            'UploadCSVMultiData': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadCSVMultiData,
                    request_deserializer=DataService__pb2.UploadCSVMultiDataRequest.FromString,
                    response_serializer=DataService__pb2.UploadCSVMultiDataResponse.SerializeToString,
            ),
            'UploadArrowMultiData': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadArrowMultiData,
                    request_deserializer=DataService__pb2.UploadArrowMultiDataRequest.FromString,
                    response_serializer=DataService__pb2.UploadArrowMultiDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xgtproto.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xgtproto.DataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/xgtproto.DataService/UploadData',
            DataService__pb2.UploadDataRequest.SerializeToString,
            DataService__pb2.UploadDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/xgtproto.DataService/DownloadData',
            DataService__pb2.DownloadDataRequest.SerializeToString,
            DataService__pb2.DownloadDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestUri(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/xgtproto.DataService/IngestUri',
            DataService__pb2.IngestUriRequest.SerializeToString,
            DataService__pb2.IngestUriResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EgestUri(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xgtproto.DataService/EgestUri',
            DataService__pb2.EgestUriRequest.SerializeToString,
            DataService__pb2.EgestUriResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InferSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xgtproto.DataService/InferSchema',
            DataService__pb2.InferSchemaRequest.SerializeToString,
            DataService__pb2.InferSchemaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferFrameArrowClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xgtproto.DataService/TransferFrameArrowClient',
            DataService__pb2.TransferFrameArrowClientRequest.SerializeToString,
            DataService__pb2.TransferFrameArrowClientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadCSVMultiData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/xgtproto.DataService/UploadCSVMultiData',
            DataService__pb2.UploadCSVMultiDataRequest.SerializeToString,
            DataService__pb2.UploadCSVMultiDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadArrowMultiData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/xgtproto.DataService/UploadArrowMultiData',
            DataService__pb2.UploadArrowMultiDataRequest.SerializeToString,
            DataService__pb2.UploadArrowMultiDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
