Metadata-Version: 2.1
Name: xdtclassifier
Version: 1.0.1
Summary: XDT (Exact Decision Tree) - High-performance decision tree classifier with exact split optimization
Home-page: https://github.com/nqmn/xdt
Author: mohdadil
Author-email: mohdadil@live.com
Maintainer: mohdadil
License: MIT License
        
        Copyright (c) 2024 XDT Team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/nqmn/xdt
Project-URL: Repository, https://github.com/nqmn/xdt
Project-URL: Documentation, https://github.com/nqmn/xdt#readme
Project-URL: Bug Reports, https://github.com/nqmn/xdt/issues
Keywords: machine-learning,decision-tree,classification,xdt,exact-splits,histogram,optimization
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.19.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: numba>=0.56.0
Requires-Dist: psutil>=5.8.0
Requires-Dist: scikit-learn>=1.0.0
Provides-Extra: benchmark
Requires-Dist: matplotlib>=3.3.0; extra == "benchmark"
Requires-Dist: seaborn>=0.11.0; extra == "benchmark"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# XDT (Exact Decision Tree) 🚀

[![PyPI version](https://badge.fury.io/py/xdt-classifier.svg)](https://badge.fury.io/py/xdt-classifier)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/release/python-380/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A high-performance decision tree classifier with exact split optimization, histogram-based candidate selection, and multi-class support. XDT combines the speed of histogram-based methods with the accuracy of exact split computation.

## 🎯 Key Features

- **Exact Split Computation**: Guaranteed optimal splits with O(n) bucket optimization for integer-like features
- **Histogram-Based Candidate Selection**: Fast feature evaluation using quantile-based binning
- **Multi-Class Support**: Native support for multi-class classification with Gini impurity
- **Numba Acceleration**: JIT-compiled prediction with optional parallel processing
- **Memory Efficient**: BFS tree layout for optimal cache performance
- **Adaptive Algorithms**: Automatically chooses between O(n) bucket sort and O(n log n) sorting based on data characteristics

## 🚀 Performance

XDT delivers superior performance through:
- **Exact splits**: No approximation errors from histogram binning
- **Smart candidate selection**: Variance bounds to focus on promising features
- **Optimized algorithms**: O(n) bucket sort for integer-like features, O(n log n) for continuous
- **Parallel prediction**: Multi-threaded inference for large datasets
- **Memory locality**: BFS tree traversal for better cache performance

## 📦 Installation

```bash
pip install xdtclassifier
```

## 🔧 Quick Start

### Basic Usage

```python
from xdt import XDTClassifier
import numpy as np
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split

# Generate sample data
X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train classifier
clf = XDTClassifier()

clf.fit(X_train, y_train)

# Make predictions
predictions = clf.predict(X_test)
probabilities = clf.predict_proba(X_test)

print(f"Accuracy: {(predictions == y_test).mean():.3f}")
```

### Advanced Configuration

```python
# Binary classification optimized settings
binary_clf = XDTClassifier(
    max_depth=10,
    min_samples_split=20,
    n_bins=192,
    min_gain_threshold=1e-8,
    max_exact_refinements_binary=96,
    use_parallel_prediction=True,
    parallel_threshold=256
)

# Multi-class optimized settings  
multiclass_clf = XDTClassifier(
    max_depth=14,
    min_samples_split=10,
    n_bins=256,
    min_gain_threshold=1e-9,
    max_exact_refinements=16,
    use_parallel_prediction=True,
    parallel_threshold=1000
)
```

### Algorithm Statistics

```python
# View detailed algorithm statistics
clf.print_algorithm_stats()
```

Output:
```
🚀 XDT MULTI-CLASS STATISTICS (Total Splits: 127)
   Classes: 3 ([0 1 2])
================================================================================
✅ Histogram-Based Splits: 89 (70.1%)
✅ Exact refinements evaluated: 234 (184.3%)
🚀 Exact Splits: 38 (29.9%)
✅ Avg Candidates/Split: 12.4

🚀 OPTIMIZATION METHOD BREAKDOWN:
  - O(n) Bucket Sort: 28 (73.7%) - Integer-like features
  - O(n log n) Sorting: 10 (26.3%) - Continuous features

🏆 ALGORITHM COMPONENTS:
  ✅ Quantile-based binning (XDT core)
  ✅ Histogram-based candidate selection (XDT core)
  🚀 Exact split computation
  ✅ Multi-class variance bounds
  ✅ XDT

⚡ PERFORMANCE: 73.7% O(n) optimization - Excellent for integer-like data
```

## 🔧 Parameters

### Main Parameters

| Parameter | Default | Description |
|-----------|---------|-------------|
| `max_depth` | 10 | Maximum tree depth |
| `min_samples_split` | 20 | Minimum samples required to split |
| `min_samples_leaf` | 1 | Minimum samples required in a leaf |
| `n_bins` | 192 | Number of histogram bins for feature discretization |
| `min_gain_threshold` | 1e-8 | Minimum information gain required for splitting |
| `random_state` | 42 | Random seed for reproducibility |

### Performance Parameters  

| Parameter | Default | Description |
|-----------|---------|-------------|
| `use_parallel_prediction` | True | Enable parallel prediction |
| `parallel_threshold` | 256 | Minimum samples for parallel prediction |
| `max_exact_refinements` | 16 | Max exact refinements per node (multi-class) |
| `max_exact_refinements_binary` | 96 | Max exact refinements per node (binary) |
| `map_labels` | True | Map internal IDs back to original labels |

## 🏗️ Algorithm Details

### Two-Phase Split Selection

1. **Phase 1 - Histogram Evaluation**: Fast candidate screening using quantile-based bins
2. **Phase 2 - Exact Refinement**: Exact split computation on top candidates

### Optimization Strategies

- **Integer-like Features**: O(n) bucket sort for discrete values
- **Continuous Features**: O(n log n) sorting for exact splits  
- **Variance Bounds**: Early pruning of unpromising features
- **Adaptive Thresholds**: Binary vs multi-class specific tuning

### Memory Layout

- **BFS Tree Storage**: Better cache locality during prediction
- **Contiguous Arrays**: Optimized for Numba JIT compilation
- **Buffer Reuse**: Minimize memory allocations during training

## 📊 Benchmarks

XDT consistently outperforms standard decision trees:

- **Accuracy**: Higher due to exact split computation
- **Speed**: Competitive training, faster prediction via Numba
- **Memory**: Efficient BFS layout reduces cache misses
- **Scalability**: Parallel prediction for large datasets

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🔗 Links

- **PyPI**: https://pypi.org/project/xdtclassifier/
- **GitHub**: https://github.com/nqmn/xdt
- **Documentation**: https://github.com/nqmn/xdt#readme
- **Issues**: https://github.com/nqmn/xdt/issues

## 📈 Citation

If you use XDT in your research, please cite:

```bibtex
@software{xdt_classifier,
  title={XDT: Exact Decision Tree Classifier},
  author={mohdadil},
  url={https://github.com/nqmn/xdt},
  version={1.0.0},
  year={2025}
}
```
