
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _quake_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "quake"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CustomUnitarySymbolOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.custom_op"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, generator, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["generator"] = (generator if (
    issubclass(type(generator), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(generator, context=_ods_context))
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class HOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.h"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MxOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.mx"

  _ODS_REGIONS = (0, True)

  def __init__(self, measOut, wires, targets, *, registerName=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if registerName is not None: attributes["registerName"] = (registerName if (
        issubclass(type(registerName), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(registerName, context=_ods_context))
    results.append(measOut)
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def targets(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def registerName(self):
    if "registerName" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["registerName"])

  @registerName.setter
  def registerName(self, value):
    if value is not None:
      self.operation.attributes["registerName"] = value
    elif "registerName" in self.operation.attributes:
      del self.operation.attributes["registerName"]

  @registerName.deleter
  def registerName(self):
    del self.operation.attributes["registerName"]

  @builtins.property
  def measOut(self):
    return self.operation.results[0]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MyOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.my"

  _ODS_REGIONS = (0, True)

  def __init__(self, measOut, wires, targets, *, registerName=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if registerName is not None: attributes["registerName"] = (registerName if (
        issubclass(type(registerName), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(registerName, context=_ods_context))
    results.append(measOut)
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def targets(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def registerName(self):
    if "registerName" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["registerName"])

  @registerName.setter
  def registerName(self, value):
    if value is not None:
      self.operation.attributes["registerName"] = value
    elif "registerName" in self.operation.attributes:
      del self.operation.attributes["registerName"]

  @registerName.deleter
  def registerName(self):
    del self.operation.attributes["registerName"]

  @builtins.property
  def measOut(self):
    return self.operation.results[0]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MzOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.mz"

  _ODS_REGIONS = (0, True)

  def __init__(self, measOut, wires, targets, *, registerName=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if registerName is not None: attributes["registerName"] = (registerName if (
        issubclass(type(registerName), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(registerName, context=_ods_context))
    results.append(measOut)
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def targets(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def registerName(self):
    if "registerName" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["registerName"])

  @registerName.setter
  def registerName(self, value):
    if value is not None:
      self.operation.attributes["registerName"] = value
    elif "registerName" in self.operation.attributes:
      del self.operation.attributes["registerName"]

  @registerName.deleter
  def registerName(self):
    del self.operation.attributes["registerName"]

  @builtins.property
  def measOut(self):
    return self.operation.results[0]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PhasedRxOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.phased_rx"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeleteStateOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.delete_state"

  _ODS_REGIONS = (0, True)

  def __init__(self, state, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(state))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def state(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MaterializeStateOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.materialize_state"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, numQubitsFunc, initFunc, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["numQubitsFunc"] = (numQubitsFunc if (
    issubclass(type(numQubitsFunc), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(numQubitsFunc, context=_ods_context))
    attributes["initFunc"] = (initFunc if (
    issubclass(type(initFunc), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(initFunc, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class R1Op(_ods_ir.OpView):
  OPERATION_NAME = "quake.r1"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RxOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.rx"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RyOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.ry"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RzOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.rz"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.s"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SwapOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.swap"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.t"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class U2Op(_ods_ir.OpView):
  OPERATION_NAME = "quake.u2"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class U3Op(_ods_ir.OpView):
  OPERATION_NAME = "quake.u3"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class XOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.x"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class YOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.y"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ZOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.z"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AllocaOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.alloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref_or_vec, *, size=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if size is not None: operands.append(_get_op_result_or_value(size))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref_or_vec)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def size(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def ref_or_vec(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyNoiseOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.apply_noise"

  _ODS_OPERAND_SEGMENTS = [0,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, parameters, qubits, *, noise_func=None, key=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(key) if key is not None else None)
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(qubits))
    _ods_context = _ods_get_default_loc_context(loc)
    if noise_func is not None: attributes["noise_func"] = (noise_func if (
        issubclass(type(noise_func), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
          _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(noise_func, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def key(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def qubits(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ApplyOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.apply"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,]

  _ODS_REGIONS = (0, True)

  def __init__(self, result, indirect_callee, controls, args, *, callee=None, is_adj=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(indirect_callee))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(args))
    _ods_context = _ods_get_default_loc_context(loc)
    if callee is not None: attributes["callee"] = (callee if (
        issubclass(type(callee), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
          _ods_ir.AttrBuilder.get('SymbolRefAttr')(callee, context=_ods_context))
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    results.extend(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def indirect_callee(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def args(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BorrowWireOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.borrow_wire"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, set_name, identity, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set_name"] = (set_name if (
    issubclass(type(set_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(set_name, context=_ods_context))
    attributes["identity"] = (identity if (
    issubclass(type(identity), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(identity, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def identity(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["identity"])

  @identity.setter
  def identity(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["identity"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BundleCableOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.bundle_cable"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, wires, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(wires))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ComputeActionOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.compute_action"

  _ODS_REGIONS = (0, True)

  def __init__(self, compute, action, *, is_dagger=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(compute))
    operands.append(_get_op_result_or_value(action))
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_dagger): attributes["is_dagger"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def compute(self):
    return self.operation.operands[0]

  @builtins.property
  def action(self):
    return self.operation.operands[1]

  @builtins.property
  def is_dagger(self):
    return "is_dagger" in self.operation.attributes

  @is_dagger.setter
  def is_dagger(self, value):
    if bool(value):
      self.operation.attributes["is_dagger"] = _ods_ir.UnitAttr.get()
    elif "is_dagger" in self.operation.attributes:
      del self.operation.attributes["is_dagger"]

  @is_dagger.deleter
  def is_dagger(self):
    del self.operation.attributes["is_dagger"]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConcatOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.concat"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, qbits, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(qbits))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def qbits(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CreateStateOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.create_state"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, data, length, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(data))
    operands.append(_get_op_result_or_value(length))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def data(self):
    return self.operation.operands[0]

  @builtins.property
  def length(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DeallocOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.dealloc"

  _ODS_REGIONS = (0, True)

  def __init__(self, reference, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(reference))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def reference(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DiscriminateOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.discriminate"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, measurement, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(measurement))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def measurement(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExpPauliOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.exp_pauli"

  _ODS_OPERAND_SEGMENTS = [-1,-1,-1,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, parameters, controls, targets, *, is_adj=None, negated_qubit_controls=None, pauli=None, pauliLiteral=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_results_or_values(parameters))
    operands.append(_get_op_results_or_values(controls))
    operands.append(_get_op_results_or_values(targets))
    operands.append(_get_op_result_or_value(pauli) if pauli is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    if bool(is_adj): attributes["is_adj"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    if negated_qubit_controls is not None: attributes["negated_qubit_controls"] = (negated_qubit_controls if (
        issubclass(type(negated_qubit_controls), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
          _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(negated_qubit_controls, context=_ods_context))
    if pauliLiteral is not None: attributes["pauliLiteral"] = (pauliLiteral if (
        issubclass(type(pauliLiteral), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(pauliLiteral, context=_ods_context))
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def parameters(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range

  @builtins.property
  def controls(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range

  @builtins.property
  def targets(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range

  @builtins.property
  def pauli(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 3)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def is_adj(self):
    return "is_adj" in self.operation.attributes

  @is_adj.setter
  def is_adj(self, value):
    if bool(value):
      self.operation.attributes["is_adj"] = _ods_ir.UnitAttr.get()
    elif "is_adj" in self.operation.attributes:
      del self.operation.attributes["is_adj"]

  @is_adj.deleter
  def is_adj(self):
    del self.operation.attributes["is_adj"]

  @builtins.property
  def pauliLiteral(self):
    if "pauliLiteral" not in self.operation.attributes:
      return None
    return _ods_ir.StringAttr(self.operation.attributes["pauliLiteral"])

  @pauliLiteral.setter
  def pauliLiteral(self, value):
    if value is not None:
      self.operation.attributes["pauliLiteral"] = value
    elif "pauliLiteral" in self.operation.attributes:
      del self.operation.attributes["pauliLiteral"]

  @pauliLiteral.deleter
  def pauliLiteral(self):
    del self.operation.attributes["pauliLiteral"]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExtractRefOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.extract_ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, veq, rawIndex, *, index=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(veq))
    if index is not None: operands.append(_get_op_result_or_value(index))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["rawIndex"] = (rawIndex if (
    issubclass(type(rawIndex), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(rawIndex, context=_ods_context))
    results.append(ref)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def veq(self):
    return self.operation.operands[0]

  @builtins.property
  def index(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def rawIndex(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["rawIndex"])

  @rawIndex.setter
  def rawIndex(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rawIndex"] = value

  @builtins.property
  def ref(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FromControlOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.from_ctrl"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, ctrlbit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(ctrlbit))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ctrlbit(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetMemberOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.get_member"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, struq, index, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(struq))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["index"] = (index if (
    issubclass(type(index), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(index, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def struq(self):
    return self.operation.operands[0]

  @builtins.property
  def index(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["index"])

  @index.setter
  def index(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["index"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetNumberOfQubitsOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.get_number_of_qubits"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, state, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(state))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def state(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InitializeStateOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.init_state"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, targets, state, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(targets))
    operands.append(_get_op_result_or_value(state))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def targets(self):
    return self.operation.operands[0]

  @builtins.property
  def state(self):
    return self.operation.operands[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MakeStruqOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.make_struq"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, veqs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(veqs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def veqs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NullCableOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.null_cable"

  _ODS_REGIONS = (0, True)

  def __init__(self, cableType, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(cableType)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def cableType(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NullWireOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.null_wire"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RelaxSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.relax_size"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, inputVec, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(inputVec))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputVec(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ResetOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.reset"

  _ODS_REGIONS = (0, True)

  def __init__(self, wires, targets, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(targets))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(wires)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def targets(self):
    return self.operation.operands[0]

  @builtins.property
  def wires(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ReturnWireOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.return_wire"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SinkCableOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.sink_cable"

  _ODS_REGIONS = (0, True)

  def __init__(self, cable, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(cable))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def cable(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SinkOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.sink"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SubVeqOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.subveq"

  _ODS_OPERAND_SEGMENTS = [1,0,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, qsub, veq, rawLower, rawUpper, *, lower=None, upper=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(veq))
    operands.append(_get_op_result_or_value(lower) if lower is not None else None)
    operands.append(_get_op_result_or_value(upper) if upper is not None else None)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["rawLower"] = (rawLower if (
    issubclass(type(rawLower), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(rawLower, context=_ods_context))
    attributes["rawUpper"] = (rawUpper if (
    issubclass(type(rawUpper), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(rawUpper, context=_ods_context))
    results.append(qsub)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def veq(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 0)
    return operand_range[0]

  @builtins.property
  def lower(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 1)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def upper(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operand_segment_sizes"], 2)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def rawLower(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["rawLower"])

  @rawLower.setter
  def rawLower(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rawLower"] = value

  @builtins.property
  def rawUpper(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["rawUpper"])

  @rawUpper.setter
  def rawUpper(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rawUpper"] = value

  @builtins.property
  def qsub(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TerminateCableOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.terminate_cable"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, cable, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(cable))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def cable(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ToControlOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.to_ctrl"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, qubit, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(qubit))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def qubit(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class UnwrapOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.unwrap"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, ref_value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(ref_value))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ref_value(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class VeqSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.veq_size"

  _ODS_REGIONS = (0, True)

  def __init__(self, size, veq, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(veq))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(size)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def veq(self):
    return self.operation.operands[0]

  @builtins.property
  def size(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class WireSetOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.wire_set"

  _ODS_REGIONS = (0, True)

  def __init__(self, sym_name, cardinality, *, adjacency=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sym_name"] = (sym_name if (
    issubclass(type(sym_name), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(sym_name, context=_ods_context))
    attributes["cardinality"] = (cardinality if (
    issubclass(type(cardinality), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(cardinality, context=_ods_context))
    if adjacency is not None: attributes["adjacency"] = (adjacency if (
        issubclass(type(adjacency), _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ElementsAttr')) else
          _ods_ir.AttrBuilder.get('ElementsAttr')(adjacency, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def sym_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["sym_name"])

  @sym_name.setter
  def sym_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sym_name"] = value

  @builtins.property
  def cardinality(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["cardinality"])

  @cardinality.setter
  def cardinality(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cardinality"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class WrapOp(_ods_ir.OpView):
  OPERATION_NAME = "quake.wrap"

  _ODS_REGIONS = (0, True)

  def __init__(self, wire_value, ref_value, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(wire_value))
    operands.append(_get_op_result_or_value(ref_value))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def wire_value(self):
    return self.operation.operands[0]

  @builtins.property
  def ref_value(self):
    return self.operation.operands[1]
