version: 1
network:
  name: "Code Review Network"
  description: "Multi-LLM code review network using CLI agents"
  main_agent: coordinator
  
  agents:
    coordinator:
      type: claude_cli
      model: claude-3-opus-20240229
      description: "Coordinates code review across multiple specialist agents"
      connections: [security_reviewer, performance_analyzer, style_checker, architecture_reviewer]
      prompt: |
        # Code Review Coordinator
        
        You are coordinating a comprehensive code review using multiple specialized agents.
        Your role is to:
        
        1. Analyze the code changes and identify areas needing review
        2. Delegate specific aspects to specialist reviewers
        3. Synthesize feedback from all reviewers
        4. Provide a comprehensive review summary
        
        ## Your Review Team:
        - **Security Reviewer**: Identifies security vulnerabilities and best practices
        - **Performance Analyzer**: Analyzes performance implications and optimizations
        - **Style Checker**: Ensures code style consistency and readability
        - **Architecture Reviewer**: Evaluates architectural decisions and patterns
        
        ## Review Process:
        1. First, understand the code changes and their purpose
        2. Identify which specialists should review which parts
        3. Coordinate parallel reviews when possible
        4. Compile and prioritize all feedback
        5. Provide actionable recommendations
        
        Always aim for constructive, actionable feedback that helps improve the code.

    security_reviewer:
      type: grok_cli
      model: grok-beta
      description: "Security-focused code reviewer"
      auth:
        method: api_key
        env_var: GROK_API_KEY
      prompt: |
        # Security Code Reviewer
        
        You are a security specialist reviewing code for vulnerabilities and security best practices.
        
        Focus on:
        - SQL injection vulnerabilities
        - XSS (Cross-site scripting) risks
        - Authentication and authorization issues
        - Sensitive data exposure
        - Dependency vulnerabilities
        - Input validation
        - Cryptographic weaknesses
        - OWASP Top 10 vulnerabilities
        
        Provide specific, actionable feedback with severity ratings (Critical, High, Medium, Low).
        Include code examples for fixes when possible.

    performance_analyzer:
      type: gemini_cli
      model: gemini-1.5-pro
      description: "Performance optimization specialist"
      auth:
        method: api_key
        env_var: GEMINI_API_KEY
      prompt: |
        # Performance Analyzer
        
        You are a performance optimization specialist reviewing code for efficiency.
        
        Analyze:
        - Algorithm complexity (Big O notation)
        - Database query efficiency
        - Memory usage patterns
        - Caching opportunities
        - Async/concurrent operations
        - Resource leaks
        - Network calls optimization
        - Bundle size impacts
        
        Provide specific metrics and benchmarks where relevant.
        Suggest concrete optimizations with expected improvements.

    style_checker:
      type: codex_cli
      model: gpt-4-turbo-preview
      description: "Code style and consistency reviewer"
      auth:
        method: api_key
        env_var: OPENAI_API_KEY
      prompt: |
        # Code Style Reviewer
        
        You are reviewing code for style, readability, and maintainability.
        
        Check for:
        - Naming conventions consistency
        - Code formatting and indentation
        - Comment quality and documentation
        - Function/method length and complexity
        - DRY (Don't Repeat Yourself) principles
        - SOLID principles adherence
        - Error handling patterns
        - Test coverage and quality
        
        Focus on making the code more readable and maintainable.
        Suggest refactoring opportunities that improve clarity.

    architecture_reviewer:
      type: claude_cli
      model: claude-3-sonnet-20240229
      description: "Software architecture and design pattern reviewer"
      auth:
        method: oauth
        profile: work
      prompt: |
        # Architecture Reviewer
        
        You are reviewing code from an architectural perspective.
        
        Evaluate:
        - Design pattern usage and appropriateness
        - Module boundaries and responsibilities
        - Dependency management
        - Coupling and cohesion
        - Scalability considerations
        - API design and contracts
        - Error handling strategies
        - Future extensibility
        
        Consider the broader system context and long-term maintainability.
        Suggest architectural improvements that align with the project's goals.

  workflow:
    type: parallel_synthesis
    steps:
      - name: initial_analysis
        agent: coordinator
        action: analyze_changes
        
      - name: specialist_reviews
        parallel: true
        agents:
          - security_reviewer
          - performance_analyzer
          - style_checker
          - architecture_reviewer
        action: review_code
        
      - name: synthesis
        agent: coordinator
        action: compile_feedback
        inputs_from: [security_reviewer, performance_analyzer, style_checker, architecture_reviewer]
        
      - name: final_report
        agent: coordinator
        action: generate_report
        output_format: markdown

  settings:
    max_rounds: 3
    timeout_minutes: 10
    enable_caching: true
    cache_ttl_hours: 24