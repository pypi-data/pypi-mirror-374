[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "qtuidoctools"
dynamic = ["version"]
description = "Tools for working with Qt .ui files"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Adam Twardoch", email = "adam+github@twardoch.com" },
]
keywords = ["qt", "ui", "documentation", "yaml", "json", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: XML",
]
dependencies = [
    "fire>=0.5.0",
    "lxml>=4.4.1", 
    "PyYAML>=5.1.1",
    "Qt.py>=1.2.1",
    "yaplon",
    "loguru>=0.7.2",
    "rich>=13.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.6.0",
]

[project.urls]
Homepage = "https://twardoch.github.io/qtuidoctools/"
Source = "https://github.com/twardoch/qtuidoctools"
Issues = "https://github.com/twardoch/qtuidoctools/issues"

[project.scripts]
qtuidoctools = "qtuidoctools.__main__:cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/qtuidoctools/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/qtuidoctools"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.6.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/qtuidoctools --cov-report=term-missing {args:tests}"
lint = "ruff check {args:.}"
format = "ruff format {args:.}"
type-check = "mypy src/qtuidoctools"
all = ["lint", "format", "type-check", "test-cov"]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable pyflakes (F) and pycodestyle (E) errors by default
select = [
    "E4", "E7", "E9",  # pycodestyle errors
    "F",               # pyflakes
    "W",               # pycodestyle warnings  
    "I",               # isort
    "UP",              # pyupgrade
    "B",               # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by formatter)
]
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["qtuidoctools"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/qtuidoctools"]
omit = [
    "tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, tighten later
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "yaplon.*", 
    "Qt.*",
]
ignore_missing_imports = true
