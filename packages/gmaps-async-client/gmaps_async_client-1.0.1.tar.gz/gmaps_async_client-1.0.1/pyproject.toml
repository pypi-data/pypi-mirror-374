[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gmaps-async-client"
version = "1.0.1"
description = "Python wrapper for Google Maps APIs (Places & Geocoding)"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jonathan Oren", email = "jonathanoren98@gmail.com"},
]
maintainers = [
    {name = "Jonathan Oren", email = "jonathanoren98@gmail.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = ["gmaps", "api", "transportation", "geocoding", "places", "autocomplete"]
dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.0.0",
    "h2>=4.3.0",
]
requires-python = ">=3.9"

[project.optional-dependencies]
google = [
    "google-auth>=2.0.0",
    "google-auth-stubs>=0.3.0",
]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.1.0",
    "pytest-mock>=3.14.0",
    "httpx[mock]>=0.25.0",
    "respx>=0.21.0",
    "ruff>=0.12.12",
    "mypy>=1.17.1",
    "black>=24.0.0",
    "isort>=6.0.0",
    "bandit>=1.8.6",
    "pre-commit>=4.3.0",
    "build>=1.3.0",
    "twine>=6.2.0",
    "types-psutil>=7.0.0",
]
test = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.0",
    "httpx[mock]>=0.25.0",
    "respx>=0.21.0",
    "pytest-env>=1.1.0",
    "trio>=0.27.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/asparagusbeef/gmaps-async-client"
Documentation = "https://asparagusbeef.github.io/gmaps-async-client"
Repository = "https://github.com/asparagusbeef/gmaps-async-client"
Issues = "https://github.com/asparagusbeef/gmaps-async-client/issues"
Changelog = "https://github.com/asparagusbeef/gmaps-async-client/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
gmaps = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    # Python 3.10+ syntax â€” incompatible with 3.9 floor:
    "UP007", # Use X | Y
    "UP045", # Use X | None
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B010"]
"test_*.py" = ["B010"]

[tool.isort]
known_first_party = ["gmaps"]
profile = "black"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
mypy_path = "stubs"
disable_error_code = []
files = ["src", "tests"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
disallow_untyped_defs = false
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests that make real API calls",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
